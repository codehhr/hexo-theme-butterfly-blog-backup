{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/README.md","path":"README.md","modified":1,"renderable":0},{"_id":"themes/butterfly/source/baidu_verify_code-T57MFp7YOX.html","path":"baidu_verify_code-T57MFp7YOX.html","modified":1,"renderable":1},{"_id":"themes/butterfly/source/baidu_verify_code-VG0UFPAKn3.html","path":"baidu_verify_code-VG0UFPAKn3.html","modified":1,"renderable":1},{"_id":"themes/butterfly/source/google2a067f045d49c002.html","path":"google2a067f045d49c002.html","modified":1,"renderable":1},{"_id":"themes/butterfly/source/css/cursor.css","path":"css/cursor.css","modified":1,"renderable":1},{"_id":"themes/butterfly/source/css/flink.css","path":"css/flink.css","modified":1,"renderable":1},{"_id":"themes/butterfly/source/css/footergradient.css","path":"css/footergradient.css","modified":1,"renderable":1},{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":1,"renderable":1},{"_id":"themes/butterfly/source/css/scrollbar.css","path":"css/scrollbar.css","modified":1,"renderable":1},{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/algolia.svg","path":"img/algolia.svg","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.ico","path":"img/favicon.ico","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/icp.png","path":"img/icp.png","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/loading.gif","path":"img/loading.gif","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/artitalk.js","path":"js/artitalk.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/echarts.min.js","path":"js/echarts.min.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/hexo_githubcalendar.js","path":"js/hexo_githubcalendar.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/jquery.lazyload.js","path":"js/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/jquery.min.js","path":"js/jquery.min.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/mousesnow.js","path":"js/mousesnow.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/sakura.js","path":"js/sakura.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/_data/link.yml","hash":"ddf9a7a8681b0c5405941bbab2e1cfb659b9720e","modified":1624961976428},{"_id":"source/categories/index.md","hash":"0498a68881a269f55c14f002305bcb09c00c0e1d","modified":1619788709751},{"_id":"source/about/index.md","hash":"c8cf24d4ce50df4098af15ad0d2f1a290b7ff9d9","modified":1626621361636},{"_id":"source/README.md","hash":"6f02dda5bde807a97e8d6ff04c9ba9e364733436","modified":1625897437535},{"_id":"source/link/index.md","hash":"0071ad0267b506379e38415b8ca4e376645dbd08","modified":1621406125281},{"_id":"source/school/index.md","hash":"d3108db33298a4e18512c18c73e44ea568030f47","modified":1625105238228},{"_id":"source/tags/index.md","hash":"6a7a90a7865d54f32a3b2fabdc2640de2fa4b911","modified":1619933951009},{"_id":"source/messageboard/index.md","hash":"d744f6594be2d4d834a3bd296538ba25604d0e2f","modified":1621406201323},{"_id":"source/music/index.md","hash":"9787c266674e47d92d530086d52173eb9dbd217b","modified":1626618638285},{"_id":"source/movies/index.md","hash":"95dcd7b73246062a5812632aa7d9de73c65976c0","modified":1604571939000},{"_id":"source/selftalk/index.md","hash":"006e15a82083e69f824e1219adeabc399cfc523c","modified":1627196843906},{"_id":"source/_posts/blog/blog-hexo.md","hash":"c352cb0ca260116ee5fe28aa9ab7b66792f76327","modified":1629123488681},{"_id":"source/_posts/blog/blog-hexo-butterfly-tag-plugins.md","hash":"1b9869668e0ca22c2c0afb961c5b64c4df382d4d","modified":1626621395687},{"_id":"source/_posts/blog/blog-hugo.md","hash":"80cb67086b90f274e20b0edcec75b507da73ba54","modified":1629123403758},{"_id":"source/wallpaper/index.md","hash":"df2b5b6f57504bb66b59389968c6f68825884a95","modified":1621555360912},{"_id":"source/_posts/css/css-Layout.md","hash":"8edfd88f1f7f6ca398248a7f658b684e1971047d","modified":1620892583744},{"_id":"source/_posts/bootstrap/bootstrap.md","hash":"263e958033fcc2a808438710a85e3ab73e228c43","modified":1626011512072},{"_id":"source/_posts/blog/blog-hexousedateforupd.md","hash":"bd47fcdf158b4cc44cad1636e4b99375166a4e9d","modified":1619792367237},{"_id":"source/_posts/css/css-flex.md","hash":"26a1a7b6dcc4eaffedeac979f0a56fffdb372bc7","modified":1619789690688},{"_id":"source/_posts/html-css-detail/html-css-details.md","hash":"65b5cb66e97d5ed389d05aba58fe6ea2c6bd754f","modified":1624168820162},{"_id":"source/_posts/css/css-center.md","hash":"72277fe954de4b55e0888b7b0a6145f54aed6958","modified":1626792634024},{"_id":"source/_posts/github/github-rawgithub.md","hash":"96f49cc51293a6239f5ac8fbe2df1fe70603943e","modified":1619789564358},{"_id":"source/_posts/java/java-maven.md","hash":"7c46b37fec807305544d29d74094a503a528b175","modified":1619790112841},{"_id":"source/_posts/js/es6-day02.md","hash":"7ab753dc667f1f9ad943e8f31741b860de4c9706","modified":1624606671188},{"_id":"source/_posts/js/es6-day03.md","hash":"27463b583f0e1e05548e26ad7947aa98deecf633","modified":1624540651942},{"_id":"source/_posts/js/es6-day01.md","hash":"29b95ad46479a4cef3cb636f25176a2713d9ddce","modified":1624947732258},{"_id":"source/_posts/js/es6-day06.md","hash":"a3890cc49592e3d8f7dc424b80000c7182cd8615","modified":1624877147006},{"_id":"source/_posts/js/es6-var-let-const.md","hash":"118b8d1a66ce69b4cbb4b1a91b015dcd68e2dbc0","modified":1624948449824},{"_id":"source/_posts/js/es6-day04.md","hash":"491972e0f626caedde96093f28d60f7403e25e76","modified":1624611989066},{"_id":"source/_posts/js/es7-async-await.md","hash":"e759f70b2525261e38a579a089ef5c74babfbad2","modified":1625745547594},{"_id":"source/_posts/js/jquery-ajax.md","hash":"5e4482d96618cec5d83d02192bead43b583078c7","modified":1625542261384},{"_id":"source/_posts/js/jquery-day02.md","hash":"c2f12bc6716fbb372704d454d482ae4121e890a6","modified":1625542354951},{"_id":"source/_posts/js/es6-day05.md","hash":"5e0e764d4ee68dd9e6f7aae9c76bd8b09ab7fe17","modified":1624624324948},{"_id":"source/_posts/js/js-arguments.md","hash":"91a62eeaee2972fa8841e48e92485c66322ff4cc","modified":1624086564744},{"_id":"source/_posts/js/js-Drag.md","hash":"8da59a1cca8c38b080aae8970d49ffcb9263d488","modified":1624176832729},{"_id":"source/_posts/js/jquery-day01.md","hash":"04ba674fb997b05fecd246fdabe40813e9fb67cb","modified":1625042768013},{"_id":"source/_posts/js/js-call-apply-bind.md","hash":"c17da93772f9ad194994addf624110441cdb8086","modified":1624869515671},{"_id":"source/_posts/js/js-api.md","hash":"a3a6f45107aa18bd76a7da08334f8252c71abf94","modified":1625283056544},{"_id":"source/_posts/js/js-array-sort.md","hash":"2e76a78b1fe829b682483e27c687cfd7f1cf4697","modified":1624611972419},{"_id":"source/_posts/js/jquery-echarts.md","hash":"042682dd4a203ebea1ecd41a996b587ac8789518","modified":1626605359361},{"_id":"source/_posts/js/js-ball-wall-rebound.md","hash":"a16ce4c95638c6223230dd5411d5eb709033968f","modified":1624176815239},{"_id":"source/_posts/js/js-closure.md","hash":"cdfb57dec2fc86f66d861fe23626dc4e23ed1595","modified":1624870076254},{"_id":"source/_posts/js/js-object-oriented-inherit.md","hash":"465473c0a8aa9a13ef8a215030ac99e63745953e","modified":1624869204524},{"_id":"source/_posts/js/js-find-longest-word-and-sort.md","hash":"470c72f6d4495009c6d0870e4bfa408c1e007919","modified":1623727085223},{"_id":"source/_posts/js/js-deepclone.md","hash":"2b10005fd445798bd243c05acc2a3d3e452fd8a4","modified":1624531261090},{"_id":"source/_posts/js/js-recursive.md","hash":"9d79e156f4ff5631a003ee722d9a8350c5ec7a98","modified":1624870438189},{"_id":"source/_posts/js/js-object-oriented.md","hash":"0d64767bec80d4b75b3005df5f476705104c84e4","modified":1624086613431},{"_id":"source/_posts/js/js-regexp.md","hash":"a7acca807a81beb4cf63190dd091223785b35d0c","modified":1624169962446},{"_id":"source/_posts/js/js-today.md","hash":"eddcc17b9ba04c29e22992f5566c9b329daf31dd","modified":1623726851564},{"_id":"source/_posts/js/js-swiper.md","hash":"bdac6785449cfaf4a529bb2d4da1079aedede756","modified":1625194761579},{"_id":"source/_posts/js/js-remove-array-duplicates.md","hash":"6577886d3637c17128505d82749db8f08bfca52f","modified":1624616154814},{"_id":"source/_posts/js/js.md","hash":"aff5b5e0a2a30e3142fa5d02d04673a956aa2060","modified":1624176872969},{"_id":"source/_posts/linux/linux-kaliSwaks.md","hash":"6471d6bb533094caf9a183cb4067318727e85811","modified":1626592767951},{"_id":"source/_posts/linux/linux-manjaro.md","hash":"871323d2157591d40ee4e1fc1ad73bd08e3064f7","modified":1626592850666},{"_id":"source/_posts/linux/linux-centos.md","hash":"35663a875e14f7df4b4824505f0593806c7ae53f","modified":1626593075232},{"_id":"source/_posts/linux/linux-node.md","hash":"e497ba4215e9db5dc222aafdb8f3432e9e80404f","modified":1626592872625},{"_id":"source/_posts/linux/linux-setGrubTheme.md","hash":"9225e4cb2c2c145354b8381a1923ebd702ac66e8","modified":1626592922819},{"_id":"source/_posts/node/node-fs-http.md","hash":"11375045ea436d94707f9ddedcb12d40a7641152","modified":1626600599938},{"_id":"source/_posts/linux/linux-nvidia.md","hash":"a6240ac9532feb5bf44146100279f43f72df66d1","modified":1626592885211},{"_id":"source/_posts/vue/vue-basic-brand-managment.md","hash":"d5da582e269ca28f3d4aae49785796d4c80d7a39","modified":1626963215312},{"_id":"source/_posts/node/node-mysql.md","hash":"f343ac89eedc23a0f9133c34a42c57b77921688a","modified":1626883096222},{"_id":"source/_posts/vue/vue-animate.md","hash":"513e3c4b9a5c9a0bdbae77f6a67af1bf4b4580f7","modified":1626963689115},{"_id":"source/_posts/vue/vue-axios.md","hash":"056f45b8bae06bfc61b05d10575b6cc43e9df32d","modified":1627398220296},{"_id":"source/_posts/vue/vue-beforeEach.md","hash":"749eadef7f05f30e8c45e10ba2fc58e88c4ae808","modified":1629119361604},{"_id":"source/_posts/vue/vue-component-query-params.md","hash":"8458e44c8246dceead8e6a2b6678b2c718a47d01","modified":1627202395237},{"_id":"source/_posts/vue/vue-basic.md","hash":"34b28acc49b3a18a616b4ffdfa4a8864c27bcd66","modified":1626963197266},{"_id":"source/_posts/vue/vue-component-reuse.md","hash":"38115297f5d4f3dbdac37523494e221e4e7acb60","modified":1628690877640},{"_id":"source/_posts/vue/vue-cli-createvue.md","hash":"1de9c9bd85e4ff09d01ad4c239294a19c4a87c91","modified":1627734068668},{"_id":"source/_posts/vue/vue-component-comment.md","hash":"4295e4fc1c07a1d5ee350fa721ff580ba85ea659","modified":1627205174944},{"_id":"source/_posts/vue/vue-component.md","hash":"e684a678873b4c508b37d754ec342667e0b2f4a5","modified":1627135751368},{"_id":"source/_posts/vue/vue-router.md","hash":"321aa40e9dee56408dda69924c416dd65db27567","modified":1628690975136},{"_id":"source/_posts/vue/vue-lifecycle-and-vue-resource.md","hash":"30629aae08a46fd78ea006767c42efa0bb268b0e","modified":1626963278544},{"_id":"source/_posts/wxapp/wxapp-ctrlmusic.md","hash":"bba4aff6b65c3e34263d271f257f9f4bf9f51bff","modified":1619790247247},{"_id":"source/_posts/vue/vue-slot.md","hash":"fc450c4be668bb25b30b3643dc6fabb999dc0b65","modified":1627140887826},{"_id":"source/_posts/wxapp/wxapp-flexenable.md","hash":"c00a2874bb9e8082535ed87883f28278e0b08f88","modified":1619788871032},{"_id":"source/_posts/vue/vue-ref.md","hash":"5c628d42515e2e48b20f7c979ab818f77b944968","modified":1627205687324},{"_id":"source/_posts/wxapp/wxapp-iconfont.md","hash":"6cce0a658429eebe3b21254492d57ed6b506c7e2","modified":1619788855235},{"_id":"source/_posts/wxapp/wxapp-swichtab.md","hash":"90bc7cc18a2af152dc0c406ae1636c057eda3ea1","modified":1619790351757},{"_id":"source/school/night/index.md","hash":"50282ae4bae691c59e71a1440309ddc7bf285aa2","modified":1624710657243},{"_id":"source/_posts/vue/vuex.md","hash":"ebff124e4d9caa8f3b65bd2495bf15a3c3342485","modified":1628936109119},{"_id":"source/_posts/wxapp/wxapp-scrollbar.md","hash":"416686af43de317823e32f36f06eb00178de12ea","modified":1619790321488},{"_id":"source/school/season/index.md","hash":"707f80db35fc392138577dacea461b7684fe88e1","modified":1627052905730},{"_id":"source/school/wangshuai/index.md","hash":"910c3cb6bb5a7fb499eb432b7e3aa41630bf91ca","modified":1624710634006},{"_id":"source/school/blossomseason/index.md","hash":"59639bb26e951f74ea60dcc7aa96ebeb8e85c0e6","modified":1626587367495},{"_id":"source/school/winter/index.md","hash":"f8a89217155db5813d05af3a25e08d926a094824","modified":1605183369000},{"_id":"themes/butterfly/package.json","hash":"c0d62352ca336c5322fdf5e45d756779c10bdaea","modified":1626073765109},{"_id":"themes/butterfly/languages/en.yml","hash":"cd333235ff1648a6bf58dfafc81f2c57672a15a5","modified":1626073765106},{"_id":"themes/butterfly/languages/default.yml","hash":"7ca673fb629ea74f5ba5e75b4f0f95248cfb5090","modified":1626073765106},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"741e522b2387f94764a73844e7b084cc7e927c54","modified":1626073765106},{"_id":"themes/butterfly/layout/archive.pug","hash":"bd62286afb64a51c97e800c5945620d51605d5fa","modified":1626073765106},{"_id":"themes/butterfly/layout/index.pug","hash":"e1c3146834c16e6077406180858add0a8183875a","modified":1626073765109},{"_id":"themes/butterfly/layout/category.pug","hash":"60c1b795b6e227b5dd81963b51d29d1b81d0bf49","modified":1626073765106},{"_id":"themes/butterfly/layout/post.pug","hash":"8d398c8925182699d9f2b9f1b727f06228488312","modified":1626073765109},{"_id":"themes/butterfly/layout/page.pug","hash":"82aa988527a11835e7ac86ce4f23b8cd20014dfa","modified":1626073765109},{"_id":"themes/butterfly/layout/tag.pug","hash":"0440f42569df2676273c026a92384fa7729bc4e9","modified":1626073765109},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"79a50c40d9f5463f1fa42aa870ac6b8b84540412","modified":1626073765106},{"_id":"themes/butterfly/source/baidu_verify_code-VG0UFPAKn3.html","hash":"11207e0897c3f76b7f0efd71a1f4be427fcc42cd","modified":1603519171000},{"_id":"themes/butterfly/source/baidu_verify_code-T57MFp7YOX.html","hash":"3afca3b8f1464de92ba3e72357f24d812d87fdbd","modified":1604630048000},{"_id":"themes/butterfly/source/google2a067f045d49c002.html","hash":"a3725fdaca19ee910b3c4d3f39f0eddde779a757","modified":1592302396000},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"4156224c47bfc2482281ac4e4df701c30476ff00","modified":1626073765106},{"_id":"themes/butterfly/layout/includes/404.pug","hash":"7d378e328a53cc99d5acc9682dce53f5eb61537d","modified":1626073765106},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"02390a5b6ae1f57497b22ba2e6be9f13cfb7acac","modified":1626073765106},{"_id":"themes/butterfly/_config.yml","hash":"22c0731557f864a62843fed0ef1c20ef076105bc","modified":1630153396909},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"1377952022ee0a9eaa7a2fd1098f1571efc468d9","modified":1626073765106},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"6f2608c4d93d3d10ae6b2cd7f8918f303f024321","modified":1626073765106},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"0b80f04950bd0fe5e6c4e7b7559adf4d0ce28436","modified":1626073765106},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"2d0453adf92a3fd3466cf0793f14685d17b8b51d","modified":1626073765106},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"8dafc2dcd8c33f70a546fee443f0b6d80b3cd243","modified":1626073765106},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"9821872007cf57efae4b728dc575ef9d004547bb","modified":1626073765109},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"4cc2d517195c8779471d326ada09f9371cbad4dd","modified":1626073765109},{"_id":"themes/butterfly/scripts/events/404.js","hash":"83cd7f73225ccad123afbd526ce1834eb1eb6a6d","modified":1626073765109},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"d575137c8779e50422c2416f4d0832fdea346ee6","modified":1626073765109},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"2ec66513d5322f185d2071acc052978ba9415a8e","modified":1626073765109},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"e00efdb5d02bc5c6eb4159e498af69fa61a7dbb9","modified":1626073765109},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"c6611d97087c51845cb1ab4821696a62fa33daeb","modified":1626073765113},{"_id":"themes/butterfly/scripts/helpers/inject_head_js.js","hash":"65f2442e04c4defd16e7c1e67701d3bb41d9577a","modified":1626073765113},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"54b9324e3506dcc9c9991ef5e11e37e66e21594f","modified":1626073765113},{"_id":"themes/butterfly/scripts/tag/button.js","hash":"b816ded1451f28c7c54151ffe6c259b110253ae3","modified":1626073765113},{"_id":"themes/butterfly/scripts/tag/gallery.js","hash":"94826ea6bcc4d2304199adae12c4e2b272caf529","modified":1626073765113},{"_id":"themes/butterfly/scripts/tag/inlineImg.js","hash":"a43ee2c7871bdd93cb6beb804429e404570f7929","modified":1626073765113},{"_id":"themes/butterfly/scripts/tag/hide.js","hash":"f33858ffb9e88191e644796e11d2f901eb332308","modified":1626073765113},{"_id":"themes/butterfly/scripts/tag/note.js","hash":"c16c6eb058af2b36bcd583b2591076c7ebdd51ad","modified":1626073765113},{"_id":"themes/butterfly/scripts/tag/mermaid.js","hash":"35f073021db93699fcac9ef351e26c59c31aadf7","modified":1626073765113},{"_id":"themes/butterfly/scripts/tag/label.js","hash":"03b2afef41d02bd1045c89578a02402c28356006","modified":1626073765113},{"_id":"themes/butterfly/source/css/cursor.css","hash":"2e0436356b054100cd70772150f08a06a4e7161b","modified":1604841083000},{"_id":"themes/butterfly/source/css/index.styl","hash":"861998e4ac67a59529a8245a9130d68f826c9c12","modified":1626073765116},{"_id":"themes/butterfly/source/css/footergradient.css","hash":"934cd6eb53787e340ec47c916ad0c8adb21776c0","modified":1625915019809},{"_id":"themes/butterfly/source/css/flink.css","hash":"007f83a35a21996a420f9828361d988fcaf9447b","modified":1602904202000},{"_id":"themes/butterfly/scripts/tag/tabs.js","hash":"6c6e415623d0fd39da016d9e353bb4f5cca444f5","modified":1626073765113},{"_id":"themes/butterfly/source/css/scrollbar.css","hash":"355dd30ae6f007699770da954bc06afacbebd2c4","modified":1604998832000},{"_id":"themes/butterfly/source/img/algolia.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1591000642000},{"_id":"themes/butterfly/source/css/var.styl","hash":"bf8129b325c943290a1d7c16cff635e7bf21e895","modified":1629104594628},{"_id":"themes/butterfly/source/img/icp.png","hash":"cb1fd69b38ec23ce8366668ddffbbd0160de0104","modified":1591000642000},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1591000642000},{"_id":"themes/butterfly/source/img/favicon.ico","hash":"07ed688be6d6288a669778f65f7eccdd96770925","modified":1619041185169},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1591000642000},{"_id":"themes/butterfly/source/img/loading.gif","hash":"5f0287fb8fb98872fe1998c6f781111819e71806","modified":1591000642000},{"_id":"themes/butterfly/source/js/hexo_githubcalendar.js","hash":"d17d6663dbd7254727cb6f374fd8e640b4e5665e","modified":1629122644401},{"_id":"themes/butterfly/source/js/jquery.lazyload.js","hash":"f3c00bf3b278862f13a1c7ac3cf23e2c1a7a33dd","modified":1390813725000},{"_id":"themes/butterfly/scripts/events/init.js","hash":"018aa446265fe627301b1d53d7cba4f4ff1960ac","modified":1626073765109},{"_id":"themes/butterfly/source/js/mousesnow.js","hash":"b87c4eaafef1228b70f64e050bd09dc108420fc6","modified":1605857368000},{"_id":"themes/butterfly/source/js/main.js","hash":"4742e970e59bedd6bca5be132bbe85e734b5c5ad","modified":1629120886041},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"00053ce73210274b3679f42607edef1206eebc68","modified":1626073765116},{"_id":"themes/butterfly/source/js/utils.js","hash":"8319b59c26ce8cd2b0ae7d030c4912215148fa92","modified":1626073765116},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"90d01b88d0f406d00184960b1afe9230aec2ebe6","modified":1626073765106},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"6c41f49a3e682067533dd9384e6e4511fc3a1349","modified":1626073765106},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"889ef16fa34a39e5533bc170e62f20f3450cc522","modified":1626073765106},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"95a37e92b39c44bcbea4be7e29ddb3921c5b8220","modified":1626073765106},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"4def0aab9e2172ad1f29abd1535d8e08ff23aa0b","modified":1626073765106},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"e55f8bdb876d5429a908498db1307b94094c0d06","modified":1626073765106},{"_id":"themes/butterfly/layout/includes/head/noscript.pug","hash":"d16ad2ee0ff5751fd7f8a5ce1b83935518674977","modified":1626073765106},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"e2e8d681f183f00ce5ee239c42d2e36b3744daad","modified":1626073765106},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"3d492cfe645d37c94d30512e0b230b0a09913148","modified":1626073765106},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"24370508ee87f14418e8f06e9d79ad8c52a342c4","modified":1626073765106},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"c205b9fd72b2fe19e6d15c5b5ab0fb38c653032e","modified":1626073765106},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"65fa23680af0daf64930a399c2f2ca37809a8149","modified":1626073765106},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"0d953e51d04a9294a64153c89c20f491a9ec42d4","modified":1626073765106},{"_id":"themes/butterfly/layout/includes/loading/loading-js.pug","hash":"4cfcf0100e37ce91864703cd44f1cb99cb5493ea","modified":1626073765106},{"_id":"themes/butterfly/layout/includes/loading/loading.pug","hash":"5276937fbcceb9d62879dc47be880cd469a27349","modified":1626073765106},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"2fb74d0b0e4b98749427c5a1a1b0acb6c85fadc4","modified":1626073765106},{"_id":"themes/butterfly/layout/includes/page/categories.pug","hash":"1f30952fed73dec21b42e2e30b7fe2e84618d2e4","modified":1626073765106},{"_id":"themes/butterfly/layout/includes/page/tags.pug","hash":"93d4ebc7dc8228c7a10ddeb5a553d0dcdabbe145","modified":1626073765106},{"_id":"themes/butterfly/layout/includes/page/default-page.pug","hash":"dbec869c62135695495703a29ad7655e9965d461","modified":1626073765106},{"_id":"themes/butterfly/layout/includes/mixins/post-ui.pug","hash":"4c3c5cb69b3aead8c232cb0fbc251929f28aad75","modified":1626073765106},{"_id":"themes/butterfly/layout/includes/page/flink.pug","hash":"4ff6e7da4d3c0edba898e37f7ebaa5c7a0bcd843","modified":1626623919608},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"88e3b611b03149665e4113cfa39595c1a3fca7e5","modified":1626073765106},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"5b404356f311d2ee36478291ca3553210867b738","modified":1626073765106},{"_id":"themes/butterfly/layout/includes/third-party/pangu.pug","hash":"d5fec7dedc52ab23865fb4db002755e9bdaadc9f","modified":1626073765109},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"933cb710d2dbcea25c6426a57c6f49d2f48b792c","modified":1626073765109},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"b9d54a01d7c2a7a183cb7209e99430ce7fea1fe3","modified":1626073765109},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"92f81a437c9db49f7ebcf608bc09488ecdb55a21","modified":1626073765106},{"_id":"themes/butterfly/layout/includes/third-party/aplayer.pug","hash":"292646dfab135973b09f0fa9e3931e83da2ed30e","modified":1626073765106},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"1fbecfd299068f90d727f0c8c65e2a792fa6e3e2","modified":1626073765109},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"60dc48a7b5d89c2a49123c3fc5893ab9c57dd225","modified":1626073765109},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"86897010fe71503e239887fd8f6a4f5851737be9","modified":1626073765109},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"d50e5c22cd6bc3c378bc581918136746cfa3447f","modified":1626073765109},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"3d8e3706a056389176f55dd21956aabc78046761","modified":1626073765109},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"0366c658cdcff839aa1df2e2d252a03a53fd427e","modified":1626073765109},{"_id":"themes/butterfly/layout/includes/widget/card_bottom_self.pug","hash":"13dc8ce922e2e2332fe6ad5856ebb5dbf9ea4444","modified":1626073765109},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"d1a416d0a8a7916d0b1a41d73adc66f8c811e493","modified":1626073765109},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"27afd2274bd5f2cbbf1bad9f0afe2b2b72c213ca","modified":1626073765109},{"_id":"themes/butterfly/layout/includes/widget/card_post_toc.pug","hash":"ae9336bf31cdad08ff586ead4295912a96563c76","modified":1626073765109},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"438aea3e713ed16b7559b9a80a9c5ec0221263df","modified":1626073765109},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"9c1229af6ab48961021886882c473514101fba21","modified":1626073765109},{"_id":"themes/butterfly/layout/includes/widget/card_top_self.pug","hash":"ae67c6d4130a6c075058a9c1faea1648bcc6f83e","modified":1626073765109},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"0612aaee878f33ea8d3da0293c7dc3b6cd871466","modified":1626073765109},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"b5525891f6affd02c1ea3b2327c026882efe428b","modified":1626073765109},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"04ed51ede32bd09b2c0e8680057a05de18b91dff","modified":1626622560046},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"e211efbd1952d4b1b881287aa43423133c1d166e","modified":1626073765113},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"85e72c70a0cef29e40be1968f5d23b06c6f8e3aa","modified":1626073765113},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"29f48f9370f245e6e575b5836bccf47eb5688d8b","modified":1626073765113},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"fa7a4c1685f391d60ed863e869b9604b59746c27","modified":1626073765113},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"775a7c120c5b7b62d96bae21e0c493d5dcc45bea","modified":1629120807855},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"98b4db1e37763d3ec57f9871c156b415f53c336d","modified":1629104446171},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"f1b63892baafa48ab872bc79671d57aafd511f6c","modified":1626073765113},{"_id":"themes/butterfly/source/js/sakura.js","hash":"f6bde7ddd77d3972176996d6c27f3a48b6be9981","modified":1605105482000},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"dd3fe8e904e5bb47bd4a06ae10e4188ea910939e","modified":1630162107217},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"90fe01c968696a9f791cb2b84fca621cbbb56f47","modified":1626073765113},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"7d18a7be9cfea65091de3ef00014063d2d649912","modified":1626073765113},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"ea1ba40dd5954c2ed718a126336fb7f94da4e66f","modified":1626073765113},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"7a072589e6097dbe942783131964f2372fdf1eb6","modified":1626073765113},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"2c5fb77c448ce0a734040c8ce532b28fed688899","modified":1626073765113},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"0551c5893d1589a3d17ce161e50ecb1d724cc6e8","modified":1626621846406},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"d748951d9fbcd04dda839085af78b01b8fa04cba","modified":1626073765113},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"978c397d0966eaf9e6e2afd13866f8f4900b509f","modified":1626073765113},{"_id":"themes/butterfly/source/css/_page/404.styl","hash":"b0488ceacde74af139d66c8db5cb36cc21737b9b","modified":1626073765113},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"6874adc2e276443f354bbe50d0072e9bec37243c","modified":1626073765113},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"f59a9a0059d5261251bdd6de45aa97dd2d11e633","modified":1626073765113},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"e554549f0a0ae85362f0b0e8687981741f486f6b","modified":1626073765113},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"90d1ce76b0486ede809bc3b5d4935c22ee376c91","modified":1626073765113},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"9a881c031f463c486bd25248c2814fd09f97892b","modified":1626073765113},{"_id":"themes/butterfly/source/css/_page/flink.styl","hash":"2cc49d3f6a6beb9f7bff93e292f88aa5681da1d0","modified":1626073765113},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"4e629f510b73f998ab208b739c5bd7dcd168d1a7","modified":1626073765113},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"917e0e399e117217184ca63d3eb5c4843bcccf7b","modified":1626073765113},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"47a58ca4917c78d3e81d9a406611836d686c06fe","modified":1626607537193},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"f168f5c669978f633abe118cdcc4a12cfc883c01","modified":1626073765113},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"1c3f9d7efc3b9dfcfa8926a1132d0c44ffc7d4b2","modified":1626073765113},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"21964fdd6d74ffbea519418bab65024aee5f3736","modified":1626073765116},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"6befe4c51b86d0c1de130beeecad9e28d6442713","modified":1626073765113},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"d0386ba6d8d63afc72b9673e8f3e89df6446ffc2","modified":1626073765116},{"_id":"themes/butterfly/source/css/_tags/inlineImg.styl","hash":"df9d405c33a9a68946b530410f64096bcb72560c","modified":1626073765116},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"53ecae272e16223a436c497abbf25dd5f0fc4aaa","modified":1626073765113},{"_id":"themes/butterfly/source/css/_tags/label.styl","hash":"f741e85295ce15c70a6027ec15a542636dd5dcca","modified":1626073765116},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"86fee274a62f7f034547342930f445c47378eb55","modified":1626073765116},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"1756791581c0ec51cb03353a09dac4778d944349","modified":1626073765116},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"2c18a1c9604af475b4749def8f1959df88d8b276","modified":1626073765116},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"65b45e61586f7e66c3f338370bfd9daadd71a4b7","modified":1626073765116},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"ef1b2b5b980d6aeaa5d06b97d1afc9644b155a16","modified":1626073765106},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"e3bf847553515174f6085df982f0623e9783db7a","modified":1626073765106},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"459e2541afda483916d16fce4aaa56b41bcd42ba","modified":1626073765116},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"7848ec58c6ec03243abf80a3b22b4dc10f3edf53","modified":1626073765106},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"d85c3737b5c9548553a78b757a7698df126a52cf","modified":1626073765106},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"bba9871f446c10ffcc8fa9023f5a2eb701a86bae","modified":1626073765106},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"400ce038548d6f9ddb486150c724c87b6923a88b","modified":1626073765106},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"76634112c64023177260d1317ae39cef2a68e35f","modified":1626073765106},{"_id":"themes/butterfly/layout/includes/third-party/chat/gitter.pug","hash":"d1d2474420bf4edc2e43ccdff6f92b8b082143df","modified":1626073765106},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"a111407fdcafcf1099e26ffa69786f8822c5d9fb","modified":1626073765109},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"3f05f8311ae559d768ee3d0925e84ed767c314d3","modified":1626073765109},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"24a926756c2300b9c561aaab6bd3a71fdd16e16d","modified":1626073765109},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"2e52c64e89f16267596a8465841dd46f51820982","modified":1626073765109},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"c46a932257212f82e4a9974fbbc5de8878c8b383","modified":1626073765109},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"0b7571919e8ad51285deda56a1868fccf8c563d7","modified":1626073765109},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"bafb3d5710824caa59a56017afb058fd2b4eac65","modified":1626073765109},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"da9813f8dc0d388869c15413cf056012cfb69e1a","modified":1626073765109},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"52ea8aa26b84d3ad38ae28cdf0f163e9ca8dced7","modified":1626073765109},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"2b45fe09d5b591dca156b76dae99981f8d8e1c61","modified":1626073765109},{"_id":"themes/butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"16378d8646ea3f4ac99c18f0296dd85b13f9d775","modified":1626073765109},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"481cd5053bafb1a19f623554a27d3aa077ea59c3","modified":1626073765106},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"f9b00ead54573ba6e6eb33481588af144aab648d","modified":1626073765109},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"b8ae5fd7d74e1edcef21f5004fc96147e064d219","modified":1626073765109},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"a47d8f9f593091cc91192c0c49deaa2c0d2317fd","modified":1626073765109},{"_id":"themes/butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"cfe63e7d26a6665df6aa32ca90868ad48e05ec04","modified":1626073765106},{"_id":"themes/butterfly/layout/includes/third-party/comments/waline.pug","hash":"360845d02c3864975349ae60b3d0c68253ca001c","modified":1626073765109},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"3f3a3cd8bea2103dedd754f767aca5cb84d5f586","modified":1626073765109},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"34088a15655704d12e9b1807b47b3f6a860c9eec","modified":1626073765109},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"b443d6b16baf3ea250041342cc0361a42a412b7f","modified":1626073765109},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"f6506ccfd1ce994b9e53aa95588d0b6dbad11411","modified":1626073765109},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"da3b9437d061ee68dbc383057db5c73034c49605","modified":1626073765109},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"cb38ffe911023092a90a28f2ba8317a92b22cd0c","modified":1626073765109},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"59b4c26a827ace5a54855881d199977103ff6f50","modified":1626073765109},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"a2bc2601b7e0ae5caf1fc51a07390562d928620a","modified":1626073765109},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"613280d61b8ab9612014ec016ae3d3698d36fd1a","modified":1626073765109},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"d8f59e94eafc669c49349561dc5bbea3915aecb7","modified":1626073765109},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"309f51bc5302e72fc469d54c577fbcfe57fb07a8","modified":1626073765109},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"4c4a9c15215ae8ac5eadb0e086b278f76db9ee92","modified":1626073765109},{"_id":"themes/butterfly/layout/includes/third-party/share/add-this.pug","hash":"2980f1889226ca981aa23b8eb1853fde26dcf89a","modified":1626073765109},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"8c0726fb8d9a497d2f900b0be2845efaa68e3d87","modified":1626073765113},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"006acc91ce25fc7c7d778ca043e970f57dc46b83","modified":1626073765109},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"89cbcc8e087788ecec18b5fa58710afacdb7d080","modified":1626592315664},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"e0e7065124ef0d99f8322a47bc47838982e04ad0","modified":1626073765113},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"5972c61f5125068cbe0af279a0c93a54847fdc3b","modified":1626073765113},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"b871ea208e36398b4d668db9a9a0b61c79415381","modified":1626073765109},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"8970cc1916c982b64a1478792b2822d1d31e276d","modified":1626073765113},{"_id":"themes/butterfly/source/js/jquery.min.js","hash":"495389f7bf56cc6441f4018e585ba3f17ff3b85a","modified":1618500321000},{"_id":"themes/butterfly/source/js/artitalk.js","hash":"1ceaa83df38fb2da0386a65d442d13f294d038fd","modified":1627196656961},{"_id":"themes/butterfly/source/js/echarts.min.js","hash":"eec6c0cc35c819602747de4574b4d77a773ae6bc","modified":1625123470961},{"_id":"public/atom.xml","hash":"78e2f0b7ce339580ae4f4de40e3b097425f6bf86","modified":1630164589022},{"_id":"public/search.xml","hash":"d4ac612c5a933bb2de65d8315f0b800493c7f800","modified":1630164589022},{"_id":"public/404.html","hash":"9e2d866ac7aa7407221f1eeb446bca67561f6243","modified":1630164589022},{"_id":"public/about/index.html","hash":"3888d34019f36f4eca91ddb6f399ad3c4c8f24a6","modified":1630164589022},{"_id":"public/categories/index.html","hash":"9e94649fe077659d791917325888c009d59bc625","modified":1630164589022},{"_id":"public/link/index.html","hash":"97989616432587d60851ed8740ba203df40ad89c","modified":1630164589022},{"_id":"public/messageboard/index.html","hash":"3c67ab215693d042784f1d1a841e9120cae7f040","modified":1630164589022},{"_id":"public/movies/index.html","hash":"0285138b8d5b5e7ce30d6f3a359543efed77a5a8","modified":1630164589022},{"_id":"public/music/index.html","hash":"a205479ba0ab4ac3ab78533be66ede0fcc55485a","modified":1630164589022},{"_id":"public/school/index.html","hash":"17c31e75cb2fdc58f445f7d0e3246c2fab470c5e","modified":1630164589022},{"_id":"public/selftalk/index.html","hash":"8cfa3d3071e1077f93c25df0d70e7a2492aed566","modified":1630164589022},{"_id":"public/tags/index.html","hash":"0528687d97af48a8178a4cbe39d13d29aee01473","modified":1630164589022},{"_id":"public/wallpaper/index.html","hash":"11483ea8a8a777d2f1117ef58a96dfeb4f1fb1e4","modified":1630164589022},{"_id":"public/school/blossomseason/index.html","hash":"a5d8ea16b4f47301103b56b21a809fb04d79ae8a","modified":1630164589022},{"_id":"public/school/night/index.html","hash":"d3dcbd495e2a8b58717b613e549f040af97e0cd4","modified":1630164589022},{"_id":"public/school/season/index.html","hash":"f18c897ca265a1798c45464404636d2123b9d118","modified":1630164589022},{"_id":"public/school/wangshuai/index.html","hash":"ef70116e1b59b25777b89043cdaadeb3e7d25026","modified":1630164589022},{"_id":"public/school/winter/index.html","hash":"066bbfc7ed028e27343b89f3e0a29687aaae03bc","modified":1630164589022},{"_id":"public/2021/07/31/vue/vue-beforeEach/index.html","hash":"629e1ff71ac323859edbb8746d2d2bced19250ec","modified":1630164589022},{"_id":"public/2021/07/31/vue/vuex/index.html","hash":"213617bdb14840df23a62433382cd8061e4c4601","modified":1630164589022},{"_id":"public/2021/07/25/vue/vue-router/index.html","hash":"6bf14a7db65eb59080989d70409499c810fdd479","modified":1630164589022},{"_id":"public/2021/07/25/vue/vue-ref/index.html","hash":"7bc8ca9ae6ed3ed0cf15a34524a66842329f1037","modified":1630164589022},{"_id":"public/2021/07/25/vue/vue-component-comment/index.html","hash":"2e45a0d609fb0eba7c80f60ced91b3bf13f2510c","modified":1630164589022},{"_id":"public/2021/07/25/vue/vue-component-query-params/index.html","hash":"da8abe0819e1a38ee26fd95d916c81111d3d3916","modified":1630164589022},{"_id":"public/2021/07/24/vue/vue-slot/index.html","hash":"9d78b959282bf9799aa84d6b0368eeadca677055","modified":1630164589022},{"_id":"public/2021/07/24/vue/vue-component-reuse/index.html","hash":"d3a6af3548281866b43252408441d6cab18fc083","modified":1630164589022},{"_id":"public/2021/07/22/vue/vue-component/index.html","hash":"53f0f32e37171862499b7c692ba338900f17b078","modified":1630164589022},{"_id":"public/2021/07/22/vue/vue-animate/index.html","hash":"cfaefff70588418e61f637a14681384759216a36","modified":1630164589022},{"_id":"public/2021/07/21/vue/vue-axios/index.html","hash":"25a19c0b547ec0fe9e9c112e88bcccd6c8a5d175","modified":1630164589022},{"_id":"public/2021/07/21/vue/vue-lifecycle-and-vue-resource/index.html","hash":"7bacc47fa8f2a4a01b57138623aebf9bdc365dc5","modified":1630164589022},{"_id":"public/2021/07/21/vue/vue-basic-brand-managment/index.html","hash":"2f7aa264b1621c467148b801704f502648b5511f","modified":1630164589022},{"_id":"public/2021/07/19/vue/vue-basic/index.html","hash":"249e847158a1a658d5a6bcf71f0adb83926f6548","modified":1630164589022},{"_id":"public/2021/07/18/blog/blog-hexo-butterfly-tag-plugins/index.html","hash":"b475b5e7013a8629cb8b32aef3f58d498b897d7c","modified":1630164589022},{"_id":"public/2021/07/16/node/node-mysql/index.html","hash":"fea5f4affaf2a8487768006222626459540e6fc8","modified":1630164589022},{"_id":"public/2021/07/12/node/node-fs-http/index.html","hash":"b0d7fbd44117f70fd3c05fdfdba5fd6f987b1403","modified":1630164589022},{"_id":"public/2021/07/11/bootstrap/bootstrap/index.html","hash":"f54cc998c3923c20083b589ecfa5cad142c26dde","modified":1630164589022},{"_id":"public/2021/07/06/js/jquery-echarts/index.html","hash":"07c4f2d5eb63f745f08548c70a5fd3067631f825","modified":1630164589022},{"_id":"public/2021/07/01/js/jquery-ajax/index.html","hash":"5a9c721a08c4a807ce70c78dd84b5b8b8c93cd4b","modified":1630164589022},{"_id":"public/2021/06/30/js/jquery-day02/index.html","hash":"6f23761115df623724792343b9ed2bc446026d0b","modified":1630164589022},{"_id":"public/2021/06/29/js/jquery-day01/index.html","hash":"a645f8a6871bef221a54ba6a658606e5e5c983b6","modified":1630164589022},{"_id":"public/2021/06/29/js/es6-var-let-const/index.html","hash":"2a2c3871a47b54705b6e49573b6d7f5b01c59d99","modified":1630164589022},{"_id":"public/2021/06/25/js/es7-async-await/index.html","hash":"bd9758192dd9f0a2ab07cdf35806edc62cf1daa9","modified":1630164589022},{"_id":"public/2021/06/25/js/es6-day06/index.html","hash":"48f84dfd47ad6c4ebdfdb7c454a6ae89953170b2","modified":1630164589022},{"_id":"public/2021/06/25/js/es6-day05/index.html","hash":"d75f727022aceb1eae5dc7ee12a87e0addc7dca1","modified":1630164589022},{"_id":"public/2021/06/24/js/es6-day04/index.html","hash":"0c92579caf2100b495f953d5c198af98ae593c91","modified":1630164589022},{"_id":"public/2021/06/23/js/es6-day03/index.html","hash":"3634747dd47bc08e3ffb34fcbc79ad4d01702cd2","modified":1630164589022},{"_id":"public/2021/06/20/js/es6-day02/index.html","hash":"1a558f0fc39d2a454233ef580459f9eada19d9a7","modified":1630164589022},{"_id":"public/2021/06/19/js/es6-day01/index.html","hash":"d4a806e91b6461c630cec31e1fd8077a3e213de6","modified":1630164589022},{"_id":"public/2021/06/19/js/js-remove-array-duplicates/index.html","hash":"63f1b35dc464d815c4e8bb3827e7a08e936d410b","modified":1630164589022},{"_id":"public/2021/06/19/js/js-regexp/index.html","hash":"30d3207dd56dcaffc41f2b074f5975999fa8edb9","modified":1630164589022},{"_id":"public/2021/06/19/js/js-deepclone/index.html","hash":"c2818eb9d8e426ccba7b5750e2524c36d69edfbd","modified":1630164589022},{"_id":"public/2021/06/19/js/js-recursive/index.html","hash":"25ff5a70d758b843746d0b59bfe197a91810fa18","modified":1630164589022},{"_id":"public/2021/06/19/js/js-closure/index.html","hash":"76f27c1fb9982130b4262484620106624cb7939f","modified":1630164589022},{"_id":"public/2021/06/18/js/js-arguments/index.html","hash":"89b68c16dcdb83e4e0ee1e1554c5816034bd4e49","modified":1630164589022},{"_id":"public/2021/06/18/js/js-call-apply-bind/index.html","hash":"c74c312eb60a6d06a5ba1e85ead932427ab42566","modified":1630164589022},{"_id":"public/2021/06/16/js/js-object-oriented-inherit/index.html","hash":"de1e178428a687a9ed0d6c463ef2f03bc6c1a71b","modified":1630164589022},{"_id":"public/2021/06/15/js/js-object-oriented/index.html","hash":"1dcc0b83d3c335767c6e7a78d9297248c4d75b42","modified":1630164589022},{"_id":"public/2021/06/15/js/js-ball-wall-rebound/index.html","hash":"39b36ed7605009749aefbf759f2e6fdf6870c76c","modified":1630164589022},{"_id":"public/2021/06/15/js/js-array-sort/index.html","hash":"cde6325a6028f14517d3d3422b6868f94bd319ca","modified":1630164589022},{"_id":"public/2021/06/15/js/js-find-longest-word-and-sort/index.html","hash":"5bd5ee5a93df85e13f9e68573dab6e7876cd7e1e","modified":1630164589022},{"_id":"public/2021/06/15/js/js-today/index.html","hash":"c5bc796670883851ad32f122ed566d4b3f6d3329","modified":1630164589022},{"_id":"public/2021/06/04/js/js-swiper/index.html","hash":"8d314a5abc66c3b9cc2944fb0430c8951b375d65","modified":1630164589022},{"_id":"public/2021/05/19/js/js-api/index.html","hash":"65ea2a40776c600feaea6d36ad584936bd68f805","modified":1630164589022},{"_id":"public/2021/05/13/js/js/index.html","hash":"3efece89f60293a7a0b6835c8929ccabef4b83e0","modified":1630164589022},{"_id":"public/2021/04/28/linux/linux-nvidia/index.html","hash":"1b42a99d1c9fc12070177ed65e226f36a3c41f22","modified":1630164589022},{"_id":"public/2021/02/27/vue/vue-cli-createvue/index.html","hash":"13b92663647157a443f01189fd14fc28f870ef8e","modified":1630164589022},{"_id":"public/2020/12/03/wxapp/wxapp-ctrlmusic/index.html","hash":"786f83b5e199295ce823e39234f28bed740985a0","modified":1630164589022},{"_id":"public/2020/11/10/html-css-detail/html-css-details/index.html","hash":"f544155093728cd561aeb508fecbeb568feaa968","modified":1630164589022},{"_id":"public/2020/11/08/blog/blog-hexousedateforupd/index.html","hash":"aa040757b32c1d1267385958b7ad31c8fc7740ef","modified":1630164589022},{"_id":"public/2020/10/06/linux/linux-centos/index.html","hash":"1402514f74263b4042613679ac45648bf5824b5b","modified":1630164589022},{"_id":"public/2020/08/14/wxapp/wxapp-iconfont/index.html","hash":"606ce02831617ff8ebe9dff23514f3486b9057a8","modified":1630164589022},{"_id":"public/2020/08/10/wxapp/wxapp-swichtab/index.html","hash":"2030fa67943cc11eecc91068f7c7a1b273aea09c","modified":1630164589022},{"_id":"public/2020/07/27/css/css-center/index.html","hash":"b4979688e4d8670223c001a98261ffc51bccb509","modified":1630164589022},{"_id":"public/2020/07/22/css/css-flex/index.html","hash":"e13d8fbbf14cc1f6180ae917218cc584a53f7b9f","modified":1630164589022},{"_id":"public/2020/07/21/wxapp/wxapp-scrollbar/index.html","hash":"5677ebd1657f013edf4afe7dbe4bf3cbc531e2db","modified":1630164589022},{"_id":"public/2020/07/21/wxapp/wxapp-flexenable/index.html","hash":"cfab4550dd932182dd8b312781018c82ae3c5d0b","modified":1630164589022},{"_id":"public/2020/07/03/java/java-maven/index.html","hash":"41ac177259118e96daa9f72c4da3bfc55987330c","modified":1630164589022},{"_id":"public/2020/06/05/css/css-Layout/index.html","hash":"f8ac7f52a674cb21c904a721f71b73690910e0a3","modified":1630164589022},{"_id":"public/2020/06/05/js/js-Drag/index.html","hash":"a205208cc3811972f5fa5b63f44f9ee4abdbf8b9","modified":1630164589022},{"_id":"public/2020/06/02/linux/linux-setGrubTheme/index.html","hash":"953796376fa03abc5552ef6269446b069f246221","modified":1630164589022},{"_id":"public/2020/02/28/linux/linux-node/index.html","hash":"7e455bdfd4485676cf2822689768c4f1b04e8e9a","modified":1630164589022},{"_id":"public/2020/02/01/blog/blog-hexo/index.html","hash":"9066a78268a994b624a2fc7db9bb9dbb243503a1","modified":1630164589022},{"_id":"public/2019/06/02/github/github-rawgithub/index.html","hash":"90f7e1ce9e72fe0423591b94f049d2922ef695e5","modified":1630164589022},{"_id":"public/2019/06/01/blog/blog-hugo/index.html","hash":"3d958bd158d7ae79dce345e58812be6a9ddd974d","modified":1630164589022},{"_id":"public/2019/06/01/linux/linux-kaliSwaks/index.html","hash":"46118af210ffff44f949968fd58df215adfa8caf","modified":1630164589022},{"_id":"public/2019/06/01/linux/linux-manjaro/index.html","hash":"1bdff218f4f06c5336e430bc0a4be5bf7bc07ecc","modified":1630164589022},{"_id":"public/archives/index.html","hash":"6dc0723b5c4152f9f34b00bb263d97176f25fc1e","modified":1630164589022},{"_id":"public/archives/page/2/index.html","hash":"d4d7c51ddda3a979fad10ba9b6b738d171cd90c1","modified":1630164589022},{"_id":"public/archives/page/3/index.html","hash":"6906a3536d02bb21b5db039368914ec176cb4133","modified":1630164589022},{"_id":"public/archives/page/4/index.html","hash":"a8bda25c45034a6630b15dd1935cec78fc45a5a5","modified":1630164589022},{"_id":"public/archives/page/5/index.html","hash":"21d895faded58b4edfe2ec8800069785c8e14cf1","modified":1630164589022},{"_id":"public/archives/page/6/index.html","hash":"716a057399b4faf2d2201203c15bf199e2a95a6f","modified":1630164589022},{"_id":"public/archives/page/7/index.html","hash":"695ad50c1bb9f219ac5c7ec48238288d10751f80","modified":1630164589022},{"_id":"public/archives/2019/index.html","hash":"0eb339053d3fbfb6e74db7d47500f5050f3201b5","modified":1630164589022},{"_id":"public/archives/2019/06/index.html","hash":"93fc0cc522a4fd7d9f8459faf2c7354cdb83bb43","modified":1630164589022},{"_id":"public/archives/2020/index.html","hash":"e0cbff08d0df4e81db4f83e177213761b990c042","modified":1630164589022},{"_id":"public/archives/2020/page/2/index.html","hash":"7c8230630d6ce26a48f4e9b0baf80a29de5ab705","modified":1630164589022},{"_id":"public/archives/2020/02/index.html","hash":"562699a4a95c6307b7df1ea0312699d724976936","modified":1630164589022},{"_id":"public/archives/2020/06/index.html","hash":"b8a3fd8b46f5a48b1e4c992a77af49543ecf3cae","modified":1630164589022},{"_id":"public/archives/2020/07/index.html","hash":"f18b0dfcb331d74510ec6f10935f39f78e07974c","modified":1630164589022},{"_id":"public/archives/2020/08/index.html","hash":"e73778d818e70f025d85f7df950742919a1ef551","modified":1630164589022},{"_id":"public/archives/2020/10/index.html","hash":"b8c29ab36c2a4091de26d130859576b043e8508b","modified":1630164589022},{"_id":"public/archives/2020/11/index.html","hash":"aa89a41b96f4861565e9ccf66f2be05ead84e8f7","modified":1630164589022},{"_id":"public/archives/2020/12/index.html","hash":"6475462e911dd2cd7d5e19d09f4a5efb824307da","modified":1630164589022},{"_id":"public/archives/2021/index.html","hash":"66ee3f3175b838c4f0dc8e573f925ff7aa901b1e","modified":1630164589022},{"_id":"public/archives/2021/page/2/index.html","hash":"43d74740cce6179e67d387bcc9164d5d3845f687","modified":1630164589022},{"_id":"public/archives/2021/page/3/index.html","hash":"1c67710abbe8c7f39d465c3412f132691b9b9e83","modified":1630164589022},{"_id":"public/archives/2021/page/4/index.html","hash":"6ece9c974c59e957e379a3f95ca0d978115fb235","modified":1630164589022},{"_id":"public/archives/2021/page/5/index.html","hash":"4457a39525da33fc6767921a6d6552498fa050ff","modified":1630164589022},{"_id":"public/archives/2021/02/index.html","hash":"97e7964fe5ffc2624192a79bd294ee89f10ff9ba","modified":1630164589022},{"_id":"public/archives/2021/04/index.html","hash":"2adc4fb28f93c2abda0665733f766ab48115720a","modified":1630164589022},{"_id":"public/archives/2021/05/index.html","hash":"9b5a76a2fa16d5553c2fc76076753e6b213c68e0","modified":1630164589022},{"_id":"public/archives/2021/06/index.html","hash":"0f29acf1570278aa6a19b1eba07babeeeeb10f94","modified":1630164589022},{"_id":"public/archives/2021/06/page/2/index.html","hash":"295e055bc810615d38cb292718e145c1528e195c","modified":1630164589022},{"_id":"public/archives/2021/06/page/3/index.html","hash":"f98909db179b26df8fdf9eb547ccbc027f6b431c","modified":1630164589022},{"_id":"public/archives/2021/07/index.html","hash":"f8c6357445192a13f5b2a24732a6a5426c0070a0","modified":1630164589022},{"_id":"public/archives/2021/07/page/2/index.html","hash":"bacd236918af358dd5a18fda21e5f26b580e83e7","modified":1630164589022},{"_id":"public/categories/博客/index.html","hash":"219b264ebee6fe7c10b561802c15d479076263aa","modified":1630164589022},{"_id":"public/categories/博客/hexo/index.html","hash":"d97c81a77f8d6f2cb9da8d9a586104a5986db3b6","modified":1630164589022},{"_id":"public/categories/css/index.html","hash":"4cfc0b9ec30dc38eae9b93fe879503696a869fd0","modified":1630164589022},{"_id":"public/categories/github/index.html","hash":"8e59b7ab126e7c7cbe4de7b5c6ab2bcd67486942","modified":1630164589022},{"_id":"public/categories/博客/hugo/index.html","hash":"ec385055ce0603b40bb46cc1afa67f0ce12d12d7","modified":1630164589022},{"_id":"public/categories/Html-Css-细节/index.html","hash":"f629d2abb66130c5c922915e4effa8f3eaaf9aed","modified":1630164589022},{"_id":"public/categories/java/index.html","hash":"95a941c7df059535814b9215ba877e6d448474b7","modified":1630164589022},{"_id":"public/categories/js/index.html","hash":"4ec76417daead6e2f668bca091027bd9dc5092d8","modified":1630164589022},{"_id":"public/categories/js/page/2/index.html","hash":"4814ed6312c1dd524d10f860685a087ad44a24bf","modified":1630164589022},{"_id":"public/categories/js/page/3/index.html","hash":"dd4917664c1b027ae2ec3a3b2c35a7213a2caac4","modified":1630164589022},{"_id":"public/categories/js/ES6/index.html","hash":"924fd567cda71b1850a613bca3f63388e8f99105","modified":1630164589022},{"_id":"public/categories/linux/index.html","hash":"4737337a6248452a8a06a2391c5db80da1618990","modified":1630164589022},{"_id":"public/categories/node/index.html","hash":"b8aa844b8879be996a8a1830132bbb78290204a8","modified":1630164589022},{"_id":"public/categories/js/ES7/index.html","hash":"1c4afd926b07f0b890898caa6e0c25939a8e5cd5","modified":1630164589022},{"_id":"public/categories/js/jQuery/index.html","hash":"424b79951d70b0d51dc0aae42bab4df015d20859","modified":1630164589022},{"_id":"public/categories/Vue/index.html","hash":"73dca7e98db64ee85c4c9327294134cab9e1ca88","modified":1630164589022},{"_id":"public/categories/Vue/page/2/index.html","hash":"8bde25c8eff5f5669499fe7eca69c7dc43832e7f","modified":1630164589022},{"_id":"public/categories/vue/index.html","hash":"5a61da88676811ab0dc4436708b91989fa7ec72d","modified":1630164589022},{"_id":"public/categories/微信小程序/index.html","hash":"638cbc58afcda03d6ecdce4121c4096bc58c0db5","modified":1630164589022},{"_id":"public/categories/linux/CentOS/index.html","hash":"7531d710014123a7d525d4a18db3b0b5d6dc07bf","modified":1630164589022},{"_id":"public/categories/linux/kali/index.html","hash":"5f222386bc77155205f0e84aa3ee1eebf7471d9e","modified":1630164589022},{"_id":"public/categories/linux/manjaro/index.html","hash":"a1144354fd97236b103a3e9e4f971e7821e42af6","modified":1630164589022},{"_id":"public/categories/linux/arch/index.html","hash":"f63e17d894162b23464e8ba3168cb6433864b253","modified":1630164589022},{"_id":"public/categories/Vue/Vue基础/index.html","hash":"b60ff2e95d18c51847f0b2fc3f6a1670fc395b47","modified":1630164589022},{"_id":"public/categories/Vue/Vue基础/page/2/index.html","hash":"8319ad52a9b7e153f77848bc5132fb529607c59f","modified":1630164589022},{"_id":"public/categories/Vue/Vue脚手架/index.html","hash":"0b5e53311718c1b29cf5e0c4fed0d2b0dbd0c92c","modified":1630164589022},{"_id":"public/categories/vue/vue基础/index.html","hash":"806d9b3d78820e3793259c3bb3b690028a957858","modified":1630164589022},{"_id":"public/index.html","hash":"7ca31ea3ed2415c00a15917e16db23526b48f041","modified":1630164589022},{"_id":"public/page/2/index.html","hash":"4dfad124fc0b8ced0a9b5d6cb0c5741cbfedd092","modified":1630164589022},{"_id":"public/page/3/index.html","hash":"582a218581f6ba6b80b6dadf818ec25f9dd113eb","modified":1630164589022},{"_id":"public/page/4/index.html","hash":"2544bd71e52a0ed423da085ada28fe4d28b1d105","modified":1630164589022},{"_id":"public/page/5/index.html","hash":"3e7952b2d12a72cca2ec4a18dd3f5f1ea3d45e77","modified":1630164589022},{"_id":"public/page/6/index.html","hash":"ca1c1137b14f6fadabeaa13410ec7aef37074d22","modified":1630164589022},{"_id":"public/page/7/index.html","hash":"e7aed5644dd778653b8a6db58385f5efe0df3d6f","modified":1630164589022},{"_id":"public/page/8/index.html","hash":"dc82509203f727df045401fbd72f07de1f91b2da","modified":1630164589022},{"_id":"public/tags/hexo/index.html","hash":"988fc391110c9689710604decc49e79aafe10583","modified":1630164589022},{"_id":"public/tags/博客/index.html","hash":"8e1a159c3d6f865f590a048f7a9cd12b464e649a","modified":1630164589022},{"_id":"public/tags/hugo/index.html","hash":"aca78a54e5d0e6c64f2fd83b807bfadb726cdd58","modified":1630164589022},{"_id":"public/tags/css布局/index.html","hash":"6d97842f948dd7de16c31c217c043750fb105b0f","modified":1630164589022},{"_id":"public/tags/flex/index.html","hash":"b1e00a8ac12bf96c85c4998fa15b16cf39d7fd5b","modified":1630164589022},{"_id":"public/tags/curl/index.html","hash":"e63c5e16011e140818ace2c31592f12f98e92499","modified":1630164589022},{"_id":"public/tags/github/index.html","hash":"194c05dc1856ff279fcea9c03bed2161dd83771e","modified":1630164589022},{"_id":"public/tags/html/index.html","hash":"c1e1198153512ae83b1f7674920a855455826da8","modified":1630164589022},{"_id":"public/tags/css/index.html","hash":"8e318dba3f8d5370711aea6f17bc9c2271fb168d","modified":1630164589022},{"_id":"public/tags/input光标/index.html","hash":"04571b46654d746656e5d79cbab99a6b2acf0ee2","modified":1630164589022},{"_id":"public/tags/插入符/index.html","hash":"2b26f191691ed6512191e5a52be2e2dd89bfddeb","modified":1630164589022},{"_id":"public/tags/placeholder/index.html","hash":"d50a5100b4379f22e9ac14e8653ce98949e9dbeb","modified":1630164589022},{"_id":"public/tags/maven/index.html","hash":"549bf637794f9a286c6eb3d4e99b8c0fb8af50f3","modified":1630164589022},{"_id":"public/tags/js/index.html","hash":"5738efc0056a43bfbdc7f442acd56bdae40c9f83","modified":1630164589022},{"_id":"public/tags/js/page/2/index.html","hash":"97759145b577264fd0407add380ae0a7eac6ca92","modified":1630164589022},{"_id":"public/tags/js/page/3/index.html","hash":"766269842664c90803c40ee7897fad0bc6eeaac8","modified":1630164589022},{"_id":"public/tags/javascript/index.html","hash":"d8bca4325634f00c6ddec123917a59fca95d911b","modified":1630164589022},{"_id":"public/tags/javascript/page/2/index.html","hash":"712eab665b84ad6c296ddc3378ae9af1e539d11a","modified":1630164589022},{"_id":"public/tags/javascript/page/3/index.html","hash":"18cea3219649e8dc0e8bbda20dabef274fbcb556","modified":1630164589022},{"_id":"public/tags/ES6/index.html","hash":"28c0ae7fce56762e10db74aab34e4249e76b3b05","modified":1630164589022},{"_id":"public/tags/let/index.html","hash":"f0f837fdc37c3d61f0d12a35fd33971a1d2fd700","modified":1630164589022},{"_id":"public/tags/var/index.html","hash":"29e2e6422501df9d459350e228081bd4dd08d58b","modified":1630164589022},{"_id":"public/tags/const/index.html","hash":"4360bce71d0b6cd76941b71cac7db3f6c1bd9a2a","modified":1630164589022},{"_id":"public/tags/babel/index.html","hash":"c14bb6c9233959a51ceee8eeea8fb0513ce18c20","modified":1630164589022},{"_id":"public/tags/兼容/index.html","hash":"032fe244ffa38ee7d5b874bfe9ea9296e0020308","modified":1630164589022},{"_id":"public/tags/解构赋值/index.html","hash":"41f8e199dccef5e7ff44669cfdc45da6fcbf0c09","modified":1630164589022},{"_id":"public/tags/数组去重/index.html","hash":"f2ab7316c91e3e104c1e795ecbec28378907968a","modified":1630164589022},{"_id":"public/tags/Promise/index.html","hash":"e324076720a0b1ed3c9737dc74edad6f39c64180","modified":1630164589022},{"_id":"public/tags/then/index.html","hash":"89a2ec345ddb272e84dc91aeab171552733626b2","modified":1630164589022},{"_id":"public/tags/catch/index.html","hash":"bdc9af4bbbe17f399a617c7209963888e2a9d089","modified":1630164589022},{"_id":"public/tags/resolve/index.html","hash":"b92e2e8bca0c9d519bdf78ec6b45818b3d8e3310","modified":1630164589022},{"_id":"public/tags/reject/index.html","hash":"ffdc1214f48bdcb4620587d980bd211c745d9770","modified":1630164589022},{"_id":"public/tags/jsvascript/index.html","hash":"a06f0750eb83e58e40096e060a598d1511678624","modified":1630164589022},{"_id":"public/tags/class/index.html","hash":"eff0d888dd5c84111eacbf682454d566b9837083","modified":1630164589022},{"_id":"public/tags/export/index.html","hash":"e30e6464fd30bf3341d3067e4253c1de9950f19e","modified":1630164589022},{"_id":"public/tags/import/index.html","hash":"0f57e904de9c2fc22b68c6968945ae6fdb0198b3","modified":1630164589022},{"_id":"public/tags/module/index.html","hash":"af92a0ba57c86c9440f01b8a583180481f23ffbc","modified":1630164589022},{"_id":"public/tags/extends/index.html","hash":"c6c48e172304501a6fc49e85674f0751dd4f4dbb","modified":1630164589022},{"_id":"public/tags/async/index.html","hash":"22ad7ed06ecf866ea5bef45d0cfe1edf34d0a38a","modified":1630164589022},{"_id":"public/tags/await/index.html","hash":"e0d7a786029e594832cccd84da0a4198c843839d","modified":1630164589022},{"_id":"public/tags/jQuery/index.html","hash":"d84733c6c08d254f6770e3c644f9f827fca0cae8","modified":1630164589022},{"_id":"public/tags/Ajax/index.html","hash":"efa088e9df911378151fbf2b054b281616971096","modified":1630164589022},{"_id":"public/tags/echarts/index.html","hash":"15c46dc63d869c206214bda597c8405a5bf0cdb2","modified":1630164589022},{"_id":"public/tags/拖放/index.html","hash":"425d0cafc8a468ee2a21e7892c6d0ca15d2e8c94","modified":1630164589022},{"_id":"public/tags/api/index.html","hash":"8f6b8b43d16c03f068e7d2ce0af0172623fc43cb","modified":1630164589022},{"_id":"public/tags/arguments/index.html","hash":"ea86d983b7eddfe33bd0aed2729cf541974add80","modified":1630164589022},{"_id":"public/tags/数组排序/index.html","hash":"c101afd757307ce9e21e1f3f49a7c7a0decb3940","modified":1630164589022},{"_id":"public/tags/sort/index.html","hash":"e059f6a1af37b7a66faa80c3421184687bd7bca5","modified":1630164589022},{"_id":"public/tags/触壁反弹/index.html","hash":"34bfa09ce876a3584621c1ffc15793393478dbb3","modified":1630164589022},{"_id":"public/tags/call/index.html","hash":"fad7e0b6b556e3f452d00010a8da653d56bb11f0","modified":1630164589022},{"_id":"public/tags/apply/index.html","hash":"279b76849382f51549bb3c34b789c2fa9c65d7ee","modified":1630164589022},{"_id":"public/tags/bind/index.html","hash":"ac597c14c6ccd3a3e633459c38c3ceee709053cd","modified":1630164589022},{"_id":"public/tags/this指向/index.html","hash":"a5dc6f489d4171759b03a9d242f8f436044e8a75","modified":1630164589022},{"_id":"public/tags/closure/index.html","hash":"abb3343d08607e38981ad87d5c68731641154eda","modified":1630164589022},{"_id":"public/tags/闭包/index.html","hash":"7afe6a88690c22eb5d984cfcdf5d053bcc45e06b","modified":1630164589022},{"_id":"public/tags/deepClone/index.html","hash":"fca0a9dbd9726cfaf78f8cd798cb7d848333d0c5","modified":1630164589022},{"_id":"public/tags/递归/index.html","hash":"fa1ec73fda3274a1b7961a8d545c190e12aa2819","modified":1630164589022},{"_id":"public/tags/深拷贝/index.html","hash":"29d21ecc588a3d23946b819d638f068b5e9245ad","modified":1630164589022},{"_id":"public/tags/面向对象/index.html","hash":"e78b13f574046bbe74744c5c4159e4cc99599e2e","modified":1630164589022},{"_id":"public/tags/继承/index.html","hash":"580e34d57889cad7486447bd682ab2aec2e51a84","modified":1630164589022},{"_id":"public/tags/recursive/index.html","hash":"abf5c7030b7af565292789a1112bcdf977520bc2","modified":1630164589022},{"_id":"public/tags/RegExp/index.html","hash":"fe949aceed2e1220c2d1853370408f2dd45ce113","modified":1630164589022},{"_id":"public/tags/正则/index.html","hash":"9ffe8e2ba16fffbc6eb7ca79f350577b6f3dfe69","modified":1630164589022},{"_id":"public/tags/test/index.html","hash":"92da9f6c07071a4ba68032ea56400786cd1e90a1","modified":1630164589022},{"_id":"public/tags/match/index.html","hash":"d7233179af9e8e0ffcb1ff72fba1cba02bcfe45a","modified":1630164589022},{"_id":"public/tags/replace/index.html","hash":"c2b6a2febd0bac211b21c69d07d11046de4c0b59","modified":1630164589022},{"_id":"public/tags/swiper/index.html","hash":"a622b665c9c6e46b6309c62a91f748046f780975","modified":1630164589022},{"_id":"public/tags/轮播图/index.html","hash":"4ade73c2daf40c62a858a6d162dbcc05b50c7cbe","modified":1630164589022},{"_id":"public/tags/linux/index.html","hash":"4815814ef56bb77f3112cbfb42af9f4a2ed6ee47","modified":1630164589022},{"_id":"public/tags/CentOS/index.html","hash":"f10ba88baefb9efa4d949e93ef751c3663b333bd","modified":1630164589022},{"_id":"public/tags/基础总结/index.html","hash":"a39ff3d4a21c7ba80c1a1a1caa2356545c5c6527","modified":1630164589022},{"_id":"public/tags/kali/index.html","hash":"deb6ca71b617e2ec2ff38a5d7951ae34ae3ce52c","modified":1630164589022},{"_id":"public/tags/swaks/index.html","hash":"d5162fdd3b81e403652678ed6085aeeaf734bf77","modified":1630164589022},{"_id":"public/tags/manjaro/index.html","hash":"bfc95c512a18a6cff7a3eefd5bdd1593047e6008","modified":1630164589022},{"_id":"public/tags/node/index.html","hash":"e37f4306531ad683259b43f6b77dfdcd20a98458","modified":1630164589022},{"_id":"public/tags/cnpm/index.html","hash":"67d67783558c447cfacb3ae1271e0f16f3576395","modified":1630164589022},{"_id":"public/tags/npm/index.html","hash":"ddf755baa726c84b883339d1d92b92c16dca0fe6","modified":1630164589022},{"_id":"public/tags/arch/index.html","hash":"0ff44441ccaf9ca35346b2626c56f928176ce4e9","modified":1630164589022},{"_id":"public/tags/nvidia/index.html","hash":"6b8d5a0308d38776dd7c871b163c8d9de6cb17e2","modified":1630164589022},{"_id":"public/tags/bbswitch/index.html","hash":"04375061318c1991cbcea6c65ee8650d20d4a503","modified":1630164589022},{"_id":"public/tags/optimus-manager/index.html","hash":"c3156ca50e739e66e49391e9ce1598c0377a55f0","modified":1630164589022},{"_id":"public/tags/grub/index.html","hash":"88c1364fc6320f2e0bab98e6753ade63cfffd171","modified":1630164589022},{"_id":"public/tags/fs/index.html","hash":"b0d843eeb58a5f93a03251745321a77ae23fed23","modified":1630164589022},{"_id":"public/tags/http/index.html","hash":"1a7e6d5378e23cdbb6498a6e8ac25a8f63dcaf55","modified":1630164589022},{"_id":"public/tags/Vue/index.html","hash":"49e3be988936bc6fd487b0a52ca42ee6d7d70870","modified":1630164589022},{"_id":"public/tags/Vue/page/2/index.html","hash":"bfa4c23ba7db94b47612a1ba5e4fe9974f44ad77","modified":1630164589022},{"_id":"public/tags/Vue-过渡动画/index.html","hash":"cdacdb40fcc71974851769149df671eaf0265600","modified":1630164589022},{"_id":"public/tags/axios/index.html","hash":"924f668e6fa2097c16742b4351169b91f31f91a9","modified":1630164589022},{"_id":"public/tags/Vue-router/index.html","hash":"55fb91e3d5900764c273a815be231812c5bf9ba9","modified":1630164589022},{"_id":"public/tags/beforeEach/index.html","hash":"d19e2ef627a9908c26407da1e76d4b029505bef2","modified":1630164589022},{"_id":"public/tags/Vue脚手架/index.html","hash":"0bb61aa2a9e008be74af646a4c4ee3668a951280","modified":1630164589022},{"_id":"public/tags/vue/index.html","hash":"100730a3f40006f4aae16e291699fcf65f9cbf41","modified":1630164589022},{"_id":"public/tags/Vue-组件/index.html","hash":"5c76bdabf75b1d0818fa530ed510bbb212fb9a87","modified":1630164589022},{"_id":"public/tags/Vue-组件复用/index.html","hash":"65293b4f3f7c977bd8466f383c15b8641b0d79a9","modified":1630164589022},{"_id":"public/tags/Vue-生命周期/index.html","hash":"e2af4ce9fdce203b6ca97af4e1cc3cd0c9262a12","modified":1630164589022},{"_id":"public/tags/Vue-resource/index.html","hash":"a9283e2b21f5cf0ebaea8e32ad901eb68f3b539e","modified":1630164589022},{"_id":"public/tags/Vue-slot-插槽/index.html","hash":"5ab5e4a5a9fd73387b5eb36fb4a15e2294c99542","modified":1630164589022},{"_id":"public/tags/vuex/index.html","hash":"80e6e50d6efd0f06a537eafb96e00e0ff9c193a9","modified":1630164589022},{"_id":"public/tags/微信小程序/index.html","hash":"e4499767d8881749791e2177b96a17457c5c7624","modified":1630164589022},{"_id":"public/tags/背景音乐/index.html","hash":"efe13bc4c8de31dc5fe6b6bc1d56b956903fc3c8","modified":1630164589022},{"_id":"public/tags/flexbox/index.html","hash":"9fd2c3bd24bc9384e7de949494957e6cfb58cce7","modified":1630164589022},{"_id":"public/tags/iconfont/index.html","hash":"07886ff3d6a0af6f0b69c77502ce21472718ed3d","modified":1630164589022},{"_id":"public/tags/滚动条/index.html","hash":"7e4f24a2a3a5cad1ac480d43842a19b8c4a46b01","modified":1630164589022},{"_id":"public/tags/scroll/index.html","hash":"574d7882da38371ab91acff3df2e8d327da6c1dc","modified":1630164589022},{"_id":"public/tags/scrollbar/index.html","hash":"64f1ffce3aeb0fea920c1e9470b0f14c97e06996","modified":1630164589022},{"_id":"public/tags/标签/index.html","hash":"80a6520bbc9dde4b8ef4846850bf320460d65cbc","modified":1630164589022},{"_id":"public/tags/tab/index.html","hash":"9ad1ca2bf8e2af9b3cb706ef7eda5e6a50436a4b","modified":1630164589022},{"_id":"public/README.md","hash":"6f02dda5bde807a97e8d6ff04c9ba9e364733436","modified":1630164589022},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1630164589022},{"_id":"public/img/algolia.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1630164589022},{"_id":"public/img/favicon.ico","hash":"07ed688be6d6288a669778f65f7eccdd96770925","modified":1630164589022},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1630164589022},{"_id":"public/img/icp.png","hash":"cb1fd69b38ec23ce8366668ddffbbd0160de0104","modified":1630164589022},{"_id":"public/img/loading.gif","hash":"5f0287fb8fb98872fe1998c6f781111819e71806","modified":1630164589022},{"_id":"public/baidu_verify_code-T57MFp7YOX.html","hash":"3afca3b8f1464de92ba3e72357f24d812d87fdbd","modified":1630164589022},{"_id":"public/baidu_verify_code-VG0UFPAKn3.html","hash":"11207e0897c3f76b7f0efd71a1f4be427fcc42cd","modified":1630164589022},{"_id":"public/google2a067f045d49c002.html","hash":"a3725fdaca19ee910b3c4d3f39f0eddde779a757","modified":1630164589022},{"_id":"public/css/cursor.css","hash":"2e0436356b054100cd70772150f08a06a4e7161b","modified":1630164589022},{"_id":"public/css/flink.css","hash":"007f83a35a21996a420f9828361d988fcaf9447b","modified":1630164589022},{"_id":"public/css/footergradient.css","hash":"934cd6eb53787e340ec47c916ad0c8adb21776c0","modified":1630164589022},{"_id":"public/css/scrollbar.css","hash":"355dd30ae6f007699770da954bc06afacbebd2c4","modified":1630164589022},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1630164589022},{"_id":"public/js/hexo_githubcalendar.js","hash":"d17d6663dbd7254727cb6f374fd8e640b4e5665e","modified":1630164589022},{"_id":"public/js/jquery.lazyload.js","hash":"f3c00bf3b278862f13a1c7ac3cf23e2c1a7a33dd","modified":1630164589022},{"_id":"public/js/mousesnow.js","hash":"b87c4eaafef1228b70f64e050bd09dc108420fc6","modified":1630164589022},{"_id":"public/js/utils.js","hash":"8319b59c26ce8cd2b0ae7d030c4912215148fa92","modified":1630164589022},{"_id":"public/js/search/algolia.js","hash":"65b45e61586f7e66c3f338370bfd9daadd71a4b7","modified":1630164589022},{"_id":"public/js/search/local-search.js","hash":"459e2541afda483916d16fce4aaa56b41bcd42ba","modified":1630164589022},{"_id":"public/css/index.css","hash":"00238a448a90a0cc61e26f19e6d76dfc084f1b74","modified":1630164589022},{"_id":"public/js/artitalk.js","hash":"1ceaa83df38fb2da0386a65d442d13f294d038fd","modified":1630164589022},{"_id":"public/js/main.js","hash":"4742e970e59bedd6bca5be132bbe85e734b5c5ad","modified":1630164589022},{"_id":"public/js/sakura.js","hash":"f6bde7ddd77d3972176996d6c27f3a48b6be9981","modified":1630164589022},{"_id":"public/js/tw_cn.js","hash":"00053ce73210274b3679f42607edef1206eebc68","modified":1630164589022},{"_id":"public/js/jquery.min.js","hash":"495389f7bf56cc6441f4018e585ba3f17ff3b85a","modified":1630164589022},{"_id":"public/js/echarts.min.js","hash":"eec6c0cc35c819602747de4574b4d77a773ae6bc","modified":1630164589022}],"Category":[{"name":"博客","_id":"cksvxwnmt0006gubqa8lv3uni"},{"name":"hexo","parent":"cksvxwnmt0006gubqa8lv3uni","_id":"cksvxwnn9000rgubq8g8idrb6"},{"name":"css","_id":"cksvxwnnc000ygubqblhx4y3l"},{"name":"github","_id":"cksvxwnnp001qgubq7pc489w2"},{"name":"hugo","parent":"cksvxwnmt0006gubqa8lv3uni","_id":"cksvxwnnr001xgubq04h39ccw"},{"name":"Html-Css-细节","_id":"cksvxwnnu0025gubq751ghblc"},{"name":"java","_id":"cksvxwnnw002bgubq8xzgc8iz"},{"name":"js","_id":"cksvxwnny002hgubq4cmhbs09"},{"name":"ES6","parent":"cksvxwnny002hgubq4cmhbs09","_id":"cksvxwnp30058gubq8m1pghwf"},{"name":"linux","_id":"cksvxwnpd0061gubqf3iy291v"},{"name":"node","_id":"cksvxwnpj006mgubq4tie7759"},{"name":"ES7","parent":"cksvxwnny002hgubq4cmhbs09","_id":"cksvxwnpm006ugubqagqed4mp"},{"name":"jQuery","parent":"cksvxwnny002hgubq4cmhbs09","_id":"cksvxwnpr0073gubqfs5f03re"},{"name":"Vue","_id":"cksvxwnpr0077gubq9tvjfid5"},{"name":"vue","_id":"cksvxwnpx0087gubq4gbaeghi"},{"name":"微信小程序","_id":"cksvxwnq1008tgubq951jhftd"},{"name":"CentOS","parent":"cksvxwnpd0061gubqf3iy291v","_id":"cksvxwnq5009egubq2w0mgxpa"},{"name":"kali","parent":"cksvxwnpd0061gubqf3iy291v","_id":"cksvxwnq6009kgubqenlo1cej"},{"name":"manjaro","parent":"cksvxwnpd0061gubqf3iy291v","_id":"cksvxwnq7009ngubq6uu1fllv"},{"name":"arch","parent":"cksvxwnpd0061gubqf3iy291v","_id":"cksvxwnq8009sgubq8jxk3i7q"},{"name":"Vue基础","parent":"cksvxwnpr0077gubq9tvjfid5","_id":"cksvxwnq8009ygubq6mtiauls"},{"name":"Vue脚手架","parent":"cksvxwnpr0077gubq9tvjfid5","_id":"cksvxwnqc00amgubq4jalclke"},{"name":"vue基础","parent":"cksvxwnpx0087gubq4gbaeghi","_id":"cksvxwnqd00atgubqb00ndfxi"}],"Data":[{"_id":"link","data":{"class1":{"class_name":"舍友","link_list":{"1":{"name":"codeAntg","link":"https://blog.csdn.net/weixin_44745147","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/fjh.jpg","descr":"那家刀削面不错","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class2":{"class_name":"致谢","link_list":{"1":{"name":"JerrC","link":"https://immyw.com","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/immyw.png","descr":"今日事,今日毕","width":"1px","style":"solid","color":"#60d0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/hexo.svg","descr":"A fast, simple & powerful blog framework","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class3":{"class_name":"友人","link_list":{"1":{"name":"Chester","link":"http://chesterlds.cn","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/chester.jpg","descr":null,"width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Wangs","link":"https://wangsss.cn/","avatar":"https://wangsss.cn/img/avatar.png","descr":"不疯魔，不成活 ~","width":"1px","style":"solid","color":"#9d9d9d","custom":"link_custom1","time":"4s","namecolor":"0094ff","descolor":"#ff9191"}}}}}],"Page":[{"title":"关于我","date":"2020-06-01T11:11:34.000Z","top_img":"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/desktop.png","type":"about","_content":"\n# 热衷于 {% label Linux default %} 、致力于 {% label 前端 blue %} 开发 、致敬 {% label 开源 green %}\n\n![dev](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/emoji/s.png)\n\n<!-- label -->\n<!-- 【可选】背景颜色，默认为 default -->\n<!-- default/blue/pink/red/purple/orange/green -->\n","source":"about/index.md","raw":"---\ntitle: 关于我\ndate: 2020-06-01 19:11:34\ntop_img: https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/desktop.png\ntype: about\n---\n\n# 热衷于 {% label Linux default %} 、致力于 {% label 前端 blue %} 开发 、致敬 {% label 开源 green %}\n\n![dev](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/emoji/s.png)\n\n<!-- label -->\n<!-- 【可选】背景颜色，默认为 default -->\n<!-- default/blue/pink/red/purple/orange/green -->\n","updated":"2021-07-18T15:16:01.636Z","path":"about/index.html","comments":1,"layout":"page","_id":"cksvxwnmj0000gubqc81xgfx5","content":"<h1 id=\"热衷于-、致力于-开发-、致敬\"><a href=\"#热衷于-、致力于-开发-、致敬\" class=\"headerlink\" title=\"热衷于  、致力于  开发 、致敬 \"></a>热衷于 <mark class=\"hl-label default\">Linux</mark>  、致力于 <mark class=\"hl-label blue\">前端</mark>  开发 、致敬 <mark class=\"hl-label green\">开源</mark> </h1><p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/emoji/s.png\" alt=\"dev\"></p>\n<!-- label -->\n<!-- 【可选】背景颜色，默认为 default -->\n<!-- default/blue/pink/red/purple/orange/green -->\n","site":{"data":{"link":{"class1":{"class_name":"舍友","link_list":{"1":{"name":"codeAntg","link":"https://blog.csdn.net/weixin_44745147","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/fjh.jpg","descr":"那家刀削面不错","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class2":{"class_name":"致谢","link_list":{"1":{"name":"JerrC","link":"https://immyw.com","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/immyw.png","descr":"今日事,今日毕","width":"1px","style":"solid","color":"#60d0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/hexo.svg","descr":"A fast, simple & powerful blog framework","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class3":{"class_name":"友人","link_list":{"1":{"name":"Chester","link":"http://chesterlds.cn","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/chester.jpg","descr":null,"width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Wangs","link":"https://wangsss.cn/","avatar":"https://wangsss.cn/img/avatar.png","descr":"不疯魔，不成活 ~","width":"1px","style":"solid","color":"#9d9d9d","custom":"link_custom1","time":"4s","namecolor":"0094ff","descolor":"#ff9191"}}}}}},"cover":"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/desktop.png","excerpt":"","more":"<h1 id=\"热衷于-、致力于-开发-、致敬\"><a href=\"#热衷于-、致力于-开发-、致敬\" class=\"headerlink\" title=\"热衷于  、致力于  开发 、致敬 \"></a>热衷于 <mark class=\"hl-label default\">Linux</mark>  、致力于 <mark class=\"hl-label blue\">前端</mark>  开发 、致敬 <mark class=\"hl-label green\">开源</mark> </h1><p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/emoji/s.png\" alt=\"dev\"></p>\n<!-- label -->\n<!-- 【可选】背景颜色，默认为 default -->\n<!-- default/blue/pink/red/purple/orange/green -->\n"},{"title":"分类","date":"2020-06-01T11:11:23.000Z","top_img":"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/simplea.jpg","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2020-06-01 19:11:23\ntop_img: https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/simplea.jpg\ntype: categories\n---\n","updated":"2021-04-30T13:18:29.751Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cksvxwnmp0002gubqf8k4aipm","content":"","site":{"data":{"link":{"class1":{"class_name":"舍友","link_list":{"1":{"name":"codeAntg","link":"https://blog.csdn.net/weixin_44745147","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/fjh.jpg","descr":"那家刀削面不错","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class2":{"class_name":"致谢","link_list":{"1":{"name":"JerrC","link":"https://immyw.com","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/immyw.png","descr":"今日事,今日毕","width":"1px","style":"solid","color":"#60d0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/hexo.svg","descr":"A fast, simple & powerful blog framework","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class3":{"class_name":"友人","link_list":{"1":{"name":"Chester","link":"http://chesterlds.cn","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/chester.jpg","descr":null,"width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Wangs","link":"https://wangsss.cn/","avatar":"https://wangsss.cn/img/avatar.png","descr":"不疯魔，不成活 ~","width":"1px","style":"solid","color":"#9d9d9d","custom":"link_custom1","time":"4s","namecolor":"0094ff","descolor":"#ff9191"}}}}}},"cover":"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/desktop.png","excerpt":"","more":""},{"title":"友情链接","date":"2020-10-16T15:02:06.000Z","top_img":"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/desktop.png","type":"link","_content":"\n<style>\n    span.key{\n        color: #80ffc0;\n    }\n    span.newvalue{\n        color: #40ffff;\n    }\n</style>\n\n---\n\n# 我的信息\n\n<pre style=\"background-color: #494f5c;color: #c0ffc0;border-radius: 10px;\">\n<span class=\"key\">name</span>: <span class=\"newvalue\">Saturday_</span>\n<span class=\"key\">link</span>: <span class=\"newvalue\">https://codehhr.cn</span>\n<span class=\"key\">avatar</span>: <span class=\"newvalue\">https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/tusiji.png</span>\n<span class=\"key\">descr</span>: <span class=\"newvalue\">风向决定发型~</span>\n</pre>\n","source":"link/index.md","raw":"---\ntitle: 友情链接\ndate: 2020-10-16 23:02:06\ntop_img: https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/desktop.png\ntype: \"link\"\n---\n\n<style>\n    span.key{\n        color: #80ffc0;\n    }\n    span.newvalue{\n        color: #40ffff;\n    }\n</style>\n\n---\n\n# 我的信息\n\n<pre style=\"background-color: #494f5c;color: #c0ffc0;border-radius: 10px;\">\n<span class=\"key\">name</span>: <span class=\"newvalue\">Saturday_</span>\n<span class=\"key\">link</span>: <span class=\"newvalue\">https://codehhr.cn</span>\n<span class=\"key\">avatar</span>: <span class=\"newvalue\">https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/tusiji.png</span>\n<span class=\"key\">descr</span>: <span class=\"newvalue\">风向决定发型~</span>\n</pre>\n","updated":"2021-05-19T06:35:25.281Z","path":"link/index.html","comments":1,"layout":"page","_id":"cksvxwnmr0004gubqf807b3dp","content":"<style>\n    span.key{\n        color: #80ffc0;\n    }\n    span.newvalue{\n        color: #40ffff;\n    }\n</style>\n\n<hr>\n<h1 id=\"我的信息\"><a href=\"#我的信息\" class=\"headerlink\" title=\"我的信息\"></a>我的信息</h1><pre style=\"background-color: #494f5c;color: #c0ffc0;border-radius: 10px;\">\n<span class=\"key\">name</span>: <span class=\"newvalue\">Saturday_</span>\n<span class=\"key\">link</span>: <span class=\"newvalue\">https://codehhr.cn</span>\n<span class=\"key\">avatar</span>: <span class=\"newvalue\">https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/tusiji.png</span>\n<span class=\"key\">descr</span>: <span class=\"newvalue\">风向决定发型~</span>\n</pre>\n","site":{"data":{"link":{"class1":{"class_name":"舍友","link_list":{"1":{"name":"codeAntg","link":"https://blog.csdn.net/weixin_44745147","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/fjh.jpg","descr":"那家刀削面不错","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class2":{"class_name":"致谢","link_list":{"1":{"name":"JerrC","link":"https://immyw.com","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/immyw.png","descr":"今日事,今日毕","width":"1px","style":"solid","color":"#60d0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/hexo.svg","descr":"A fast, simple & powerful blog framework","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class3":{"class_name":"友人","link_list":{"1":{"name":"Chester","link":"http://chesterlds.cn","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/chester.jpg","descr":null,"width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Wangs","link":"https://wangsss.cn/","avatar":"https://wangsss.cn/img/avatar.png","descr":"不疯魔，不成活 ~","width":"1px","style":"solid","color":"#9d9d9d","custom":"link_custom1","time":"4s","namecolor":"0094ff","descolor":"#ff9191"}}}}}},"cover":"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/desktop.png","excerpt":"","more":"<style>\n    span.key{\n        color: #80ffc0;\n    }\n    span.newvalue{\n        color: #40ffff;\n    }\n</style>\n\n<hr>\n<h1 id=\"我的信息\"><a href=\"#我的信息\" class=\"headerlink\" title=\"我的信息\"></a>我的信息</h1><pre style=\"background-color: #494f5c;color: #c0ffc0;border-radius: 10px;\">\n<span class=\"key\">name</span>: <span class=\"newvalue\">Saturday_</span>\n<span class=\"key\">link</span>: <span class=\"newvalue\">https://codehhr.cn</span>\n<span class=\"key\">avatar</span>: <span class=\"newvalue\">https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/tusiji.png</span>\n<span class=\"key\">descr</span>: <span class=\"newvalue\">风向决定发型~</span>\n</pre>\n"},{"title":"留言板","date":"2020-08-24T01:38:08.000Z","top_img":"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/desktop.png","type":"messageboard","_content":"\n## 请 尽 情 胡 言 乱 语 ~\n","source":"messageboard/index.md","raw":"---\ntitle: 留言板\ndate: 2020-08-24 09:38:08\ntop_img: https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/desktop.png\ntype: messageboard\n---\n\n## 请 尽 情 胡 言 乱 语 ~\n","updated":"2021-05-19T06:36:41.323Z","path":"messageboard/index.html","comments":1,"layout":"page","_id":"cksvxwnmv0008gubqazqpfzl8","content":"<h2 id=\"请-尽-情-胡-言-乱-语\"><a href=\"#请-尽-情-胡-言-乱-语\" class=\"headerlink\" title=\"请 尽 情 胡 言 乱 语 ~\"></a>请 尽 情 胡 言 乱 语 ~</h2>","site":{"data":{"link":{"class1":{"class_name":"舍友","link_list":{"1":{"name":"codeAntg","link":"https://blog.csdn.net/weixin_44745147","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/fjh.jpg","descr":"那家刀削面不错","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class2":{"class_name":"致谢","link_list":{"1":{"name":"JerrC","link":"https://immyw.com","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/immyw.png","descr":"今日事,今日毕","width":"1px","style":"solid","color":"#60d0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/hexo.svg","descr":"A fast, simple & powerful blog framework","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class3":{"class_name":"友人","link_list":{"1":{"name":"Chester","link":"http://chesterlds.cn","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/chester.jpg","descr":null,"width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Wangs","link":"https://wangsss.cn/","avatar":"https://wangsss.cn/img/avatar.png","descr":"不疯魔，不成活 ~","width":"1px","style":"solid","color":"#9d9d9d","custom":"link_custom1","time":"4s","namecolor":"0094ff","descolor":"#ff9191"}}}}}},"cover":"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/desktop.png","excerpt":"","more":"<h2 id=\"请-尽-情-胡-言-乱-语\"><a href=\"#请-尽-情-胡-言-乱-语\" class=\"headerlink\" title=\"请 尽 情 胡 言 乱 语 ~\"></a>请 尽 情 胡 言 乱 语 ~</h2>"},{"title":"影视","date":"2020-06-01T11:12:03.000Z","type":"movies","_content":"\n<!-- <iframe height=1000 width=100% src=\"https://www.novipnoad.com/\" frameborder=\"0\" allowfullscreen=1>\n</iframe> -->\n","source":"movies/index.md","raw":"---\ntitle: 影视\ndate: 2020-06-01 19:12:03\ntype: movies\n---\n\n<!-- <iframe height=1000 width=100% src=\"https://www.novipnoad.com/\" frameborder=\"0\" allowfullscreen=1>\n</iframe> -->\n","updated":"2020-11-05T10:25:39.000Z","path":"movies/index.html","comments":1,"layout":"page","_id":"cksvxwnmw000agubq6kn59dhf","content":"<!-- <iframe height=1000 width=100% src=\"https://www.novipnoad.com/\" frameborder=\"0\" allowfullscreen=1>\n</iframe> -->\n","site":{"data":{"link":{"class1":{"class_name":"舍友","link_list":{"1":{"name":"codeAntg","link":"https://blog.csdn.net/weixin_44745147","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/fjh.jpg","descr":"那家刀削面不错","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class2":{"class_name":"致谢","link_list":{"1":{"name":"JerrC","link":"https://immyw.com","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/immyw.png","descr":"今日事,今日毕","width":"1px","style":"solid","color":"#60d0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/hexo.svg","descr":"A fast, simple & powerful blog framework","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class3":{"class_name":"友人","link_list":{"1":{"name":"Chester","link":"http://chesterlds.cn","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/chester.jpg","descr":null,"width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Wangs","link":"https://wangsss.cn/","avatar":"https://wangsss.cn/img/avatar.png","descr":"不疯魔，不成活 ~","width":"1px","style":"solid","color":"#9d9d9d","custom":"link_custom1","time":"4s","namecolor":"0094ff","descolor":"#ff9191"}}}}}},"cover":"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/desktop.png","excerpt":"","more":"<!-- <iframe height=1000 width=100% src=\"https://www.novipnoad.com/\" frameborder=\"0\" allowfullscreen=1>\n</iframe> -->\n"},{"title":"音乐","date":"2020-06-01T11:11:48.000Z","top_img":"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/desktop.png","aplayer":true,"type":"music","_content":"\n> In case I don't see you ... Good afternoon,good evening,and good night.\n\n<!-- <iframe src=\"//music.163.com/outchain/player?type=0&id=5297089422&auto=0\"\nstyle=\"\nborder:none;\nwidth:100%;\nheight:500px;\n\"></iframe> -->\n\n{% meting \"5297089422\" \"netease\" \"playlist\" \"theme:#494f5c\" \"mutex:true\" \"listmaxheight:340px\" \"preload:auto\" %}\n\n<!-- <iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=450 src=\"//music.163.com/outchain/player?type=0&id=5297089422&auto=1&height=430\"></iframe> -->\n","source":"music/index.md","raw":"---\ntitle: 音乐\ndate: 2020-06-01 19:11:48\ntop_img: https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/desktop.png\naplayer: true\ntype: music\n---\n\n> In case I don't see you ... Good afternoon,good evening,and good night.\n\n<!-- <iframe src=\"//music.163.com/outchain/player?type=0&id=5297089422&auto=0\"\nstyle=\"\nborder:none;\nwidth:100%;\nheight:500px;\n\"></iframe> -->\n\n{% meting \"5297089422\" \"netease\" \"playlist\" \"theme:#494f5c\" \"mutex:true\" \"listmaxheight:340px\" \"preload:auto\" %}\n\n<!-- <iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=450 src=\"//music.163.com/outchain/player?type=0&id=5297089422&auto=1&height=430\"></iframe> -->\n","updated":"2021-07-18T14:30:38.285Z","path":"music/index.html","comments":1,"layout":"page","_id":"cksvxwnmx000cgubqgcd407bj","content":"<blockquote>\n<p>In case I don’t see you … Good afternoon,good evening,and good night.</p>\n</blockquote>\n<!-- <iframe src=\"//music.163.com/outchain/player?type=0&id=5297089422&auto=0\"\nstyle=\"\nborder:none;\nwidth:100%;\nheight:500px;\n\"></iframe> -->\n\n\n    <div id=\"aplayer-CczTECEh\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"5297089422\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#494f5c\"\n    ></div>\n\n<!-- <iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=450 src=\"//music.163.com/outchain/player?type=0&id=5297089422&auto=1&height=430\"></iframe> -->\n","site":{"data":{"link":{"class1":{"class_name":"舍友","link_list":{"1":{"name":"codeAntg","link":"https://blog.csdn.net/weixin_44745147","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/fjh.jpg","descr":"那家刀削面不错","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class2":{"class_name":"致谢","link_list":{"1":{"name":"JerrC","link":"https://immyw.com","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/immyw.png","descr":"今日事,今日毕","width":"1px","style":"solid","color":"#60d0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/hexo.svg","descr":"A fast, simple & powerful blog framework","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class3":{"class_name":"友人","link_list":{"1":{"name":"Chester","link":"http://chesterlds.cn","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/chester.jpg","descr":null,"width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Wangs","link":"https://wangsss.cn/","avatar":"https://wangsss.cn/img/avatar.png","descr":"不疯魔，不成活 ~","width":"1px","style":"solid","color":"#9d9d9d","custom":"link_custom1","time":"4s","namecolor":"0094ff","descolor":"#ff9191"}}}}}},"cover":"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/desktop.png","excerpt":"","more":"<blockquote>\n<p>In case I don’t see you … Good afternoon,good evening,and good night.</p>\n</blockquote>\n<!-- <iframe src=\"//music.163.com/outchain/player?type=0&id=5297089422&auto=0\"\nstyle=\"\nborder:none;\nwidth:100%;\nheight:500px;\n\"></iframe> -->\n\n\n    <div id=\"aplayer-CczTECEh\" class=\"aplayer aplayer-tag-marker meting-tag-marker\"\n         data-id=\"5297089422\" data-server=\"netease\" data-type=\"playlist\" data-mode=\"circulation\" data-autoplay=\"false\" data-mutex=\"true\" data-listmaxheight=\"340px\" data-preload=\"auto\" data-theme=\"#494f5c\"\n    ></div>\n\n<!-- <iframe frameborder=\"no\" border=\"0\" marginwidth=\"0\" marginheight=\"0\" width=330 height=450 src=\"//music.163.com/outchain/player?type=0&id=5297089422&auto=1&height=430\"></iframe> -->\n"},{"title":"河北科技大学","date":"2020-08-24T02:34:21.000Z","top_img":"https://ae01.alicdn.com/kf/U8f245ae012d54c83a9b856da09ad561dl.jpg","_content":"\n<!-- {% gallery %}\n![](https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg)\n![](https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg)\n![](https://i.loli.net/2019/12/25/gEy5Zc1Ai6VuO4N.jpg)\n![](https://i.loli.net/2019/12/25/d6QHbytlSYO4FBG.jpg)\n![](https://i.loli.net/2019/12/25/6nepIJ1xTgufatZ.jpg)\n![](https://i.loli.net/2019/12/25/E7Jvr4eIPwUNmzq.jpg)\n![](https://i.loli.net/2019/12/25/mh19anwBSWIkGlH.jpg)\n![](https://i.loli.net/2019/12/25/2tu9JC8ewpBFagv.jpg)\n{% endgallery %} -->\n\n<div class=\"gallery-group-main\">\n{% galleryGroup '科大四季' '科大四季' '/school/season/' https://ae01.alicdn.com/kf/U073f5a9471884ba5b835a102b644cf4f7.jpg %}\n{% galleryGroup '摄影' '来自好友记录生活的照片' '/school/wangshuai/' https://ae01.alicdn.com/kf/U8f245ae012d54c83a9b856da09ad561dl.jpg %}\n{% galleryGroup '开学花季' '美好时光记录' '/school/blossomseason' https://codehhr.coding.net/p/codehhr/d/kd/git/raw/master/blossomseason/roadsideflowermin.jpg %}\n</div>\n","source":"school/index.md","raw":"---\ntitle: 河北科技大学\ndate: 2020-08-24 10:34:21\ntop_img: https://ae01.alicdn.com/kf/U8f245ae012d54c83a9b856da09ad561dl.jpg\n---\n\n<!-- {% gallery %}\n![](https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg)\n![](https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg)\n![](https://i.loli.net/2019/12/25/gEy5Zc1Ai6VuO4N.jpg)\n![](https://i.loli.net/2019/12/25/d6QHbytlSYO4FBG.jpg)\n![](https://i.loli.net/2019/12/25/6nepIJ1xTgufatZ.jpg)\n![](https://i.loli.net/2019/12/25/E7Jvr4eIPwUNmzq.jpg)\n![](https://i.loli.net/2019/12/25/mh19anwBSWIkGlH.jpg)\n![](https://i.loli.net/2019/12/25/2tu9JC8ewpBFagv.jpg)\n{% endgallery %} -->\n\n<div class=\"gallery-group-main\">\n{% galleryGroup '科大四季' '科大四季' '/school/season/' https://ae01.alicdn.com/kf/U073f5a9471884ba5b835a102b644cf4f7.jpg %}\n{% galleryGroup '摄影' '来自好友记录生活的照片' '/school/wangshuai/' https://ae01.alicdn.com/kf/U8f245ae012d54c83a9b856da09ad561dl.jpg %}\n{% galleryGroup '开学花季' '美好时光记录' '/school/blossomseason' https://codehhr.coding.net/p/codehhr/d/kd/git/raw/master/blossomseason/roadsideflowermin.jpg %}\n</div>\n","updated":"2021-07-01T02:07:18.228Z","path":"school/index.html","comments":1,"layout":"page","_id":"cksvxwnn1000ggubqfajp3jox","content":"<!-- <div class=\"justified-gallery\"><p><img src=\"https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg\"><br><img src=\"https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg\"><br><img src=\"https://i.loli.net/2019/12/25/gEy5Zc1Ai6VuO4N.jpg\"><br><img src=\"https://i.loli.net/2019/12/25/d6QHbytlSYO4FBG.jpg\"><br><img src=\"https://i.loli.net/2019/12/25/6nepIJ1xTgufatZ.jpg\"><br><img src=\"https://i.loli.net/2019/12/25/E7Jvr4eIPwUNmzq.jpg\"><br><img src=\"https://i.loli.net/2019/12/25/mh19anwBSWIkGlH.jpg\"><br><img src=\"https://i.loli.net/2019/12/25/2tu9JC8ewpBFagv.jpg\"></p>\n          </div> -->\n\n<div class=\"gallery-group-main\">\n\n  <figure class=\"gallery-group\">\n  <img class=\"gallery-group-img\" src='https://ae01.alicdn.com/kf/U073f5a9471884ba5b835a102b644cf4f7.jpg' alt=\"Group Image Gallery\">\n  <figcaption>\n  <div class=\"gallery-group-name\">科大四季</div>\n  <p>科大四季</p>\n  <a href='/school/season/'></a>\n  </figcaption>\n  </figure>\n  \n\n  <figure class=\"gallery-group\">\n  <img class=\"gallery-group-img\" src='https://ae01.alicdn.com/kf/U8f245ae012d54c83a9b856da09ad561dl.jpg' alt=\"Group Image Gallery\">\n  <figcaption>\n  <div class=\"gallery-group-name\">摄影</div>\n  <p>来自好友记录生活的照片</p>\n  <a href='/school/wangshuai/'></a>\n  </figcaption>\n  </figure>\n  \n\n  <figure class=\"gallery-group\">\n  <img class=\"gallery-group-img\" src='https://codehhr.coding.net/p/codehhr/d/kd/git/raw/master/blossomseason/roadsideflowermin.jpg' alt=\"Group Image Gallery\">\n  <figcaption>\n  <div class=\"gallery-group-name\">开学花季</div>\n  <p>美好时光记录</p>\n  <a href='/school/blossomseason'></a>\n  </figcaption>\n  </figure>\n  \n</div>\n","site":{"data":{"link":{"class1":{"class_name":"舍友","link_list":{"1":{"name":"codeAntg","link":"https://blog.csdn.net/weixin_44745147","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/fjh.jpg","descr":"那家刀削面不错","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class2":{"class_name":"致谢","link_list":{"1":{"name":"JerrC","link":"https://immyw.com","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/immyw.png","descr":"今日事,今日毕","width":"1px","style":"solid","color":"#60d0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/hexo.svg","descr":"A fast, simple & powerful blog framework","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class3":{"class_name":"友人","link_list":{"1":{"name":"Chester","link":"http://chesterlds.cn","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/chester.jpg","descr":null,"width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Wangs","link":"https://wangsss.cn/","avatar":"https://wangsss.cn/img/avatar.png","descr":"不疯魔，不成活 ~","width":"1px","style":"solid","color":"#9d9d9d","custom":"link_custom1","time":"4s","namecolor":"0094ff","descolor":"#ff9191"}}}}}},"cover":"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/desktop.png","excerpt":"","more":"<!-- <div class=\"justified-gallery\"><p><img src=\"https://i.loli.net/2019/12/25/Fze9jchtnyJXMHN.jpg\"><br><img src=\"https://i.loli.net/2019/12/25/ryLVePaqkYm4TEK.jpg\"><br><img src=\"https://i.loli.net/2019/12/25/gEy5Zc1Ai6VuO4N.jpg\"><br><img src=\"https://i.loli.net/2019/12/25/d6QHbytlSYO4FBG.jpg\"><br><img src=\"https://i.loli.net/2019/12/25/6nepIJ1xTgufatZ.jpg\"><br><img src=\"https://i.loli.net/2019/12/25/E7Jvr4eIPwUNmzq.jpg\"><br><img src=\"https://i.loli.net/2019/12/25/mh19anwBSWIkGlH.jpg\"><br><img src=\"https://i.loli.net/2019/12/25/2tu9JC8ewpBFagv.jpg\"></p>\n          </div> -->\n\n<div class=\"gallery-group-main\">\n\n  <figure class=\"gallery-group\">\n  <img class=\"gallery-group-img\" src='https://ae01.alicdn.com/kf/U073f5a9471884ba5b835a102b644cf4f7.jpg' alt=\"Group Image Gallery\">\n  <figcaption>\n  <div class=\"gallery-group-name\">科大四季</div>\n  <p>科大四季</p>\n  <a href='/school/season/'></a>\n  </figcaption>\n  </figure>\n  \n\n  <figure class=\"gallery-group\">\n  <img class=\"gallery-group-img\" src='https://ae01.alicdn.com/kf/U8f245ae012d54c83a9b856da09ad561dl.jpg' alt=\"Group Image Gallery\">\n  <figcaption>\n  <div class=\"gallery-group-name\">摄影</div>\n  <p>来自好友记录生活的照片</p>\n  <a href='/school/wangshuai/'></a>\n  </figcaption>\n  </figure>\n  \n\n  <figure class=\"gallery-group\">\n  <img class=\"gallery-group-img\" src='https://codehhr.coding.net/p/codehhr/d/kd/git/raw/master/blossomseason/roadsideflowermin.jpg' alt=\"Group Image Gallery\">\n  <figcaption>\n  <div class=\"gallery-group-name\">开学花季</div>\n  <p>美好时光记录</p>\n  <a href='/school/blossomseason'></a>\n  </figcaption>\n  </figure>\n  \n</div>\n"},{"title":"自言自语","date":"2021-07-18T14:55:18.000Z","_content":"\n<!-- 引用 artitalk -->\n<script src=\"/js/artitalk.js\"></script>\n<!-- 存放说说的容器 -->\n<div id=\"artitalk_main\"></div>\n<script>\nnew Artitalk({\n    appId: '2myWkmEgmx1DpmHIP6PUKano-MdYXbMMI', // Your LeanCloud appId\n    appKey: 'XcJGF4wgO5hYbnBAv4pQLQ4I' // Your LeanCloud appKey\n})\n</script>\n","source":"selftalk/index.md","raw":"---\ntitle: 自言自语\ndate: 2021-07-18 22:55:18\n---\n\n<!-- 引用 artitalk -->\n<script src=\"/js/artitalk.js\"></script>\n<!-- 存放说说的容器 -->\n<div id=\"artitalk_main\"></div>\n<script>\nnew Artitalk({\n    appId: '2myWkmEgmx1DpmHIP6PUKano-MdYXbMMI', // Your LeanCloud appId\n    appKey: 'XcJGF4wgO5hYbnBAv4pQLQ4I' // Your LeanCloud appKey\n})\n</script>\n","updated":"2021-07-25T07:07:23.906Z","path":"selftalk/index.html","comments":1,"layout":"page","_id":"cksvxwnn4000igubqace1bd2o","content":"<!-- 引用 artitalk -->\n<script src=\"/js/artitalk.js\"></script>\n<!-- 存放说说的容器 -->\n<div id=\"artitalk_main\"></div>\n<script>\nnew Artitalk({\n    appId: '2myWkmEgmx1DpmHIP6PUKano-MdYXbMMI', // Your LeanCloud appId\n    appKey: 'XcJGF4wgO5hYbnBAv4pQLQ4I' // Your LeanCloud appKey\n})\n</script>\n","site":{"data":{"link":{"class1":{"class_name":"舍友","link_list":{"1":{"name":"codeAntg","link":"https://blog.csdn.net/weixin_44745147","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/fjh.jpg","descr":"那家刀削面不错","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class2":{"class_name":"致谢","link_list":{"1":{"name":"JerrC","link":"https://immyw.com","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/immyw.png","descr":"今日事,今日毕","width":"1px","style":"solid","color":"#60d0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/hexo.svg","descr":"A fast, simple & powerful blog framework","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class3":{"class_name":"友人","link_list":{"1":{"name":"Chester","link":"http://chesterlds.cn","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/chester.jpg","descr":null,"width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Wangs","link":"https://wangsss.cn/","avatar":"https://wangsss.cn/img/avatar.png","descr":"不疯魔，不成活 ~","width":"1px","style":"solid","color":"#9d9d9d","custom":"link_custom1","time":"4s","namecolor":"0094ff","descolor":"#ff9191"}}}}}},"cover":"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/desktop.png","excerpt":"","more":"<!-- 引用 artitalk -->\n<script src=\"/js/artitalk.js\"></script>\n<!-- 存放说说的容器 -->\n<div id=\"artitalk_main\"></div>\n<script>\nnew Artitalk({\n    appId: '2myWkmEgmx1DpmHIP6PUKano-MdYXbMMI', // Your LeanCloud appId\n    appKey: 'XcJGF4wgO5hYbnBAv4pQLQ4I' // Your LeanCloud appKey\n})\n</script>\n"},{"title":"标签","date":"2020-06-01T11:10:29.000Z","top_img":"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/simplea.jpg","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2020-06-01 19:10:29\ntop_img: https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/simplea.jpg\ntype: tags\n---\n","updated":"2021-05-02T05:39:11.009Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cksvxwnn7000mgubq5b9k8x0n","content":"","site":{"data":{"link":{"class1":{"class_name":"舍友","link_list":{"1":{"name":"codeAntg","link":"https://blog.csdn.net/weixin_44745147","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/fjh.jpg","descr":"那家刀削面不错","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class2":{"class_name":"致谢","link_list":{"1":{"name":"JerrC","link":"https://immyw.com","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/immyw.png","descr":"今日事,今日毕","width":"1px","style":"solid","color":"#60d0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/hexo.svg","descr":"A fast, simple & powerful blog framework","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class3":{"class_name":"友人","link_list":{"1":{"name":"Chester","link":"http://chesterlds.cn","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/chester.jpg","descr":null,"width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Wangs","link":"https://wangsss.cn/","avatar":"https://wangsss.cn/img/avatar.png","descr":"不疯魔，不成活 ~","width":"1px","style":"solid","color":"#9d9d9d","custom":"link_custom1","time":"4s","namecolor":"0094ff","descolor":"#ff9191"}}}}}},"cover":"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/desktop.png","excerpt":"","more":""},{"title":"MyWallpaper","date":"2021-05-03T10:34:49.000Z","_content":"\n{% gallery %}\n![austria.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/austria.jpg)\n![autumn.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/autumn.jpg)\n![autumnlake.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/autumnlake.jpg)\n![background.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/background.jpg)\n![boatinseaa.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/boatinseaa.jpg)\n![boatinseab.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/boatinseab.jpg)\n![cat.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/cat.jpg)\n![catgirl.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/catgirl.jpg)\n![countryside.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/countryside.jpg)\n![countrysidenight.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/countrysidenight.jpg)\n![dark.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/dark.jpg)\n![deepin.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/deepin.jpg)\n![deer.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/deer.jpg)\n![deer1.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/deer1.jpg)\n![deer2.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/deer2.jpg)\n![deer3.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/deer3.jpg)\n![desktop.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/desktop.jpg)\n![desktopa.png](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/desktopa.png)\n![dog.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/dog.jpg)\n![dream.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/dream.jpg)\n![dreaming.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/dreaming.jpg)\n![dreamlandmin.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/dreamlandmin.jpg)\n![duskb.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/duskb.jpg)\n![fa.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/fa.jpg)\n![fb.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/fb.jpg)\n![flower.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/flower.jpg)\n![girl.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/girl.jpg)\n![high-sierra.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/high-sierra.jpg)\n![hugestone.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/hugestone.jpg)\n![i3.png](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/i3.png)\n![ice.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/ice.jpg)\n![icemountain.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/icemountain.jpg)\n![imagine.png](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/imagine.png)\n![japana.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/japana.jpg)\n![leaf.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/leaf.jpg)\n![lion.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/lion.jpg)\n![lock.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/lock.jpg)\n![lost.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/lost.jpg)\n![lovesea.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/lovesea.jpg)\n![man.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/man.jpg)\n![moonsea.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/moonsea.jpg)\n![north.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/north.jpg)\n![pinkmountain.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/pinkmountain.jpg)\n![purpor.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/purpor.jpg)\n![road.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/road.jpg)\n![seasupper.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/seasupper.jpg)\n![seasuppermin.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/seasuppermin.jpg)\n![simplea.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/simplea.jpg)\n![skyman.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/skyman.jpg)\n![space.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/space.jpg)\n![stoneflower.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/stoneflower.jpg)\n![summertime.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/summertime.jpg)\n![supper.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/supper.jpg)\n![townside.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/townside.jpg)\n![us.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/us.jpg)\n![wedding.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/wedding.jpg)\n![work.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/work.jpg)\n![yosemite.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/yosemite.jpg)\n{% endgallery %}\n","source":"wallpaper/index.md","raw":"---\ntitle: MyWallpaper\ndate: 2021-05-03 18:34:49\n---\n\n{% gallery %}\n![austria.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/austria.jpg)\n![autumn.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/autumn.jpg)\n![autumnlake.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/autumnlake.jpg)\n![background.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/background.jpg)\n![boatinseaa.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/boatinseaa.jpg)\n![boatinseab.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/boatinseab.jpg)\n![cat.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/cat.jpg)\n![catgirl.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/catgirl.jpg)\n![countryside.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/countryside.jpg)\n![countrysidenight.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/countrysidenight.jpg)\n![dark.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/dark.jpg)\n![deepin.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/deepin.jpg)\n![deer.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/deer.jpg)\n![deer1.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/deer1.jpg)\n![deer2.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/deer2.jpg)\n![deer3.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/deer3.jpg)\n![desktop.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/desktop.jpg)\n![desktopa.png](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/desktopa.png)\n![dog.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/dog.jpg)\n![dream.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/dream.jpg)\n![dreaming.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/dreaming.jpg)\n![dreamlandmin.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/dreamlandmin.jpg)\n![duskb.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/duskb.jpg)\n![fa.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/fa.jpg)\n![fb.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/fb.jpg)\n![flower.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/flower.jpg)\n![girl.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/girl.jpg)\n![high-sierra.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/high-sierra.jpg)\n![hugestone.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/hugestone.jpg)\n![i3.png](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/i3.png)\n![ice.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/ice.jpg)\n![icemountain.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/icemountain.jpg)\n![imagine.png](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/imagine.png)\n![japana.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/japana.jpg)\n![leaf.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/leaf.jpg)\n![lion.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/lion.jpg)\n![lock.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/lock.jpg)\n![lost.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/lost.jpg)\n![lovesea.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/lovesea.jpg)\n![man.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/man.jpg)\n![moonsea.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/moonsea.jpg)\n![north.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/north.jpg)\n![pinkmountain.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/pinkmountain.jpg)\n![purpor.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/purpor.jpg)\n![road.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/road.jpg)\n![seasupper.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/seasupper.jpg)\n![seasuppermin.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/seasuppermin.jpg)\n![simplea.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/simplea.jpg)\n![skyman.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/skyman.jpg)\n![space.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/space.jpg)\n![stoneflower.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/stoneflower.jpg)\n![summertime.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/summertime.jpg)\n![supper.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/supper.jpg)\n![townside.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/townside.jpg)\n![us.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/us.jpg)\n![wedding.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/wedding.jpg)\n![work.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/work.jpg)\n![yosemite.jpg](https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/yosemite.jpg)\n{% endgallery %}\n","updated":"2021-05-21T00:02:40.912Z","path":"wallpaper/index.html","comments":1,"layout":"page","_id":"cksvxwnn8000pgubq0dd63gdk","content":"<div class=\"justified-gallery\"><p><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/austria.jpg\" alt=\"austria.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/autumn.jpg\" alt=\"autumn.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/autumnlake.jpg\" alt=\"autumnlake.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/background.jpg\" alt=\"background.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/boatinseaa.jpg\" alt=\"boatinseaa.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/boatinseab.jpg\" alt=\"boatinseab.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/cat.jpg\" alt=\"cat.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/catgirl.jpg\" alt=\"catgirl.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/countryside.jpg\" alt=\"countryside.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/countrysidenight.jpg\" alt=\"countrysidenight.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/dark.jpg\" alt=\"dark.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/deepin.jpg\" alt=\"deepin.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/deer.jpg\" alt=\"deer.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/deer1.jpg\" alt=\"deer1.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/deer2.jpg\" alt=\"deer2.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/deer3.jpg\" alt=\"deer3.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/desktop.jpg\" alt=\"desktop.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/desktopa.png\" alt=\"desktopa.png\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/dog.jpg\" alt=\"dog.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/dream.jpg\" alt=\"dream.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/dreaming.jpg\" alt=\"dreaming.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/dreamlandmin.jpg\" alt=\"dreamlandmin.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/duskb.jpg\" alt=\"duskb.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/fa.jpg\" alt=\"fa.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/fb.jpg\" alt=\"fb.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/flower.jpg\" alt=\"flower.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/girl.jpg\" alt=\"girl.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/high-sierra.jpg\" alt=\"high-sierra.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/hugestone.jpg\" alt=\"hugestone.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/i3.png\" alt=\"i3.png\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/ice.jpg\" alt=\"ice.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/icemountain.jpg\" alt=\"icemountain.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/imagine.png\" alt=\"imagine.png\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/japana.jpg\" alt=\"japana.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/leaf.jpg\" alt=\"leaf.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/lion.jpg\" alt=\"lion.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/lock.jpg\" alt=\"lock.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/lost.jpg\" alt=\"lost.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/lovesea.jpg\" alt=\"lovesea.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/man.jpg\" alt=\"man.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/moonsea.jpg\" alt=\"moonsea.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/north.jpg\" alt=\"north.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/pinkmountain.jpg\" alt=\"pinkmountain.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/purpor.jpg\" alt=\"purpor.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/road.jpg\" alt=\"road.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/seasupper.jpg\" alt=\"seasupper.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/seasuppermin.jpg\" alt=\"seasuppermin.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/simplea.jpg\" alt=\"simplea.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/skyman.jpg\" alt=\"skyman.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/space.jpg\" alt=\"space.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/stoneflower.jpg\" alt=\"stoneflower.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/summertime.jpg\" alt=\"summertime.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/supper.jpg\" alt=\"supper.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/townside.jpg\" alt=\"townside.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/us.jpg\" alt=\"us.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/wedding.jpg\" alt=\"wedding.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/work.jpg\" alt=\"work.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/yosemite.jpg\" alt=\"yosemite.jpg\"></p>\n          </div>\n","site":{"data":{"link":{"class1":{"class_name":"舍友","link_list":{"1":{"name":"codeAntg","link":"https://blog.csdn.net/weixin_44745147","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/fjh.jpg","descr":"那家刀削面不错","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class2":{"class_name":"致谢","link_list":{"1":{"name":"JerrC","link":"https://immyw.com","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/immyw.png","descr":"今日事,今日毕","width":"1px","style":"solid","color":"#60d0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/hexo.svg","descr":"A fast, simple & powerful blog framework","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class3":{"class_name":"友人","link_list":{"1":{"name":"Chester","link":"http://chesterlds.cn","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/chester.jpg","descr":null,"width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Wangs","link":"https://wangsss.cn/","avatar":"https://wangsss.cn/img/avatar.png","descr":"不疯魔，不成活 ~","width":"1px","style":"solid","color":"#9d9d9d","custom":"link_custom1","time":"4s","namecolor":"0094ff","descolor":"#ff9191"}}}}}},"cover":"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/desktop.png","excerpt":"","more":"<div class=\"justified-gallery\"><p><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/austria.jpg\" alt=\"austria.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/autumn.jpg\" alt=\"autumn.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/autumnlake.jpg\" alt=\"autumnlake.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/background.jpg\" alt=\"background.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/boatinseaa.jpg\" alt=\"boatinseaa.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/boatinseab.jpg\" alt=\"boatinseab.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/cat.jpg\" alt=\"cat.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/catgirl.jpg\" alt=\"catgirl.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/countryside.jpg\" alt=\"countryside.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/countrysidenight.jpg\" alt=\"countrysidenight.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/dark.jpg\" alt=\"dark.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/deepin.jpg\" alt=\"deepin.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/deer.jpg\" alt=\"deer.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/deer1.jpg\" alt=\"deer1.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/deer2.jpg\" alt=\"deer2.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/deer3.jpg\" alt=\"deer3.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/desktop.jpg\" alt=\"desktop.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/desktopa.png\" alt=\"desktopa.png\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/dog.jpg\" alt=\"dog.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/dream.jpg\" alt=\"dream.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/dreaming.jpg\" alt=\"dreaming.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/dreamlandmin.jpg\" alt=\"dreamlandmin.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/duskb.jpg\" alt=\"duskb.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/fa.jpg\" alt=\"fa.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/fb.jpg\" alt=\"fb.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/flower.jpg\" alt=\"flower.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/girl.jpg\" alt=\"girl.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/high-sierra.jpg\" alt=\"high-sierra.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/hugestone.jpg\" alt=\"hugestone.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/i3.png\" alt=\"i3.png\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/ice.jpg\" alt=\"ice.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/icemountain.jpg\" alt=\"icemountain.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/imagine.png\" alt=\"imagine.png\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/japana.jpg\" alt=\"japana.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/leaf.jpg\" alt=\"leaf.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/lion.jpg\" alt=\"lion.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/lock.jpg\" alt=\"lock.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/lost.jpg\" alt=\"lost.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/lovesea.jpg\" alt=\"lovesea.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/man.jpg\" alt=\"man.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/moonsea.jpg\" alt=\"moonsea.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/north.jpg\" alt=\"north.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/pinkmountain.jpg\" alt=\"pinkmountain.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/purpor.jpg\" alt=\"purpor.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/road.jpg\" alt=\"road.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/seasupper.jpg\" alt=\"seasupper.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/seasuppermin.jpg\" alt=\"seasuppermin.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/simplea.jpg\" alt=\"simplea.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/skyman.jpg\" alt=\"skyman.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/space.jpg\" alt=\"space.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/stoneflower.jpg\" alt=\"stoneflower.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/summertime.jpg\" alt=\"summertime.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/supper.jpg\" alt=\"supper.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/townside.jpg\" alt=\"townside.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/us.jpg\" alt=\"us.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/wedding.jpg\" alt=\"wedding.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/work.jpg\" alt=\"work.jpg\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/yosemite.jpg\" alt=\"yosemite.jpg\"></p>\n          </div>\n"},{"title":"开 学 花 季","top_img":"https://ae01.alicdn.com/kf/U8f245ae012d54c83a9b856da09ad561dl.jpg","date":"2020-10-24T02:34:21.000Z","_content":"\n# 因为图片资源比较大 , 请稍等待 ~\n\n{% gallery %}\n![舍友](https://codehhr.coding.net/p/codehhr/d/kd/git/raw/master/blossomseason/fjh.jpg)\n![IMG_20210403_152801](https://codehhr.coding.net/p/codehhr/d/kd/git/raw/master/blossomseason/IMG_20210403_152801.jpg)\n![IMG_20210403_152828](https://codehhr.coding.net/p/codehhr/d/kd/git/raw/master/blossomseason/IMG_20210403_152828_1.jpg)\n![IMG_20210403_153247](https://codehhr.coding.net/p/codehhr/d/kd/git/raw/master/blossomseason/IMG_20210403_153247.jpg)\n![IMG_20210403_153309](https://codehhr.coding.net/p/codehhr/d/kd/git/raw/master/blossomseason/IMG_20210403_153309.jpg)\n![IMG_20210403_153353](https://codehhr.coding.net/p/codehhr/d/kd/git/raw/master/blossomseason/IMG_20210403_153353.jpg)\n![IMG_20210403_154807](https://codehhr.coding.net/p/codehhr/d/kd/git/raw/master/blossomseason/IMG_20210403_154807.jpg)\n![IMG_20210403_155046](https://codehhr.coding.net/p/codehhr/d/kd/git/raw/master/blossomseason/IMG_20210403_155046.jpg)\n![IMG_20210403_155056](https://codehhr.coding.net/p/codehhr/d/kd/git/raw/master/blossomseason/IMG_20210403_155056.jpg)\n![IMG_20210403_155228](https://codehhr.coding.net/p/codehhr/d/kd/git/raw/master/blossomseason/IMG_20210403_155228.jpg)\n![IMG_20210403_155824](https://codehhr.coding.net/p/codehhr/d/kd/git/raw/master/blossomseason/IMG_20210403_155824.jpg)\n![IMG_20210403_155915](https://codehhr.coding.net/p/codehhr/d/kd/git/raw/master/blossomseason/IMG_20210403_155915.jpg)\n![学校东面路上](https://codehhr.coding.net/p/codehhr/d/kd/git/raw/master/blossomseason/roadsideflower.jpg)\n{% endgallery %}\n\n# The_End\n","source":"school/blossomseason/index.md","raw":"---\ntitle: 开 学 花 季\ntop_img: https://ae01.alicdn.com/kf/U8f245ae012d54c83a9b856da09ad561dl.jpg\ndate: 2020-10-24 10:34:21\n---\n\n# 因为图片资源比较大 , 请稍等待 ~\n\n{% gallery %}\n![舍友](https://codehhr.coding.net/p/codehhr/d/kd/git/raw/master/blossomseason/fjh.jpg)\n![IMG_20210403_152801](https://codehhr.coding.net/p/codehhr/d/kd/git/raw/master/blossomseason/IMG_20210403_152801.jpg)\n![IMG_20210403_152828](https://codehhr.coding.net/p/codehhr/d/kd/git/raw/master/blossomseason/IMG_20210403_152828_1.jpg)\n![IMG_20210403_153247](https://codehhr.coding.net/p/codehhr/d/kd/git/raw/master/blossomseason/IMG_20210403_153247.jpg)\n![IMG_20210403_153309](https://codehhr.coding.net/p/codehhr/d/kd/git/raw/master/blossomseason/IMG_20210403_153309.jpg)\n![IMG_20210403_153353](https://codehhr.coding.net/p/codehhr/d/kd/git/raw/master/blossomseason/IMG_20210403_153353.jpg)\n![IMG_20210403_154807](https://codehhr.coding.net/p/codehhr/d/kd/git/raw/master/blossomseason/IMG_20210403_154807.jpg)\n![IMG_20210403_155046](https://codehhr.coding.net/p/codehhr/d/kd/git/raw/master/blossomseason/IMG_20210403_155046.jpg)\n![IMG_20210403_155056](https://codehhr.coding.net/p/codehhr/d/kd/git/raw/master/blossomseason/IMG_20210403_155056.jpg)\n![IMG_20210403_155228](https://codehhr.coding.net/p/codehhr/d/kd/git/raw/master/blossomseason/IMG_20210403_155228.jpg)\n![IMG_20210403_155824](https://codehhr.coding.net/p/codehhr/d/kd/git/raw/master/blossomseason/IMG_20210403_155824.jpg)\n![IMG_20210403_155915](https://codehhr.coding.net/p/codehhr/d/kd/git/raw/master/blossomseason/IMG_20210403_155915.jpg)\n![学校东面路上](https://codehhr.coding.net/p/codehhr/d/kd/git/raw/master/blossomseason/roadsideflower.jpg)\n{% endgallery %}\n\n# The_End\n","updated":"2021-07-18T05:49:27.495Z","path":"school/blossomseason/index.html","comments":1,"layout":"page","_id":"cksvxwnna000ugubqbwgd2d1y","content":"<h1 id=\"因为图片资源比较大-请稍等待\"><a href=\"#因为图片资源比较大-请稍等待\" class=\"headerlink\" title=\"因为图片资源比较大 , 请稍等待 ~\"></a>因为图片资源比较大 , 请稍等待 ~</h1><div class=\"justified-gallery\"><p><img src=\"https://codehhr.coding.net/p/codehhr/d/kd/git/raw/master/blossomseason/fjh.jpg\" alt=\"舍友\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/kd/git/raw/master/blossomseason/IMG_20210403_152801.jpg\" alt=\"IMG_20210403_152801\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/kd/git/raw/master/blossomseason/IMG_20210403_152828_1.jpg\" alt=\"IMG_20210403_152828\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/kd/git/raw/master/blossomseason/IMG_20210403_153247.jpg\" alt=\"IMG_20210403_153247\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/kd/git/raw/master/blossomseason/IMG_20210403_153309.jpg\" alt=\"IMG_20210403_153309\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/kd/git/raw/master/blossomseason/IMG_20210403_153353.jpg\" alt=\"IMG_20210403_153353\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/kd/git/raw/master/blossomseason/IMG_20210403_154807.jpg\" alt=\"IMG_20210403_154807\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/kd/git/raw/master/blossomseason/IMG_20210403_155046.jpg\" alt=\"IMG_20210403_155046\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/kd/git/raw/master/blossomseason/IMG_20210403_155056.jpg\" alt=\"IMG_20210403_155056\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/kd/git/raw/master/blossomseason/IMG_20210403_155228.jpg\" alt=\"IMG_20210403_155228\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/kd/git/raw/master/blossomseason/IMG_20210403_155824.jpg\" alt=\"IMG_20210403_155824\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/kd/git/raw/master/blossomseason/IMG_20210403_155915.jpg\" alt=\"IMG_20210403_155915\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/kd/git/raw/master/blossomseason/roadsideflower.jpg\" alt=\"学校东面路上\"></p>\n          </div>\n\n<h1 id=\"The-End\"><a href=\"#The-End\" class=\"headerlink\" title=\"The_End\"></a>The_End</h1>","site":{"data":{"link":{"class1":{"class_name":"舍友","link_list":{"1":{"name":"codeAntg","link":"https://blog.csdn.net/weixin_44745147","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/fjh.jpg","descr":"那家刀削面不错","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class2":{"class_name":"致谢","link_list":{"1":{"name":"JerrC","link":"https://immyw.com","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/immyw.png","descr":"今日事,今日毕","width":"1px","style":"solid","color":"#60d0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/hexo.svg","descr":"A fast, simple & powerful blog framework","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class3":{"class_name":"友人","link_list":{"1":{"name":"Chester","link":"http://chesterlds.cn","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/chester.jpg","descr":null,"width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Wangs","link":"https://wangsss.cn/","avatar":"https://wangsss.cn/img/avatar.png","descr":"不疯魔，不成活 ~","width":"1px","style":"solid","color":"#9d9d9d","custom":"link_custom1","time":"4s","namecolor":"0094ff","descolor":"#ff9191"}}}}}},"cover":"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/desktop.png","excerpt":"","more":"<h1 id=\"因为图片资源比较大-请稍等待\"><a href=\"#因为图片资源比较大-请稍等待\" class=\"headerlink\" title=\"因为图片资源比较大 , 请稍等待 ~\"></a>因为图片资源比较大 , 请稍等待 ~</h1><div class=\"justified-gallery\"><p><img src=\"https://codehhr.coding.net/p/codehhr/d/kd/git/raw/master/blossomseason/fjh.jpg\" alt=\"舍友\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/kd/git/raw/master/blossomseason/IMG_20210403_152801.jpg\" alt=\"IMG_20210403_152801\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/kd/git/raw/master/blossomseason/IMG_20210403_152828_1.jpg\" alt=\"IMG_20210403_152828\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/kd/git/raw/master/blossomseason/IMG_20210403_153247.jpg\" alt=\"IMG_20210403_153247\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/kd/git/raw/master/blossomseason/IMG_20210403_153309.jpg\" alt=\"IMG_20210403_153309\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/kd/git/raw/master/blossomseason/IMG_20210403_153353.jpg\" alt=\"IMG_20210403_153353\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/kd/git/raw/master/blossomseason/IMG_20210403_154807.jpg\" alt=\"IMG_20210403_154807\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/kd/git/raw/master/blossomseason/IMG_20210403_155046.jpg\" alt=\"IMG_20210403_155046\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/kd/git/raw/master/blossomseason/IMG_20210403_155056.jpg\" alt=\"IMG_20210403_155056\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/kd/git/raw/master/blossomseason/IMG_20210403_155228.jpg\" alt=\"IMG_20210403_155228\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/kd/git/raw/master/blossomseason/IMG_20210403_155824.jpg\" alt=\"IMG_20210403_155824\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/kd/git/raw/master/blossomseason/IMG_20210403_155915.jpg\" alt=\"IMG_20210403_155915\"><br><img src=\"https://codehhr.coding.net/p/codehhr/d/kd/git/raw/master/blossomseason/roadsideflower.jpg\" alt=\"学校东面路上\"></p>\n          </div>\n\n<h1 id=\"The-End\"><a href=\"#The-End\" class=\"headerlink\" title=\"The_End\"></a>The_End</h1>"},{"title":"科 大 夜 晚","top_img":"https://ae01.alicdn.com/kf/U8f245ae012d54c83a9b856da09ad561dl.jpg","date":"2020-10-24T02:34:24.000Z","_content":"\n{% gallery %}\n\n{% endgallery %}\n","source":"school/night/index.md","raw":"---\ntitle: 科 大 夜 晚\ntop_img: https://ae01.alicdn.com/kf/U8f245ae012d54c83a9b856da09ad561dl.jpg\ndate: 2020-10-24 10:34:24\n---\n\n{% gallery %}\n\n{% endgallery %}\n","updated":"2021-06-26T12:30:57.243Z","path":"school/night/index.html","comments":1,"layout":"page","_id":"cksvxwnnb000wgubqg6f06dmu","content":"<div class=\"justified-gallery\">\n          </div>\n","site":{"data":{"link":{"class1":{"class_name":"舍友","link_list":{"1":{"name":"codeAntg","link":"https://blog.csdn.net/weixin_44745147","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/fjh.jpg","descr":"那家刀削面不错","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class2":{"class_name":"致谢","link_list":{"1":{"name":"JerrC","link":"https://immyw.com","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/immyw.png","descr":"今日事,今日毕","width":"1px","style":"solid","color":"#60d0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/hexo.svg","descr":"A fast, simple & powerful blog framework","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class3":{"class_name":"友人","link_list":{"1":{"name":"Chester","link":"http://chesterlds.cn","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/chester.jpg","descr":null,"width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Wangs","link":"https://wangsss.cn/","avatar":"https://wangsss.cn/img/avatar.png","descr":"不疯魔，不成活 ~","width":"1px","style":"solid","color":"#9d9d9d","custom":"link_custom1","time":"4s","namecolor":"0094ff","descolor":"#ff9191"}}}}}},"cover":"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/desktop.png","excerpt":"","more":"<div class=\"justified-gallery\">\n          </div>\n"},{"title":"科 大 四 季","top_img":"https://ae01.alicdn.com/kf/U8f245ae012d54c83a9b856da09ad561dl.jpg","date":"2020-10-24T02:34:21.000Z","_content":"\n<!-- # [科大四季](#科大四季) | [科大冬天](#科大冬天) | [夜间科大](#夜间科大)\n\n# 科大四季 -->\n\n{% gallery %}\n\n![a](https://codehhr.gitee.io/kd/mine/a.jpg)\n![b](https://codehhr.gitee.io/kd/mine/b.jpg)\n![aa](https://codehhr.gitee.io/kd/mine/aa.jpg)\n![ab](https://codehhr.gitee.io/kd/mine/ab.jpg)\n![ac](https://codehhr.gitee.io/kd/mine/ac.jpg)\n![ad](https://codehhr.gitee.io/kd/mine/ad.jpg)\n![ae](https://codehhr.gitee.io/kd/mine/ae.jpg)\n![af](https://codehhr.gitee.io/kd/mine/af.jpg)\n![ag](https://codehhr.gitee.io/kd/mine/ag.jpg)\n![c](https://codehhr.gitee.io/kd/mine/c.jpg)\n![autumn](https://codehhr.gitee.io/kd/mine/autumn.jpg)\n![d](https://codehhr.gitee.io/kd/mine/d.jpg)\n![dusk](https://codehhr.gitee.io/kd/mine/dusk.jpg)\n![e](https://codehhr.gitee.io/kd/mine/e.jpg)\n![f](https://codehhr.gitee.io/kd/mine/f.jpg)\n![g](https://codehhr.gitee.io/kd/mine/g.jpg)\n![h](https://codehhr.gitee.io/kd/mine/h.jpg)\n![i](https://codehhr.gitee.io/kd/mine/i.jpg)\n![j](https://codehhr.gitee.io/kd/mine/j.jpg)\n![k](https://codehhr.gitee.io/kd/mine/k.jpg)\n![l](https://codehhr.gitee.io/kd/mine/l.jpg)\n![m](https://codehhr.gitee.io/kd/mine/m.jpg)\n![n](https://codehhr.gitee.io/kd/mine/n.jpg)\n![p](https://codehhr.gitee.io/kd/mine/p.jpg)\n![q](https://codehhr.gitee.io/kd/mine/q.jpg)\n![fall](https://codehhr.gitee.io/kd/mine/fall.jpg)\n![r](https://codehhr.gitee.io/kd/mine/r.jpg)\n![s](https://codehhr.gitee.io/kd/mine/s.jpg)\n![t](https://codehhr.gitee.io/kd/mine/t.jpg)\n![w](https://codehhr.gitee.io/kd/mine/w.jpg)\n![x](https://codehhr.gitee.io/kd/mine/x.jpg)\n![y](https://codehhr.gitee.io/kd/mine/y.jpg)\n![z](https://codehhr.gitee.io/kd/mine/z.jpg)\n![fa](https://codehhr.gitee.io/kd/mine/fa.jpg)\n![fb](https://codehhr.gitee.io/kd/mine/fb.jpg)\n![fc](https://codehhr.gitee.io/kd/mine/fc.jpg)\n![fd](https://codehhr.gitee.io/kd/mine/fd.jpg)\n![fe](https://codehhr.gitee.io/kd/mine/fe.jpg)\n![ff](https://codehhr.gitee.io/kd/mine/ff.jpg)\n![fg](https://codehhr.gitee.io/kd/mine/fg.jpg)\n![fh](https://codehhr.gitee.io/kd/mine/fh.jpg)\n![fi](https://codehhr.gitee.io/kd/mine/fi.jpg)\n\n<!-- # [科大四季](#科大四季) | [科大冬天](#科大冬天) | [夜间科大](#夜间科大)\n\n# 科大冬天 -->\n\n![u](https://codehhr.gitee.io/kd/mine/u.jpg)\n![v](https://codehhr.gitee.io/kd/mine/v.jpg)\n![fj](https://codehhr.gitee.io/kd/mine/fj.jpg)\n![fk](https://codehhr.gitee.io/kd/mine/fk.jpg)\n![fl](https://codehhr.gitee.io/kd/mine/fl.jpg)\n![fm](https://codehhr.gitee.io/kd/mine/fm.jpg)\n![fn](https://codehhr.gitee.io/kd/mine/fn.jpg)\n\n<!-- # [科大四季](#科大四季) | [科大冬天](#科大冬天) | [夜间科大](#夜间科大)\n\n# 夜间科大 -->\n\n![ah](https://codehhr.gitee.io/kd/mine/ah.jpg)\n\n{% endgallery %}\n\n# The_End\n","source":"school/season/index.md","raw":"---\ntitle: 科 大 四 季\ntop_img: https://ae01.alicdn.com/kf/U8f245ae012d54c83a9b856da09ad561dl.jpg\ndate: 2020-10-24 10:34:21\n---\n\n<!-- # [科大四季](#科大四季) | [科大冬天](#科大冬天) | [夜间科大](#夜间科大)\n\n# 科大四季 -->\n\n{% gallery %}\n\n![a](https://codehhr.gitee.io/kd/mine/a.jpg)\n![b](https://codehhr.gitee.io/kd/mine/b.jpg)\n![aa](https://codehhr.gitee.io/kd/mine/aa.jpg)\n![ab](https://codehhr.gitee.io/kd/mine/ab.jpg)\n![ac](https://codehhr.gitee.io/kd/mine/ac.jpg)\n![ad](https://codehhr.gitee.io/kd/mine/ad.jpg)\n![ae](https://codehhr.gitee.io/kd/mine/ae.jpg)\n![af](https://codehhr.gitee.io/kd/mine/af.jpg)\n![ag](https://codehhr.gitee.io/kd/mine/ag.jpg)\n![c](https://codehhr.gitee.io/kd/mine/c.jpg)\n![autumn](https://codehhr.gitee.io/kd/mine/autumn.jpg)\n![d](https://codehhr.gitee.io/kd/mine/d.jpg)\n![dusk](https://codehhr.gitee.io/kd/mine/dusk.jpg)\n![e](https://codehhr.gitee.io/kd/mine/e.jpg)\n![f](https://codehhr.gitee.io/kd/mine/f.jpg)\n![g](https://codehhr.gitee.io/kd/mine/g.jpg)\n![h](https://codehhr.gitee.io/kd/mine/h.jpg)\n![i](https://codehhr.gitee.io/kd/mine/i.jpg)\n![j](https://codehhr.gitee.io/kd/mine/j.jpg)\n![k](https://codehhr.gitee.io/kd/mine/k.jpg)\n![l](https://codehhr.gitee.io/kd/mine/l.jpg)\n![m](https://codehhr.gitee.io/kd/mine/m.jpg)\n![n](https://codehhr.gitee.io/kd/mine/n.jpg)\n![p](https://codehhr.gitee.io/kd/mine/p.jpg)\n![q](https://codehhr.gitee.io/kd/mine/q.jpg)\n![fall](https://codehhr.gitee.io/kd/mine/fall.jpg)\n![r](https://codehhr.gitee.io/kd/mine/r.jpg)\n![s](https://codehhr.gitee.io/kd/mine/s.jpg)\n![t](https://codehhr.gitee.io/kd/mine/t.jpg)\n![w](https://codehhr.gitee.io/kd/mine/w.jpg)\n![x](https://codehhr.gitee.io/kd/mine/x.jpg)\n![y](https://codehhr.gitee.io/kd/mine/y.jpg)\n![z](https://codehhr.gitee.io/kd/mine/z.jpg)\n![fa](https://codehhr.gitee.io/kd/mine/fa.jpg)\n![fb](https://codehhr.gitee.io/kd/mine/fb.jpg)\n![fc](https://codehhr.gitee.io/kd/mine/fc.jpg)\n![fd](https://codehhr.gitee.io/kd/mine/fd.jpg)\n![fe](https://codehhr.gitee.io/kd/mine/fe.jpg)\n![ff](https://codehhr.gitee.io/kd/mine/ff.jpg)\n![fg](https://codehhr.gitee.io/kd/mine/fg.jpg)\n![fh](https://codehhr.gitee.io/kd/mine/fh.jpg)\n![fi](https://codehhr.gitee.io/kd/mine/fi.jpg)\n\n<!-- # [科大四季](#科大四季) | [科大冬天](#科大冬天) | [夜间科大](#夜间科大)\n\n# 科大冬天 -->\n\n![u](https://codehhr.gitee.io/kd/mine/u.jpg)\n![v](https://codehhr.gitee.io/kd/mine/v.jpg)\n![fj](https://codehhr.gitee.io/kd/mine/fj.jpg)\n![fk](https://codehhr.gitee.io/kd/mine/fk.jpg)\n![fl](https://codehhr.gitee.io/kd/mine/fl.jpg)\n![fm](https://codehhr.gitee.io/kd/mine/fm.jpg)\n![fn](https://codehhr.gitee.io/kd/mine/fn.jpg)\n\n<!-- # [科大四季](#科大四季) | [科大冬天](#科大冬天) | [夜间科大](#夜间科大)\n\n# 夜间科大 -->\n\n![ah](https://codehhr.gitee.io/kd/mine/ah.jpg)\n\n{% endgallery %}\n\n# The_End\n","updated":"2021-07-23T15:08:25.730Z","path":"school/season/index.html","comments":1,"layout":"page","_id":"cksvxwnnd0010gubqdqvte1hm","content":"<!-- # [科大四季](#科大四季) | [科大冬天](#科大冬天) | [夜间科大](#夜间科大)\n\n# 科大四季 -->\n\n<div class=\"justified-gallery\"><p><img src=\"https://codehhr.gitee.io/kd/mine/a.jpg\" alt=\"a\"><br><img src=\"https://codehhr.gitee.io/kd/mine/b.jpg\" alt=\"b\"><br><img src=\"https://codehhr.gitee.io/kd/mine/aa.jpg\" alt=\"aa\"><br><img src=\"https://codehhr.gitee.io/kd/mine/ab.jpg\" alt=\"ab\"><br><img src=\"https://codehhr.gitee.io/kd/mine/ac.jpg\" alt=\"ac\"><br><img src=\"https://codehhr.gitee.io/kd/mine/ad.jpg\" alt=\"ad\"><br><img src=\"https://codehhr.gitee.io/kd/mine/ae.jpg\" alt=\"ae\"><br><img src=\"https://codehhr.gitee.io/kd/mine/af.jpg\" alt=\"af\"><br><img src=\"https://codehhr.gitee.io/kd/mine/ag.jpg\" alt=\"ag\"><br><img src=\"https://codehhr.gitee.io/kd/mine/c.jpg\" alt=\"c\"><br><img src=\"https://codehhr.gitee.io/kd/mine/autumn.jpg\" alt=\"autumn\"><br><img src=\"https://codehhr.gitee.io/kd/mine/d.jpg\" alt=\"d\"><br><img src=\"https://codehhr.gitee.io/kd/mine/dusk.jpg\" alt=\"dusk\"><br><img src=\"https://codehhr.gitee.io/kd/mine/e.jpg\" alt=\"e\"><br><img src=\"https://codehhr.gitee.io/kd/mine/f.jpg\" alt=\"f\"><br><img src=\"https://codehhr.gitee.io/kd/mine/g.jpg\" alt=\"g\"><br><img src=\"https://codehhr.gitee.io/kd/mine/h.jpg\" alt=\"h\"><br><img src=\"https://codehhr.gitee.io/kd/mine/i.jpg\" alt=\"i\"><br><img src=\"https://codehhr.gitee.io/kd/mine/j.jpg\" alt=\"j\"><br><img src=\"https://codehhr.gitee.io/kd/mine/k.jpg\" alt=\"k\"><br><img src=\"https://codehhr.gitee.io/kd/mine/l.jpg\" alt=\"l\"><br><img src=\"https://codehhr.gitee.io/kd/mine/m.jpg\" alt=\"m\"><br><img src=\"https://codehhr.gitee.io/kd/mine/n.jpg\" alt=\"n\"><br><img src=\"https://codehhr.gitee.io/kd/mine/p.jpg\" alt=\"p\"><br><img src=\"https://codehhr.gitee.io/kd/mine/q.jpg\" alt=\"q\"><br><img src=\"https://codehhr.gitee.io/kd/mine/fall.jpg\" alt=\"fall\"><br><img src=\"https://codehhr.gitee.io/kd/mine/r.jpg\" alt=\"r\"><br><img src=\"https://codehhr.gitee.io/kd/mine/s.jpg\" alt=\"s\"><br><img src=\"https://codehhr.gitee.io/kd/mine/t.jpg\" alt=\"t\"><br><img src=\"https://codehhr.gitee.io/kd/mine/w.jpg\" alt=\"w\"><br><img src=\"https://codehhr.gitee.io/kd/mine/x.jpg\" alt=\"x\"><br><img src=\"https://codehhr.gitee.io/kd/mine/y.jpg\" alt=\"y\"><br><img src=\"https://codehhr.gitee.io/kd/mine/z.jpg\" alt=\"z\"><br><img src=\"https://codehhr.gitee.io/kd/mine/fa.jpg\" alt=\"fa\"><br><img src=\"https://codehhr.gitee.io/kd/mine/fb.jpg\" alt=\"fb\"><br><img src=\"https://codehhr.gitee.io/kd/mine/fc.jpg\" alt=\"fc\"><br><img src=\"https://codehhr.gitee.io/kd/mine/fd.jpg\" alt=\"fd\"><br><img src=\"https://codehhr.gitee.io/kd/mine/fe.jpg\" alt=\"fe\"><br><img src=\"https://codehhr.gitee.io/kd/mine/ff.jpg\" alt=\"ff\"><br><img src=\"https://codehhr.gitee.io/kd/mine/fg.jpg\" alt=\"fg\"><br><img src=\"https://codehhr.gitee.io/kd/mine/fh.jpg\" alt=\"fh\"><br><img src=\"https://codehhr.gitee.io/kd/mine/fi.jpg\" alt=\"fi\"></p><!-- # [科大四季](#科大四季) | [科大冬天](#科大冬天) | [夜间科大](#夜间科大)# 科大冬天 --><p><img src=\"https://codehhr.gitee.io/kd/mine/u.jpg\" alt=\"u\"><br><img src=\"https://codehhr.gitee.io/kd/mine/v.jpg\" alt=\"v\"><br><img src=\"https://codehhr.gitee.io/kd/mine/fj.jpg\" alt=\"fj\"><br><img src=\"https://codehhr.gitee.io/kd/mine/fk.jpg\" alt=\"fk\"><br><img src=\"https://codehhr.gitee.io/kd/mine/fl.jpg\" alt=\"fl\"><br><img src=\"https://codehhr.gitee.io/kd/mine/fm.jpg\" alt=\"fm\"><br><img src=\"https://codehhr.gitee.io/kd/mine/fn.jpg\" alt=\"fn\"></p><!-- # [科大四季](#科大四季) | [科大冬天](#科大冬天) | [夜间科大](#夜间科大)# 夜间科大 --><p><img src=\"https://codehhr.gitee.io/kd/mine/ah.jpg\" alt=\"ah\"></p>\n          </div>\n\n<h1 id=\"The-End\"><a href=\"#The-End\" class=\"headerlink\" title=\"The_End\"></a>The_End</h1>","site":{"data":{"link":{"class1":{"class_name":"舍友","link_list":{"1":{"name":"codeAntg","link":"https://blog.csdn.net/weixin_44745147","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/fjh.jpg","descr":"那家刀削面不错","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class2":{"class_name":"致谢","link_list":{"1":{"name":"JerrC","link":"https://immyw.com","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/immyw.png","descr":"今日事,今日毕","width":"1px","style":"solid","color":"#60d0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/hexo.svg","descr":"A fast, simple & powerful blog framework","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class3":{"class_name":"友人","link_list":{"1":{"name":"Chester","link":"http://chesterlds.cn","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/chester.jpg","descr":null,"width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Wangs","link":"https://wangsss.cn/","avatar":"https://wangsss.cn/img/avatar.png","descr":"不疯魔，不成活 ~","width":"1px","style":"solid","color":"#9d9d9d","custom":"link_custom1","time":"4s","namecolor":"0094ff","descolor":"#ff9191"}}}}}},"cover":"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/desktop.png","excerpt":"","more":"<!-- # [科大四季](#科大四季) | [科大冬天](#科大冬天) | [夜间科大](#夜间科大)\n\n# 科大四季 -->\n\n<div class=\"justified-gallery\"><p><img src=\"https://codehhr.gitee.io/kd/mine/a.jpg\" alt=\"a\"><br><img src=\"https://codehhr.gitee.io/kd/mine/b.jpg\" alt=\"b\"><br><img src=\"https://codehhr.gitee.io/kd/mine/aa.jpg\" alt=\"aa\"><br><img src=\"https://codehhr.gitee.io/kd/mine/ab.jpg\" alt=\"ab\"><br><img src=\"https://codehhr.gitee.io/kd/mine/ac.jpg\" alt=\"ac\"><br><img src=\"https://codehhr.gitee.io/kd/mine/ad.jpg\" alt=\"ad\"><br><img src=\"https://codehhr.gitee.io/kd/mine/ae.jpg\" alt=\"ae\"><br><img src=\"https://codehhr.gitee.io/kd/mine/af.jpg\" alt=\"af\"><br><img src=\"https://codehhr.gitee.io/kd/mine/ag.jpg\" alt=\"ag\"><br><img src=\"https://codehhr.gitee.io/kd/mine/c.jpg\" alt=\"c\"><br><img src=\"https://codehhr.gitee.io/kd/mine/autumn.jpg\" alt=\"autumn\"><br><img src=\"https://codehhr.gitee.io/kd/mine/d.jpg\" alt=\"d\"><br><img src=\"https://codehhr.gitee.io/kd/mine/dusk.jpg\" alt=\"dusk\"><br><img src=\"https://codehhr.gitee.io/kd/mine/e.jpg\" alt=\"e\"><br><img src=\"https://codehhr.gitee.io/kd/mine/f.jpg\" alt=\"f\"><br><img src=\"https://codehhr.gitee.io/kd/mine/g.jpg\" alt=\"g\"><br><img src=\"https://codehhr.gitee.io/kd/mine/h.jpg\" alt=\"h\"><br><img src=\"https://codehhr.gitee.io/kd/mine/i.jpg\" alt=\"i\"><br><img src=\"https://codehhr.gitee.io/kd/mine/j.jpg\" alt=\"j\"><br><img src=\"https://codehhr.gitee.io/kd/mine/k.jpg\" alt=\"k\"><br><img src=\"https://codehhr.gitee.io/kd/mine/l.jpg\" alt=\"l\"><br><img src=\"https://codehhr.gitee.io/kd/mine/m.jpg\" alt=\"m\"><br><img src=\"https://codehhr.gitee.io/kd/mine/n.jpg\" alt=\"n\"><br><img src=\"https://codehhr.gitee.io/kd/mine/p.jpg\" alt=\"p\"><br><img src=\"https://codehhr.gitee.io/kd/mine/q.jpg\" alt=\"q\"><br><img src=\"https://codehhr.gitee.io/kd/mine/fall.jpg\" alt=\"fall\"><br><img src=\"https://codehhr.gitee.io/kd/mine/r.jpg\" alt=\"r\"><br><img src=\"https://codehhr.gitee.io/kd/mine/s.jpg\" alt=\"s\"><br><img src=\"https://codehhr.gitee.io/kd/mine/t.jpg\" alt=\"t\"><br><img src=\"https://codehhr.gitee.io/kd/mine/w.jpg\" alt=\"w\"><br><img src=\"https://codehhr.gitee.io/kd/mine/x.jpg\" alt=\"x\"><br><img src=\"https://codehhr.gitee.io/kd/mine/y.jpg\" alt=\"y\"><br><img src=\"https://codehhr.gitee.io/kd/mine/z.jpg\" alt=\"z\"><br><img src=\"https://codehhr.gitee.io/kd/mine/fa.jpg\" alt=\"fa\"><br><img src=\"https://codehhr.gitee.io/kd/mine/fb.jpg\" alt=\"fb\"><br><img src=\"https://codehhr.gitee.io/kd/mine/fc.jpg\" alt=\"fc\"><br><img src=\"https://codehhr.gitee.io/kd/mine/fd.jpg\" alt=\"fd\"><br><img src=\"https://codehhr.gitee.io/kd/mine/fe.jpg\" alt=\"fe\"><br><img src=\"https://codehhr.gitee.io/kd/mine/ff.jpg\" alt=\"ff\"><br><img src=\"https://codehhr.gitee.io/kd/mine/fg.jpg\" alt=\"fg\"><br><img src=\"https://codehhr.gitee.io/kd/mine/fh.jpg\" alt=\"fh\"><br><img src=\"https://codehhr.gitee.io/kd/mine/fi.jpg\" alt=\"fi\"></p><!-- # [科大四季](#科大四季) | [科大冬天](#科大冬天) | [夜间科大](#夜间科大)# 科大冬天 --><p><img src=\"https://codehhr.gitee.io/kd/mine/u.jpg\" alt=\"u\"><br><img src=\"https://codehhr.gitee.io/kd/mine/v.jpg\" alt=\"v\"><br><img src=\"https://codehhr.gitee.io/kd/mine/fj.jpg\" alt=\"fj\"><br><img src=\"https://codehhr.gitee.io/kd/mine/fk.jpg\" alt=\"fk\"><br><img src=\"https://codehhr.gitee.io/kd/mine/fl.jpg\" alt=\"fl\"><br><img src=\"https://codehhr.gitee.io/kd/mine/fm.jpg\" alt=\"fm\"><br><img src=\"https://codehhr.gitee.io/kd/mine/fn.jpg\" alt=\"fn\"></p><!-- # [科大四季](#科大四季) | [科大冬天](#科大冬天) | [夜间科大](#夜间科大)# 夜间科大 --><p><img src=\"https://codehhr.gitee.io/kd/mine/ah.jpg\" alt=\"ah\"></p>\n          </div>\n\n<h1 id=\"The-End\"><a href=\"#The-End\" class=\"headerlink\" title=\"The_End\"></a>The_End</h1>"},{"title":"来自好友记录生活的照片","top_img":"https://ae01.alicdn.com/kf/U8f245ae012d54c83a9b856da09ad561dl.jpg","date":"2020-10-24T02:34:21.000Z","_content":"\n## 感谢班长 `帅总` 送来的高清大图\n\n{% gallery %}\n\n![cata](https://codehhr.gitee.io/kd/wangshuai/cata.jpg)\n![catb](https://codehhr.gitee.io/kd/wangshuai/catb.jpg)\n![duck](https://codehhr.gitee.io/kd/wangshuai/duck.jpg)\n![flowera](https://codehhr.gitee.io/kd/wangshuai/flowera.jpg)\n![flowerb](https://codehhr.gitee.io/kd/wangshuai/flowerb.jpg)\n![magpie](https://codehhr.gitee.io/kd/wangshuai/magpie.jpg)\n![gyma](https://codehhr.gitee.io/kd/wangshuai/gyma.jpg)\n![lakea](https://codehhr.gitee.io/kd/wangshuai/lakea.jpg)\n![lakeb](https://codehhr.gitee.io/kd/wangshuai/lakeb.jpg)\n![lakec](https://codehhr.gitee.io/kd/wangshuai/lakec.jpg)\n![laked](https://codehhr.gitee.io/kd/wangshuai/laked.jpg)\n![librarya](https://codehhr.gitee.io/kd/wangshuai/librarya.jpg)\n![libraryb](https://codehhr.gitee.io/kd/wangshuai/libraryb.jpg)\n![libraryc](https://codehhr.gitee.io/kd/wangshuai/libraryc.jpg)\n![duska](https://codehhr.gitee.io/kd/wangshuai/duska.jpg)\n![duskb](https://codehhr.gitee.io/kd/wangshuai/duskb.jpg)\n![duskc](https://codehhr.gitee.io/kd/wangshuai/duskc.jpg)\n![duskd](https://codehhr.gitee.io/kd/wangshuai/duskd.jpg)\n![moon](https://codehhr.gitee.io/kd/wangshuai/moon.jpg)\n![nighta](https://codehhr.gitee.io/kd/wangshuai/nighta.jpg)  \n![nightb](https://codehhr.gitee.io/kd/wangshuai/nightb.jpg)  \n![nightc](https://codehhr.gitee.io/kd/wangshuai/nightc.jpg)  \n![nightd](https://codehhr.gitee.io/kd/wangshuai/nightd.jpg)  \n![nighte](https://codehhr.gitee.io/kd/wangshuai/nighte.jpg)  \n![nightf](https://codehhr.gitee.io/kd/wangshuai/nightf.jpg)  \n![nightg](https://codehhr.gitee.io/kd/wangshuai/nightg.jpg)\n\n{% endgallery %}\n\n# The_End\n","source":"school/wangshuai/index.md","raw":"---\ntitle: 来自好友记录生活的照片\ntop_img: https://ae01.alicdn.com/kf/U8f245ae012d54c83a9b856da09ad561dl.jpg\ndate: 2020-10-24 10:34:21\n---\n\n## 感谢班长 `帅总` 送来的高清大图\n\n{% gallery %}\n\n![cata](https://codehhr.gitee.io/kd/wangshuai/cata.jpg)\n![catb](https://codehhr.gitee.io/kd/wangshuai/catb.jpg)\n![duck](https://codehhr.gitee.io/kd/wangshuai/duck.jpg)\n![flowera](https://codehhr.gitee.io/kd/wangshuai/flowera.jpg)\n![flowerb](https://codehhr.gitee.io/kd/wangshuai/flowerb.jpg)\n![magpie](https://codehhr.gitee.io/kd/wangshuai/magpie.jpg)\n![gyma](https://codehhr.gitee.io/kd/wangshuai/gyma.jpg)\n![lakea](https://codehhr.gitee.io/kd/wangshuai/lakea.jpg)\n![lakeb](https://codehhr.gitee.io/kd/wangshuai/lakeb.jpg)\n![lakec](https://codehhr.gitee.io/kd/wangshuai/lakec.jpg)\n![laked](https://codehhr.gitee.io/kd/wangshuai/laked.jpg)\n![librarya](https://codehhr.gitee.io/kd/wangshuai/librarya.jpg)\n![libraryb](https://codehhr.gitee.io/kd/wangshuai/libraryb.jpg)\n![libraryc](https://codehhr.gitee.io/kd/wangshuai/libraryc.jpg)\n![duska](https://codehhr.gitee.io/kd/wangshuai/duska.jpg)\n![duskb](https://codehhr.gitee.io/kd/wangshuai/duskb.jpg)\n![duskc](https://codehhr.gitee.io/kd/wangshuai/duskc.jpg)\n![duskd](https://codehhr.gitee.io/kd/wangshuai/duskd.jpg)\n![moon](https://codehhr.gitee.io/kd/wangshuai/moon.jpg)\n![nighta](https://codehhr.gitee.io/kd/wangshuai/nighta.jpg)  \n![nightb](https://codehhr.gitee.io/kd/wangshuai/nightb.jpg)  \n![nightc](https://codehhr.gitee.io/kd/wangshuai/nightc.jpg)  \n![nightd](https://codehhr.gitee.io/kd/wangshuai/nightd.jpg)  \n![nighte](https://codehhr.gitee.io/kd/wangshuai/nighte.jpg)  \n![nightf](https://codehhr.gitee.io/kd/wangshuai/nightf.jpg)  \n![nightg](https://codehhr.gitee.io/kd/wangshuai/nightg.jpg)\n\n{% endgallery %}\n\n# The_End\n","updated":"2021-06-26T12:30:34.006Z","path":"school/wangshuai/index.html","comments":1,"layout":"page","_id":"cksvxwnne0013gubq7yjxcxdv","content":"<h2 id=\"感谢班长-帅总-送来的高清大图\"><a href=\"#感谢班长-帅总-送来的高清大图\" class=\"headerlink\" title=\"感谢班长 帅总 送来的高清大图\"></a>感谢班长 <code>帅总</code> 送来的高清大图</h2><div class=\"justified-gallery\"><p><img src=\"https://codehhr.gitee.io/kd/wangshuai/cata.jpg\" alt=\"cata\"><br><img src=\"https://codehhr.gitee.io/kd/wangshuai/catb.jpg\" alt=\"catb\"><br><img src=\"https://codehhr.gitee.io/kd/wangshuai/duck.jpg\" alt=\"duck\"><br><img src=\"https://codehhr.gitee.io/kd/wangshuai/flowera.jpg\" alt=\"flowera\"><br><img src=\"https://codehhr.gitee.io/kd/wangshuai/flowerb.jpg\" alt=\"flowerb\"><br><img src=\"https://codehhr.gitee.io/kd/wangshuai/magpie.jpg\" alt=\"magpie\"><br><img src=\"https://codehhr.gitee.io/kd/wangshuai/gyma.jpg\" alt=\"gyma\"><br><img src=\"https://codehhr.gitee.io/kd/wangshuai/lakea.jpg\" alt=\"lakea\"><br><img src=\"https://codehhr.gitee.io/kd/wangshuai/lakeb.jpg\" alt=\"lakeb\"><br><img src=\"https://codehhr.gitee.io/kd/wangshuai/lakec.jpg\" alt=\"lakec\"><br><img src=\"https://codehhr.gitee.io/kd/wangshuai/laked.jpg\" alt=\"laked\"><br><img src=\"https://codehhr.gitee.io/kd/wangshuai/librarya.jpg\" alt=\"librarya\"><br><img src=\"https://codehhr.gitee.io/kd/wangshuai/libraryb.jpg\" alt=\"libraryb\"><br><img src=\"https://codehhr.gitee.io/kd/wangshuai/libraryc.jpg\" alt=\"libraryc\"><br><img src=\"https://codehhr.gitee.io/kd/wangshuai/duska.jpg\" alt=\"duska\"><br><img src=\"https://codehhr.gitee.io/kd/wangshuai/duskb.jpg\" alt=\"duskb\"><br><img src=\"https://codehhr.gitee.io/kd/wangshuai/duskc.jpg\" alt=\"duskc\"><br><img src=\"https://codehhr.gitee.io/kd/wangshuai/duskd.jpg\" alt=\"duskd\"><br><img src=\"https://codehhr.gitee.io/kd/wangshuai/moon.jpg\" alt=\"moon\"><br><img src=\"https://codehhr.gitee.io/kd/wangshuai/nighta.jpg\" alt=\"nighta\"><br><img src=\"https://codehhr.gitee.io/kd/wangshuai/nightb.jpg\" alt=\"nightb\"><br><img src=\"https://codehhr.gitee.io/kd/wangshuai/nightc.jpg\" alt=\"nightc\"><br><img src=\"https://codehhr.gitee.io/kd/wangshuai/nightd.jpg\" alt=\"nightd\"><br><img src=\"https://codehhr.gitee.io/kd/wangshuai/nighte.jpg\" alt=\"nighte\"><br><img src=\"https://codehhr.gitee.io/kd/wangshuai/nightf.jpg\" alt=\"nightf\"><br><img src=\"https://codehhr.gitee.io/kd/wangshuai/nightg.jpg\" alt=\"nightg\"></p>\n          </div>\n\n<h1 id=\"The-End\"><a href=\"#The-End\" class=\"headerlink\" title=\"The_End\"></a>The_End</h1>","site":{"data":{"link":{"class1":{"class_name":"舍友","link_list":{"1":{"name":"codeAntg","link":"https://blog.csdn.net/weixin_44745147","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/fjh.jpg","descr":"那家刀削面不错","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class2":{"class_name":"致谢","link_list":{"1":{"name":"JerrC","link":"https://immyw.com","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/immyw.png","descr":"今日事,今日毕","width":"1px","style":"solid","color":"#60d0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/hexo.svg","descr":"A fast, simple & powerful blog framework","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class3":{"class_name":"友人","link_list":{"1":{"name":"Chester","link":"http://chesterlds.cn","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/chester.jpg","descr":null,"width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Wangs","link":"https://wangsss.cn/","avatar":"https://wangsss.cn/img/avatar.png","descr":"不疯魔，不成活 ~","width":"1px","style":"solid","color":"#9d9d9d","custom":"link_custom1","time":"4s","namecolor":"0094ff","descolor":"#ff9191"}}}}}},"cover":"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/desktop.png","excerpt":"","more":"<h2 id=\"感谢班长-帅总-送来的高清大图\"><a href=\"#感谢班长-帅总-送来的高清大图\" class=\"headerlink\" title=\"感谢班长 帅总 送来的高清大图\"></a>感谢班长 <code>帅总</code> 送来的高清大图</h2><div class=\"justified-gallery\"><p><img src=\"https://codehhr.gitee.io/kd/wangshuai/cata.jpg\" alt=\"cata\"><br><img src=\"https://codehhr.gitee.io/kd/wangshuai/catb.jpg\" alt=\"catb\"><br><img src=\"https://codehhr.gitee.io/kd/wangshuai/duck.jpg\" alt=\"duck\"><br><img src=\"https://codehhr.gitee.io/kd/wangshuai/flowera.jpg\" alt=\"flowera\"><br><img src=\"https://codehhr.gitee.io/kd/wangshuai/flowerb.jpg\" alt=\"flowerb\"><br><img src=\"https://codehhr.gitee.io/kd/wangshuai/magpie.jpg\" alt=\"magpie\"><br><img src=\"https://codehhr.gitee.io/kd/wangshuai/gyma.jpg\" alt=\"gyma\"><br><img src=\"https://codehhr.gitee.io/kd/wangshuai/lakea.jpg\" alt=\"lakea\"><br><img src=\"https://codehhr.gitee.io/kd/wangshuai/lakeb.jpg\" alt=\"lakeb\"><br><img src=\"https://codehhr.gitee.io/kd/wangshuai/lakec.jpg\" alt=\"lakec\"><br><img src=\"https://codehhr.gitee.io/kd/wangshuai/laked.jpg\" alt=\"laked\"><br><img src=\"https://codehhr.gitee.io/kd/wangshuai/librarya.jpg\" alt=\"librarya\"><br><img src=\"https://codehhr.gitee.io/kd/wangshuai/libraryb.jpg\" alt=\"libraryb\"><br><img src=\"https://codehhr.gitee.io/kd/wangshuai/libraryc.jpg\" alt=\"libraryc\"><br><img src=\"https://codehhr.gitee.io/kd/wangshuai/duska.jpg\" alt=\"duska\"><br><img src=\"https://codehhr.gitee.io/kd/wangshuai/duskb.jpg\" alt=\"duskb\"><br><img src=\"https://codehhr.gitee.io/kd/wangshuai/duskc.jpg\" alt=\"duskc\"><br><img src=\"https://codehhr.gitee.io/kd/wangshuai/duskd.jpg\" alt=\"duskd\"><br><img src=\"https://codehhr.gitee.io/kd/wangshuai/moon.jpg\" alt=\"moon\"><br><img src=\"https://codehhr.gitee.io/kd/wangshuai/nighta.jpg\" alt=\"nighta\"><br><img src=\"https://codehhr.gitee.io/kd/wangshuai/nightb.jpg\" alt=\"nightb\"><br><img src=\"https://codehhr.gitee.io/kd/wangshuai/nightc.jpg\" alt=\"nightc\"><br><img src=\"https://codehhr.gitee.io/kd/wangshuai/nightd.jpg\" alt=\"nightd\"><br><img src=\"https://codehhr.gitee.io/kd/wangshuai/nighte.jpg\" alt=\"nighte\"><br><img src=\"https://codehhr.gitee.io/kd/wangshuai/nightf.jpg\" alt=\"nightf\"><br><img src=\"https://codehhr.gitee.io/kd/wangshuai/nightg.jpg\" alt=\"nightg\"></p>\n          </div>\n\n<h1 id=\"The-End\"><a href=\"#The-End\" class=\"headerlink\" title=\"The_End\"></a>The_End</h1>"},{"title":"科 大 冬 天","top_img":"https://ae01.alicdn.com/kf/U8f245ae012d54c83a9b856da09ad561dl.jpg","date":"2020-10-24T02:34:24.000Z","_content":"\n{% gallery %}\n\n{% endgallery %}\n","source":"school/winter/index.md","raw":"---\ntitle: 科 大 冬 天\ntop_img: https://ae01.alicdn.com/kf/U8f245ae012d54c83a9b856da09ad561dl.jpg\ndate: 2020-10-24 10:34:24\n---\n\n{% gallery %}\n\n{% endgallery %}\n","updated":"2020-11-12T12:16:09.000Z","path":"school/winter/index.html","comments":1,"layout":"page","_id":"cksvxwnnf0019gubqduk92ibu","content":"<div class=\"justified-gallery\">\n          </div>\n","site":{"data":{"link":{"class1":{"class_name":"舍友","link_list":{"1":{"name":"codeAntg","link":"https://blog.csdn.net/weixin_44745147","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/fjh.jpg","descr":"那家刀削面不错","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class2":{"class_name":"致谢","link_list":{"1":{"name":"JerrC","link":"https://immyw.com","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/immyw.png","descr":"今日事,今日毕","width":"1px","style":"solid","color":"#60d0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/hexo.svg","descr":"A fast, simple & powerful blog framework","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class3":{"class_name":"友人","link_list":{"1":{"name":"Chester","link":"http://chesterlds.cn","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/chester.jpg","descr":null,"width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Wangs","link":"https://wangsss.cn/","avatar":"https://wangsss.cn/img/avatar.png","descr":"不疯魔，不成活 ~","width":"1px","style":"solid","color":"#9d9d9d","custom":"link_custom1","time":"4s","namecolor":"0094ff","descolor":"#ff9191"}}}}}},"cover":"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/desktop.png","excerpt":"","more":"<div class=\"justified-gallery\">\n          </div>\n"}],"Post":[{"title":"Hexo butterfly 的标签功能","date":"2021-07-18T12:11:24.000Z","updated":"2021-07-18T15:16:35.687Z","keywords":null,"description":null,"top_img":null,"cover":"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/desktop.png","comments":1,"toc":null,"toc_number":null,"copyright":null,"copyright_author":null,"copyright_author_href":null,"copyright_url":null,"copyright_info":null,"_content":"\n{% note info flat %}\n标签外挂是 `Hexo` 独有的功能 , 并不是标准的 `Markdown` 格式\n以下的写法 , 只适用于 `Butterfly` 主题 , 用在其它主题上不会有效果 , 甚至可能会报错 , 使用前请留意\n外挂虽然能为主题带来一些额外的功能和 `UI` 方面的强化，但是，标籤外挂也有明显的限制，使用时请留意\n{% endnote %}\n\n# 未完待续 ...\n","source":"_posts/blog/blog-hexo-butterfly-tag-plugins.md","raw":"---\ntitle: Hexo butterfly 的标签功能\ndate: 2021-07-18 20:11:24\nupdated:\ntags:\ncategories:\nkeywords:\ndescription:\ntop_img:\ncover:\ncomments:\ntoc:\ntoc_number:\ncopyright:\ncopyright_author:\ncopyright_author_href:\ncopyright_url:\ncopyright_info:\n---\n\n{% note info flat %}\n标签外挂是 `Hexo` 独有的功能 , 并不是标准的 `Markdown` 格式\n以下的写法 , 只适用于 `Butterfly` 主题 , 用在其它主题上不会有效果 , 甚至可能会报错 , 使用前请留意\n外挂虽然能为主题带来一些额外的功能和 `UI` 方面的强化，但是，标籤外挂也有明显的限制，使用时请留意\n{% endnote %}\n\n# 未完待续 ...\n","slug":"blog/blog-hexo-butterfly-tag-plugins","published":1,"layout":"post","photos":[],"link":"","_id":"cksvxwnmm0001gubqdry41h1z","content":"<div class=\"note info flat\"><p>标签外挂是 <code>Hexo</code> 独有的功能 , 并不是标准的 <code>Markdown</code> 格式<br>以下的写法 , 只适用于 <code>Butterfly</code> 主题 , 用在其它主题上不会有效果 , 甚至可能会报错 , 使用前请留意<br>外挂虽然能为主题带来一些额外的功能和 <code>UI</code> 方面的强化，但是，标籤外挂也有明显的限制，使用时请留意</p>\n</div>\n\n<h1 id=\"未完待续-…\"><a href=\"#未完待续-…\" class=\"headerlink\" title=\"未完待续 …\"></a>未完待续 …</h1>","site":{"data":{"link":{"class1":{"class_name":"舍友","link_list":{"1":{"name":"codeAntg","link":"https://blog.csdn.net/weixin_44745147","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/fjh.jpg","descr":"那家刀削面不错","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class2":{"class_name":"致谢","link_list":{"1":{"name":"JerrC","link":"https://immyw.com","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/immyw.png","descr":"今日事,今日毕","width":"1px","style":"solid","color":"#60d0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/hexo.svg","descr":"A fast, simple & powerful blog framework","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class3":{"class_name":"友人","link_list":{"1":{"name":"Chester","link":"http://chesterlds.cn","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/chester.jpg","descr":null,"width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Wangs","link":"https://wangsss.cn/","avatar":"https://wangsss.cn/img/avatar.png","descr":"不疯魔，不成活 ~","width":"1px","style":"solid","color":"#9d9d9d","custom":"link_custom1","time":"4s","namecolor":"0094ff","descolor":"#ff9191"}}}}}},"excerpt":"","more":"<div class=\"note info flat\"><p>标签外挂是 <code>Hexo</code> 独有的功能 , 并不是标准的 <code>Markdown</code> 格式<br>以下的写法 , 只适用于 <code>Butterfly</code> 主题 , 用在其它主题上不会有效果 , 甚至可能会报错 , 使用前请留意<br>外挂虽然能为主题带来一些额外的功能和 <code>UI</code> 方面的强化，但是，标籤外挂也有明显的限制，使用时请留意</p>\n</div>\n\n<h1 id=\"未完待续-…\"><a href=\"#未完待续-…\" class=\"headerlink\" title=\"未完待续 …\"></a>未完待续 …</h1>"},{"title":"用 Hexo 快速搭建博客","top_img":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg","cover":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/hexo/hexocover.jpg","date":"2020-02-01T10:32:26.000Z","_content":"\n# 如何做到一毛不拔的搭建网站\n\n![s](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/emoji/s.png)\n\n### 以下操作中需要安装的地方需要使用管理员权限,因为我不清楚哪里会出现 `permission denied`\n\n---\n\n# 1 . 安装 `nodejs`\n\n![nodejs](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/hexo/nodejs.png)\n\n---\n\n### 对应 windows 用户，下载对应的 \".msi\" 的文件安装就行\n\n### Linux 和 Mac 用户...此处省略\n\n---\n\n安装成功后可以查看版本\n\n```\nnode -v\n```\n\n```\nnpm -v\n```\n\n---\n\n![version](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/hexo/version.png)\n\n---\n\n### 为方便国内使用，可以把 npm 换成 taobao 的 cnpm\n\n```\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\n```\n\n# 2 . 本地搭建\n\n### 安装 `hexo`\n\n```\ncnpm install -g hexo-cli\n```\n\n查看版本,验证成功\n\n```\nhexo -v\n```\n\n### 创建一个文件夹，比如名为 `blog`\n\n```\nmkdir blog\n```\n\n### 进入 `blog` , 初始化`hexo`\n\n```\nhexo init\n```\n\n### 等他完事后,可以在 http://localhost:4000/ 下本地预览\n\n```\nhexo s\n```\n\n#### 如图 :\n\n---\n\n![s](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/hexo/server.png)\n\n### 如果渲染不出来，尝试安装以下解决\n\n```\ncnpm install  hexo-renderer-pug hexo-renderer-stylus hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive --save\n```\n\n### 如果新建一篇文章\n\n文件名最好为英文，方便操作\n\n```\nhexo n name\n```\n\n他会在 `source/_posts` 下生成一篇名为 name 的 markdown 文件，内容自己写\n\n# 3 . 推到远端\n\n登录你的 github , 新建一个仓库\n\n![github](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/hexo/github.png)\n\n仓库名为 用户名.github.io 用户名小写\n\n![repo_name](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/hexo/repo_name.png)\n\n现在是个空仓库\n\n![empty](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/hexo/empty.png)\n\n---\n\n回到终端下\n\n### 安装 `hexo-deployer`\n\n```\ncnpm install --save hexo-deployer-git\n```\n\n### 修改 \\_config.yml 文件\n\n在 blog 目录下\n\n如图修改最下面 , repo 改为自己的仓库地址\n\n![depolyer](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/hexo/deployer.png)\n\n### 部署到远端\n\n```\nhexo d\n```\n\n![done](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/hexo/done.png)\n\n你可以刷新 github 仓库, 里面已经有东西了\n\n![unempty](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/hexo/unempty.png)\n\n### 完事\n\n---\n\n### 你的博客地址就是:\n\n用户名.github.io\n\n# 4 . 更换主题\n\n### hexo 主题 : https://hexo.io/themes/\n\n每个主题里都有说明\n\n比如：lx\n\n在 blog 目录下\n\n```\ngit clone https://github.com/blleng/hexo-theme-lx themes/lx\n```\n\n按照他说明的改一下就行了\n\n把 `blog/_config.yml` 里的 `theme` 改成要换的主题名就完事了, 比如把 `landscape` 改成 `lx`\n\n### 可以本地先预览一下\n\n```\nhexo s\n```\n\n### 推到远端\n\n```\nhexo g\n\nhexo d\n```\n\n# 5 . 常用命令总结 :\n\n```\n创建一篇新文章\nhexo n example\n---\n清理旧的数据\nhexo clean\n---\n重新生成一下\nhexo g\n---\n部署到远端\nhexo d\n```\n\n# The_End\n","source":"_posts/blog/blog-hexo.md","raw":"---\ntitle: 用 Hexo 快速搭建博客\ntop_img: https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg\ncover: https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/hexo/hexocover.jpg\ndate: 2020-02-01 18:32:26\ntags:\n  - hexo\n  - 博客\ncategories:\n  - 博客\n  - hexo\n---\n\n# 如何做到一毛不拔的搭建网站\n\n![s](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/emoji/s.png)\n\n### 以下操作中需要安装的地方需要使用管理员权限,因为我不清楚哪里会出现 `permission denied`\n\n---\n\n# 1 . 安装 `nodejs`\n\n![nodejs](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/hexo/nodejs.png)\n\n---\n\n### 对应 windows 用户，下载对应的 \".msi\" 的文件安装就行\n\n### Linux 和 Mac 用户...此处省略\n\n---\n\n安装成功后可以查看版本\n\n```\nnode -v\n```\n\n```\nnpm -v\n```\n\n---\n\n![version](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/hexo/version.png)\n\n---\n\n### 为方便国内使用，可以把 npm 换成 taobao 的 cnpm\n\n```\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\n```\n\n# 2 . 本地搭建\n\n### 安装 `hexo`\n\n```\ncnpm install -g hexo-cli\n```\n\n查看版本,验证成功\n\n```\nhexo -v\n```\n\n### 创建一个文件夹，比如名为 `blog`\n\n```\nmkdir blog\n```\n\n### 进入 `blog` , 初始化`hexo`\n\n```\nhexo init\n```\n\n### 等他完事后,可以在 http://localhost:4000/ 下本地预览\n\n```\nhexo s\n```\n\n#### 如图 :\n\n---\n\n![s](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/hexo/server.png)\n\n### 如果渲染不出来，尝试安装以下解决\n\n```\ncnpm install  hexo-renderer-pug hexo-renderer-stylus hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive --save\n```\n\n### 如果新建一篇文章\n\n文件名最好为英文，方便操作\n\n```\nhexo n name\n```\n\n他会在 `source/_posts` 下生成一篇名为 name 的 markdown 文件，内容自己写\n\n# 3 . 推到远端\n\n登录你的 github , 新建一个仓库\n\n![github](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/hexo/github.png)\n\n仓库名为 用户名.github.io 用户名小写\n\n![repo_name](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/hexo/repo_name.png)\n\n现在是个空仓库\n\n![empty](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/hexo/empty.png)\n\n---\n\n回到终端下\n\n### 安装 `hexo-deployer`\n\n```\ncnpm install --save hexo-deployer-git\n```\n\n### 修改 \\_config.yml 文件\n\n在 blog 目录下\n\n如图修改最下面 , repo 改为自己的仓库地址\n\n![depolyer](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/hexo/deployer.png)\n\n### 部署到远端\n\n```\nhexo d\n```\n\n![done](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/hexo/done.png)\n\n你可以刷新 github 仓库, 里面已经有东西了\n\n![unempty](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/hexo/unempty.png)\n\n### 完事\n\n---\n\n### 你的博客地址就是:\n\n用户名.github.io\n\n# 4 . 更换主题\n\n### hexo 主题 : https://hexo.io/themes/\n\n每个主题里都有说明\n\n比如：lx\n\n在 blog 目录下\n\n```\ngit clone https://github.com/blleng/hexo-theme-lx themes/lx\n```\n\n按照他说明的改一下就行了\n\n把 `blog/_config.yml` 里的 `theme` 改成要换的主题名就完事了, 比如把 `landscape` 改成 `lx`\n\n### 可以本地先预览一下\n\n```\nhexo s\n```\n\n### 推到远端\n\n```\nhexo g\n\nhexo d\n```\n\n# 5 . 常用命令总结 :\n\n```\n创建一篇新文章\nhexo n example\n---\n清理旧的数据\nhexo clean\n---\n重新生成一下\nhexo g\n---\n部署到远端\nhexo d\n```\n\n# The_End\n","slug":"blog/blog-hexo","published":1,"updated":"2021-08-16T14:18:08.681Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cksvxwnmq0003gubqhnfxbkil","content":"<h1 id=\"如何做到一毛不拔的搭建网站\"><a href=\"#如何做到一毛不拔的搭建网站\" class=\"headerlink\" title=\"如何做到一毛不拔的搭建网站\"></a>如何做到一毛不拔的搭建网站</h1><p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/emoji/s.png\" alt=\"s\"></p>\n<h3 id=\"以下操作中需要安装的地方需要使用管理员权限-因为我不清楚哪里会出现-permission-denied\"><a href=\"#以下操作中需要安装的地方需要使用管理员权限-因为我不清楚哪里会出现-permission-denied\" class=\"headerlink\" title=\"以下操作中需要安装的地方需要使用管理员权限,因为我不清楚哪里会出现 permission denied\"></a>以下操作中需要安装的地方需要使用管理员权限,因为我不清楚哪里会出现 <code>permission denied</code></h3><hr>\n<h1 id=\"1-安装-nodejs\"><a href=\"#1-安装-nodejs\" class=\"headerlink\" title=\"1 . 安装 nodejs\"></a>1 . 安装 <code>nodejs</code></h1><p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/hexo/nodejs.png\" alt=\"nodejs\"></p>\n<hr>\n<h3 id=\"对应-windows-用户，下载对应的-“-msi”-的文件安装就行\"><a href=\"#对应-windows-用户，下载对应的-“-msi”-的文件安装就行\" class=\"headerlink\" title=\"对应 windows 用户，下载对应的 “.msi” 的文件安装就行\"></a>对应 windows 用户，下载对应的 “.msi” 的文件安装就行</h3><h3 id=\"Linux-和-Mac-用户…此处省略\"><a href=\"#Linux-和-Mac-用户…此处省略\" class=\"headerlink\" title=\"Linux 和 Mac 用户…此处省略\"></a>Linux 和 Mac 用户…此处省略</h3><hr>\n<p>安装成功后可以查看版本</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node -v</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm -v</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/hexo/version.png\" alt=\"version\"></p>\n<hr>\n<h3 id=\"为方便国内使用，可以把-npm-换成-taobao-的-cnpm\"><a href=\"#为方便国内使用，可以把-npm-换成-taobao-的-cnpm\" class=\"headerlink\" title=\"为方便国内使用，可以把 npm 换成 taobao 的 cnpm\"></a>为方便国内使用，可以把 npm 换成 taobao 的 cnpm</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"2-本地搭建\"><a href=\"#2-本地搭建\" class=\"headerlink\" title=\"2 . 本地搭建\"></a>2 . 本地搭建</h1><h3 id=\"安装-hexo\"><a href=\"#安装-hexo\" class=\"headerlink\" title=\"安装 hexo\"></a>安装 <code>hexo</code></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n\n<p>查看版本,验证成功</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo -v</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建一个文件夹，比如名为-blog\"><a href=\"#创建一个文件夹，比如名为-blog\" class=\"headerlink\" title=\"创建一个文件夹，比如名为 blog\"></a>创建一个文件夹，比如名为 <code>blog</code></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir blog</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"进入-blog-初始化hexo\"><a href=\"#进入-blog-初始化hexo\" class=\"headerlink\" title=\"进入 blog , 初始化hexo\"></a>进入 <code>blog</code> , 初始化<code>hexo</code></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"等他完事后-可以在-http-localhost-4000-下本地预览\"><a href=\"#等他完事后-可以在-http-localhost-4000-下本地预览\" class=\"headerlink\" title=\"等他完事后,可以在 http://localhost:4000/ 下本地预览\"></a>等他完事后,可以在 <a href=\"http://localhost:4000/\">http://localhost:4000/</a> 下本地预览</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"如图\"><a href=\"#如图\" class=\"headerlink\" title=\"如图 :\"></a>如图 :</h4><hr>\n<p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/hexo/server.png\" alt=\"s\"></p>\n<h3 id=\"如果渲染不出来，尝试安装以下解决\"><a href=\"#如果渲染不出来，尝试安装以下解决\" class=\"headerlink\" title=\"如果渲染不出来，尝试安装以下解决\"></a>如果渲染不出来，尝试安装以下解决</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install  hexo-renderer-pug hexo-renderer-stylus hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive --save</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"如果新建一篇文章\"><a href=\"#如果新建一篇文章\" class=\"headerlink\" title=\"如果新建一篇文章\"></a>如果新建一篇文章</h3><p>文件名最好为英文，方便操作</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo n name</span><br></pre></td></tr></table></figure>\n\n<p>他会在 <code>source/_posts</code> 下生成一篇名为 name 的 markdown 文件，内容自己写</p>\n<h1 id=\"3-推到远端\"><a href=\"#3-推到远端\" class=\"headerlink\" title=\"3 . 推到远端\"></a>3 . 推到远端</h1><p>登录你的 github , 新建一个仓库</p>\n<p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/hexo/github.png\" alt=\"github\"></p>\n<p>仓库名为 用户名.github.io 用户名小写</p>\n<p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/hexo/repo_name.png\" alt=\"repo_name\"></p>\n<p>现在是个空仓库</p>\n<p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/hexo/empty.png\" alt=\"empty\"></p>\n<hr>\n<p>回到终端下</p>\n<h3 id=\"安装-hexo-deployer\"><a href=\"#安装-hexo-deployer\" class=\"headerlink\" title=\"安装 hexo-deployer\"></a>安装 <code>hexo-deployer</code></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"修改-config-yml-文件\"><a href=\"#修改-config-yml-文件\" class=\"headerlink\" title=\"修改 _config.yml 文件\"></a>修改 _config.yml 文件</h3><p>在 blog 目录下</p>\n<p>如图修改最下面 , repo 改为自己的仓库地址</p>\n<p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/hexo/deployer.png\" alt=\"depolyer\"></p>\n<h3 id=\"部署到远端\"><a href=\"#部署到远端\" class=\"headerlink\" title=\"部署到远端\"></a>部署到远端</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/hexo/done.png\" alt=\"done\"></p>\n<p>你可以刷新 github 仓库, 里面已经有东西了</p>\n<p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/hexo/unempty.png\" alt=\"unempty\"></p>\n<h3 id=\"完事\"><a href=\"#完事\" class=\"headerlink\" title=\"完事\"></a>完事</h3><hr>\n<h3 id=\"你的博客地址就是\"><a href=\"#你的博客地址就是\" class=\"headerlink\" title=\"你的博客地址就是:\"></a>你的博客地址就是:</h3><p>用户名.github.io</p>\n<h1 id=\"4-更换主题\"><a href=\"#4-更换主题\" class=\"headerlink\" title=\"4 . 更换主题\"></a>4 . 更换主题</h1><h3 id=\"hexo-主题-https-hexo-io-themes\"><a href=\"#hexo-主题-https-hexo-io-themes\" class=\"headerlink\" title=\"hexo 主题 : https://hexo.io/themes/\"></a>hexo 主题 : <a href=\"https://hexo.io/themes/\">https://hexo.io/themes/</a></h3><p>每个主题里都有说明</p>\n<p>比如：lx</p>\n<p>在 blog 目录下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/blleng/hexo-theme-lx themes/lx</span><br></pre></td></tr></table></figure>\n\n<p>按照他说明的改一下就行了</p>\n<p>把 <code>blog/_config.yml</code> 里的 <code>theme</code> 改成要换的主题名就完事了, 比如把 <code>landscape</code> 改成 <code>lx</code></p>\n<h3 id=\"可以本地先预览一下\"><a href=\"#可以本地先预览一下\" class=\"headerlink\" title=\"可以本地先预览一下\"></a>可以本地先预览一下</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"推到远端\"><a href=\"#推到远端\" class=\"headerlink\" title=\"推到远端\"></a>推到远端</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g</span><br><span class=\"line\"></span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"5-常用命令总结\"><a href=\"#5-常用命令总结\" class=\"headerlink\" title=\"5 . 常用命令总结 :\"></a>5 . 常用命令总结 :</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">创建一篇新文章</span><br><span class=\"line\">hexo n example</span><br><span class=\"line\">---</span><br><span class=\"line\">清理旧的数据</span><br><span class=\"line\">hexo clean</span><br><span class=\"line\">---</span><br><span class=\"line\">重新生成一下</span><br><span class=\"line\">hexo g</span><br><span class=\"line\">---</span><br><span class=\"line\">部署到远端</span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"The-End\"><a href=\"#The-End\" class=\"headerlink\" title=\"The_End\"></a>The_End</h1>","site":{"data":{"link":{"class1":{"class_name":"舍友","link_list":{"1":{"name":"codeAntg","link":"https://blog.csdn.net/weixin_44745147","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/fjh.jpg","descr":"那家刀削面不错","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class2":{"class_name":"致谢","link_list":{"1":{"name":"JerrC","link":"https://immyw.com","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/immyw.png","descr":"今日事,今日毕","width":"1px","style":"solid","color":"#60d0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/hexo.svg","descr":"A fast, simple & powerful blog framework","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class3":{"class_name":"友人","link_list":{"1":{"name":"Chester","link":"http://chesterlds.cn","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/chester.jpg","descr":null,"width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Wangs","link":"https://wangsss.cn/","avatar":"https://wangsss.cn/img/avatar.png","descr":"不疯魔，不成活 ~","width":"1px","style":"solid","color":"#9d9d9d","custom":"link_custom1","time":"4s","namecolor":"0094ff","descolor":"#ff9191"}}}}}},"excerpt":"","more":"<h1 id=\"如何做到一毛不拔的搭建网站\"><a href=\"#如何做到一毛不拔的搭建网站\" class=\"headerlink\" title=\"如何做到一毛不拔的搭建网站\"></a>如何做到一毛不拔的搭建网站</h1><p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/emoji/s.png\" alt=\"s\"></p>\n<h3 id=\"以下操作中需要安装的地方需要使用管理员权限-因为我不清楚哪里会出现-permission-denied\"><a href=\"#以下操作中需要安装的地方需要使用管理员权限-因为我不清楚哪里会出现-permission-denied\" class=\"headerlink\" title=\"以下操作中需要安装的地方需要使用管理员权限,因为我不清楚哪里会出现 permission denied\"></a>以下操作中需要安装的地方需要使用管理员权限,因为我不清楚哪里会出现 <code>permission denied</code></h3><hr>\n<h1 id=\"1-安装-nodejs\"><a href=\"#1-安装-nodejs\" class=\"headerlink\" title=\"1 . 安装 nodejs\"></a>1 . 安装 <code>nodejs</code></h1><p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/hexo/nodejs.png\" alt=\"nodejs\"></p>\n<hr>\n<h3 id=\"对应-windows-用户，下载对应的-“-msi”-的文件安装就行\"><a href=\"#对应-windows-用户，下载对应的-“-msi”-的文件安装就行\" class=\"headerlink\" title=\"对应 windows 用户，下载对应的 “.msi” 的文件安装就行\"></a>对应 windows 用户，下载对应的 “.msi” 的文件安装就行</h3><h3 id=\"Linux-和-Mac-用户…此处省略\"><a href=\"#Linux-和-Mac-用户…此处省略\" class=\"headerlink\" title=\"Linux 和 Mac 用户…此处省略\"></a>Linux 和 Mac 用户…此处省略</h3><hr>\n<p>安装成功后可以查看版本</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node -v</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm -v</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/hexo/version.png\" alt=\"version\"></p>\n<hr>\n<h3 id=\"为方便国内使用，可以把-npm-换成-taobao-的-cnpm\"><a href=\"#为方便国内使用，可以把-npm-换成-taobao-的-cnpm\" class=\"headerlink\" title=\"为方便国内使用，可以把 npm 换成 taobao 的 cnpm\"></a>为方便国内使用，可以把 npm 换成 taobao 的 cnpm</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"2-本地搭建\"><a href=\"#2-本地搭建\" class=\"headerlink\" title=\"2 . 本地搭建\"></a>2 . 本地搭建</h1><h3 id=\"安装-hexo\"><a href=\"#安装-hexo\" class=\"headerlink\" title=\"安装 hexo\"></a>安装 <code>hexo</code></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n\n<p>查看版本,验证成功</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo -v</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建一个文件夹，比如名为-blog\"><a href=\"#创建一个文件夹，比如名为-blog\" class=\"headerlink\" title=\"创建一个文件夹，比如名为 blog\"></a>创建一个文件夹，比如名为 <code>blog</code></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir blog</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"进入-blog-初始化hexo\"><a href=\"#进入-blog-初始化hexo\" class=\"headerlink\" title=\"进入 blog , 初始化hexo\"></a>进入 <code>blog</code> , 初始化<code>hexo</code></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"等他完事后-可以在-http-localhost-4000-下本地预览\"><a href=\"#等他完事后-可以在-http-localhost-4000-下本地预览\" class=\"headerlink\" title=\"等他完事后,可以在 http://localhost:4000/ 下本地预览\"></a>等他完事后,可以在 <a href=\"http://localhost:4000/\">http://localhost:4000/</a> 下本地预览</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"如图\"><a href=\"#如图\" class=\"headerlink\" title=\"如图 :\"></a>如图 :</h4><hr>\n<p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/hexo/server.png\" alt=\"s\"></p>\n<h3 id=\"如果渲染不出来，尝试安装以下解决\"><a href=\"#如果渲染不出来，尝试安装以下解决\" class=\"headerlink\" title=\"如果渲染不出来，尝试安装以下解决\"></a>如果渲染不出来，尝试安装以下解决</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install  hexo-renderer-pug hexo-renderer-stylus hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive --save</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"如果新建一篇文章\"><a href=\"#如果新建一篇文章\" class=\"headerlink\" title=\"如果新建一篇文章\"></a>如果新建一篇文章</h3><p>文件名最好为英文，方便操作</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo n name</span><br></pre></td></tr></table></figure>\n\n<p>他会在 <code>source/_posts</code> 下生成一篇名为 name 的 markdown 文件，内容自己写</p>\n<h1 id=\"3-推到远端\"><a href=\"#3-推到远端\" class=\"headerlink\" title=\"3 . 推到远端\"></a>3 . 推到远端</h1><p>登录你的 github , 新建一个仓库</p>\n<p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/hexo/github.png\" alt=\"github\"></p>\n<p>仓库名为 用户名.github.io 用户名小写</p>\n<p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/hexo/repo_name.png\" alt=\"repo_name\"></p>\n<p>现在是个空仓库</p>\n<p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/hexo/empty.png\" alt=\"empty\"></p>\n<hr>\n<p>回到终端下</p>\n<h3 id=\"安装-hexo-deployer\"><a href=\"#安装-hexo-deployer\" class=\"headerlink\" title=\"安装 hexo-deployer\"></a>安装 <code>hexo-deployer</code></h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cnpm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"修改-config-yml-文件\"><a href=\"#修改-config-yml-文件\" class=\"headerlink\" title=\"修改 _config.yml 文件\"></a>修改 _config.yml 文件</h3><p>在 blog 目录下</p>\n<p>如图修改最下面 , repo 改为自己的仓库地址</p>\n<p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/hexo/deployer.png\" alt=\"depolyer\"></p>\n<h3 id=\"部署到远端\"><a href=\"#部署到远端\" class=\"headerlink\" title=\"部署到远端\"></a>部署到远端</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/hexo/done.png\" alt=\"done\"></p>\n<p>你可以刷新 github 仓库, 里面已经有东西了</p>\n<p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/hexo/unempty.png\" alt=\"unempty\"></p>\n<h3 id=\"完事\"><a href=\"#完事\" class=\"headerlink\" title=\"完事\"></a>完事</h3><hr>\n<h3 id=\"你的博客地址就是\"><a href=\"#你的博客地址就是\" class=\"headerlink\" title=\"你的博客地址就是:\"></a>你的博客地址就是:</h3><p>用户名.github.io</p>\n<h1 id=\"4-更换主题\"><a href=\"#4-更换主题\" class=\"headerlink\" title=\"4 . 更换主题\"></a>4 . 更换主题</h1><h3 id=\"hexo-主题-https-hexo-io-themes\"><a href=\"#hexo-主题-https-hexo-io-themes\" class=\"headerlink\" title=\"hexo 主题 : https://hexo.io/themes/\"></a>hexo 主题 : <a href=\"https://hexo.io/themes/\">https://hexo.io/themes/</a></h3><p>每个主题里都有说明</p>\n<p>比如：lx</p>\n<p>在 blog 目录下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/blleng/hexo-theme-lx themes/lx</span><br></pre></td></tr></table></figure>\n\n<p>按照他说明的改一下就行了</p>\n<p>把 <code>blog/_config.yml</code> 里的 <code>theme</code> 改成要换的主题名就完事了, 比如把 <code>landscape</code> 改成 <code>lx</code></p>\n<h3 id=\"可以本地先预览一下\"><a href=\"#可以本地先预览一下\" class=\"headerlink\" title=\"可以本地先预览一下\"></a>可以本地先预览一下</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo s</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"推到远端\"><a href=\"#推到远端\" class=\"headerlink\" title=\"推到远端\"></a>推到远端</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo g</span><br><span class=\"line\"></span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"5-常用命令总结\"><a href=\"#5-常用命令总结\" class=\"headerlink\" title=\"5 . 常用命令总结 :\"></a>5 . 常用命令总结 :</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">创建一篇新文章</span><br><span class=\"line\">hexo n example</span><br><span class=\"line\">---</span><br><span class=\"line\">清理旧的数据</span><br><span class=\"line\">hexo clean</span><br><span class=\"line\">---</span><br><span class=\"line\">重新生成一下</span><br><span class=\"line\">hexo g</span><br><span class=\"line\">---</span><br><span class=\"line\">部署到远端</span><br><span class=\"line\">hexo d</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"The-End\"><a href=\"#The-End\" class=\"headerlink\" title=\"The_End\"></a>The_End</h1>"},{"title":"hexo 报错 use_date_for_updated is deprecated...","date":"2020-11-08T10:10:14.000Z","top_img":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg","cover":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/tom/tom.jpg","_content":"\n# hexo 报错 use_date_for_updated is deprecated...\n\n```\nWARN  Deprecated config detected: \"use_date_for_updated\" is deprecated, please use \"updated_option\" instead. See https://hexo.io/docs/configuration for more details.\n```\n\n## 如图:\n\n![usedateforupd](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/hexo/usedateforupd.png)\n\n# 解决办法\n\n编辑根目录的 `_config.yml` 文件 , 把 `use_date_for_updated` 值改为 `updated_option`\n\n# The_End\n","source":"_posts/blog/blog-hexousedateforupd.md","raw":"---\ntitle: hexo 报错 use_date_for_updated is deprecated...\ndate: 2020-11-08 18:10:14\ntop_img: https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg\ncover: https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/tom/tom.jpg\ntags:\n  - hexo\n  - 博客\ncategories:\n  - 博客\n  - hexo\n---\n\n# hexo 报错 use_date_for_updated is deprecated...\n\n```\nWARN  Deprecated config detected: \"use_date_for_updated\" is deprecated, please use \"updated_option\" instead. See https://hexo.io/docs/configuration for more details.\n```\n\n## 如图:\n\n![usedateforupd](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/hexo/usedateforupd.png)\n\n# 解决办法\n\n编辑根目录的 `_config.yml` 文件 , 把 `use_date_for_updated` 值改为 `updated_option`\n\n# The_End\n","slug":"blog/blog-hexousedateforupd","published":1,"updated":"2021-04-30T14:19:27.237Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cksvxwnms0005gubq2ecz8s7b","content":"<h1 id=\"hexo-报错-use-date-for-updated-is-deprecated…\"><a href=\"#hexo-报错-use-date-for-updated-is-deprecated…\" class=\"headerlink\" title=\"hexo 报错 use_date_for_updated is deprecated…\"></a>hexo 报错 use_date_for_updated is deprecated…</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WARN  Deprecated config detected: &quot;use_date_for_updated&quot; is deprecated, please use &quot;updated_option&quot; instead. See https://hexo.io/docs/configuration for more details.</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"如图\"><a href=\"#如图\" class=\"headerlink\" title=\"如图:\"></a>如图:</h2><p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/hexo/usedateforupd.png\" alt=\"usedateforupd\"></p>\n<h1 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h1><p>编辑根目录的 <code>_config.yml</code> 文件 , 把 <code>use_date_for_updated</code> 值改为 <code>updated_option</code></p>\n<h1 id=\"The-End\"><a href=\"#The-End\" class=\"headerlink\" title=\"The_End\"></a>The_End</h1>","site":{"data":{"link":{"class1":{"class_name":"舍友","link_list":{"1":{"name":"codeAntg","link":"https://blog.csdn.net/weixin_44745147","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/fjh.jpg","descr":"那家刀削面不错","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class2":{"class_name":"致谢","link_list":{"1":{"name":"JerrC","link":"https://immyw.com","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/immyw.png","descr":"今日事,今日毕","width":"1px","style":"solid","color":"#60d0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/hexo.svg","descr":"A fast, simple & powerful blog framework","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class3":{"class_name":"友人","link_list":{"1":{"name":"Chester","link":"http://chesterlds.cn","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/chester.jpg","descr":null,"width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Wangs","link":"https://wangsss.cn/","avatar":"https://wangsss.cn/img/avatar.png","descr":"不疯魔，不成活 ~","width":"1px","style":"solid","color":"#9d9d9d","custom":"link_custom1","time":"4s","namecolor":"0094ff","descolor":"#ff9191"}}}}}},"excerpt":"","more":"<h1 id=\"hexo-报错-use-date-for-updated-is-deprecated…\"><a href=\"#hexo-报错-use-date-for-updated-is-deprecated…\" class=\"headerlink\" title=\"hexo 报错 use_date_for_updated is deprecated…\"></a>hexo 报错 use_date_for_updated is deprecated…</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WARN  Deprecated config detected: &quot;use_date_for_updated&quot; is deprecated, please use &quot;updated_option&quot; instead. See https://hexo.io/docs/configuration for more details.</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"如图\"><a href=\"#如图\" class=\"headerlink\" title=\"如图:\"></a>如图:</h2><p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/hexo/usedateforupd.png\" alt=\"usedateforupd\"></p>\n<h1 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h1><p>编辑根目录的 <code>_config.yml</code> 文件 , 把 <code>use_date_for_updated</code> 值改为 <code>updated_option</code></p>\n<h1 id=\"The-End\"><a href=\"#The-End\" class=\"headerlink\" title=\"The_End\"></a>The_End</h1>"},{"title":"用 Hugo 快速搭建博客","top_img":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg","cover":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/hugo/hugo.jpg","date":"2019-06-01T10:32:16.000Z","_content":"\n# 用 Hugo 搭建博客\n\nHugo 是一个用 Go 编写的静态站点生成器，生成速度很快\n下面是具体操作：\n\n# 1.安装 Hugo\n\n### Windows 用户\n\n使用 Chocolatey 或者 Scoop 快速安装，取决于你使用什么包管理\n\n```\nchoco install hugo -confirm\n```\n\n```\nscoop install hugo\n```\n\n也可以到 https://github.com/gohugoio/hugo/releases 下载对应的操作系统版本的 Hugo 二进制文件！\n\n把 hugo.exe 所在目录添加到系统变量里, `hugo version` 可查看是否添加成功！\n\n### Mac 用户\n\n直接用 `Homebrew` 安装\n\n```\nbrew install hugo\n```\n\n### Linux 用户\n\n这里就不多说了\n\n```\n基于Debian的 ：sudo apt-get install hugo\n```\n\n```\n基于ArchLinux的 ：sudo pacman -S hugo\n```\n\n# 2.生成站点\n\n比如新建一个 myblog 的网站：\n\n```\nhugo new site myblog\n```\n\n也就一瞬间完成的事，此时生成了一个文件名为 `myblog` 的文件夹\n\n然后到 `Hugo Theme` 选一个主题\n\nhttps://themes.gohugo.io/\n\n---\n\n![Hugo-Theme](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/hugo/hugo_themes.png)\n\n---\n\n比如这个 \"`Jane`\"\n\n---\n\n![Hugo-Theme-jane](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/hugo/jane.png)\n\n其实每个主题里面都有教程，这里实际操作一下\n\n### 1.切换到 `myblog` 目录\n\n```\ncd myblog\n```\n\n把主题克隆下来 , 需要用到 `git` ，如果没有自行安装一下\n\n```\ngit clone https://github.com/xianmin/hugo-theme-jane.git --depth=1 themes/jane\n```\n\n### 2.然后新建一篇文章试试效果\n\n```\nhugo new post/blog.md\n```\n\n随便在里面写点东西，这里需要你会 `markdown` 语法，其实也不难，半天就能学会\n\n---\n\n【【 如果你懒，也可以把主题文件夹里的示例复制过来 】】\n\n```\ncp -r themes/jane/exampleSite/content ./\n```\n\n---\n\n### 3.把主题里的配置文件复制到 myblog 的配置文件下，就是`config.toml`这玩意儿\n\n```\ncp themes/jane/exampleSite/config.toml ./\n```\n\n好，现在可以把博客在本地运行起来了\n\n```\nhugo server -t jane --buildDrafts\n```\n\n# 3.把博客放到远端仓库\n\nGithub 是个免费仓库，用它就完事了\n\n当然需要你先在 github 上注册一下\n\n完事之后，登录你的 github\n\n---\n\n### 新建一个仓库，存放你的博客\n\n#### New Repositories\n\n---\n\nRepository name 格式要求：`用户名.github.io` (用户名小写)\n\n---\n\n别的不用管，下面直接点 Create Repository\n\n---\n\n#### 生成 `public` 文件夹\n\n在终端下输入（myblog 目录下）\n\n```\nhugo --theme=jane --baseUrl=\"https://用户名.github.io\" --buildDrafts\n```\n\n这时候会生成一个 `public` 文件夹\n\n把这个 public 文件夹推送到 github 仓库就完事啦~\n\n#### 把 `public` 文件夹推送到 Github\n\n// 下面依次输入：\n\n```\ncd public\ngit init\ngit add .\ngit commit -m \"提交的备注\"\n```\n\n如果是第一次使用 git ，途中他会提示让你配置一下\n\n```\n  //设置用户邮箱\ngit config --global user.email \"你的github邮箱\"\n  //设置用户名\ngit config --global user.name \"你的github用户名\"\n```\n\n跟远端关联 (也就是你的 github 地址 / 仓库地址)\n\n```\ngit remote add origin https://github.com/用户名/用户名.github.io.git\n```\n\n然后，推到远端\n\n```\ngit push -u origin master\n```\n\n需要输入用户名和密码\n\n完事\n\n---\n\n以后访问博客就用下面的地址：\n\n```\n用户名.github.io\n```\n\n# 4.常用命令总结 :\n\n在你的博客根目录下(blog)\n\n```\n创建一篇新文章\nhugo new post/example.md\n---\n重新生成 public 文件夹\nhugo\n---\n进入 public 文件夹\ncd public\n---\n依次输入\ngit init ( git 初始化仓库 , 只需创建时输入一次 , 以后就省略这一步 )\ngit add .\ngit commit -m \"提交的备注\"\n---\n部署到远端\ngit push ( git 第一次提交需要指定分支 , 使用 git push -u origin master , 之后直接 git push )\n```\n\n# The_End\n","source":"_posts/blog/blog-hugo.md","raw":"---\ntitle: 用 Hugo 快速搭建博客\ntop_img: https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg\ncover: https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/hugo/hugo.jpg\ndate: 2019-06-01 18:32:16\ntags:\n  - hugo\n  - 博客\ncategories:\n  - 博客\n  - hugo\n---\n\n# 用 Hugo 搭建博客\n\nHugo 是一个用 Go 编写的静态站点生成器，生成速度很快\n下面是具体操作：\n\n# 1.安装 Hugo\n\n### Windows 用户\n\n使用 Chocolatey 或者 Scoop 快速安装，取决于你使用什么包管理\n\n```\nchoco install hugo -confirm\n```\n\n```\nscoop install hugo\n```\n\n也可以到 https://github.com/gohugoio/hugo/releases 下载对应的操作系统版本的 Hugo 二进制文件！\n\n把 hugo.exe 所在目录添加到系统变量里, `hugo version` 可查看是否添加成功！\n\n### Mac 用户\n\n直接用 `Homebrew` 安装\n\n```\nbrew install hugo\n```\n\n### Linux 用户\n\n这里就不多说了\n\n```\n基于Debian的 ：sudo apt-get install hugo\n```\n\n```\n基于ArchLinux的 ：sudo pacman -S hugo\n```\n\n# 2.生成站点\n\n比如新建一个 myblog 的网站：\n\n```\nhugo new site myblog\n```\n\n也就一瞬间完成的事，此时生成了一个文件名为 `myblog` 的文件夹\n\n然后到 `Hugo Theme` 选一个主题\n\nhttps://themes.gohugo.io/\n\n---\n\n![Hugo-Theme](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/hugo/hugo_themes.png)\n\n---\n\n比如这个 \"`Jane`\"\n\n---\n\n![Hugo-Theme-jane](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/hugo/jane.png)\n\n其实每个主题里面都有教程，这里实际操作一下\n\n### 1.切换到 `myblog` 目录\n\n```\ncd myblog\n```\n\n把主题克隆下来 , 需要用到 `git` ，如果没有自行安装一下\n\n```\ngit clone https://github.com/xianmin/hugo-theme-jane.git --depth=1 themes/jane\n```\n\n### 2.然后新建一篇文章试试效果\n\n```\nhugo new post/blog.md\n```\n\n随便在里面写点东西，这里需要你会 `markdown` 语法，其实也不难，半天就能学会\n\n---\n\n【【 如果你懒，也可以把主题文件夹里的示例复制过来 】】\n\n```\ncp -r themes/jane/exampleSite/content ./\n```\n\n---\n\n### 3.把主题里的配置文件复制到 myblog 的配置文件下，就是`config.toml`这玩意儿\n\n```\ncp themes/jane/exampleSite/config.toml ./\n```\n\n好，现在可以把博客在本地运行起来了\n\n```\nhugo server -t jane --buildDrafts\n```\n\n# 3.把博客放到远端仓库\n\nGithub 是个免费仓库，用它就完事了\n\n当然需要你先在 github 上注册一下\n\n完事之后，登录你的 github\n\n---\n\n### 新建一个仓库，存放你的博客\n\n#### New Repositories\n\n---\n\nRepository name 格式要求：`用户名.github.io` (用户名小写)\n\n---\n\n别的不用管，下面直接点 Create Repository\n\n---\n\n#### 生成 `public` 文件夹\n\n在终端下输入（myblog 目录下）\n\n```\nhugo --theme=jane --baseUrl=\"https://用户名.github.io\" --buildDrafts\n```\n\n这时候会生成一个 `public` 文件夹\n\n把这个 public 文件夹推送到 github 仓库就完事啦~\n\n#### 把 `public` 文件夹推送到 Github\n\n// 下面依次输入：\n\n```\ncd public\ngit init\ngit add .\ngit commit -m \"提交的备注\"\n```\n\n如果是第一次使用 git ，途中他会提示让你配置一下\n\n```\n  //设置用户邮箱\ngit config --global user.email \"你的github邮箱\"\n  //设置用户名\ngit config --global user.name \"你的github用户名\"\n```\n\n跟远端关联 (也就是你的 github 地址 / 仓库地址)\n\n```\ngit remote add origin https://github.com/用户名/用户名.github.io.git\n```\n\n然后，推到远端\n\n```\ngit push -u origin master\n```\n\n需要输入用户名和密码\n\n完事\n\n---\n\n以后访问博客就用下面的地址：\n\n```\n用户名.github.io\n```\n\n# 4.常用命令总结 :\n\n在你的博客根目录下(blog)\n\n```\n创建一篇新文章\nhugo new post/example.md\n---\n重新生成 public 文件夹\nhugo\n---\n进入 public 文件夹\ncd public\n---\n依次输入\ngit init ( git 初始化仓库 , 只需创建时输入一次 , 以后就省略这一步 )\ngit add .\ngit commit -m \"提交的备注\"\n---\n部署到远端\ngit push ( git 第一次提交需要指定分支 , 使用 git push -u origin master , 之后直接 git push )\n```\n\n# The_End\n","slug":"blog/blog-hugo","published":1,"updated":"2021-08-16T14:16:43.758Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cksvxwnmv0009gubq5bhlghuy","content":"<h1 id=\"用-Hugo-搭建博客\"><a href=\"#用-Hugo-搭建博客\" class=\"headerlink\" title=\"用 Hugo 搭建博客\"></a>用 Hugo 搭建博客</h1><p>Hugo 是一个用 Go 编写的静态站点生成器，生成速度很快<br>下面是具体操作：</p>\n<h1 id=\"1-安装-Hugo\"><a href=\"#1-安装-Hugo\" class=\"headerlink\" title=\"1.安装 Hugo\"></a>1.安装 Hugo</h1><h3 id=\"Windows-用户\"><a href=\"#Windows-用户\" class=\"headerlink\" title=\"Windows 用户\"></a>Windows 用户</h3><p>使用 Chocolatey 或者 Scoop 快速安装，取决于你使用什么包管理</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">choco install hugo -confirm</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scoop install hugo</span><br></pre></td></tr></table></figure>\n\n<p>也可以到 <a href=\"https://github.com/gohugoio/hugo/releases\">https://github.com/gohugoio/hugo/releases</a> 下载对应的操作系统版本的 Hugo 二进制文件！</p>\n<p>把 hugo.exe 所在目录添加到系统变量里, <code>hugo version</code> 可查看是否添加成功！</p>\n<h3 id=\"Mac-用户\"><a href=\"#Mac-用户\" class=\"headerlink\" title=\"Mac 用户\"></a>Mac 用户</h3><p>直接用 <code>Homebrew</code> 安装</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install hugo</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Linux-用户\"><a href=\"#Linux-用户\" class=\"headerlink\" title=\"Linux 用户\"></a>Linux 用户</h3><p>这里就不多说了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">基于Debian的 ：sudo apt-get install hugo</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">基于ArchLinux的 ：sudo pacman -S hugo</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"2-生成站点\"><a href=\"#2-生成站点\" class=\"headerlink\" title=\"2.生成站点\"></a>2.生成站点</h1><p>比如新建一个 myblog 的网站：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hugo new site myblog</span><br></pre></td></tr></table></figure>\n\n<p>也就一瞬间完成的事，此时生成了一个文件名为 <code>myblog</code> 的文件夹</p>\n<p>然后到 <code>Hugo Theme</code> 选一个主题</p>\n<p><a href=\"https://themes.gohugo.io/\">https://themes.gohugo.io/</a></p>\n<hr>\n<p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/hugo/hugo_themes.png\" alt=\"Hugo-Theme\"></p>\n<hr>\n<p>比如这个 “<code>Jane</code>“</p>\n<hr>\n<p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/hugo/jane.png\" alt=\"Hugo-Theme-jane\"></p>\n<p>其实每个主题里面都有教程，这里实际操作一下</p>\n<h3 id=\"1-切换到-myblog-目录\"><a href=\"#1-切换到-myblog-目录\" class=\"headerlink\" title=\"1.切换到 myblog 目录\"></a>1.切换到 <code>myblog</code> 目录</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd myblog</span><br></pre></td></tr></table></figure>\n\n<p>把主题克隆下来 , 需要用到 <code>git</code> ，如果没有自行安装一下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/xianmin/hugo-theme-jane.git --depth=1 themes/jane</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-然后新建一篇文章试试效果\"><a href=\"#2-然后新建一篇文章试试效果\" class=\"headerlink\" title=\"2.然后新建一篇文章试试效果\"></a>2.然后新建一篇文章试试效果</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hugo new post/blog.md</span><br></pre></td></tr></table></figure>\n\n<p>随便在里面写点东西，这里需要你会 <code>markdown</code> 语法，其实也不难，半天就能学会</p>\n<hr>\n<p>【【 如果你懒，也可以把主题文件夹里的示例复制过来 】】</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp -r themes/jane/exampleSite/content ./</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"3-把主题里的配置文件复制到-myblog-的配置文件下，就是config-toml这玩意儿\"><a href=\"#3-把主题里的配置文件复制到-myblog-的配置文件下，就是config-toml这玩意儿\" class=\"headerlink\" title=\"3.把主题里的配置文件复制到 myblog 的配置文件下，就是config.toml这玩意儿\"></a>3.把主题里的配置文件复制到 myblog 的配置文件下，就是<code>config.toml</code>这玩意儿</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp themes/jane/exampleSite/config.toml ./</span><br></pre></td></tr></table></figure>\n\n<p>好，现在可以把博客在本地运行起来了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hugo server -t jane --buildDrafts</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-把博客放到远端仓库\"><a href=\"#3-把博客放到远端仓库\" class=\"headerlink\" title=\"3.把博客放到远端仓库\"></a>3.把博客放到远端仓库</h1><p>Github 是个免费仓库，用它就完事了</p>\n<p>当然需要你先在 github 上注册一下</p>\n<p>完事之后，登录你的 github</p>\n<hr>\n<h3 id=\"新建一个仓库，存放你的博客\"><a href=\"#新建一个仓库，存放你的博客\" class=\"headerlink\" title=\"新建一个仓库，存放你的博客\"></a>新建一个仓库，存放你的博客</h3><h4 id=\"New-Repositories\"><a href=\"#New-Repositories\" class=\"headerlink\" title=\"New Repositories\"></a>New Repositories</h4><hr>\n<p>Repository name 格式要求：<code>用户名.github.io</code> (用户名小写)</p>\n<hr>\n<p>别的不用管，下面直接点 Create Repository</p>\n<hr>\n<h4 id=\"生成-public-文件夹\"><a href=\"#生成-public-文件夹\" class=\"headerlink\" title=\"生成 public 文件夹\"></a>生成 <code>public</code> 文件夹</h4><p>在终端下输入（myblog 目录下）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hugo --theme=jane --baseUrl=&quot;https://用户名.github.io&quot; --buildDrafts</span><br></pre></td></tr></table></figure>\n\n<p>这时候会生成一个 <code>public</code> 文件夹</p>\n<p>把这个 public 文件夹推送到 github 仓库就完事啦~</p>\n<h4 id=\"把-public-文件夹推送到-Github\"><a href=\"#把-public-文件夹推送到-Github\" class=\"headerlink\" title=\"把 public 文件夹推送到 Github\"></a>把 <code>public</code> 文件夹推送到 Github</h4><p>// 下面依次输入：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd public</span><br><span class=\"line\">git init</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &quot;提交的备注&quot;</span><br></pre></td></tr></table></figure>\n\n<p>如果是第一次使用 git ，途中他会提示让你配置一下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  //设置用户邮箱</span><br><span class=\"line\">git config --global user.email &quot;你的github邮箱&quot;</span><br><span class=\"line\">  //设置用户名</span><br><span class=\"line\">git config --global user.name &quot;你的github用户名&quot;</span><br></pre></td></tr></table></figure>\n\n<p>跟远端关联 (也就是你的 github 地址 / 仓库地址)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin https://github.com/用户名/用户名.github.io.git</span><br></pre></td></tr></table></figure>\n\n<p>然后，推到远端</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push -u origin master</span><br></pre></td></tr></table></figure>\n\n<p>需要输入用户名和密码</p>\n<p>完事</p>\n<hr>\n<p>以后访问博客就用下面的地址：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">用户名.github.io</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"4-常用命令总结\"><a href=\"#4-常用命令总结\" class=\"headerlink\" title=\"4.常用命令总结 :\"></a>4.常用命令总结 :</h1><p>在你的博客根目录下(blog)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">创建一篇新文章</span><br><span class=\"line\">hugo new post/example.md</span><br><span class=\"line\">---</span><br><span class=\"line\">重新生成 public 文件夹</span><br><span class=\"line\">hugo</span><br><span class=\"line\">---</span><br><span class=\"line\">进入 public 文件夹</span><br><span class=\"line\">cd public</span><br><span class=\"line\">---</span><br><span class=\"line\">依次输入</span><br><span class=\"line\">git init ( git 初始化仓库 , 只需创建时输入一次 , 以后就省略这一步 )</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &quot;提交的备注&quot;</span><br><span class=\"line\">---</span><br><span class=\"line\">部署到远端</span><br><span class=\"line\">git push ( git 第一次提交需要指定分支 , 使用 git push -u origin master , 之后直接 git push )</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"The-End\"><a href=\"#The-End\" class=\"headerlink\" title=\"The_End\"></a>The_End</h1>","site":{"data":{"link":{"class1":{"class_name":"舍友","link_list":{"1":{"name":"codeAntg","link":"https://blog.csdn.net/weixin_44745147","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/fjh.jpg","descr":"那家刀削面不错","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class2":{"class_name":"致谢","link_list":{"1":{"name":"JerrC","link":"https://immyw.com","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/immyw.png","descr":"今日事,今日毕","width":"1px","style":"solid","color":"#60d0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/hexo.svg","descr":"A fast, simple & powerful blog framework","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class3":{"class_name":"友人","link_list":{"1":{"name":"Chester","link":"http://chesterlds.cn","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/chester.jpg","descr":null,"width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Wangs","link":"https://wangsss.cn/","avatar":"https://wangsss.cn/img/avatar.png","descr":"不疯魔，不成活 ~","width":"1px","style":"solid","color":"#9d9d9d","custom":"link_custom1","time":"4s","namecolor":"0094ff","descolor":"#ff9191"}}}}}},"excerpt":"","more":"<h1 id=\"用-Hugo-搭建博客\"><a href=\"#用-Hugo-搭建博客\" class=\"headerlink\" title=\"用 Hugo 搭建博客\"></a>用 Hugo 搭建博客</h1><p>Hugo 是一个用 Go 编写的静态站点生成器，生成速度很快<br>下面是具体操作：</p>\n<h1 id=\"1-安装-Hugo\"><a href=\"#1-安装-Hugo\" class=\"headerlink\" title=\"1.安装 Hugo\"></a>1.安装 Hugo</h1><h3 id=\"Windows-用户\"><a href=\"#Windows-用户\" class=\"headerlink\" title=\"Windows 用户\"></a>Windows 用户</h3><p>使用 Chocolatey 或者 Scoop 快速安装，取决于你使用什么包管理</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">choco install hugo -confirm</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scoop install hugo</span><br></pre></td></tr></table></figure>\n\n<p>也可以到 <a href=\"https://github.com/gohugoio/hugo/releases\">https://github.com/gohugoio/hugo/releases</a> 下载对应的操作系统版本的 Hugo 二进制文件！</p>\n<p>把 hugo.exe 所在目录添加到系统变量里, <code>hugo version</code> 可查看是否添加成功！</p>\n<h3 id=\"Mac-用户\"><a href=\"#Mac-用户\" class=\"headerlink\" title=\"Mac 用户\"></a>Mac 用户</h3><p>直接用 <code>Homebrew</code> 安装</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install hugo</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Linux-用户\"><a href=\"#Linux-用户\" class=\"headerlink\" title=\"Linux 用户\"></a>Linux 用户</h3><p>这里就不多说了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">基于Debian的 ：sudo apt-get install hugo</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">基于ArchLinux的 ：sudo pacman -S hugo</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"2-生成站点\"><a href=\"#2-生成站点\" class=\"headerlink\" title=\"2.生成站点\"></a>2.生成站点</h1><p>比如新建一个 myblog 的网站：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hugo new site myblog</span><br></pre></td></tr></table></figure>\n\n<p>也就一瞬间完成的事，此时生成了一个文件名为 <code>myblog</code> 的文件夹</p>\n<p>然后到 <code>Hugo Theme</code> 选一个主题</p>\n<p><a href=\"https://themes.gohugo.io/\">https://themes.gohugo.io/</a></p>\n<hr>\n<p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/hugo/hugo_themes.png\" alt=\"Hugo-Theme\"></p>\n<hr>\n<p>比如这个 “<code>Jane</code>“</p>\n<hr>\n<p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/hugo/jane.png\" alt=\"Hugo-Theme-jane\"></p>\n<p>其实每个主题里面都有教程，这里实际操作一下</p>\n<h3 id=\"1-切换到-myblog-目录\"><a href=\"#1-切换到-myblog-目录\" class=\"headerlink\" title=\"1.切换到 myblog 目录\"></a>1.切换到 <code>myblog</code> 目录</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd myblog</span><br></pre></td></tr></table></figure>\n\n<p>把主题克隆下来 , 需要用到 <code>git</code> ，如果没有自行安装一下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/xianmin/hugo-theme-jane.git --depth=1 themes/jane</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-然后新建一篇文章试试效果\"><a href=\"#2-然后新建一篇文章试试效果\" class=\"headerlink\" title=\"2.然后新建一篇文章试试效果\"></a>2.然后新建一篇文章试试效果</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hugo new post/blog.md</span><br></pre></td></tr></table></figure>\n\n<p>随便在里面写点东西，这里需要你会 <code>markdown</code> 语法，其实也不难，半天就能学会</p>\n<hr>\n<p>【【 如果你懒，也可以把主题文件夹里的示例复制过来 】】</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp -r themes/jane/exampleSite/content ./</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"3-把主题里的配置文件复制到-myblog-的配置文件下，就是config-toml这玩意儿\"><a href=\"#3-把主题里的配置文件复制到-myblog-的配置文件下，就是config-toml这玩意儿\" class=\"headerlink\" title=\"3.把主题里的配置文件复制到 myblog 的配置文件下，就是config.toml这玩意儿\"></a>3.把主题里的配置文件复制到 myblog 的配置文件下，就是<code>config.toml</code>这玩意儿</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp themes/jane/exampleSite/config.toml ./</span><br></pre></td></tr></table></figure>\n\n<p>好，现在可以把博客在本地运行起来了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hugo server -t jane --buildDrafts</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-把博客放到远端仓库\"><a href=\"#3-把博客放到远端仓库\" class=\"headerlink\" title=\"3.把博客放到远端仓库\"></a>3.把博客放到远端仓库</h1><p>Github 是个免费仓库，用它就完事了</p>\n<p>当然需要你先在 github 上注册一下</p>\n<p>完事之后，登录你的 github</p>\n<hr>\n<h3 id=\"新建一个仓库，存放你的博客\"><a href=\"#新建一个仓库，存放你的博客\" class=\"headerlink\" title=\"新建一个仓库，存放你的博客\"></a>新建一个仓库，存放你的博客</h3><h4 id=\"New-Repositories\"><a href=\"#New-Repositories\" class=\"headerlink\" title=\"New Repositories\"></a>New Repositories</h4><hr>\n<p>Repository name 格式要求：<code>用户名.github.io</code> (用户名小写)</p>\n<hr>\n<p>别的不用管，下面直接点 Create Repository</p>\n<hr>\n<h4 id=\"生成-public-文件夹\"><a href=\"#生成-public-文件夹\" class=\"headerlink\" title=\"生成 public 文件夹\"></a>生成 <code>public</code> 文件夹</h4><p>在终端下输入（myblog 目录下）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hugo --theme=jane --baseUrl=&quot;https://用户名.github.io&quot; --buildDrafts</span><br></pre></td></tr></table></figure>\n\n<p>这时候会生成一个 <code>public</code> 文件夹</p>\n<p>把这个 public 文件夹推送到 github 仓库就完事啦~</p>\n<h4 id=\"把-public-文件夹推送到-Github\"><a href=\"#把-public-文件夹推送到-Github\" class=\"headerlink\" title=\"把 public 文件夹推送到 Github\"></a>把 <code>public</code> 文件夹推送到 Github</h4><p>// 下面依次输入：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd public</span><br><span class=\"line\">git init</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &quot;提交的备注&quot;</span><br></pre></td></tr></table></figure>\n\n<p>如果是第一次使用 git ，途中他会提示让你配置一下</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  //设置用户邮箱</span><br><span class=\"line\">git config --global user.email &quot;你的github邮箱&quot;</span><br><span class=\"line\">  //设置用户名</span><br><span class=\"line\">git config --global user.name &quot;你的github用户名&quot;</span><br></pre></td></tr></table></figure>\n\n<p>跟远端关联 (也就是你的 github 地址 / 仓库地址)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin https://github.com/用户名/用户名.github.io.git</span><br></pre></td></tr></table></figure>\n\n<p>然后，推到远端</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push -u origin master</span><br></pre></td></tr></table></figure>\n\n<p>需要输入用户名和密码</p>\n<p>完事</p>\n<hr>\n<p>以后访问博客就用下面的地址：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">用户名.github.io</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"4-常用命令总结\"><a href=\"#4-常用命令总结\" class=\"headerlink\" title=\"4.常用命令总结 :\"></a>4.常用命令总结 :</h1><p>在你的博客根目录下(blog)</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">创建一篇新文章</span><br><span class=\"line\">hugo new post/example.md</span><br><span class=\"line\">---</span><br><span class=\"line\">重新生成 public 文件夹</span><br><span class=\"line\">hugo</span><br><span class=\"line\">---</span><br><span class=\"line\">进入 public 文件夹</span><br><span class=\"line\">cd public</span><br><span class=\"line\">---</span><br><span class=\"line\">依次输入</span><br><span class=\"line\">git init ( git 初始化仓库 , 只需创建时输入一次 , 以后就省略这一步 )</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &quot;提交的备注&quot;</span><br><span class=\"line\">---</span><br><span class=\"line\">部署到远端</span><br><span class=\"line\">git push ( git 第一次提交需要指定分支 , 使用 git push -u origin master , 之后直接 git push )</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"The-End\"><a href=\"#The-End\" class=\"headerlink\" title=\"The_End\"></a>The_End</h1>"},{"title":"Bootstrap","date":"2021-07-11T12:51:51.000Z","top_img":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg","cover":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/bootstrap/bootstrap.jpeg","comments":1,"_content":"\n# Bootstrap v3 中文文档\n\n> ## https://v3.bootcss.com/\n\n# 引入使用\n\n```html\n<!-- 最新版本的 Bootstrap 核心 CSS 文件 -->\n<link\n  rel=\"stylesheet\"\n  href=\"https://stackpath.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css\"\n/>\n\n<!-- 可选的 Bootstrap 主题文件（一般不用引入） -->\n<link\n  rel=\"stylesheet\"\n  href=\"https://stackpath.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap-theme.min.css\"\n/>\n\n<!-- 最新的 Bootstrap 核心 JavaScript 文件 -->\n<script src=\"https://stackpath.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js\"></script>\n```\n\n**如果只是用一些样式 , 可以只引入 `css` 文件**\n\n# 未完待续 . . .\n","source":"_posts/bootstrap/bootstrap.md","raw":"---\ntitle: Bootstrap\ndate: 2021-07-11 20:51:51\ntop_img: https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg\ncover: https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/bootstrap/bootstrap.jpeg\ntags:\ncategories:\ncomments:\n---\n\n# Bootstrap v3 中文文档\n\n> ## https://v3.bootcss.com/\n\n# 引入使用\n\n```html\n<!-- 最新版本的 Bootstrap 核心 CSS 文件 -->\n<link\n  rel=\"stylesheet\"\n  href=\"https://stackpath.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css\"\n/>\n\n<!-- 可选的 Bootstrap 主题文件（一般不用引入） -->\n<link\n  rel=\"stylesheet\"\n  href=\"https://stackpath.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap-theme.min.css\"\n/>\n\n<!-- 最新的 Bootstrap 核心 JavaScript 文件 -->\n<script src=\"https://stackpath.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js\"></script>\n```\n\n**如果只是用一些样式 , 可以只引入 `css` 文件**\n\n# 未完待续 . . .\n","slug":"bootstrap/bootstrap","published":1,"updated":"2021-07-11T13:51:52.072Z","layout":"post","photos":[],"link":"","_id":"cksvxwnmw000bgubq6dzg8o17","content":"<h1 id=\"Bootstrap-v3-中文文档\"><a href=\"#Bootstrap-v3-中文文档\" class=\"headerlink\" title=\"Bootstrap v3 中文文档\"></a>Bootstrap v3 中文文档</h1><blockquote>\n<h2 id=\"https-v3-bootcss-com\"><a href=\"#https-v3-bootcss-com\" class=\"headerlink\" title=\"https://v3.bootcss.com/\"></a><a href=\"https://v3.bootcss.com/\">https://v3.bootcss.com/</a></h2></blockquote>\n<h1 id=\"引入使用\"><a href=\"#引入使用\" class=\"headerlink\" title=\"引入使用\"></a>引入使用</h1><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 最新版本的 Bootstrap 核心 CSS 文件 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://stackpath.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 可选的 Bootstrap 主题文件（一般不用引入） --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://stackpath.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap-theme.min.css&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 最新的 Bootstrap 核心 JavaScript 文件 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://stackpath.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>如果只是用一些样式 , 可以只引入 <code>css</code> 文件</strong></p>\n<h1 id=\"未完待续\"><a href=\"#未完待续\" class=\"headerlink\" title=\"未完待续 . . .\"></a>未完待续 . . .</h1>","site":{"data":{"link":{"class1":{"class_name":"舍友","link_list":{"1":{"name":"codeAntg","link":"https://blog.csdn.net/weixin_44745147","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/fjh.jpg","descr":"那家刀削面不错","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class2":{"class_name":"致谢","link_list":{"1":{"name":"JerrC","link":"https://immyw.com","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/immyw.png","descr":"今日事,今日毕","width":"1px","style":"solid","color":"#60d0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/hexo.svg","descr":"A fast, simple & powerful blog framework","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class3":{"class_name":"友人","link_list":{"1":{"name":"Chester","link":"http://chesterlds.cn","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/chester.jpg","descr":null,"width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Wangs","link":"https://wangsss.cn/","avatar":"https://wangsss.cn/img/avatar.png","descr":"不疯魔，不成活 ~","width":"1px","style":"solid","color":"#9d9d9d","custom":"link_custom1","time":"4s","namecolor":"0094ff","descolor":"#ff9191"}}}}}},"excerpt":"","more":"<h1 id=\"Bootstrap-v3-中文文档\"><a href=\"#Bootstrap-v3-中文文档\" class=\"headerlink\" title=\"Bootstrap v3 中文文档\"></a>Bootstrap v3 中文文档</h1><blockquote>\n<h2 id=\"https-v3-bootcss-com\"><a href=\"#https-v3-bootcss-com\" class=\"headerlink\" title=\"https://v3.bootcss.com/\"></a><a href=\"https://v3.bootcss.com/\">https://v3.bootcss.com/</a></h2></blockquote>\n<h1 id=\"引入使用\"><a href=\"#引入使用\" class=\"headerlink\" title=\"引入使用\"></a>引入使用</h1><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 最新版本的 Bootstrap 核心 CSS 文件 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://stackpath.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 可选的 Bootstrap 主题文件（一般不用引入） --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://stackpath.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap-theme.min.css&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 最新的 Bootstrap 核心 JavaScript 文件 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://stackpath.bootstrapcdn.com/bootstrap/3.4.1/js/bootstrap.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>如果只是用一些样式 , 可以只引入 <code>css</code> 文件</strong></p>\n<h1 id=\"未完待续\"><a href=\"#未完待续\" class=\"headerlink\" title=\"未完待续 . . .\"></a>未完待续 . . .</h1>"},{"title":"几种常见css布局","top_img":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg","cover":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/divcss.jpeg","date":"2020-06-04T21:34:52.000Z","_content":"\n# 单列布局\n\n![danlie](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/danlie.jpg)\n\n### 第一种\n\n给定宽度，margin:auto 即可实现\n\n### html\n\n```html\n<div class=\"header\"></div>\n<div class=\"content\"></div>\n<div class=\"footer\"></div>\n```\n\n### css\n\n```css\n.header {\n  margin: 0 auto;\n  max-width: 960px;\n  height: 100px;\n  background-color: blue;\n}\n.content {\n  margin: 0 auto;\n  max-width: 960px;\n  height: 400px;\n  background-color: yellow;\n}\n.footer {\n  margin: 0 auto;\n  max-width: 960px;\n  height: 100px;\n  background-color: green;\n}\n```\n\n### 第二种\n\n### html\n\n```html\n<div class=\"header\">\n  <div class=\"nav\"></div>\n</div>\n<div class=\"content\"></div>\n<div class=\"footer\"></div>\n```\n\n### css\n\n```css\n.header {\n  margin: 0 auto;\n  max-width: 960px;\n  height: 100px;\n  background-color: blue;\n}\n.nav {\n  margin: 0 auto;\n  max-width: 800px;\n  background-color: darkgray;\n  height: 50px;\n}\n.content {\n  margin: 0 auto;\n  max-width: 800px;\n  height: 400px;\n  background-color: aquamarine;\n}\n.footer {\n  margin: 0 auto;\n  max-width: 960px;\n  height: 100px;\n  background-color: aqua;\n}\n```\n\n---\n\n# 等高布局\n\n当有内容填充一侧时,另一侧高度跟左侧保持相等\n\n### html\n\n```html\n<div class=\"parent\">\n  <div class=\"box1\">\n    <p>content</p>\n    <p>content</p>\n    <p>content</p>\n    <p>content</p>\n    <p>content</p>\n    <p>content</p>\n    <p>content</p>\n  </div>\n  <div class=\"box2\">\n    <p>content</p>\n  </div>\n</div>\n```\n\n### css\n\n通过设定 margin-bottom 和 padding-bottom，然后让父容器溢出隐藏，就能达到等高的效果\n\n```css\n.parent {\n  border: 4px solid rgb(69, 209, 228);\n  overflow: hidden;\n}\n.box1 {\n  float: left;\n  width: 100px;\n  background-color: rgb(230, 56, 56);\n  margin-bottom: -2000px;\n  padding-bottom: 2000px;\n}\n.box2 {\n  float: right;\n  width: 100px;\n  background-color: rgb(67, 67, 221);\n  margin-bottom: -2000px;\n  padding-bottom: 2000px;\n}\n```\n\n### 实例：\n\n![example](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sameheight.png)\n\n---\n\n# 三列布局(双飞翼,圣杯)\n\n左侧固定，右侧固定，中间自适应的三列布局\n\n```\n实现方式有很多：\n    1.BFC\n    2.定位\n    3.浮动\n    4.flex弹性\n```\n\n示例：\n\n### html\n\n```html\n<div class=\"container\">\n  <div class=\"center\">\n    <h1>center</h1>\n  </div>\n  <div class=\"left\">\n    <h1>Left</h1>\n  </div>\n  <div class=\"right\">\n    <h1>Right</h1>\n  </div>\n</div>\n```\n\n### css\n\n```css\n.container {\n  padding-left: 220px;\n  padding-right: 220px;\n}\n.left {\n  float: left;\n  width: 200px;\n  height: 400px;\n  background: red;\n  margin-left: -100%;\n  position: relative;\n  left: -220px;\n}\n.center {\n  float: left;\n  width: 100%;\n  height: 500px;\n  background: yellow;\n}\n.right {\n  float: left;\n  width: 200px;\n  height: 400px;\n  background: blue;\n  margin-left: -200px;\n  position: relative;\n  right: -220px;\n}\n```\n\n### 实例：\n\n![example](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/shuangfeiyi.png)\n\n# 未完待续 . . .\n","source":"_posts/css/css-Layout.md","raw":"---\ntitle: 几种常见css布局\ntop_img: https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg\ncover: https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/divcss.jpeg\ndate: 2020-06-05 05:34:52\ntags:\n  - css布局\ncategories:\n  - css\n---\n\n# 单列布局\n\n![danlie](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/danlie.jpg)\n\n### 第一种\n\n给定宽度，margin:auto 即可实现\n\n### html\n\n```html\n<div class=\"header\"></div>\n<div class=\"content\"></div>\n<div class=\"footer\"></div>\n```\n\n### css\n\n```css\n.header {\n  margin: 0 auto;\n  max-width: 960px;\n  height: 100px;\n  background-color: blue;\n}\n.content {\n  margin: 0 auto;\n  max-width: 960px;\n  height: 400px;\n  background-color: yellow;\n}\n.footer {\n  margin: 0 auto;\n  max-width: 960px;\n  height: 100px;\n  background-color: green;\n}\n```\n\n### 第二种\n\n### html\n\n```html\n<div class=\"header\">\n  <div class=\"nav\"></div>\n</div>\n<div class=\"content\"></div>\n<div class=\"footer\"></div>\n```\n\n### css\n\n```css\n.header {\n  margin: 0 auto;\n  max-width: 960px;\n  height: 100px;\n  background-color: blue;\n}\n.nav {\n  margin: 0 auto;\n  max-width: 800px;\n  background-color: darkgray;\n  height: 50px;\n}\n.content {\n  margin: 0 auto;\n  max-width: 800px;\n  height: 400px;\n  background-color: aquamarine;\n}\n.footer {\n  margin: 0 auto;\n  max-width: 960px;\n  height: 100px;\n  background-color: aqua;\n}\n```\n\n---\n\n# 等高布局\n\n当有内容填充一侧时,另一侧高度跟左侧保持相等\n\n### html\n\n```html\n<div class=\"parent\">\n  <div class=\"box1\">\n    <p>content</p>\n    <p>content</p>\n    <p>content</p>\n    <p>content</p>\n    <p>content</p>\n    <p>content</p>\n    <p>content</p>\n  </div>\n  <div class=\"box2\">\n    <p>content</p>\n  </div>\n</div>\n```\n\n### css\n\n通过设定 margin-bottom 和 padding-bottom，然后让父容器溢出隐藏，就能达到等高的效果\n\n```css\n.parent {\n  border: 4px solid rgb(69, 209, 228);\n  overflow: hidden;\n}\n.box1 {\n  float: left;\n  width: 100px;\n  background-color: rgb(230, 56, 56);\n  margin-bottom: -2000px;\n  padding-bottom: 2000px;\n}\n.box2 {\n  float: right;\n  width: 100px;\n  background-color: rgb(67, 67, 221);\n  margin-bottom: -2000px;\n  padding-bottom: 2000px;\n}\n```\n\n### 实例：\n\n![example](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sameheight.png)\n\n---\n\n# 三列布局(双飞翼,圣杯)\n\n左侧固定，右侧固定，中间自适应的三列布局\n\n```\n实现方式有很多：\n    1.BFC\n    2.定位\n    3.浮动\n    4.flex弹性\n```\n\n示例：\n\n### html\n\n```html\n<div class=\"container\">\n  <div class=\"center\">\n    <h1>center</h1>\n  </div>\n  <div class=\"left\">\n    <h1>Left</h1>\n  </div>\n  <div class=\"right\">\n    <h1>Right</h1>\n  </div>\n</div>\n```\n\n### css\n\n```css\n.container {\n  padding-left: 220px;\n  padding-right: 220px;\n}\n.left {\n  float: left;\n  width: 200px;\n  height: 400px;\n  background: red;\n  margin-left: -100%;\n  position: relative;\n  left: -220px;\n}\n.center {\n  float: left;\n  width: 100%;\n  height: 500px;\n  background: yellow;\n}\n.right {\n  float: left;\n  width: 200px;\n  height: 400px;\n  background: blue;\n  margin-left: -200px;\n  position: relative;\n  right: -220px;\n}\n```\n\n### 实例：\n\n![example](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/shuangfeiyi.png)\n\n# 未完待续 . . .\n","slug":"css/css-Layout","published":1,"updated":"2021-05-13T07:56:23.744Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cksvxwnmy000dgubq43u4a5jr","content":"<h1 id=\"单列布局\"><a href=\"#单列布局\" class=\"headerlink\" title=\"单列布局\"></a>单列布局</h1><p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/danlie.jpg\" alt=\"danlie\"></p>\n<h3 id=\"第一种\"><a href=\"#第一种\" class=\"headerlink\" title=\"第一种\"></a>第一种</h3><p>给定宽度，margin:auto 即可实现</p>\n<h3 id=\"html\"><a href=\"#html\" class=\"headerlink\" title=\"html\"></a>html</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;header&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;content&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;footer&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"css\"><a href=\"#css\" class=\"headerlink\" title=\"css\"></a>css</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.header</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span><br><span class=\"line\">  <span class=\"attribute\">max-width</span>: <span class=\"number\">960px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: blue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.content</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span><br><span class=\"line\">  <span class=\"attribute\">max-width</span>: <span class=\"number\">960px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">400px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: yellow;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.footer</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span><br><span class=\"line\">  <span class=\"attribute\">max-width</span>: <span class=\"number\">960px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: green;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"第二种\"><a href=\"#第二种\" class=\"headerlink\" title=\"第二种\"></a>第二种</h3><h3 id=\"html-1\"><a href=\"#html-1\" class=\"headerlink\" title=\"html\"></a>html</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;header&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;nav&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;content&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;footer&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"css-1\"><a href=\"#css-1\" class=\"headerlink\" title=\"css\"></a>css</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.header</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span><br><span class=\"line\">  <span class=\"attribute\">max-width</span>: <span class=\"number\">960px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: blue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.nav</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span><br><span class=\"line\">  <span class=\"attribute\">max-width</span>: <span class=\"number\">800px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: darkgray;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.content</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span><br><span class=\"line\">  <span class=\"attribute\">max-width</span>: <span class=\"number\">800px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">400px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: aquamarine;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.footer</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span><br><span class=\"line\">  <span class=\"attribute\">max-width</span>: <span class=\"number\">960px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: aqua;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"等高布局\"><a href=\"#等高布局\" class=\"headerlink\" title=\"等高布局\"></a>等高布局</h1><p>当有内容填充一侧时,另一侧高度跟左侧保持相等</p>\n<h3 id=\"html-2\"><a href=\"#html-2\" class=\"headerlink\" title=\"html\"></a>html</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;parent&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box1&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>content<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>content<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>content<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>content<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>content<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>content<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>content<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box2&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>content<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"css-2\"><a href=\"#css-2\" class=\"headerlink\" title=\"css\"></a>css</h3><p>通过设定 margin-bottom 和 padding-bottom，然后让父容器溢出隐藏，就能达到等高的效果</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">4px</span> solid <span class=\"built_in\">rgb</span>(<span class=\"number\">69</span>, <span class=\"number\">209</span>, <span class=\"number\">228</span>);</span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.box1</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"built_in\">rgb</span>(<span class=\"number\">230</span>, <span class=\"number\">56</span>, <span class=\"number\">56</span>);</span><br><span class=\"line\">  <span class=\"attribute\">margin-bottom</span>: -<span class=\"number\">2000px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding-bottom</span>: <span class=\"number\">2000px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.box2</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: right;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"built_in\">rgb</span>(<span class=\"number\">67</span>, <span class=\"number\">67</span>, <span class=\"number\">221</span>);</span><br><span class=\"line\">  <span class=\"attribute\">margin-bottom</span>: -<span class=\"number\">2000px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding-bottom</span>: <span class=\"number\">2000px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"实例：\"><a href=\"#实例：\" class=\"headerlink\" title=\"实例：\"></a>实例：</h3><p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sameheight.png\" alt=\"example\"></p>\n<hr>\n<h1 id=\"三列布局-双飞翼-圣杯\"><a href=\"#三列布局-双飞翼-圣杯\" class=\"headerlink\" title=\"三列布局(双飞翼,圣杯)\"></a>三列布局(双飞翼,圣杯)</h1><p>左侧固定，右侧固定，中间自适应的三列布局</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">实现方式有很多：</span><br><span class=\"line\">    1.BFC</span><br><span class=\"line\">    2.定位</span><br><span class=\"line\">    3.浮动</span><br><span class=\"line\">    4.flex弹性</span><br></pre></td></tr></table></figure>\n\n<p>示例：</p>\n<h3 id=\"html-3\"><a href=\"#html-3\" class=\"headerlink\" title=\"html\"></a>html</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;center&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>center<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;left&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Left<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;right&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Right<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"css-3\"><a href=\"#css-3\" class=\"headerlink\" title=\"css\"></a>css</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">padding-left</span>: <span class=\"number\">220px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding-right</span>: <span class=\"number\">220px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.left</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">400px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: red;</span><br><span class=\"line\">  <span class=\"attribute\">margin-left</span>: -<span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: -<span class=\"number\">220px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.center</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">500px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: yellow;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.right</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">400px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: blue;</span><br><span class=\"line\">  <span class=\"attribute\">margin-left</span>: -<span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"attribute\">right</span>: -<span class=\"number\">220px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"实例：-1\"><a href=\"#实例：-1\" class=\"headerlink\" title=\"实例：\"></a>实例：</h3><p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/shuangfeiyi.png\" alt=\"example\"></p>\n<h1 id=\"未完待续\"><a href=\"#未完待续\" class=\"headerlink\" title=\"未完待续 . . .\"></a>未完待续 . . .</h1>","site":{"data":{"link":{"class1":{"class_name":"舍友","link_list":{"1":{"name":"codeAntg","link":"https://blog.csdn.net/weixin_44745147","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/fjh.jpg","descr":"那家刀削面不错","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class2":{"class_name":"致谢","link_list":{"1":{"name":"JerrC","link":"https://immyw.com","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/immyw.png","descr":"今日事,今日毕","width":"1px","style":"solid","color":"#60d0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/hexo.svg","descr":"A fast, simple & powerful blog framework","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class3":{"class_name":"友人","link_list":{"1":{"name":"Chester","link":"http://chesterlds.cn","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/chester.jpg","descr":null,"width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Wangs","link":"https://wangsss.cn/","avatar":"https://wangsss.cn/img/avatar.png","descr":"不疯魔，不成活 ~","width":"1px","style":"solid","color":"#9d9d9d","custom":"link_custom1","time":"4s","namecolor":"0094ff","descolor":"#ff9191"}}}}}},"excerpt":"","more":"<h1 id=\"单列布局\"><a href=\"#单列布局\" class=\"headerlink\" title=\"单列布局\"></a>单列布局</h1><p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/danlie.jpg\" alt=\"danlie\"></p>\n<h3 id=\"第一种\"><a href=\"#第一种\" class=\"headerlink\" title=\"第一种\"></a>第一种</h3><p>给定宽度，margin:auto 即可实现</p>\n<h3 id=\"html\"><a href=\"#html\" class=\"headerlink\" title=\"html\"></a>html</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;header&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;content&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;footer&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"css\"><a href=\"#css\" class=\"headerlink\" title=\"css\"></a>css</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.header</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span><br><span class=\"line\">  <span class=\"attribute\">max-width</span>: <span class=\"number\">960px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: blue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.content</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span><br><span class=\"line\">  <span class=\"attribute\">max-width</span>: <span class=\"number\">960px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">400px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: yellow;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.footer</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span><br><span class=\"line\">  <span class=\"attribute\">max-width</span>: <span class=\"number\">960px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: green;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"第二种\"><a href=\"#第二种\" class=\"headerlink\" title=\"第二种\"></a>第二种</h3><h3 id=\"html-1\"><a href=\"#html-1\" class=\"headerlink\" title=\"html\"></a>html</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;header&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;nav&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;content&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;footer&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"css-1\"><a href=\"#css-1\" class=\"headerlink\" title=\"css\"></a>css</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.header</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span><br><span class=\"line\">  <span class=\"attribute\">max-width</span>: <span class=\"number\">960px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: blue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.nav</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span><br><span class=\"line\">  <span class=\"attribute\">max-width</span>: <span class=\"number\">800px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: darkgray;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.content</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span><br><span class=\"line\">  <span class=\"attribute\">max-width</span>: <span class=\"number\">800px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">400px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: aquamarine;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.footer</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span><br><span class=\"line\">  <span class=\"attribute\">max-width</span>: <span class=\"number\">960px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: aqua;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h1 id=\"等高布局\"><a href=\"#等高布局\" class=\"headerlink\" title=\"等高布局\"></a>等高布局</h1><p>当有内容填充一侧时,另一侧高度跟左侧保持相等</p>\n<h3 id=\"html-2\"><a href=\"#html-2\" class=\"headerlink\" title=\"html\"></a>html</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;parent&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box1&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>content<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>content<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>content<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>content<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>content<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>content<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>content<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box2&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>content<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"css-2\"><a href=\"#css-2\" class=\"headerlink\" title=\"css\"></a>css</h3><p>通过设定 margin-bottom 和 padding-bottom，然后让父容器溢出隐藏，就能达到等高的效果</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">4px</span> solid <span class=\"built_in\">rgb</span>(<span class=\"number\">69</span>, <span class=\"number\">209</span>, <span class=\"number\">228</span>);</span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.box1</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"built_in\">rgb</span>(<span class=\"number\">230</span>, <span class=\"number\">56</span>, <span class=\"number\">56</span>);</span><br><span class=\"line\">  <span class=\"attribute\">margin-bottom</span>: -<span class=\"number\">2000px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding-bottom</span>: <span class=\"number\">2000px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.box2</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: right;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"built_in\">rgb</span>(<span class=\"number\">67</span>, <span class=\"number\">67</span>, <span class=\"number\">221</span>);</span><br><span class=\"line\">  <span class=\"attribute\">margin-bottom</span>: -<span class=\"number\">2000px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding-bottom</span>: <span class=\"number\">2000px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"实例：\"><a href=\"#实例：\" class=\"headerlink\" title=\"实例：\"></a>实例：</h3><p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sameheight.png\" alt=\"example\"></p>\n<hr>\n<h1 id=\"三列布局-双飞翼-圣杯\"><a href=\"#三列布局-双飞翼-圣杯\" class=\"headerlink\" title=\"三列布局(双飞翼,圣杯)\"></a>三列布局(双飞翼,圣杯)</h1><p>左侧固定，右侧固定，中间自适应的三列布局</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">实现方式有很多：</span><br><span class=\"line\">    1.BFC</span><br><span class=\"line\">    2.定位</span><br><span class=\"line\">    3.浮动</span><br><span class=\"line\">    4.flex弹性</span><br></pre></td></tr></table></figure>\n\n<p>示例：</p>\n<h3 id=\"html-3\"><a href=\"#html-3\" class=\"headerlink\" title=\"html\"></a>html</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;center&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>center<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;left&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Left<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;right&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Right<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"css-3\"><a href=\"#css-3\" class=\"headerlink\" title=\"css\"></a>css</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">padding-left</span>: <span class=\"number\">220px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding-right</span>: <span class=\"number\">220px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.left</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">400px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: red;</span><br><span class=\"line\">  <span class=\"attribute\">margin-left</span>: -<span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: -<span class=\"number\">220px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.center</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">500px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: yellow;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.right</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">400px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: blue;</span><br><span class=\"line\">  <span class=\"attribute\">margin-left</span>: -<span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"attribute\">right</span>: -<span class=\"number\">220px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"实例：-1\"><a href=\"#实例：-1\" class=\"headerlink\" title=\"实例：\"></a>实例：</h3><p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/shuangfeiyi.png\" alt=\"example\"></p>\n<h1 id=\"未完待续\"><a href=\"#未完待续\" class=\"headerlink\" title=\"未完待续 . . .\"></a>未完待续 . . .</h1>"},{"title":"css3自动换行排列","top_img":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg","cover":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/divcss.jpeg","date":"2020-07-22T02:42:19.000Z","_content":"\n# 如果一行放不下就会自动换行\n\n```css\ndisplay: flex;\nflex-wrap: wrap;\n```\n\n## 示例 :\n\n### html\n\n```html\n<div class=\"container\">\n  <div class=\"box\"></div>\n  <div class=\"box\"></div>\n  <div class=\"box\"></div>\n  <div class=\"box\"></div>\n  <div class=\"box\"></div>\n  <div class=\"box\"></div>\n</div>\n```\n\n### css\n\n```css\n.container {\n  display: flex;\n  flex-wrap: wrap; /*换行*/\n  /* flex-wrap: wrap-reverse; //反方向换行 */\n  align-content: flex-start; /*紧揍排列,解决换行出现空行*/\n  justify-content: space-between; /*左右布局,平分间隙*/\n  width: 520px;\n  height: 300px;\n  background-color: rgb(181, 235, 235);\n}\n.box {\n  margin-top: 6px;\n  width: 100px;\n  height: 100px;\n  background-color: rgb(223, 155, 155);\n}\n```\n\n## 如图 :\n\n![flex-wrap](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/css3flex/flexwrap.png)\n\n# The_End\n","source":"_posts/css/css-flex.md","raw":"---\ntitle: css3自动换行排列\ntop_img: https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg\ncover: https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/divcss.jpeg\ndate: 2020-07-22 10:42:19\ntags:\n  - css布局\n  - flex\ncategories:\n  - css\n---\n\n# 如果一行放不下就会自动换行\n\n```css\ndisplay: flex;\nflex-wrap: wrap;\n```\n\n## 示例 :\n\n### html\n\n```html\n<div class=\"container\">\n  <div class=\"box\"></div>\n  <div class=\"box\"></div>\n  <div class=\"box\"></div>\n  <div class=\"box\"></div>\n  <div class=\"box\"></div>\n  <div class=\"box\"></div>\n</div>\n```\n\n### css\n\n```css\n.container {\n  display: flex;\n  flex-wrap: wrap; /*换行*/\n  /* flex-wrap: wrap-reverse; //反方向换行 */\n  align-content: flex-start; /*紧揍排列,解决换行出现空行*/\n  justify-content: space-between; /*左右布局,平分间隙*/\n  width: 520px;\n  height: 300px;\n  background-color: rgb(181, 235, 235);\n}\n.box {\n  margin-top: 6px;\n  width: 100px;\n  height: 100px;\n  background-color: rgb(223, 155, 155);\n}\n```\n\n## 如图 :\n\n![flex-wrap](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/css3flex/flexwrap.png)\n\n# The_End\n","slug":"css/css-flex","published":1,"updated":"2021-04-30T13:34:50.688Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cksvxwnn2000hgubqhkf93bwb","content":"<h1 id=\"如果一行放不下就会自动换行\"><a href=\"#如果一行放不下就会自动换行\" class=\"headerlink\" title=\"如果一行放不下就会自动换行\"></a>如果一行放不下就会自动换行</h1><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\"><span class=\"attribute\">flex-wrap</span>: wrap;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例 :\"></a>示例 :</h2><h3 id=\"html\"><a href=\"#html\" class=\"headerlink\" title=\"html\"></a>html</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"css\"><a href=\"#css\" class=\"headerlink\" title=\"css\"></a>css</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">flex-wrap</span>: wrap; <span class=\"comment\">/*换行*/</span></span><br><span class=\"line\">  <span class=\"comment\">/* flex-wrap: wrap-reverse; //反方向换行 */</span></span><br><span class=\"line\">  <span class=\"attribute\">align-content</span>: flex-start; <span class=\"comment\">/*紧揍排列,解决换行出现空行*/</span></span><br><span class=\"line\">  <span class=\"attribute\">justify-content</span>: space-between; <span class=\"comment\">/*左右布局,平分间隙*/</span></span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">520px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"built_in\">rgb</span>(<span class=\"number\">181</span>, <span class=\"number\">235</span>, <span class=\"number\">235</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>: <span class=\"number\">6px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"built_in\">rgb</span>(<span class=\"number\">223</span>, <span class=\"number\">155</span>, <span class=\"number\">155</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"如图\"><a href=\"#如图\" class=\"headerlink\" title=\"如图 :\"></a>如图 :</h2><p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/css3flex/flexwrap.png\" alt=\"flex-wrap\"></p>\n<h1 id=\"The-End\"><a href=\"#The-End\" class=\"headerlink\" title=\"The_End\"></a>The_End</h1>","site":{"data":{"link":{"class1":{"class_name":"舍友","link_list":{"1":{"name":"codeAntg","link":"https://blog.csdn.net/weixin_44745147","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/fjh.jpg","descr":"那家刀削面不错","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class2":{"class_name":"致谢","link_list":{"1":{"name":"JerrC","link":"https://immyw.com","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/immyw.png","descr":"今日事,今日毕","width":"1px","style":"solid","color":"#60d0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/hexo.svg","descr":"A fast, simple & powerful blog framework","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class3":{"class_name":"友人","link_list":{"1":{"name":"Chester","link":"http://chesterlds.cn","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/chester.jpg","descr":null,"width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Wangs","link":"https://wangsss.cn/","avatar":"https://wangsss.cn/img/avatar.png","descr":"不疯魔，不成活 ~","width":"1px","style":"solid","color":"#9d9d9d","custom":"link_custom1","time":"4s","namecolor":"0094ff","descolor":"#ff9191"}}}}}},"excerpt":"","more":"<h1 id=\"如果一行放不下就会自动换行\"><a href=\"#如果一行放不下就会自动换行\" class=\"headerlink\" title=\"如果一行放不下就会自动换行\"></a>如果一行放不下就会自动换行</h1><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\"><span class=\"attribute\">flex-wrap</span>: wrap;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例 :\"></a>示例 :</h2><h3 id=\"html\"><a href=\"#html\" class=\"headerlink\" title=\"html\"></a>html</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"css\"><a href=\"#css\" class=\"headerlink\" title=\"css\"></a>css</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">flex-wrap</span>: wrap; <span class=\"comment\">/*换行*/</span></span><br><span class=\"line\">  <span class=\"comment\">/* flex-wrap: wrap-reverse; //反方向换行 */</span></span><br><span class=\"line\">  <span class=\"attribute\">align-content</span>: flex-start; <span class=\"comment\">/*紧揍排列,解决换行出现空行*/</span></span><br><span class=\"line\">  <span class=\"attribute\">justify-content</span>: space-between; <span class=\"comment\">/*左右布局,平分间隙*/</span></span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">520px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"built_in\">rgb</span>(<span class=\"number\">181</span>, <span class=\"number\">235</span>, <span class=\"number\">235</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>: <span class=\"number\">6px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"built_in\">rgb</span>(<span class=\"number\">223</span>, <span class=\"number\">155</span>, <span class=\"number\">155</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"如图\"><a href=\"#如图\" class=\"headerlink\" title=\"如图 :\"></a>如图 :</h2><p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/css3flex/flexwrap.png\" alt=\"flex-wrap\"></p>\n<h1 id=\"The-End\"><a href=\"#The-End\" class=\"headerlink\" title=\"The_End\"></a>The_End</h1>"},{"title":"css常用居中方式","top_img":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg","cover":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/divcss.jpeg","date":"2020-07-27T15:04:33.000Z","_content":"\n{% tabs center %}\n\n<!-- tab 水平居中 -->\n\n# 一、水平居中\n\n## 内联元素\n\n父级元素加 `text-align: center` 即可\n\n```html\n<div class=\"container\">\n  <a>内联元素</a>\n</div>\n```\n\n```css\n.container {\n  text-align: center;\n}\n```\n\n## 块级元素\n\n给定宽度,然后 margin 上下为 0,左右 auto 即可\n\n```html\n<div class=\"container\">块级元素</div>\n```\n\n```css\n.container {\n  width: 200px;\n  margin: 0 auto;\n}\n```\n\n## 多个块级元素\n\n### 第一种方式\n\n子元素设置成内联,父级元素加 `text-align:center`即可\n\n```html\n<div class=\"container\">\n  <div>第一个块</div>\n  <div>第二个块</div>\n  <div>第三个块</div>\n</div>\n```\n\n```css\n.container {\n  text-align: center;\n}\n.container div {\n  display: inline-block;\n}\n```\n\n### 第二种方式\n\n利用 flexbox 弹性布局\n\n```html\n<div class=\"container\">\n  <div>第一个块</div>\n  <div>第二个块</div>\n  <div>第三个块</div>\n</div>\n```\n\n```css\n.container {\n  display: flex;\n  justify-content: center;\n}\n```\n\n<!-- endtab -->\n\n<!-- tab 垂直居中 -->\n\n# 二、垂直居中\n\n## 内联元素\n\n### 第一种方式\n\n设置 padding\n\n```html\n<div class=\"container\">需要垂直居中的内容(内联)</div>\n```\n\n```css\n.container {\n  padding: 40px 40px;\n}\n```\n\n### 第二种方式\n\n按照父级元素的高度,设置子元素的行高\n\n```html\n<div class=\"container\">需要垂直居中的内容(内联)</div>\n```\n\n```css\n.container {\n  height: 100px;\n  line-height: 100px;\n}\n```\n\n### 第三种方式\n\n利用 flexbox,父级元素需给定高度\n\n```html\n<div class=\"container\">\n  <a href=\"\">爷要垂直居中</a>\n  <a href=\"\">爷要垂直居中</a>\n  <a href=\"\">爷要垂直居中</a>\n</div>\n```\n\n```css\n.container {\n  width: 200px;\n  height: 200px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n}\n```\n\n## 块级元素\n\n### 第一种方式\n\n父元素相对定位 `position:relative`,子元素绝对定位 `position: absolute`\n\n```html\n<div class=\"container\">\n  <div>爷要垂直居中</div>\n</div>\n```\n\n```css\n.container {\n  position: relative;\n  width: 200px;\n  height: 200px;\n}\n.container div {\n  position: absolute;\n  top: 50%;\n  transform: translateY(-50%);\n}\n```\n\n### 第二种方式\n\n利用 flexbox\n\n```html\n<div class=\"container\">\n  <div>爷要垂直居中</div>\n</div>\n```\n\n```css\n.container {\n  width: 200px;\n  height: 200px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n}\n```\n\n<!-- endtab -->\n\n<!-- tab 水平和垂直居中 -->\n\n# 三、水平和垂直居中\n\n### 第一种方式\n\n父元素相对定位 `position:relative`,子元素绝对定位 `position: absolute`\n\n```html\n<div class=\"container\">\n  <div>爷要水平和垂直居中</div>\n</div>\n```\n\n```css\n.container {\n  position: relative;\n  width: 200px;\n  height: 200px;\n}\n.container div {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: red;\n}\n```\n\n### 第二种方式\n\n使用 flexbox\n\n```html\n<div class=\"container\">\n  <div>我要垂直居中啊a我要垂直居中啊a我要垂直居中啊</div>\n</div>\n```\n\n```css\n.container {\n  width: 200px;\n  height: 200px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n.container div {\n  width: 100px;\n  height: 100px;\n}\n```\n\n<!-- endtab -->\n\n{% endtabs %}\n\n![lalala](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/emoji/s.png)\n\n## 最后说一点,如果具体宽高已知,给定具体数值也可以直接实现\n\n# The_End\n","source":"_posts/css/css-center.md","raw":"---\ntitle: css常用居中方式\ntop_img: https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg\ncover: https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/divcss.jpeg\ndate: 2020-07-27 23:04:33\ntags:\n  - css布局\ncategories:\n  - css\n---\n\n{% tabs center %}\n\n<!-- tab 水平居中 -->\n\n# 一、水平居中\n\n## 内联元素\n\n父级元素加 `text-align: center` 即可\n\n```html\n<div class=\"container\">\n  <a>内联元素</a>\n</div>\n```\n\n```css\n.container {\n  text-align: center;\n}\n```\n\n## 块级元素\n\n给定宽度,然后 margin 上下为 0,左右 auto 即可\n\n```html\n<div class=\"container\">块级元素</div>\n```\n\n```css\n.container {\n  width: 200px;\n  margin: 0 auto;\n}\n```\n\n## 多个块级元素\n\n### 第一种方式\n\n子元素设置成内联,父级元素加 `text-align:center`即可\n\n```html\n<div class=\"container\">\n  <div>第一个块</div>\n  <div>第二个块</div>\n  <div>第三个块</div>\n</div>\n```\n\n```css\n.container {\n  text-align: center;\n}\n.container div {\n  display: inline-block;\n}\n```\n\n### 第二种方式\n\n利用 flexbox 弹性布局\n\n```html\n<div class=\"container\">\n  <div>第一个块</div>\n  <div>第二个块</div>\n  <div>第三个块</div>\n</div>\n```\n\n```css\n.container {\n  display: flex;\n  justify-content: center;\n}\n```\n\n<!-- endtab -->\n\n<!-- tab 垂直居中 -->\n\n# 二、垂直居中\n\n## 内联元素\n\n### 第一种方式\n\n设置 padding\n\n```html\n<div class=\"container\">需要垂直居中的内容(内联)</div>\n```\n\n```css\n.container {\n  padding: 40px 40px;\n}\n```\n\n### 第二种方式\n\n按照父级元素的高度,设置子元素的行高\n\n```html\n<div class=\"container\">需要垂直居中的内容(内联)</div>\n```\n\n```css\n.container {\n  height: 100px;\n  line-height: 100px;\n}\n```\n\n### 第三种方式\n\n利用 flexbox,父级元素需给定高度\n\n```html\n<div class=\"container\">\n  <a href=\"\">爷要垂直居中</a>\n  <a href=\"\">爷要垂直居中</a>\n  <a href=\"\">爷要垂直居中</a>\n</div>\n```\n\n```css\n.container {\n  width: 200px;\n  height: 200px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n}\n```\n\n## 块级元素\n\n### 第一种方式\n\n父元素相对定位 `position:relative`,子元素绝对定位 `position: absolute`\n\n```html\n<div class=\"container\">\n  <div>爷要垂直居中</div>\n</div>\n```\n\n```css\n.container {\n  position: relative;\n  width: 200px;\n  height: 200px;\n}\n.container div {\n  position: absolute;\n  top: 50%;\n  transform: translateY(-50%);\n}\n```\n\n### 第二种方式\n\n利用 flexbox\n\n```html\n<div class=\"container\">\n  <div>爷要垂直居中</div>\n</div>\n```\n\n```css\n.container {\n  width: 200px;\n  height: 200px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n}\n```\n\n<!-- endtab -->\n\n<!-- tab 水平和垂直居中 -->\n\n# 三、水平和垂直居中\n\n### 第一种方式\n\n父元素相对定位 `position:relative`,子元素绝对定位 `position: absolute`\n\n```html\n<div class=\"container\">\n  <div>爷要水平和垂直居中</div>\n</div>\n```\n\n```css\n.container {\n  position: relative;\n  width: 200px;\n  height: 200px;\n}\n.container div {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background-color: red;\n}\n```\n\n### 第二种方式\n\n使用 flexbox\n\n```html\n<div class=\"container\">\n  <div>我要垂直居中啊a我要垂直居中啊a我要垂直居中啊</div>\n</div>\n```\n\n```css\n.container {\n  width: 200px;\n  height: 200px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n.container div {\n  width: 100px;\n  height: 100px;\n}\n```\n\n<!-- endtab -->\n\n{% endtabs %}\n\n![lalala](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/emoji/s.png)\n\n## 最后说一点,如果具体宽高已知,给定具体数值也可以直接实现\n\n# The_End\n","slug":"css/css-center","published":1,"updated":"2021-07-20T14:50:34.024Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cksvxwnn4000jgubq2o2k0bwn","content":"<div class=\"tabs\" id=\"center\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button type=\"button\" data-href=\"#center-1\">水平居中</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#center-2\">垂直居中</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#center-3\">水平和垂直居中</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"center-1\"><h1 id=\"一、水平居中\"><a href=\"#一、水平居中\" class=\"headerlink\" title=\"一、水平居中\"></a>一、水平居中</h1><h2 id=\"内联元素\"><a href=\"#内联元素\" class=\"headerlink\" title=\"内联元素\"></a>内联元素</h2><p>父级元素加 <code>text-align: center</code> 即可</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span>&gt;</span>内联元素<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"块级元素\"><a href=\"#块级元素\" class=\"headerlink\" title=\"块级元素\"></a>块级元素</h2><p>给定宽度,然后 margin 上下为 0,左右 auto 即可</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span>块级元素<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"多个块级元素\"><a href=\"#多个块级元素\" class=\"headerlink\" title=\"多个块级元素\"></a>多个块级元素</h2><h3 id=\"第一种方式\"><a href=\"#第一种方式\" class=\"headerlink\" title=\"第一种方式\"></a>第一种方式</h3><p>子元素设置成内联,父级元素加 <code>text-align:center</code>即可</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>第一个块<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>第二个块<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>第三个块<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.container</span> <span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"第二种方式\"><a href=\"#第二种方式\" class=\"headerlink\" title=\"第二种方式\"></a>第二种方式</h3><p>利用 flexbox 弹性布局</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>第一个块<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>第二个块<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>第三个块<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">justify-content</span>: center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"center-2\"><h1 id=\"二、垂直居中\"><a href=\"#二、垂直居中\" class=\"headerlink\" title=\"二、垂直居中\"></a>二、垂直居中</h1><h2 id=\"内联元素\"><a href=\"#内联元素\" class=\"headerlink\" title=\"内联元素\"></a>内联元素</h2><h3 id=\"第一种方式\"><a href=\"#第一种方式\" class=\"headerlink\" title=\"第一种方式\"></a>第一种方式</h3><p>设置 padding</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span>需要垂直居中的内容(内联)<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">40px</span> <span class=\"number\">40px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"第二种方式\"><a href=\"#第二种方式\" class=\"headerlink\" title=\"第二种方式\"></a>第二种方式</h3><p>按照父级元素的高度,设置子元素的行高</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span>需要垂直居中的内容(内联)<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"第三种方式\"><a href=\"#第三种方式\" class=\"headerlink\" title=\"第三种方式\"></a>第三种方式</h3><p>利用 flexbox,父级元素需给定高度</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>爷要垂直居中<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>爷要垂直居中<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>爷要垂直居中<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">flex-direction</span>: column;</span><br><span class=\"line\">  <span class=\"attribute\">justify-content</span>: center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"块级元素\"><a href=\"#块级元素\" class=\"headerlink\" title=\"块级元素\"></a>块级元素</h2><h3 id=\"第一种方式-1\"><a href=\"#第一种方式-1\" class=\"headerlink\" title=\"第一种方式\"></a>第一种方式</h3><p>父元素相对定位 <code>position:relative</code>,子元素绝对定位 <code>position: absolute</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>爷要垂直居中<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.container</span> <span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">transform</span>: <span class=\"built_in\">translateY</span>(-<span class=\"number\">50%</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"第二种方式-1\"><a href=\"#第二种方式-1\" class=\"headerlink\" title=\"第二种方式\"></a>第二种方式</h3><p>利用 flexbox</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>爷要垂直居中<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">flex-direction</span>: column;</span><br><span class=\"line\">  <span class=\"attribute\">justify-content</span>: center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"center-3\"><h1 id=\"三、水平和垂直居中\"><a href=\"#三、水平和垂直居中\" class=\"headerlink\" title=\"三、水平和垂直居中\"></a>三、水平和垂直居中</h1><h3 id=\"第一种方式\"><a href=\"#第一种方式\" class=\"headerlink\" title=\"第一种方式\"></a>第一种方式</h3><p>父元素相对定位 <code>position:relative</code>,子元素绝对定位 <code>position: absolute</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>爷要水平和垂直居中<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.container</span> <span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(-<span class=\"number\">50%</span>, -<span class=\"number\">50%</span>);</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"第二种方式\"><a href=\"#第二种方式\" class=\"headerlink\" title=\"第二种方式\"></a>第二种方式</h3><p>使用 flexbox</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>我要垂直居中啊a我要垂直居中啊a我要垂直居中啊<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">align-items</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">justify-content</span>: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.container</span> <span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n\n<p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/emoji/s.png\" alt=\"lalala\"></p>\n<h2 id=\"最后说一点-如果具体宽高已知-给定具体数值也可以直接实现\"><a href=\"#最后说一点-如果具体宽高已知-给定具体数值也可以直接实现\" class=\"headerlink\" title=\"最后说一点,如果具体宽高已知,给定具体数值也可以直接实现\"></a>最后说一点,如果具体宽高已知,给定具体数值也可以直接实现</h2><h1 id=\"The-End\"><a href=\"#The-End\" class=\"headerlink\" title=\"The_End\"></a>The_End</h1>","site":{"data":{"link":{"class1":{"class_name":"舍友","link_list":{"1":{"name":"codeAntg","link":"https://blog.csdn.net/weixin_44745147","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/fjh.jpg","descr":"那家刀削面不错","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class2":{"class_name":"致谢","link_list":{"1":{"name":"JerrC","link":"https://immyw.com","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/immyw.png","descr":"今日事,今日毕","width":"1px","style":"solid","color":"#60d0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/hexo.svg","descr":"A fast, simple & powerful blog framework","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class3":{"class_name":"友人","link_list":{"1":{"name":"Chester","link":"http://chesterlds.cn","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/chester.jpg","descr":null,"width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Wangs","link":"https://wangsss.cn/","avatar":"https://wangsss.cn/img/avatar.png","descr":"不疯魔，不成活 ~","width":"1px","style":"solid","color":"#9d9d9d","custom":"link_custom1","time":"4s","namecolor":"0094ff","descolor":"#ff9191"}}}}}},"excerpt":"","more":"<div class=\"tabs\" id=\"center\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button type=\"button\" data-href=\"#center-1\">水平居中</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#center-2\">垂直居中</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#center-3\">水平和垂直居中</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"center-1\"><h1 id=\"一、水平居中\"><a href=\"#一、水平居中\" class=\"headerlink\" title=\"一、水平居中\"></a>一、水平居中</h1><h2 id=\"内联元素\"><a href=\"#内联元素\" class=\"headerlink\" title=\"内联元素\"></a>内联元素</h2><p>父级元素加 <code>text-align: center</code> 即可</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span>&gt;</span>内联元素<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"块级元素\"><a href=\"#块级元素\" class=\"headerlink\" title=\"块级元素\"></a>块级元素</h2><p>给定宽度,然后 margin 上下为 0,左右 auto 即可</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span>块级元素<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"多个块级元素\"><a href=\"#多个块级元素\" class=\"headerlink\" title=\"多个块级元素\"></a>多个块级元素</h2><h3 id=\"第一种方式\"><a href=\"#第一种方式\" class=\"headerlink\" title=\"第一种方式\"></a>第一种方式</h3><p>子元素设置成内联,父级元素加 <code>text-align:center</code>即可</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>第一个块<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>第二个块<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>第三个块<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.container</span> <span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"第二种方式\"><a href=\"#第二种方式\" class=\"headerlink\" title=\"第二种方式\"></a>第二种方式</h3><p>利用 flexbox 弹性布局</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>第一个块<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>第二个块<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>第三个块<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">justify-content</span>: center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"center-2\"><h1 id=\"二、垂直居中\"><a href=\"#二、垂直居中\" class=\"headerlink\" title=\"二、垂直居中\"></a>二、垂直居中</h1><h2 id=\"内联元素\"><a href=\"#内联元素\" class=\"headerlink\" title=\"内联元素\"></a>内联元素</h2><h3 id=\"第一种方式\"><a href=\"#第一种方式\" class=\"headerlink\" title=\"第一种方式\"></a>第一种方式</h3><p>设置 padding</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span>需要垂直居中的内容(内联)<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">40px</span> <span class=\"number\">40px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"第二种方式\"><a href=\"#第二种方式\" class=\"headerlink\" title=\"第二种方式\"></a>第二种方式</h3><p>按照父级元素的高度,设置子元素的行高</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span>需要垂直居中的内容(内联)<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"第三种方式\"><a href=\"#第三种方式\" class=\"headerlink\" title=\"第三种方式\"></a>第三种方式</h3><p>利用 flexbox,父级元素需给定高度</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>爷要垂直居中<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>爷要垂直居中<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span>爷要垂直居中<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">flex-direction</span>: column;</span><br><span class=\"line\">  <span class=\"attribute\">justify-content</span>: center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"块级元素\"><a href=\"#块级元素\" class=\"headerlink\" title=\"块级元素\"></a>块级元素</h2><h3 id=\"第一种方式-1\"><a href=\"#第一种方式-1\" class=\"headerlink\" title=\"第一种方式\"></a>第一种方式</h3><p>父元素相对定位 <code>position:relative</code>,子元素绝对定位 <code>position: absolute</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>爷要垂直居中<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.container</span> <span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">transform</span>: <span class=\"built_in\">translateY</span>(-<span class=\"number\">50%</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"第二种方式-1\"><a href=\"#第二种方式-1\" class=\"headerlink\" title=\"第二种方式\"></a>第二种方式</h3><p>利用 flexbox</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>爷要垂直居中<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">flex-direction</span>: column;</span><br><span class=\"line\">  <span class=\"attribute\">justify-content</span>: center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"center-3\"><h1 id=\"三、水平和垂直居中\"><a href=\"#三、水平和垂直居中\" class=\"headerlink\" title=\"三、水平和垂直居中\"></a>三、水平和垂直居中</h1><h3 id=\"第一种方式\"><a href=\"#第一种方式\" class=\"headerlink\" title=\"第一种方式\"></a>第一种方式</h3><p>父元素相对定位 <code>position:relative</code>,子元素绝对定位 <code>position: absolute</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>爷要水平和垂直居中<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.container</span> <span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(-<span class=\"number\">50%</span>, -<span class=\"number\">50%</span>);</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"第二种方式\"><a href=\"#第二种方式\" class=\"headerlink\" title=\"第二种方式\"></a>第二种方式</h3><p>使用 flexbox</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>我要垂直居中啊a我要垂直居中啊a我要垂直居中啊<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">align-items</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">justify-content</span>: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.container</span> <span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n\n<p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/emoji/s.png\" alt=\"lalala\"></p>\n<h2 id=\"最后说一点-如果具体宽高已知-给定具体数值也可以直接实现\"><a href=\"#最后说一点-如果具体宽高已知-给定具体数值也可以直接实现\" class=\"headerlink\" title=\"最后说一点,如果具体宽高已知,给定具体数值也可以直接实现\"></a>最后说一点,如果具体宽高已知,给定具体数值也可以直接实现</h2><h1 id=\"The-End\"><a href=\"#The-End\" class=\"headerlink\" title=\"The_End\"></a>The_End</h1>"},{"title":"解决raw.githubusercontent.com无法连接问题","date":"2019-06-02T09:58:07.000Z","_content":"\n# 解决 GitHub 的 raw.githubusercontent.com 无法连接问题\n\n在使用 curl 下载文件时,如果出现以下情况\n\n```\ncurl: (7) Failed to connect to raw.githubusercontent.com port 443: Connection refused\n```\n\n# 查询 raw.githubusercontent.com 的 IP\n\n修改 hosts 文件\n\n文件路径 `/etc/hosts`\n\n添加以下内容\n\n```\n# GitHub Start\n52.74.223.119 github.com\n192.30.253.112 gist.github.com\n192.30.253.113 gist.github.com\n192.30.253.119 gist.github.com\n54.169.195.247 api.github.com\n185.199.111.153 assets-cdn.github.com\n151.101.76.133 raw.githubusercontent.com\n151.101.108.133 user-images.githubusercontent.com\n151.101.76.133 gist.githubusercontent.com\n151.101.76.133 cloud.githubusercontent.com\n151.101.76.133 camo.githubusercontent.com\n151.101.185.194 github.global.ssl.fastly.net\n# GitHub End\n```\n\n# 如果你有代理那当以上都是废话\n\n# The_End\n","source":"_posts/github/github-rawgithub.md","raw":"---\ntitle: 解决raw.githubusercontent.com无法连接问题\ndate: 2019-06-2 17:58:07\ntags:\n  - curl\n  - github\ncategories:\n  - github\n---\n\n# 解决 GitHub 的 raw.githubusercontent.com 无法连接问题\n\n在使用 curl 下载文件时,如果出现以下情况\n\n```\ncurl: (7) Failed to connect to raw.githubusercontent.com port 443: Connection refused\n```\n\n# 查询 raw.githubusercontent.com 的 IP\n\n修改 hosts 文件\n\n文件路径 `/etc/hosts`\n\n添加以下内容\n\n```\n# GitHub Start\n52.74.223.119 github.com\n192.30.253.112 gist.github.com\n192.30.253.113 gist.github.com\n192.30.253.119 gist.github.com\n54.169.195.247 api.github.com\n185.199.111.153 assets-cdn.github.com\n151.101.76.133 raw.githubusercontent.com\n151.101.108.133 user-images.githubusercontent.com\n151.101.76.133 gist.githubusercontent.com\n151.101.76.133 cloud.githubusercontent.com\n151.101.76.133 camo.githubusercontent.com\n151.101.185.194 github.global.ssl.fastly.net\n# GitHub End\n```\n\n# 如果你有代理那当以上都是废话\n\n# The_End\n","slug":"github/github-rawgithub","published":1,"updated":"2021-04-30T13:32:44.358Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cksvxwnn7000ngubq4xsh52ha","content":"<h1 id=\"解决-GitHub-的-raw-githubusercontent-com-无法连接问题\"><a href=\"#解决-GitHub-的-raw-githubusercontent-com-无法连接问题\" class=\"headerlink\" title=\"解决 GitHub 的 raw.githubusercontent.com 无法连接问题\"></a>解决 GitHub 的 raw.githubusercontent.com 无法连接问题</h1><p>在使用 curl 下载文件时,如果出现以下情况</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl: (7) Failed to connect to raw.githubusercontent.com port 443: Connection refused</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"查询-raw-githubusercontent-com-的-IP\"><a href=\"#查询-raw-githubusercontent-com-的-IP\" class=\"headerlink\" title=\"查询 raw.githubusercontent.com 的 IP\"></a>查询 raw.githubusercontent.com 的 IP</h1><p>修改 hosts 文件</p>\n<p>文件路径 <code>/etc/hosts</code></p>\n<p>添加以下内容</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># GitHub Start</span><br><span class=\"line\">52.74.223.119 github.com</span><br><span class=\"line\">192.30.253.112 gist.github.com</span><br><span class=\"line\">192.30.253.113 gist.github.com</span><br><span class=\"line\">192.30.253.119 gist.github.com</span><br><span class=\"line\">54.169.195.247 api.github.com</span><br><span class=\"line\">185.199.111.153 assets-cdn.github.com</span><br><span class=\"line\">151.101.76.133 raw.githubusercontent.com</span><br><span class=\"line\">151.101.108.133 user-images.githubusercontent.com</span><br><span class=\"line\">151.101.76.133 gist.githubusercontent.com</span><br><span class=\"line\">151.101.76.133 cloud.githubusercontent.com</span><br><span class=\"line\">151.101.76.133 camo.githubusercontent.com</span><br><span class=\"line\">151.101.185.194 github.global.ssl.fastly.net</span><br><span class=\"line\"># GitHub End</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"如果你有代理那当以上都是废话\"><a href=\"#如果你有代理那当以上都是废话\" class=\"headerlink\" title=\"如果你有代理那当以上都是废话\"></a>如果你有代理那当以上都是废话</h1><h1 id=\"The-End\"><a href=\"#The-End\" class=\"headerlink\" title=\"The_End\"></a>The_End</h1>","site":{"data":{"link":{"class1":{"class_name":"舍友","link_list":{"1":{"name":"codeAntg","link":"https://blog.csdn.net/weixin_44745147","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/fjh.jpg","descr":"那家刀削面不错","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class2":{"class_name":"致谢","link_list":{"1":{"name":"JerrC","link":"https://immyw.com","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/immyw.png","descr":"今日事,今日毕","width":"1px","style":"solid","color":"#60d0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/hexo.svg","descr":"A fast, simple & powerful blog framework","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class3":{"class_name":"友人","link_list":{"1":{"name":"Chester","link":"http://chesterlds.cn","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/chester.jpg","descr":null,"width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Wangs","link":"https://wangsss.cn/","avatar":"https://wangsss.cn/img/avatar.png","descr":"不疯魔，不成活 ~","width":"1px","style":"solid","color":"#9d9d9d","custom":"link_custom1","time":"4s","namecolor":"0094ff","descolor":"#ff9191"}}}}}},"cover":"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/desktop.png","excerpt":"","more":"<h1 id=\"解决-GitHub-的-raw-githubusercontent-com-无法连接问题\"><a href=\"#解决-GitHub-的-raw-githubusercontent-com-无法连接问题\" class=\"headerlink\" title=\"解决 GitHub 的 raw.githubusercontent.com 无法连接问题\"></a>解决 GitHub 的 raw.githubusercontent.com 无法连接问题</h1><p>在使用 curl 下载文件时,如果出现以下情况</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl: (7) Failed to connect to raw.githubusercontent.com port 443: Connection refused</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"查询-raw-githubusercontent-com-的-IP\"><a href=\"#查询-raw-githubusercontent-com-的-IP\" class=\"headerlink\" title=\"查询 raw.githubusercontent.com 的 IP\"></a>查询 raw.githubusercontent.com 的 IP</h1><p>修改 hosts 文件</p>\n<p>文件路径 <code>/etc/hosts</code></p>\n<p>添加以下内容</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># GitHub Start</span><br><span class=\"line\">52.74.223.119 github.com</span><br><span class=\"line\">192.30.253.112 gist.github.com</span><br><span class=\"line\">192.30.253.113 gist.github.com</span><br><span class=\"line\">192.30.253.119 gist.github.com</span><br><span class=\"line\">54.169.195.247 api.github.com</span><br><span class=\"line\">185.199.111.153 assets-cdn.github.com</span><br><span class=\"line\">151.101.76.133 raw.githubusercontent.com</span><br><span class=\"line\">151.101.108.133 user-images.githubusercontent.com</span><br><span class=\"line\">151.101.76.133 gist.githubusercontent.com</span><br><span class=\"line\">151.101.76.133 cloud.githubusercontent.com</span><br><span class=\"line\">151.101.76.133 camo.githubusercontent.com</span><br><span class=\"line\">151.101.185.194 github.global.ssl.fastly.net</span><br><span class=\"line\"># GitHub End</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"如果你有代理那当以上都是废话\"><a href=\"#如果你有代理那当以上都是废话\" class=\"headerlink\" title=\"如果你有代理那当以上都是废话\"></a>如果你有代理那当以上都是废话</h1><h1 id=\"The-End\"><a href=\"#The-End\" class=\"headerlink\" title=\"The_End\"></a>The_End</h1>"},{"title":"一些 html css 细节","top_img":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg","cover":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/divcss.jpeg","date":"2020-11-10T13:48:46.000Z","_content":"\n# 一、 input 光标(插入符)颜色\n\n```css\ninput: {\n  caret-color: #c0c0ff;\n}\n```\n\n# 二、 修改 placeholder 颜色\n\n```css\ninput::placeholder {\n  color: #c0c0ff;\n}\n/* input::-webkit-input-placeholder {\n  color: #c0c0ff;\n}\ninput::-moz-placeholder {\n  color: #c0c0ff;\n} */\n```\n\n# 三、 在移动端 app 下,搜索的时候让软键盘右下角按钮显示为 `搜索`\n\n默认应该是显示 `换行`\n\n![default](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/htmlcssdetails/default.png)\n\n## 解决:\n\n不用 `action` (通过 `ajax` 发送请求), 让 `onsubmit=\"return false\"` 就可以\n\n```html\n<form action=\"\" onsubmit=\"return false\">\n  <input type=\"text\" placeholder=\"something \" />\n</form>\n```\n\n![showsearch](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/htmlcssdetails/showsearch.png)\n\n# The_End\n","source":"_posts/html-css-detail/html-css-details.md","raw":"---\ntitle: 一些 html css 细节\ntop_img: https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg\ncover: https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/divcss.jpeg\ndate: 2020-11-10 21:48:46\ntags:\n  - html\n  - css\n  - input光标\n  - 插入符\n  - placeholder\ncategories:\n  - Html-Css-细节\n---\n\n# 一、 input 光标(插入符)颜色\n\n```css\ninput: {\n  caret-color: #c0c0ff;\n}\n```\n\n# 二、 修改 placeholder 颜色\n\n```css\ninput::placeholder {\n  color: #c0c0ff;\n}\n/* input::-webkit-input-placeholder {\n  color: #c0c0ff;\n}\ninput::-moz-placeholder {\n  color: #c0c0ff;\n} */\n```\n\n# 三、 在移动端 app 下,搜索的时候让软键盘右下角按钮显示为 `搜索`\n\n默认应该是显示 `换行`\n\n![default](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/htmlcssdetails/default.png)\n\n## 解决:\n\n不用 `action` (通过 `ajax` 发送请求), 让 `onsubmit=\"return false\"` 就可以\n\n```html\n<form action=\"\" onsubmit=\"return false\">\n  <input type=\"text\" placeholder=\"something \" />\n</form>\n```\n\n![showsearch](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/htmlcssdetails/showsearch.png)\n\n# The_End\n","slug":"html-css-detail/html-css-details","published":1,"updated":"2021-06-20T06:00:20.162Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cksvxwnn9000qgubq6txhermr","content":"<h1 id=\"一、-input-光标-插入符-颜色\"><a href=\"#一、-input-光标-插入符-颜色\" class=\"headerlink\" title=\"一、 input 光标(插入符)颜色\"></a>一、 input 光标(插入符)颜色</h1><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">input</span>: &#123;</span><br><span class=\"line\">  caret-color: <span class=\"number\">#c0c0ff</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"二、-修改-placeholder-颜色\"><a href=\"#二、-修改-placeholder-颜色\" class=\"headerlink\" title=\"二、 修改 placeholder 颜色\"></a>二、 修改 placeholder 颜色</h1><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-pseudo\">::placeholder</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#c0c0ff</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* input::-webkit-input-placeholder &#123;</span></span><br><span class=\"line\"><span class=\"comment\">  color: #c0c0ff;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">input::-moz-placeholder &#123;</span></span><br><span class=\"line\"><span class=\"comment\">  color: #c0c0ff;</span></span><br><span class=\"line\"><span class=\"comment\">&#125; */</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"三、-在移动端-app-下-搜索的时候让软键盘右下角按钮显示为-搜索\"><a href=\"#三、-在移动端-app-下-搜索的时候让软键盘右下角按钮显示为-搜索\" class=\"headerlink\" title=\"三、 在移动端 app 下,搜索的时候让软键盘右下角按钮显示为 搜索\"></a>三、 在移动端 app 下,搜索的时候让软键盘右下角按钮显示为 <code>搜索</code></h1><p>默认应该是显示 <code>换行</code></p>\n<p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/htmlcssdetails/default.png\" alt=\"default\"></p>\n<h2 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决:\"></a>解决:</h2><p>不用 <code>action</code> (通过 <code>ajax</code> 发送请求), 让 <code>onsubmit=&quot;return false&quot;</code> 就可以</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">onsubmit</span>=<span class=\"string\">&quot;return false&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;something &quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/htmlcssdetails/showsearch.png\" alt=\"showsearch\"></p>\n<h1 id=\"The-End\"><a href=\"#The-End\" class=\"headerlink\" title=\"The_End\"></a>The_End</h1>","site":{"data":{"link":{"class1":{"class_name":"舍友","link_list":{"1":{"name":"codeAntg","link":"https://blog.csdn.net/weixin_44745147","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/fjh.jpg","descr":"那家刀削面不错","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class2":{"class_name":"致谢","link_list":{"1":{"name":"JerrC","link":"https://immyw.com","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/immyw.png","descr":"今日事,今日毕","width":"1px","style":"solid","color":"#60d0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/hexo.svg","descr":"A fast, simple & powerful blog framework","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class3":{"class_name":"友人","link_list":{"1":{"name":"Chester","link":"http://chesterlds.cn","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/chester.jpg","descr":null,"width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Wangs","link":"https://wangsss.cn/","avatar":"https://wangsss.cn/img/avatar.png","descr":"不疯魔，不成活 ~","width":"1px","style":"solid","color":"#9d9d9d","custom":"link_custom1","time":"4s","namecolor":"0094ff","descolor":"#ff9191"}}}}}},"excerpt":"","more":"<h1 id=\"一、-input-光标-插入符-颜色\"><a href=\"#一、-input-光标-插入符-颜色\" class=\"headerlink\" title=\"一、 input 光标(插入符)颜色\"></a>一、 input 光标(插入符)颜色</h1><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">input</span>: &#123;</span><br><span class=\"line\">  caret-color: <span class=\"number\">#c0c0ff</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"二、-修改-placeholder-颜色\"><a href=\"#二、-修改-placeholder-颜色\" class=\"headerlink\" title=\"二、 修改 placeholder 颜色\"></a>二、 修改 placeholder 颜色</h1><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-pseudo\">::placeholder</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#c0c0ff</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* input::-webkit-input-placeholder &#123;</span></span><br><span class=\"line\"><span class=\"comment\">  color: #c0c0ff;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">input::-moz-placeholder &#123;</span></span><br><span class=\"line\"><span class=\"comment\">  color: #c0c0ff;</span></span><br><span class=\"line\"><span class=\"comment\">&#125; */</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"三、-在移动端-app-下-搜索的时候让软键盘右下角按钮显示为-搜索\"><a href=\"#三、-在移动端-app-下-搜索的时候让软键盘右下角按钮显示为-搜索\" class=\"headerlink\" title=\"三、 在移动端 app 下,搜索的时候让软键盘右下角按钮显示为 搜索\"></a>三、 在移动端 app 下,搜索的时候让软键盘右下角按钮显示为 <code>搜索</code></h1><p>默认应该是显示 <code>换行</code></p>\n<p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/htmlcssdetails/default.png\" alt=\"default\"></p>\n<h2 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决:\"></a>解决:</h2><p>不用 <code>action</code> (通过 <code>ajax</code> 发送请求), 让 <code>onsubmit=&quot;return false&quot;</code> 就可以</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">onsubmit</span>=<span class=\"string\">&quot;return false&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;something &quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/htmlcssdetails/showsearch.png\" alt=\"showsearch\"></p>\n<h1 id=\"The-End\"><a href=\"#The-End\" class=\"headerlink\" title=\"The_End\"></a>The_End</h1>"},{"title":"maven配置国内仓库","top_img":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg","cover":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/rocketmqbuild/maven.jpg","date":"2020-07-02T16:12:13.000Z","_content":"\n### 使用 maven 下载 jar 包速度会很慢，原因是 maven 默认的仓库地址是国外的，所以速度很慢，解决这个问题我们只需要修改 maven 仓库地址即可\n\nmaven 下载 jar 包时会优先去\n`~/.m2/` 路径下查找 `settings.xml` 文件\n\n如果没有就创建一个 `settings.xml`\n\n#### 完整 `settings.xml` 示例\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<settings xmlns=\"http://maven.apache.org/SETTINGS/1.0.0\"\n          xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n          xsi:schemaLocation=\"http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd\">\n    <mirrors>\n        <mirror>\n            <id>alimaven</id>\n            <name>aliyun maven</name>\n            <!-- 阿里源 -->\n            <url>http://maven.aliyun.com/nexus/content/groups/public/</url>\n            <mirrorOf>central</mirrorOf>\n        </mirror>\n        <mirror>\n            <id>central</id>\n            <name>Maven Repository Switchboard</name>\n            <url>http://repo1.maven.org/maven2/</url>\n            <mirrorOf>central</mirrorOf>\n        </mirror>\n        <mirror>\n            <id>repo2</id>\n            <mirrorOf>central</mirrorOf>\n            <name>Human Readable Name for this Mirror.</name>\n            <url>http://repo2.maven.org/maven2/</url>\n        </mirror>\n        <mirror>\n            <id>ibiblio</id>\n            <mirrorOf>central</mirrorOf>\n            <name>Human Readable Name for this Mirror.</name>\n            <url>http://mirrors.ibiblio.org/pub/mirrors/maven2/</url>\n        </mirror>\n        <mirror>\n            <id>jboss-public-repository-group</id>\n            <mirrorOf>central</mirrorOf>\n            <name>JBoss Public Repository Group</name>\n            <url>http://repository.jboss.org/nexus/content/groups/public</url>\n        </mirror>\n        <!-- 中央仓库在中国的镜像 -->\n        <mirror>\n            <id>maven.net.cn</id>\n            <name>oneof the central mirrors in china</name>\n            <url>http://maven.net.cn/content/groups/public/</url>\n            <mirrorOf>central</mirrorOf>\n        </mirror>\n    </mirrors>\n</settings>\n```\n\n# The_End\n","source":"_posts/java/java-maven.md","raw":"---\ntitle: maven配置国内仓库\ntop_img: https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg\ncover: https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/rocketmqbuild/maven.jpg\ndate: 2020-07-03 00:12:13\ntags:\n  - maven\ncategories:\n  - java\n---\n\n### 使用 maven 下载 jar 包速度会很慢，原因是 maven 默认的仓库地址是国外的，所以速度很慢，解决这个问题我们只需要修改 maven 仓库地址即可\n\nmaven 下载 jar 包时会优先去\n`~/.m2/` 路径下查找 `settings.xml` 文件\n\n如果没有就创建一个 `settings.xml`\n\n#### 完整 `settings.xml` 示例\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<settings xmlns=\"http://maven.apache.org/SETTINGS/1.0.0\"\n          xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n          xsi:schemaLocation=\"http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd\">\n    <mirrors>\n        <mirror>\n            <id>alimaven</id>\n            <name>aliyun maven</name>\n            <!-- 阿里源 -->\n            <url>http://maven.aliyun.com/nexus/content/groups/public/</url>\n            <mirrorOf>central</mirrorOf>\n        </mirror>\n        <mirror>\n            <id>central</id>\n            <name>Maven Repository Switchboard</name>\n            <url>http://repo1.maven.org/maven2/</url>\n            <mirrorOf>central</mirrorOf>\n        </mirror>\n        <mirror>\n            <id>repo2</id>\n            <mirrorOf>central</mirrorOf>\n            <name>Human Readable Name for this Mirror.</name>\n            <url>http://repo2.maven.org/maven2/</url>\n        </mirror>\n        <mirror>\n            <id>ibiblio</id>\n            <mirrorOf>central</mirrorOf>\n            <name>Human Readable Name for this Mirror.</name>\n            <url>http://mirrors.ibiblio.org/pub/mirrors/maven2/</url>\n        </mirror>\n        <mirror>\n            <id>jboss-public-repository-group</id>\n            <mirrorOf>central</mirrorOf>\n            <name>JBoss Public Repository Group</name>\n            <url>http://repository.jboss.org/nexus/content/groups/public</url>\n        </mirror>\n        <!-- 中央仓库在中国的镜像 -->\n        <mirror>\n            <id>maven.net.cn</id>\n            <name>oneof the central mirrors in china</name>\n            <url>http://maven.net.cn/content/groups/public/</url>\n            <mirrorOf>central</mirrorOf>\n        </mirror>\n    </mirrors>\n</settings>\n```\n\n# The_End\n","slug":"java/java-maven","published":1,"updated":"2021-04-30T13:41:52.841Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cksvxwnna000vgubq37i36ezy","content":"<h3 id=\"使用-maven-下载-jar-包速度会很慢，原因是-maven-默认的仓库地址是国外的，所以速度很慢，解决这个问题我们只需要修改-maven-仓库地址即可\"><a href=\"#使用-maven-下载-jar-包速度会很慢，原因是-maven-默认的仓库地址是国外的，所以速度很慢，解决这个问题我们只需要修改-maven-仓库地址即可\" class=\"headerlink\" title=\"使用 maven 下载 jar 包速度会很慢，原因是 maven 默认的仓库地址是国外的，所以速度很慢，解决这个问题我们只需要修改 maven 仓库地址即可\"></a>使用 maven 下载 jar 包速度会很慢，原因是 maven 默认的仓库地址是国外的，所以速度很慢，解决这个问题我们只需要修改 maven 仓库地址即可</h3><p>maven 下载 jar 包时会优先去<br><code>~/.m2/</code> 路径下查找 <code>settings.xml</code> 文件</p>\n<p>如果没有就创建一个 <code>settings.xml</code></p>\n<h4 id=\"完整-settings-xml-示例\"><a href=\"#完整-settings-xml-示例\" class=\"headerlink\" title=\"完整 settings.xml 示例\"></a>完整 <code>settings.xml</code> 示例</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">settings</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://maven.apache.org/SETTINGS/1.0.0&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mirrors</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">mirror</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>alimaven<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>aliyun maven<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 阿里源 --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">mirrorOf</span>&gt;</span>central<span class=\"tag\">&lt;/<span class=\"name\">mirrorOf</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">mirror</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">mirror</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>central<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>Maven Repository Switchboard<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://repo1.maven.org/maven2/<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">mirrorOf</span>&gt;</span>central<span class=\"tag\">&lt;/<span class=\"name\">mirrorOf</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">mirror</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">mirror</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>repo2<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">mirrorOf</span>&gt;</span>central<span class=\"tag\">&lt;/<span class=\"name\">mirrorOf</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>Human Readable Name for this Mirror.<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://repo2.maven.org/maven2/<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">mirror</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">mirror</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>ibiblio<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">mirrorOf</span>&gt;</span>central<span class=\"tag\">&lt;/<span class=\"name\">mirrorOf</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>Human Readable Name for this Mirror.<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://mirrors.ibiblio.org/pub/mirrors/maven2/<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">mirror</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">mirror</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>jboss-public-repository-group<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">mirrorOf</span>&gt;</span>central<span class=\"tag\">&lt;/<span class=\"name\">mirrorOf</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>JBoss Public Repository Group<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://repository.jboss.org/nexus/content/groups/public<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">mirror</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 中央仓库在中国的镜像 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">mirror</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>maven.net.cn<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>oneof the central mirrors in china<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://maven.net.cn/content/groups/public/<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">mirrorOf</span>&gt;</span>central<span class=\"tag\">&lt;/<span class=\"name\">mirrorOf</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">mirror</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">mirrors</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"The-End\"><a href=\"#The-End\" class=\"headerlink\" title=\"The_End\"></a>The_End</h1>","site":{"data":{"link":{"class1":{"class_name":"舍友","link_list":{"1":{"name":"codeAntg","link":"https://blog.csdn.net/weixin_44745147","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/fjh.jpg","descr":"那家刀削面不错","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class2":{"class_name":"致谢","link_list":{"1":{"name":"JerrC","link":"https://immyw.com","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/immyw.png","descr":"今日事,今日毕","width":"1px","style":"solid","color":"#60d0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/hexo.svg","descr":"A fast, simple & powerful blog framework","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class3":{"class_name":"友人","link_list":{"1":{"name":"Chester","link":"http://chesterlds.cn","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/chester.jpg","descr":null,"width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Wangs","link":"https://wangsss.cn/","avatar":"https://wangsss.cn/img/avatar.png","descr":"不疯魔，不成活 ~","width":"1px","style":"solid","color":"#9d9d9d","custom":"link_custom1","time":"4s","namecolor":"0094ff","descolor":"#ff9191"}}}}}},"excerpt":"","more":"<h3 id=\"使用-maven-下载-jar-包速度会很慢，原因是-maven-默认的仓库地址是国外的，所以速度很慢，解决这个问题我们只需要修改-maven-仓库地址即可\"><a href=\"#使用-maven-下载-jar-包速度会很慢，原因是-maven-默认的仓库地址是国外的，所以速度很慢，解决这个问题我们只需要修改-maven-仓库地址即可\" class=\"headerlink\" title=\"使用 maven 下载 jar 包速度会很慢，原因是 maven 默认的仓库地址是国外的，所以速度很慢，解决这个问题我们只需要修改 maven 仓库地址即可\"></a>使用 maven 下载 jar 包速度会很慢，原因是 maven 默认的仓库地址是国外的，所以速度很慢，解决这个问题我们只需要修改 maven 仓库地址即可</h3><p>maven 下载 jar 包时会优先去<br><code>~/.m2/</code> 路径下查找 <code>settings.xml</code> 文件</p>\n<p>如果没有就创建一个 <code>settings.xml</code></p>\n<h4 id=\"完整-settings-xml-示例\"><a href=\"#完整-settings-xml-示例\" class=\"headerlink\" title=\"完整 settings.xml 示例\"></a>完整 <code>settings.xml</code> 示例</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">settings</span> <span class=\"attr\">xmlns</span>=<span class=\"string\">&quot;http://maven.apache.org/SETTINGS/1.0.0&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">xmlns:xsi</span>=<span class=\"string\">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">xsi:schemaLocation</span>=<span class=\"string\">&quot;http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">mirrors</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">mirror</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>alimaven<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>aliyun maven<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 阿里源 --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">mirrorOf</span>&gt;</span>central<span class=\"tag\">&lt;/<span class=\"name\">mirrorOf</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">mirror</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">mirror</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>central<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>Maven Repository Switchboard<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://repo1.maven.org/maven2/<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">mirrorOf</span>&gt;</span>central<span class=\"tag\">&lt;/<span class=\"name\">mirrorOf</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">mirror</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">mirror</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>repo2<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">mirrorOf</span>&gt;</span>central<span class=\"tag\">&lt;/<span class=\"name\">mirrorOf</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>Human Readable Name for this Mirror.<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://repo2.maven.org/maven2/<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">mirror</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">mirror</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>ibiblio<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">mirrorOf</span>&gt;</span>central<span class=\"tag\">&lt;/<span class=\"name\">mirrorOf</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>Human Readable Name for this Mirror.<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://mirrors.ibiblio.org/pub/mirrors/maven2/<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">mirror</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">mirror</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>jboss-public-repository-group<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">mirrorOf</span>&gt;</span>central<span class=\"tag\">&lt;/<span class=\"name\">mirrorOf</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>JBoss Public Repository Group<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://repository.jboss.org/nexus/content/groups/public<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">mirror</span>&gt;</span></span><br><span class=\"line\">        <span class=\"comment\">&lt;!-- 中央仓库在中国的镜像 --&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">mirror</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>maven.net.cn<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>oneof the central mirrors in china<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">url</span>&gt;</span>http://maven.net.cn/content/groups/public/<span class=\"tag\">&lt;/<span class=\"name\">url</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">mirrorOf</span>&gt;</span>central<span class=\"tag\">&lt;/<span class=\"name\">mirrorOf</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">mirror</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">mirrors</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"The-End\"><a href=\"#The-End\" class=\"headerlink\" title=\"The_End\"></a>The_End</h1>"},{"title":"ES6 新增用法 ( 一 )","date":"2021-06-19T11:06:39.000Z","top_img":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg","cover":"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/desktop.png","comments":1,"_content":"\n# let 关键字\n\n## let 是块级别作用域\n\n任何一对花括号 ( **这玩意 : { }** ) 中的语句都属于一个块 , 在花括号里面用 `let` 定义的所有变量在花括号外都是不可见的 , 我们称之为块级作用域\n\n**案例 :**\n\n```js\n// 使用 var 声明\nvar list = [];\nfor (var i = 0; i < 10; i++) {\n  list[i] = function () {\n    console.log(i);\n  };\n}\n// 遍历完后 i 已变成 10\nlist[1](); // 10\nlist[2](); // 10\nlist[3](); // 10\nlist[4](); // 10\n\n// 使用 let 声明\nvar list = [];\nfor (let i = 0; i < 10; i++) {\n  list[i] = function () {\n    console.log(i);\n  };\n}\nlist[1](); // 1\nlist[2](); // 2\nlist[3](); // 3\nlist[4](); // 4\n```\n\n## let 不会变量提升\n\n**案例 :**\n\n```js\n// 使用 var 声明\nvar a = 1;\n(function () {\n  console.log(a); // undefined\n  var a = 2;\n});\n// 结果是 undefined , 因为 var 使变量提升,相当于 a 定义了,但未赋值\n\n// 使用 let 声明\nvar a = 1;\n(function () {\n  console.log(a); // 报错 : a 未定义\n  let a = 2;\n});\n// 结果报错 : a 未定义\n// 用let关键字来定义a；这样a在代码块内就不会提升了。\n// 那为什么又报错了呢，因为用let声明的变量，在其块级作用域内是封闭的，是不会受到外面的全局变量a影响的，\n// 并且要先声明再使用，所以a的值即不是1（因为不受外面的影响）\n// 也不是undefined（因为先声明后使用）\n// 更不是2，未声明定义就使用，只有报错啦\n```\n\n## 同一个块级作用域内不允许重复声明同一个变量\n\n**错误示范 :**\n\n```js\n// 错误示范 1\nvar a = 1;\nlet a = 2;\n// 错误示范 2\nlet a = 1;\nlet a = 2;\n```\n\n## 函数内不能用 let 重新声明函数的参数\n\n**错误示范 :**\n\n```js\nfunction hello(world) {\n  let world = \"hello tom\"; // 报错 : 用 let 重新声明 world 参数\n  console.log(world);\n}\nhello(\"hello world\");\n```\n\n# const 关键字\n\n`const` 是 `constant` ( 常量 ) 的缩写 , `const` 和 `let` 一样 , 也是用来声明变量的 , 但是 `const` 是专门用于声明一个常量的 , 常量的值是不可改变的\n\n**const 的特点**\n\n## 声明的常量不可修改\n\n```js\nconst person = \"张三\";\nperson = \"李四\"; // 报错,不能修改常量\n```\n\n**如果用 `const` 声明的是复杂数据类型的变量,只是变量的指针不可修改,指针指向的堆中的内容可以修改**\n\n```js\n// 下面两种情况就可以 , 也不会报错\nconst arr = [1, 2, 3];\narr[0] = 666;\n//\nconst obj = {\n  name: \"tom\",\n  age: 20,\n};\nobj.name = \"jerry\";\n```\n\n## 只在块级作用域起作用,这点与 let 关键字一样\n\n```js\nif (1) {\n  const person = \"张三\";\n}\nconsole.log(person); // 错误,在代码快 {} 之外, person 失效\n```\n\n## 不存在变量提升,必须先声明后使用,这点也跟 let 关键字一样\n\n```js\nif (1) {\n  console.log(person); // 错误,使用前未声明\n  const person = \"张三\";\n}\n```\n\n## 不可重复声明同一个变量,这点跟 let 也一样\n\n```js\nvar person = \"张三\";\nconst person = \"李四\"; // 错误,声明一个已存在的变量 person\n```\n\n## 声明后必须要赋值\n\n```js\nconst person; // 错误,声明后没有赋值\n```\n\n# 快速让浏览器兼容 ES6 的方法\n\n## 安装 node\n\n> ## 官网 https://nodejs.org/\n>\n> ## 中文网 http://nodejs.cn/\n\n**检测 `node` 是否安装成功,可查看版本号**\n\n```shell\nnode -v\n```\n\n## 安装 babel\n\n**后面的 @5 是版本号,可以不写**\n\n```shell\nnpm install babel-core@5\n```\n\n安装 `babel` 成功后 , 当前目录下的 `/node_modules/babel-core` 里有 `babel` 的浏览器版本 `browser.js` ( 未压缩版 ) 和 `browser.min.js` ( 压缩版 )\n\n## 使用 babel\n\n```html\n<script src=\"brower.js\"></script>\n<script type=\"text/babel\">\n  const name = \"张三\"; // 测试 : 使用 ES6 新增关键字 const 来声明变量\n  console.log(name);\n</script>\n```\n\n这个时候 IE9 能正常运行 `ES6` 新特性了 , 也就是 `babel` 转换起作用了，把 `const` 转换成 IE9 能执行的代码了\n\n# The_End\n","source":"_posts/js/es6-day01.md","raw":"---\ntitle: ES6 新增用法 ( 一 )\ndate: 2021-06-19 19:06:39\ntop_img: https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg\ncover:\ntags:\n  - js\n  - javascript\n  - ES6\n  - let\n  - var\n  - const\n  - babel\n  - 兼容\ncategories:\n  - js\n  - ES6\ncomments:\n---\n\n# let 关键字\n\n## let 是块级别作用域\n\n任何一对花括号 ( **这玩意 : { }** ) 中的语句都属于一个块 , 在花括号里面用 `let` 定义的所有变量在花括号外都是不可见的 , 我们称之为块级作用域\n\n**案例 :**\n\n```js\n// 使用 var 声明\nvar list = [];\nfor (var i = 0; i < 10; i++) {\n  list[i] = function () {\n    console.log(i);\n  };\n}\n// 遍历完后 i 已变成 10\nlist[1](); // 10\nlist[2](); // 10\nlist[3](); // 10\nlist[4](); // 10\n\n// 使用 let 声明\nvar list = [];\nfor (let i = 0; i < 10; i++) {\n  list[i] = function () {\n    console.log(i);\n  };\n}\nlist[1](); // 1\nlist[2](); // 2\nlist[3](); // 3\nlist[4](); // 4\n```\n\n## let 不会变量提升\n\n**案例 :**\n\n```js\n// 使用 var 声明\nvar a = 1;\n(function () {\n  console.log(a); // undefined\n  var a = 2;\n});\n// 结果是 undefined , 因为 var 使变量提升,相当于 a 定义了,但未赋值\n\n// 使用 let 声明\nvar a = 1;\n(function () {\n  console.log(a); // 报错 : a 未定义\n  let a = 2;\n});\n// 结果报错 : a 未定义\n// 用let关键字来定义a；这样a在代码块内就不会提升了。\n// 那为什么又报错了呢，因为用let声明的变量，在其块级作用域内是封闭的，是不会受到外面的全局变量a影响的，\n// 并且要先声明再使用，所以a的值即不是1（因为不受外面的影响）\n// 也不是undefined（因为先声明后使用）\n// 更不是2，未声明定义就使用，只有报错啦\n```\n\n## 同一个块级作用域内不允许重复声明同一个变量\n\n**错误示范 :**\n\n```js\n// 错误示范 1\nvar a = 1;\nlet a = 2;\n// 错误示范 2\nlet a = 1;\nlet a = 2;\n```\n\n## 函数内不能用 let 重新声明函数的参数\n\n**错误示范 :**\n\n```js\nfunction hello(world) {\n  let world = \"hello tom\"; // 报错 : 用 let 重新声明 world 参数\n  console.log(world);\n}\nhello(\"hello world\");\n```\n\n# const 关键字\n\n`const` 是 `constant` ( 常量 ) 的缩写 , `const` 和 `let` 一样 , 也是用来声明变量的 , 但是 `const` 是专门用于声明一个常量的 , 常量的值是不可改变的\n\n**const 的特点**\n\n## 声明的常量不可修改\n\n```js\nconst person = \"张三\";\nperson = \"李四\"; // 报错,不能修改常量\n```\n\n**如果用 `const` 声明的是复杂数据类型的变量,只是变量的指针不可修改,指针指向的堆中的内容可以修改**\n\n```js\n// 下面两种情况就可以 , 也不会报错\nconst arr = [1, 2, 3];\narr[0] = 666;\n//\nconst obj = {\n  name: \"tom\",\n  age: 20,\n};\nobj.name = \"jerry\";\n```\n\n## 只在块级作用域起作用,这点与 let 关键字一样\n\n```js\nif (1) {\n  const person = \"张三\";\n}\nconsole.log(person); // 错误,在代码快 {} 之外, person 失效\n```\n\n## 不存在变量提升,必须先声明后使用,这点也跟 let 关键字一样\n\n```js\nif (1) {\n  console.log(person); // 错误,使用前未声明\n  const person = \"张三\";\n}\n```\n\n## 不可重复声明同一个变量,这点跟 let 也一样\n\n```js\nvar person = \"张三\";\nconst person = \"李四\"; // 错误,声明一个已存在的变量 person\n```\n\n## 声明后必须要赋值\n\n```js\nconst person; // 错误,声明后没有赋值\n```\n\n# 快速让浏览器兼容 ES6 的方法\n\n## 安装 node\n\n> ## 官网 https://nodejs.org/\n>\n> ## 中文网 http://nodejs.cn/\n\n**检测 `node` 是否安装成功,可查看版本号**\n\n```shell\nnode -v\n```\n\n## 安装 babel\n\n**后面的 @5 是版本号,可以不写**\n\n```shell\nnpm install babel-core@5\n```\n\n安装 `babel` 成功后 , 当前目录下的 `/node_modules/babel-core` 里有 `babel` 的浏览器版本 `browser.js` ( 未压缩版 ) 和 `browser.min.js` ( 压缩版 )\n\n## 使用 babel\n\n```html\n<script src=\"brower.js\"></script>\n<script type=\"text/babel\">\n  const name = \"张三\"; // 测试 : 使用 ES6 新增关键字 const 来声明变量\n  console.log(name);\n</script>\n```\n\n这个时候 IE9 能正常运行 `ES6` 新特性了 , 也就是 `babel` 转换起作用了，把 `const` 转换成 IE9 能执行的代码了\n\n# The_End\n","slug":"js/es6-day01","published":1,"updated":"2021-06-29T06:22:12.258Z","layout":"post","photos":[],"link":"","_id":"cksvxwnnb000xgubq27ap89a5","content":"<h1 id=\"let-关键字\"><a href=\"#let-关键字\" class=\"headerlink\" title=\"let 关键字\"></a>let 关键字</h1><h2 id=\"let-是块级别作用域\"><a href=\"#let-是块级别作用域\" class=\"headerlink\" title=\"let 是块级别作用域\"></a>let 是块级别作用域</h2><p>任何一对花括号 ( <strong>这玩意 : { }</strong> ) 中的语句都属于一个块 , 在花括号里面用 <code>let</code> 定义的所有变量在花括号外都是不可见的 , 我们称之为块级作用域</p>\n<p><strong>案例 :</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用 var 声明</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> list = [];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">  list[i] = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 遍历完后 i 已变成 10</span></span><br><span class=\"line\">list[<span class=\"number\">1</span>](); <span class=\"comment\">// 10</span></span><br><span class=\"line\">list[<span class=\"number\">2</span>](); <span class=\"comment\">// 10</span></span><br><span class=\"line\">list[<span class=\"number\">3</span>](); <span class=\"comment\">// 10</span></span><br><span class=\"line\">list[<span class=\"number\">4</span>](); <span class=\"comment\">// 10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用 let 声明</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> list = [];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">  list[i] = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">list[<span class=\"number\">1</span>](); <span class=\"comment\">// 1</span></span><br><span class=\"line\">list[<span class=\"number\">2</span>](); <span class=\"comment\">// 2</span></span><br><span class=\"line\">list[<span class=\"number\">3</span>](); <span class=\"comment\">// 3</span></span><br><span class=\"line\">list[<span class=\"number\">4</span>](); <span class=\"comment\">// 4</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"let-不会变量提升\"><a href=\"#let-不会变量提升\" class=\"headerlink\" title=\"let 不会变量提升\"></a>let 不会变量提升</h2><p><strong>案例 :</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用 var 声明</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// undefined</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 结果是 undefined , 因为 var 使变量提升,相当于 a 定义了,但未赋值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用 let 声明</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 报错 : a 未定义</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 结果报错 : a 未定义</span></span><br><span class=\"line\"><span class=\"comment\">// 用let关键字来定义a；这样a在代码块内就不会提升了。</span></span><br><span class=\"line\"><span class=\"comment\">// 那为什么又报错了呢，因为用let声明的变量，在其块级作用域内是封闭的，是不会受到外面的全局变量a影响的，</span></span><br><span class=\"line\"><span class=\"comment\">// 并且要先声明再使用，所以a的值即不是1（因为不受外面的影响）</span></span><br><span class=\"line\"><span class=\"comment\">// 也不是undefined（因为先声明后使用）</span></span><br><span class=\"line\"><span class=\"comment\">// 更不是2，未声明定义就使用，只有报错啦</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"同一个块级作用域内不允许重复声明同一个变量\"><a href=\"#同一个块级作用域内不允许重复声明同一个变量\" class=\"headerlink\" title=\"同一个块级作用域内不允许重复声明同一个变量\"></a>同一个块级作用域内不允许重复声明同一个变量</h2><p><strong>错误示范 :</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 错误示范 1</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"comment\">// 错误示范 2</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"函数内不能用-let-重新声明函数的参数\"><a href=\"#函数内不能用-let-重新声明函数的参数\" class=\"headerlink\" title=\"函数内不能用 let 重新声明函数的参数\"></a>函数内不能用 let 重新声明函数的参数</h2><p><strong>错误示范 :</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hello</span>(<span class=\"params\">world</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> world = <span class=\"string\">&quot;hello tom&quot;</span>; <span class=\"comment\">// 报错 : 用 let 重新声明 world 参数</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(world);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">hello(<span class=\"string\">&quot;hello world&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"const-关键字\"><a href=\"#const-关键字\" class=\"headerlink\" title=\"const 关键字\"></a>const 关键字</h1><p><code>const</code> 是 <code>constant</code> ( 常量 ) 的缩写 , <code>const</code> 和 <code>let</code> 一样 , 也是用来声明变量的 , 但是 <code>const</code> 是专门用于声明一个常量的 , 常量的值是不可改变的</p>\n<p><strong>const 的特点</strong></p>\n<h2 id=\"声明的常量不可修改\"><a href=\"#声明的常量不可修改\" class=\"headerlink\" title=\"声明的常量不可修改\"></a>声明的常量不可修改</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> person = <span class=\"string\">&quot;张三&quot;</span>;</span><br><span class=\"line\">person = <span class=\"string\">&quot;李四&quot;</span>; <span class=\"comment\">// 报错,不能修改常量</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>如果用 <code>const</code> 声明的是复杂数据类型的变量,只是变量的指针不可修改,指针指向的堆中的内容可以修改</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 下面两种情况就可以 , 也不会报错</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">arr[<span class=\"number\">0</span>] = <span class=\"number\">666</span>;</span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;tom&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">20</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">obj.name = <span class=\"string\">&quot;jerry&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"只在块级作用域起作用-这点与-let-关键字一样\"><a href=\"#只在块级作用域起作用-这点与-let-关键字一样\" class=\"headerlink\" title=\"只在块级作用域起作用,这点与 let 关键字一样\"></a>只在块级作用域起作用,这点与 let 关键字一样</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> person = <span class=\"string\">&quot;张三&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person); <span class=\"comment\">// 错误,在代码快 &#123;&#125; 之外, person 失效</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"不存在变量提升-必须先声明后使用-这点也跟-let-关键字一样\"><a href=\"#不存在变量提升-必须先声明后使用-这点也跟-let-关键字一样\" class=\"headerlink\" title=\"不存在变量提升,必须先声明后使用,这点也跟 let 关键字一样\"></a>不存在变量提升,必须先声明后使用,这点也跟 let 关键字一样</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(person); <span class=\"comment\">// 错误,使用前未声明</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> person = <span class=\"string\">&quot;张三&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"不可重复声明同一个变量-这点跟-let-也一样\"><a href=\"#不可重复声明同一个变量-这点跟-let-也一样\" class=\"headerlink\" title=\"不可重复声明同一个变量,这点跟 let 也一样\"></a>不可重复声明同一个变量,这点跟 let 也一样</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = <span class=\"string\">&quot;张三&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> person = <span class=\"string\">&quot;李四&quot;</span>; <span class=\"comment\">// 错误,声明一个已存在的变量 person</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"声明后必须要赋值\"><a href=\"#声明后必须要赋值\" class=\"headerlink\" title=\"声明后必须要赋值\"></a>声明后必须要赋值</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> person; <span class=\"comment\">// 错误,声明后没有赋值</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"快速让浏览器兼容-ES6-的方法\"><a href=\"#快速让浏览器兼容-ES6-的方法\" class=\"headerlink\" title=\"快速让浏览器兼容 ES6 的方法\"></a>快速让浏览器兼容 ES6 的方法</h1><h2 id=\"安装-node\"><a href=\"#安装-node\" class=\"headerlink\" title=\"安装 node\"></a>安装 node</h2><blockquote>\n<h2 id=\"官网-https-nodejs-org\"><a href=\"#官网-https-nodejs-org\" class=\"headerlink\" title=\"官网 https://nodejs.org/\"></a>官网 <a href=\"https://nodejs.org/\">https://nodejs.org/</a></h2><h2 id=\"中文网-http-nodejs-cn\"><a href=\"#中文网-http-nodejs-cn\" class=\"headerlink\" title=\"中文网 http://nodejs.cn/\"></a>中文网 <a href=\"http://nodejs.cn/\">http://nodejs.cn/</a></h2></blockquote>\n<p><strong>检测 <code>node</code> 是否安装成功,可查看版本号</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node -v</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装-babel\"><a href=\"#安装-babel\" class=\"headerlink\" title=\"安装 babel\"></a>安装 babel</h2><p><strong>后面的 @5 是版本号,可以不写</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install babel-core@5</span><br></pre></td></tr></table></figure>\n\n<p>安装 <code>babel</code> 成功后 , 当前目录下的 <code>/node_modules/babel-core</code> 里有 <code>babel</code> 的浏览器版本 <code>browser.js</code> ( 未压缩版 ) 和 <code>browser.min.js</code> ( 压缩版 )</p>\n<h2 id=\"使用-babel\"><a href=\"#使用-babel\" class=\"headerlink\" title=\"使用 babel\"></a>使用 babel</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;brower.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/babel&quot;</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">const</span> name = <span class=\"string\">&quot;张三&quot;</span>; <span class=\"comment\">// 测试 : 使用 ES6 新增关键字 const 来声明变量</span></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"built_in\">console</span>.log(name);</span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这个时候 IE9 能正常运行 <code>ES6</code> 新特性了 , 也就是 <code>babel</code> 转换起作用了，把 <code>const</code> 转换成 IE9 能执行的代码了</p>\n<h1 id=\"The-End\"><a href=\"#The-End\" class=\"headerlink\" title=\"The_End\"></a>The_End</h1>","site":{"data":{"link":{"class1":{"class_name":"舍友","link_list":{"1":{"name":"codeAntg","link":"https://blog.csdn.net/weixin_44745147","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/fjh.jpg","descr":"那家刀削面不错","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class2":{"class_name":"致谢","link_list":{"1":{"name":"JerrC","link":"https://immyw.com","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/immyw.png","descr":"今日事,今日毕","width":"1px","style":"solid","color":"#60d0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/hexo.svg","descr":"A fast, simple & powerful blog framework","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class3":{"class_name":"友人","link_list":{"1":{"name":"Chester","link":"http://chesterlds.cn","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/chester.jpg","descr":null,"width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Wangs","link":"https://wangsss.cn/","avatar":"https://wangsss.cn/img/avatar.png","descr":"不疯魔，不成活 ~","width":"1px","style":"solid","color":"#9d9d9d","custom":"link_custom1","time":"4s","namecolor":"0094ff","descolor":"#ff9191"}}}}}},"excerpt":"","more":"<h1 id=\"let-关键字\"><a href=\"#let-关键字\" class=\"headerlink\" title=\"let 关键字\"></a>let 关键字</h1><h2 id=\"let-是块级别作用域\"><a href=\"#let-是块级别作用域\" class=\"headerlink\" title=\"let 是块级别作用域\"></a>let 是块级别作用域</h2><p>任何一对花括号 ( <strong>这玩意 : { }</strong> ) 中的语句都属于一个块 , 在花括号里面用 <code>let</code> 定义的所有变量在花括号外都是不可见的 , 我们称之为块级作用域</p>\n<p><strong>案例 :</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用 var 声明</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> list = [];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">  list[i] = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 遍历完后 i 已变成 10</span></span><br><span class=\"line\">list[<span class=\"number\">1</span>](); <span class=\"comment\">// 10</span></span><br><span class=\"line\">list[<span class=\"number\">2</span>](); <span class=\"comment\">// 10</span></span><br><span class=\"line\">list[<span class=\"number\">3</span>](); <span class=\"comment\">// 10</span></span><br><span class=\"line\">list[<span class=\"number\">4</span>](); <span class=\"comment\">// 10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用 let 声明</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> list = [];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">  list[i] = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">list[<span class=\"number\">1</span>](); <span class=\"comment\">// 1</span></span><br><span class=\"line\">list[<span class=\"number\">2</span>](); <span class=\"comment\">// 2</span></span><br><span class=\"line\">list[<span class=\"number\">3</span>](); <span class=\"comment\">// 3</span></span><br><span class=\"line\">list[<span class=\"number\">4</span>](); <span class=\"comment\">// 4</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"let-不会变量提升\"><a href=\"#let-不会变量提升\" class=\"headerlink\" title=\"let 不会变量提升\"></a>let 不会变量提升</h2><p><strong>案例 :</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用 var 声明</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// undefined</span></span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 结果是 undefined , 因为 var 使变量提升,相当于 a 定义了,但未赋值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用 let 声明</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 报错 : a 未定义</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 结果报错 : a 未定义</span></span><br><span class=\"line\"><span class=\"comment\">// 用let关键字来定义a；这样a在代码块内就不会提升了。</span></span><br><span class=\"line\"><span class=\"comment\">// 那为什么又报错了呢，因为用let声明的变量，在其块级作用域内是封闭的，是不会受到外面的全局变量a影响的，</span></span><br><span class=\"line\"><span class=\"comment\">// 并且要先声明再使用，所以a的值即不是1（因为不受外面的影响）</span></span><br><span class=\"line\"><span class=\"comment\">// 也不是undefined（因为先声明后使用）</span></span><br><span class=\"line\"><span class=\"comment\">// 更不是2，未声明定义就使用，只有报错啦</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"同一个块级作用域内不允许重复声明同一个变量\"><a href=\"#同一个块级作用域内不允许重复声明同一个变量\" class=\"headerlink\" title=\"同一个块级作用域内不允许重复声明同一个变量\"></a>同一个块级作用域内不允许重复声明同一个变量</h2><p><strong>错误示范 :</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 错误示范 1</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"comment\">// 错误示范 2</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">2</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"函数内不能用-let-重新声明函数的参数\"><a href=\"#函数内不能用-let-重新声明函数的参数\" class=\"headerlink\" title=\"函数内不能用 let 重新声明函数的参数\"></a>函数内不能用 let 重新声明函数的参数</h2><p><strong>错误示范 :</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hello</span>(<span class=\"params\">world</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> world = <span class=\"string\">&quot;hello tom&quot;</span>; <span class=\"comment\">// 报错 : 用 let 重新声明 world 参数</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(world);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">hello(<span class=\"string\">&quot;hello world&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"const-关键字\"><a href=\"#const-关键字\" class=\"headerlink\" title=\"const 关键字\"></a>const 关键字</h1><p><code>const</code> 是 <code>constant</code> ( 常量 ) 的缩写 , <code>const</code> 和 <code>let</code> 一样 , 也是用来声明变量的 , 但是 <code>const</code> 是专门用于声明一个常量的 , 常量的值是不可改变的</p>\n<p><strong>const 的特点</strong></p>\n<h2 id=\"声明的常量不可修改\"><a href=\"#声明的常量不可修改\" class=\"headerlink\" title=\"声明的常量不可修改\"></a>声明的常量不可修改</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> person = <span class=\"string\">&quot;张三&quot;</span>;</span><br><span class=\"line\">person = <span class=\"string\">&quot;李四&quot;</span>; <span class=\"comment\">// 报错,不能修改常量</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>如果用 <code>const</code> 声明的是复杂数据类型的变量,只是变量的指针不可修改,指针指向的堆中的内容可以修改</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 下面两种情况就可以 , 也不会报错</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">arr[<span class=\"number\">0</span>] = <span class=\"number\">666</span>;</span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;tom&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">20</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">obj.name = <span class=\"string\">&quot;jerry&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"只在块级作用域起作用-这点与-let-关键字一样\"><a href=\"#只在块级作用域起作用-这点与-let-关键字一样\" class=\"headerlink\" title=\"只在块级作用域起作用,这点与 let 关键字一样\"></a>只在块级作用域起作用,这点与 let 关键字一样</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> person = <span class=\"string\">&quot;张三&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person); <span class=\"comment\">// 错误,在代码快 &#123;&#125; 之外, person 失效</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"不存在变量提升-必须先声明后使用-这点也跟-let-关键字一样\"><a href=\"#不存在变量提升-必须先声明后使用-这点也跟-let-关键字一样\" class=\"headerlink\" title=\"不存在变量提升,必须先声明后使用,这点也跟 let 关键字一样\"></a>不存在变量提升,必须先声明后使用,这点也跟 let 关键字一样</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(person); <span class=\"comment\">// 错误,使用前未声明</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> person = <span class=\"string\">&quot;张三&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"不可重复声明同一个变量-这点跟-let-也一样\"><a href=\"#不可重复声明同一个变量-这点跟-let-也一样\" class=\"headerlink\" title=\"不可重复声明同一个变量,这点跟 let 也一样\"></a>不可重复声明同一个变量,这点跟 let 也一样</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = <span class=\"string\">&quot;张三&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> person = <span class=\"string\">&quot;李四&quot;</span>; <span class=\"comment\">// 错误,声明一个已存在的变量 person</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"声明后必须要赋值\"><a href=\"#声明后必须要赋值\" class=\"headerlink\" title=\"声明后必须要赋值\"></a>声明后必须要赋值</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> person; <span class=\"comment\">// 错误,声明后没有赋值</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"快速让浏览器兼容-ES6-的方法\"><a href=\"#快速让浏览器兼容-ES6-的方法\" class=\"headerlink\" title=\"快速让浏览器兼容 ES6 的方法\"></a>快速让浏览器兼容 ES6 的方法</h1><h2 id=\"安装-node\"><a href=\"#安装-node\" class=\"headerlink\" title=\"安装 node\"></a>安装 node</h2><blockquote>\n<h2 id=\"官网-https-nodejs-org\"><a href=\"#官网-https-nodejs-org\" class=\"headerlink\" title=\"官网 https://nodejs.org/\"></a>官网 <a href=\"https://nodejs.org/\">https://nodejs.org/</a></h2><h2 id=\"中文网-http-nodejs-cn\"><a href=\"#中文网-http-nodejs-cn\" class=\"headerlink\" title=\"中文网 http://nodejs.cn/\"></a>中文网 <a href=\"http://nodejs.cn/\">http://nodejs.cn/</a></h2></blockquote>\n<p><strong>检测 <code>node</code> 是否安装成功,可查看版本号</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node -v</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装-babel\"><a href=\"#安装-babel\" class=\"headerlink\" title=\"安装 babel\"></a>安装 babel</h2><p><strong>后面的 @5 是版本号,可以不写</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install babel-core@5</span><br></pre></td></tr></table></figure>\n\n<p>安装 <code>babel</code> 成功后 , 当前目录下的 <code>/node_modules/babel-core</code> 里有 <code>babel</code> 的浏览器版本 <code>browser.js</code> ( 未压缩版 ) 和 <code>browser.min.js</code> ( 压缩版 )</p>\n<h2 id=\"使用-babel\"><a href=\"#使用-babel\" class=\"headerlink\" title=\"使用 babel\"></a>使用 babel</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;brower.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/babel&quot;</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">const</span> name = <span class=\"string\">&quot;张三&quot;</span>; <span class=\"comment\">// 测试 : 使用 ES6 新增关键字 const 来声明变量</span></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"built_in\">console</span>.log(name);</span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这个时候 IE9 能正常运行 <code>ES6</code> 新特性了 , 也就是 <code>babel</code> 转换起作用了，把 <code>const</code> 转换成 IE9 能执行的代码了</p>\n<h1 id=\"The-End\"><a href=\"#The-End\" class=\"headerlink\" title=\"The_End\"></a>The_End</h1>"},{"title":"ES6 新增用法 ( 二 )","date":"2021-06-20T07:02:37.000Z","top_img":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg","cover":"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/desktop.png","comments":1,"_content":"\n# 解构赋值\n\n## 数组\n\n### 解构赋值\n\n```js\nlet [a, b, c] = [1, 2, 3];\nconsole.log(a); // 1\nconsole.log(b); // 2\nconsole.log(c); // 3\n```\n\n### 不完全解构\n\n```js\nlet [a, b, c] = [1, 2];\nconsole.log(a); // 1\nconsole.log(b); // 2\nconsole.log(c); //undefined\n```\n\n### 嵌套\n\n```js\nlet [a, [b, [c, [d, [e, [f]]]]]] = [1, [2, [3, [4, [5, [6]]]]]];\nconsole.log(a); // 1\nconsole.log(b); // 2\nconsole.log(c); // 3\nconsole.log(d); // 4\nconsole.log(e); // 5\nconsole.log(f); // 6\n```\n\n### 可以赋默认值\n\n```js\nlet [a, b = 3] = [1];\nconsole.log(a); // 1\nconsole.log(b); // 3\n```\n\n## 对象\n\n### 解构赋值\n\n```js\nlet { a, b, c } = { a: 1, c: 2, b: 3 };\nconsole.log(a); // 1\nconsole.log(b); // 3\nconsole.log(c); // 2\n```\n\n### 不完全解构\n\n```js\nlet { a } = { b: 1 };\nconsole.log(a); // undefined\n```\n\n### 嵌套\n\n```js\nlet {\n  a: {\n    b: { c },\n  },\n} = { a: { b: { c: 1 } } };\nconsole.log(c);\nconsole.log(a); // a 与 b 只是为了样式一样\nconsole.log(b); // 1\n```\n\n### 默认值\n\n```js\nlet { a, b = 1 } = { a: 1 };\nconsole.log(a); // 1\nconsole.log(b); // 1\n```\n\n## 字符串\n\n### 解构赋值\n\n```js\nlet [a, b, c, d, e, f] = \"pretty\";\nconsole.log(a); // p\nconsole.log(b); // r\nconsole.log(c); // e\nconsole.log(d); // t\nconsole.log(e); // t\nconsole.log(f); // y\n```\n\n# 结构赋值的用途\n\n## 变量交换\n\n```js\nlet a = 1;\nlet b = 3;\n[a, b] = [b, a];\nconsole.log(a); // 3\nconsole.log(b); // 1\n```\n\n## 返回多个值\n\n```js\nfunction demo() {\n  return { name: \"张三\", age: 12 };\n}\nlet { name, age } = demo();\nconsole.log(name); // 张三\nconsole.log(age); // 12\n```\n\n## 定义函数参数\n\n```js\nfunction demo1({ a, b, c }) {\n  console.log(a); // 李四\n  console.log(b); // 22\n  console.log(c); // 175\n}\ndemo1({ a: \"李四\", b: 22, c: 175 });\n```\n\n## 函数参数的默认值\n\n```js\nfunction fn1({ name = \"张三\" }) {\n  console.log(name);\n}\nfn1({ name: \"李四\" }); // 李四\nfn1({}); // 张三\n```\n\n# ES6 中字符串的用法\n\n## 模板字符串\n\n**`${}`**\n\n```js\nlet Person = {\n  name: \"张三\",\n  age: 22,\n  sex: \"男\",\n  hobby: \"钓鱼\",\n};\nlet str = `我的名字是${Person.name},今年${Person.age}岁了,性别${Person.sex},爱好${Person.hobby}`;\nconsole.log(str); // 我的名字是张三,今年22岁了,性别男,爱好钓鱼\n```\n\n## repeat( )\n\n`repeat()` 函数 : 将目标字符串重复 `N` 次 , 返回一个新的字符串 , 不影响原字符串\n\n```js\nlet str1 = \"嘿\";\nlet str2 = str1.repeat(2);\nconsole.log(str2); // 嘿嘿\n```\n\n## includes( )\n\n`includes()` 函数 : 判断字符串中是否含有指定的子字符串 , 返回 `true` 表示含有, `false` 表示未含有。第二个参数选填 , 表示开始搜索的位置 (下标从 `0` 开始)\n\n```js\nlet str = \"codehhr\";\nconsole.log(str.includes(\"c\")); // true\nconsole.log(str.includes(\"code\")); // true\nconsole.log(str.includes(\"h\", 5)); // true\nconsole.log(str.includes(\"h\", 6)); // false\n```\n\n## startsWith( )\n\n判断指定的子字符串是否出现在目标字符串的开头位置 , 第二个参数选填，表示开始搜索的位置 (从下标 `0` 开始)\n\n```js\nlet str = \"codehhr\";\nconsole.log(str.startsWith(\"c\")); // true\nconsole.log(str.startsWith(\"code\")); // true\nconsole.log(str.startsWith(\"c\", 0)); // true\nconsole.log(str.startsWith(\"c\", 1)); // false\n```\n\n## endsWith( )\n\n判断子字符串是否出现在目标字符串的尾部位置 , 第二个参数选填 , 表示从头开始截取的长度\n\n```js\nlet str = \"codehhr\";\nconsole.log(str.endsWith(\"r\")); // true\nconsole.log(str.endsWith(\"hr\")); // true\nconsole.log(str.endsWith(\"hr\", 6)); // false\nconsole.log(str.endsWith(\"hr\", 7)); // true\n```\n\n## String.raw\n\n返回未加工的字符串\n\n```js\n// 后面跟模板字符串\nconsole.log(String.raw`hello\\nworld`); // hello\\nworld\n```\n\n# ES6 中数组的用法\n\n## Array.of( )\n\n将一组值 , 转换成数组\n\n```js\nlet newArr = Array.of(1, 2, 3, 4, 5);\nconsole.log(newArr); // [1,2,3,4,5]\n```\n\n## Array.from( )\n\n将类似数组的对象或者可遍历的对象转换成真正的数组\n\n```js\nlet str = \"hello\";\nconsole.log(Array.from(str)); // [\"h\", \"e\", \"l\", \"l\", \"o\"]\n```\n\n## find( )\n\n找出数组中符合条件的第一个元素\n\n```js\nlet arr = [1, 2, 3, 4, 5, 6, 7, 8];\nconsole.log(\n  arr.find(function (value) {\n    return value > 7;\n  })\n); // 8\n```\n\n## findIndex( )\n\n返回符合条件的第一个数组成员的位置\n\n```js\nlet arr = [1, 2, 3, 4, 5, 6, 7, 8];\nconsole.log(\n  arr.findIndex(function (value) {\n    return value > 7;\n  })\n); // 7\n```\n\n## fill( )\n\n用指定的值 , 填充到数组 , 会更改原数组\n多个参数时 , 第一个为要填充的内容 , 第二个为起始位置 (下标从 `0` 开始) , 第三个参数为结束位置 ( 结束位置不填充 )\n\n```js\nlet arr = [1, 2, 3, 4, 5];\narr.fill(6);\nconsole.log(arr); // [6, 6, 6, 6, 6]\narr.fill(6, 0, 2); // [6, 6, 3, 4, 5]\n```\n\n## entries( )\n\n对数组的键值对进行遍历 , 返回一个遍历器\n\n```js\nfor (let [index, value] of [\"html\", \"css\", \"js\"].entries()) {\n  console.log(index, value);\n}\n// 0 \"html\"\n// 1 \"css\"\n// 2 \"js\"\n```\n\n## keys( )\n\n对数组的索引键进行遍历 , 返回一个遍历器\n\n```js\nfor (let index of [1, 2].keys()) {\n  console.log(index);\n}\n// 0\n// 1\n```\n\n## values\n\n对数组的元素进行遍历 , 返回一个遍历器\n\n```js\nfor (let value of [1, 2].values()) {\n  console.log(value);\n}\n// 1\n// 2\n```\n\n# The_End\n","source":"_posts/js/es6-day02.md","raw":"---\ntitle: ES6 新增用法 ( 二 )\ndate: 2021-06-20 15:02:37\ntop_img: https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg\ncover:\ntags:\n  - js\n  - javascript\n  - ES6\n  - 解构赋值\ncategories:\n  - js\n  - ES6\ncomments:\n---\n\n# 解构赋值\n\n## 数组\n\n### 解构赋值\n\n```js\nlet [a, b, c] = [1, 2, 3];\nconsole.log(a); // 1\nconsole.log(b); // 2\nconsole.log(c); // 3\n```\n\n### 不完全解构\n\n```js\nlet [a, b, c] = [1, 2];\nconsole.log(a); // 1\nconsole.log(b); // 2\nconsole.log(c); //undefined\n```\n\n### 嵌套\n\n```js\nlet [a, [b, [c, [d, [e, [f]]]]]] = [1, [2, [3, [4, [5, [6]]]]]];\nconsole.log(a); // 1\nconsole.log(b); // 2\nconsole.log(c); // 3\nconsole.log(d); // 4\nconsole.log(e); // 5\nconsole.log(f); // 6\n```\n\n### 可以赋默认值\n\n```js\nlet [a, b = 3] = [1];\nconsole.log(a); // 1\nconsole.log(b); // 3\n```\n\n## 对象\n\n### 解构赋值\n\n```js\nlet { a, b, c } = { a: 1, c: 2, b: 3 };\nconsole.log(a); // 1\nconsole.log(b); // 3\nconsole.log(c); // 2\n```\n\n### 不完全解构\n\n```js\nlet { a } = { b: 1 };\nconsole.log(a); // undefined\n```\n\n### 嵌套\n\n```js\nlet {\n  a: {\n    b: { c },\n  },\n} = { a: { b: { c: 1 } } };\nconsole.log(c);\nconsole.log(a); // a 与 b 只是为了样式一样\nconsole.log(b); // 1\n```\n\n### 默认值\n\n```js\nlet { a, b = 1 } = { a: 1 };\nconsole.log(a); // 1\nconsole.log(b); // 1\n```\n\n## 字符串\n\n### 解构赋值\n\n```js\nlet [a, b, c, d, e, f] = \"pretty\";\nconsole.log(a); // p\nconsole.log(b); // r\nconsole.log(c); // e\nconsole.log(d); // t\nconsole.log(e); // t\nconsole.log(f); // y\n```\n\n# 结构赋值的用途\n\n## 变量交换\n\n```js\nlet a = 1;\nlet b = 3;\n[a, b] = [b, a];\nconsole.log(a); // 3\nconsole.log(b); // 1\n```\n\n## 返回多个值\n\n```js\nfunction demo() {\n  return { name: \"张三\", age: 12 };\n}\nlet { name, age } = demo();\nconsole.log(name); // 张三\nconsole.log(age); // 12\n```\n\n## 定义函数参数\n\n```js\nfunction demo1({ a, b, c }) {\n  console.log(a); // 李四\n  console.log(b); // 22\n  console.log(c); // 175\n}\ndemo1({ a: \"李四\", b: 22, c: 175 });\n```\n\n## 函数参数的默认值\n\n```js\nfunction fn1({ name = \"张三\" }) {\n  console.log(name);\n}\nfn1({ name: \"李四\" }); // 李四\nfn1({}); // 张三\n```\n\n# ES6 中字符串的用法\n\n## 模板字符串\n\n**`${}`**\n\n```js\nlet Person = {\n  name: \"张三\",\n  age: 22,\n  sex: \"男\",\n  hobby: \"钓鱼\",\n};\nlet str = `我的名字是${Person.name},今年${Person.age}岁了,性别${Person.sex},爱好${Person.hobby}`;\nconsole.log(str); // 我的名字是张三,今年22岁了,性别男,爱好钓鱼\n```\n\n## repeat( )\n\n`repeat()` 函数 : 将目标字符串重复 `N` 次 , 返回一个新的字符串 , 不影响原字符串\n\n```js\nlet str1 = \"嘿\";\nlet str2 = str1.repeat(2);\nconsole.log(str2); // 嘿嘿\n```\n\n## includes( )\n\n`includes()` 函数 : 判断字符串中是否含有指定的子字符串 , 返回 `true` 表示含有, `false` 表示未含有。第二个参数选填 , 表示开始搜索的位置 (下标从 `0` 开始)\n\n```js\nlet str = \"codehhr\";\nconsole.log(str.includes(\"c\")); // true\nconsole.log(str.includes(\"code\")); // true\nconsole.log(str.includes(\"h\", 5)); // true\nconsole.log(str.includes(\"h\", 6)); // false\n```\n\n## startsWith( )\n\n判断指定的子字符串是否出现在目标字符串的开头位置 , 第二个参数选填，表示开始搜索的位置 (从下标 `0` 开始)\n\n```js\nlet str = \"codehhr\";\nconsole.log(str.startsWith(\"c\")); // true\nconsole.log(str.startsWith(\"code\")); // true\nconsole.log(str.startsWith(\"c\", 0)); // true\nconsole.log(str.startsWith(\"c\", 1)); // false\n```\n\n## endsWith( )\n\n判断子字符串是否出现在目标字符串的尾部位置 , 第二个参数选填 , 表示从头开始截取的长度\n\n```js\nlet str = \"codehhr\";\nconsole.log(str.endsWith(\"r\")); // true\nconsole.log(str.endsWith(\"hr\")); // true\nconsole.log(str.endsWith(\"hr\", 6)); // false\nconsole.log(str.endsWith(\"hr\", 7)); // true\n```\n\n## String.raw\n\n返回未加工的字符串\n\n```js\n// 后面跟模板字符串\nconsole.log(String.raw`hello\\nworld`); // hello\\nworld\n```\n\n# ES6 中数组的用法\n\n## Array.of( )\n\n将一组值 , 转换成数组\n\n```js\nlet newArr = Array.of(1, 2, 3, 4, 5);\nconsole.log(newArr); // [1,2,3,4,5]\n```\n\n## Array.from( )\n\n将类似数组的对象或者可遍历的对象转换成真正的数组\n\n```js\nlet str = \"hello\";\nconsole.log(Array.from(str)); // [\"h\", \"e\", \"l\", \"l\", \"o\"]\n```\n\n## find( )\n\n找出数组中符合条件的第一个元素\n\n```js\nlet arr = [1, 2, 3, 4, 5, 6, 7, 8];\nconsole.log(\n  arr.find(function (value) {\n    return value > 7;\n  })\n); // 8\n```\n\n## findIndex( )\n\n返回符合条件的第一个数组成员的位置\n\n```js\nlet arr = [1, 2, 3, 4, 5, 6, 7, 8];\nconsole.log(\n  arr.findIndex(function (value) {\n    return value > 7;\n  })\n); // 7\n```\n\n## fill( )\n\n用指定的值 , 填充到数组 , 会更改原数组\n多个参数时 , 第一个为要填充的内容 , 第二个为起始位置 (下标从 `0` 开始) , 第三个参数为结束位置 ( 结束位置不填充 )\n\n```js\nlet arr = [1, 2, 3, 4, 5];\narr.fill(6);\nconsole.log(arr); // [6, 6, 6, 6, 6]\narr.fill(6, 0, 2); // [6, 6, 3, 4, 5]\n```\n\n## entries( )\n\n对数组的键值对进行遍历 , 返回一个遍历器\n\n```js\nfor (let [index, value] of [\"html\", \"css\", \"js\"].entries()) {\n  console.log(index, value);\n}\n// 0 \"html\"\n// 1 \"css\"\n// 2 \"js\"\n```\n\n## keys( )\n\n对数组的索引键进行遍历 , 返回一个遍历器\n\n```js\nfor (let index of [1, 2].keys()) {\n  console.log(index);\n}\n// 0\n// 1\n```\n\n## values\n\n对数组的元素进行遍历 , 返回一个遍历器\n\n```js\nfor (let value of [1, 2].values()) {\n  console.log(value);\n}\n// 1\n// 2\n```\n\n# The_End\n","slug":"js/es6-day02","published":1,"updated":"2021-06-25T07:37:51.188Z","layout":"post","photos":[],"link":"","_id":"cksvxwnnd0011gubq9mbi09j9","content":"<h1 id=\"解构赋值\"><a href=\"#解构赋值\" class=\"headerlink\" title=\"解构赋值\"></a>解构赋值</h1><h2 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h2><h3 id=\"解构赋值-1\"><a href=\"#解构赋值-1\" class=\"headerlink\" title=\"解构赋值\"></a>解构赋值</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [a, b, c] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b); <span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c); <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"不完全解构\"><a href=\"#不完全解构\" class=\"headerlink\" title=\"不完全解构\"></a>不完全解构</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [a, b, c] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b); <span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c); <span class=\"comment\">//undefined</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"嵌套\"><a href=\"#嵌套\" class=\"headerlink\" title=\"嵌套\"></a>嵌套</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [a, [b, [c, [d, [e, [f]]]]]] = [<span class=\"number\">1</span>, [<span class=\"number\">2</span>, [<span class=\"number\">3</span>, [<span class=\"number\">4</span>, [<span class=\"number\">5</span>, [<span class=\"number\">6</span>]]]]]];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b); <span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c); <span class=\"comment\">// 3</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(d); <span class=\"comment\">// 4</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(e); <span class=\"comment\">// 5</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(f); <span class=\"comment\">// 6</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"可以赋默认值\"><a href=\"#可以赋默认值\" class=\"headerlink\" title=\"可以赋默认值\"></a>可以赋默认值</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [a, b = <span class=\"number\">3</span>] = [<span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b); <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h2><h3 id=\"解构赋值-2\"><a href=\"#解构赋值-2\" class=\"headerlink\" title=\"解构赋值\"></a>解构赋值</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; a, b, c &#125; = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">c</span>: <span class=\"number\">2</span>, <span class=\"attr\">b</span>: <span class=\"number\">3</span> &#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b); <span class=\"comment\">// 3</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c); <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"不完全解构-1\"><a href=\"#不完全解构-1\" class=\"headerlink\" title=\"不完全解构\"></a>不完全解构</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; a &#125; = &#123; <span class=\"attr\">b</span>: <span class=\"number\">1</span> &#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"嵌套-1\"><a href=\"#嵌套-1\" class=\"headerlink\" title=\"嵌套\"></a>嵌套</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">a</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">b</span>: &#123; c &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125; = &#123; <span class=\"attr\">a</span>: &#123; <span class=\"attr\">b</span>: &#123; <span class=\"attr\">c</span>: <span class=\"number\">1</span> &#125; &#125; &#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// a 与 b 只是为了样式一样</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b); <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"默认值\"><a href=\"#默认值\" class=\"headerlink\" title=\"默认值\"></a>默认值</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; a, b = <span class=\"number\">1</span> &#125; = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b); <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h2><h3 id=\"解构赋值-3\"><a href=\"#解构赋值-3\" class=\"headerlink\" title=\"解构赋值\"></a>解构赋值</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [a, b, c, d, e, f] = <span class=\"string\">&quot;pretty&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// p</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b); <span class=\"comment\">// r</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c); <span class=\"comment\">// e</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(d); <span class=\"comment\">// t</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(e); <span class=\"comment\">// t</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(f); <span class=\"comment\">// y</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"结构赋值的用途\"><a href=\"#结构赋值的用途\" class=\"headerlink\" title=\"结构赋值的用途\"></a>结构赋值的用途</h1><h2 id=\"变量交换\"><a href=\"#变量交换\" class=\"headerlink\" title=\"变量交换\"></a>变量交换</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"number\">3</span>;</span><br><span class=\"line\">[a, b] = [b, a];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 3</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b); <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"返回多个值\"><a href=\"#返回多个值\" class=\"headerlink\" title=\"返回多个值\"></a>返回多个值</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">demo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;张三&quot;</span>, <span class=\"attr\">age</span>: <span class=\"number\">12</span> &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; name, age &#125; = demo();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(name); <span class=\"comment\">// 张三</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(age); <span class=\"comment\">// 12</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"定义函数参数\"><a href=\"#定义函数参数\" class=\"headerlink\" title=\"定义函数参数\"></a>定义函数参数</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">demo1</span>(<span class=\"params\">&#123; a, b, c &#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 李四</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(b); <span class=\"comment\">// 22</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(c); <span class=\"comment\">// 175</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">demo1(&#123; <span class=\"attr\">a</span>: <span class=\"string\">&quot;李四&quot;</span>, <span class=\"attr\">b</span>: <span class=\"number\">22</span>, <span class=\"attr\">c</span>: <span class=\"number\">175</span> &#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"函数参数的默认值\"><a href=\"#函数参数的默认值\" class=\"headerlink\" title=\"函数参数的默认值\"></a>函数参数的默认值</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn1</span>(<span class=\"params\">&#123; name = <span class=\"string\">&quot;张三&quot;</span> &#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn1(&#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;李四&quot;</span> &#125;); <span class=\"comment\">// 李四</span></span><br><span class=\"line\">fn1(&#123;&#125;); <span class=\"comment\">// 张三</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"ES6-中字符串的用法\"><a href=\"#ES6-中字符串的用法\" class=\"headerlink\" title=\"ES6 中字符串的用法\"></a>ES6 中字符串的用法</h1><h2 id=\"模板字符串\"><a href=\"#模板字符串\" class=\"headerlink\" title=\"模板字符串\"></a>模板字符串</h2><p><strong><code>$&#123;&#125;</code></strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> Person = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;张三&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">22</span>,</span><br><span class=\"line\">  <span class=\"attr\">sex</span>: <span class=\"string\">&quot;男&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">hobby</span>: <span class=\"string\">&quot;钓鱼&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">`我的名字是<span class=\"subst\">$&#123;Person.name&#125;</span>,今年<span class=\"subst\">$&#123;Person.age&#125;</span>岁了,性别<span class=\"subst\">$&#123;Person.sex&#125;</span>,爱好<span class=\"subst\">$&#123;Person.hobby&#125;</span>`</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str); <span class=\"comment\">// 我的名字是张三,今年22岁了,性别男,爱好钓鱼</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"repeat\"><a href=\"#repeat\" class=\"headerlink\" title=\"repeat( )\"></a>repeat( )</h2><p><code>repeat()</code> 函数 : 将目标字符串重复 <code>N</code> 次 , 返回一个新的字符串 , 不影响原字符串</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str1 = <span class=\"string\">&quot;嘿&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> str2 = str1.repeat(<span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str2); <span class=\"comment\">// 嘿嘿</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"includes\"><a href=\"#includes\" class=\"headerlink\" title=\"includes( )\"></a>includes( )</h2><p><code>includes()</code> 函数 : 判断字符串中是否含有指定的子字符串 , 返回 <code>true</code> 表示含有, <code>false</code> 表示未含有。第二个参数选填 , 表示开始搜索的位置 (下标从 <code>0</code> 开始)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&quot;codehhr&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.includes(<span class=\"string\">&quot;c&quot;</span>)); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.includes(<span class=\"string\">&quot;code&quot;</span>)); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.includes(<span class=\"string\">&quot;h&quot;</span>, <span class=\"number\">5</span>)); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.includes(<span class=\"string\">&quot;h&quot;</span>, <span class=\"number\">6</span>)); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"startsWith\"><a href=\"#startsWith\" class=\"headerlink\" title=\"startsWith( )\"></a>startsWith( )</h2><p>判断指定的子字符串是否出现在目标字符串的开头位置 , 第二个参数选填，表示开始搜索的位置 (从下标 <code>0</code> 开始)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&quot;codehhr&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.startsWith(<span class=\"string\">&quot;c&quot;</span>)); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.startsWith(<span class=\"string\">&quot;code&quot;</span>)); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.startsWith(<span class=\"string\">&quot;c&quot;</span>, <span class=\"number\">0</span>)); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.startsWith(<span class=\"string\">&quot;c&quot;</span>, <span class=\"number\">1</span>)); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"endsWith\"><a href=\"#endsWith\" class=\"headerlink\" title=\"endsWith( )\"></a>endsWith( )</h2><p>判断子字符串是否出现在目标字符串的尾部位置 , 第二个参数选填 , 表示从头开始截取的长度</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&quot;codehhr&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.endsWith(<span class=\"string\">&quot;r&quot;</span>)); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.endsWith(<span class=\"string\">&quot;hr&quot;</span>)); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.endsWith(<span class=\"string\">&quot;hr&quot;</span>, <span class=\"number\">6</span>)); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.endsWith(<span class=\"string\">&quot;hr&quot;</span>, <span class=\"number\">7</span>)); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"String-raw\"><a href=\"#String-raw\" class=\"headerlink\" title=\"String.raw\"></a>String.raw</h2><p>返回未加工的字符串</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 后面跟模板字符串</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">String</span>.raw<span class=\"string\">`hello\\nworld`</span>); <span class=\"comment\">// hello\\nworld</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"ES6-中数组的用法\"><a href=\"#ES6-中数组的用法\" class=\"headerlink\" title=\"ES6 中数组的用法\"></a>ES6 中数组的用法</h1><h2 id=\"Array-of\"><a href=\"#Array-of\" class=\"headerlink\" title=\"Array.of( )\"></a>Array.of( )</h2><p>将一组值 , 转换成数组</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> newArr = <span class=\"built_in\">Array</span>.of(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArr); <span class=\"comment\">// [1,2,3,4,5]</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Array-from\"><a href=\"#Array-from\" class=\"headerlink\" title=\"Array.from( )\"></a>Array.from( )</h2><p>将类似数组的对象或者可遍历的对象转换成真正的数组</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&quot;hello&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Array</span>.from(str)); <span class=\"comment\">// [&quot;h&quot;, &quot;e&quot;, &quot;l&quot;, &quot;l&quot;, &quot;o&quot;]</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"find\"><a href=\"#find\" class=\"headerlink\" title=\"find( )\"></a>find( )</h2><p>找出数组中符合条件的第一个元素</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">  arr.find(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value &gt; <span class=\"number\">7</span>;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">); <span class=\"comment\">// 8</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"findIndex\"><a href=\"#findIndex\" class=\"headerlink\" title=\"findIndex( )\"></a>findIndex( )</h2><p>返回符合条件的第一个数组成员的位置</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">  arr.findIndex(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value &gt; <span class=\"number\">7</span>;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">); <span class=\"comment\">// 7</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"fill\"><a href=\"#fill\" class=\"headerlink\" title=\"fill( )\"></a>fill( )</h2><p>用指定的值 , 填充到数组 , 会更改原数组<br>多个参数时 , 第一个为要填充的内容 , 第二个为起始位置 (下标从 <code>0</code> 开始) , 第三个参数为结束位置 ( 结束位置不填充 )</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\">arr.fill(<span class=\"number\">6</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr); <span class=\"comment\">// [6, 6, 6, 6, 6]</span></span><br><span class=\"line\">arr.fill(<span class=\"number\">6</span>, <span class=\"number\">0</span>, <span class=\"number\">2</span>); <span class=\"comment\">// [6, 6, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"entries\"><a href=\"#entries\" class=\"headerlink\" title=\"entries( )\"></a>entries( )</h2><p>对数组的键值对进行遍历 , 返回一个遍历器</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [index, value] <span class=\"keyword\">of</span> [<span class=\"string\">&quot;html&quot;</span>, <span class=\"string\">&quot;css&quot;</span>, <span class=\"string\">&quot;js&quot;</span>].entries()) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(index, value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 0 &quot;html&quot;</span></span><br><span class=\"line\"><span class=\"comment\">// 1 &quot;css&quot;</span></span><br><span class=\"line\"><span class=\"comment\">// 2 &quot;js&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"keys\"><a href=\"#keys\" class=\"headerlink\" title=\"keys( )\"></a>keys( )</h2><p>对数组的索引键进行遍历 , 返回一个遍历器</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index <span class=\"keyword\">of</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>].keys()) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(index);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 0</span></span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"values\"><a href=\"#values\" class=\"headerlink\" title=\"values\"></a>values</h2><p>对数组的元素进行遍历 , 返回一个遍历器</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> value <span class=\"keyword\">of</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>].values()) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"The-End\"><a href=\"#The-End\" class=\"headerlink\" title=\"The_End\"></a>The_End</h1>","site":{"data":{"link":{"class1":{"class_name":"舍友","link_list":{"1":{"name":"codeAntg","link":"https://blog.csdn.net/weixin_44745147","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/fjh.jpg","descr":"那家刀削面不错","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class2":{"class_name":"致谢","link_list":{"1":{"name":"JerrC","link":"https://immyw.com","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/immyw.png","descr":"今日事,今日毕","width":"1px","style":"solid","color":"#60d0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/hexo.svg","descr":"A fast, simple & powerful blog framework","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class3":{"class_name":"友人","link_list":{"1":{"name":"Chester","link":"http://chesterlds.cn","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/chester.jpg","descr":null,"width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Wangs","link":"https://wangsss.cn/","avatar":"https://wangsss.cn/img/avatar.png","descr":"不疯魔，不成活 ~","width":"1px","style":"solid","color":"#9d9d9d","custom":"link_custom1","time":"4s","namecolor":"0094ff","descolor":"#ff9191"}}}}}},"excerpt":"","more":"<h1 id=\"解构赋值\"><a href=\"#解构赋值\" class=\"headerlink\" title=\"解构赋值\"></a>解构赋值</h1><h2 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h2><h3 id=\"解构赋值-1\"><a href=\"#解构赋值-1\" class=\"headerlink\" title=\"解构赋值\"></a>解构赋值</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [a, b, c] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b); <span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c); <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"不完全解构\"><a href=\"#不完全解构\" class=\"headerlink\" title=\"不完全解构\"></a>不完全解构</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [a, b, c] = [<span class=\"number\">1</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b); <span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c); <span class=\"comment\">//undefined</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"嵌套\"><a href=\"#嵌套\" class=\"headerlink\" title=\"嵌套\"></a>嵌套</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [a, [b, [c, [d, [e, [f]]]]]] = [<span class=\"number\">1</span>, [<span class=\"number\">2</span>, [<span class=\"number\">3</span>, [<span class=\"number\">4</span>, [<span class=\"number\">5</span>, [<span class=\"number\">6</span>]]]]]];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b); <span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c); <span class=\"comment\">// 3</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(d); <span class=\"comment\">// 4</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(e); <span class=\"comment\">// 5</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(f); <span class=\"comment\">// 6</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"可以赋默认值\"><a href=\"#可以赋默认值\" class=\"headerlink\" title=\"可以赋默认值\"></a>可以赋默认值</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [a, b = <span class=\"number\">3</span>] = [<span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b); <span class=\"comment\">// 3</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h2><h3 id=\"解构赋值-2\"><a href=\"#解构赋值-2\" class=\"headerlink\" title=\"解构赋值\"></a>解构赋值</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; a, b, c &#125; = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span>, <span class=\"attr\">c</span>: <span class=\"number\">2</span>, <span class=\"attr\">b</span>: <span class=\"number\">3</span> &#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b); <span class=\"comment\">// 3</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c); <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"不完全解构-1\"><a href=\"#不完全解构-1\" class=\"headerlink\" title=\"不完全解构\"></a>不完全解构</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; a &#125; = &#123; <span class=\"attr\">b</span>: <span class=\"number\">1</span> &#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"嵌套-1\"><a href=\"#嵌套-1\" class=\"headerlink\" title=\"嵌套\"></a>嵌套</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">a</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">b</span>: &#123; c &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125; = &#123; <span class=\"attr\">a</span>: &#123; <span class=\"attr\">b</span>: &#123; <span class=\"attr\">c</span>: <span class=\"number\">1</span> &#125; &#125; &#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// a 与 b 只是为了样式一样</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b); <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"默认值\"><a href=\"#默认值\" class=\"headerlink\" title=\"默认值\"></a>默认值</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> &#123; a, b = <span class=\"number\">1</span> &#125; = &#123; <span class=\"attr\">a</span>: <span class=\"number\">1</span> &#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b); <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h2><h3 id=\"解构赋值-3\"><a href=\"#解构赋值-3\" class=\"headerlink\" title=\"解构赋值\"></a>解构赋值</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> [a, b, c, d, e, f] = <span class=\"string\">&quot;pretty&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// p</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b); <span class=\"comment\">// r</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c); <span class=\"comment\">// e</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(d); <span class=\"comment\">// t</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(e); <span class=\"comment\">// t</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(f); <span class=\"comment\">// y</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"结构赋值的用途\"><a href=\"#结构赋值的用途\" class=\"headerlink\" title=\"结构赋值的用途\"></a>结构赋值的用途</h1><h2 id=\"变量交换\"><a href=\"#变量交换\" class=\"headerlink\" title=\"变量交换\"></a>变量交换</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"number\">3</span>;</span><br><span class=\"line\">[a, b] = [b, a];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 3</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b); <span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"返回多个值\"><a href=\"#返回多个值\" class=\"headerlink\" title=\"返回多个值\"></a>返回多个值</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">demo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;张三&quot;</span>, <span class=\"attr\">age</span>: <span class=\"number\">12</span> &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> &#123; name, age &#125; = demo();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(name); <span class=\"comment\">// 张三</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(age); <span class=\"comment\">// 12</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"定义函数参数\"><a href=\"#定义函数参数\" class=\"headerlink\" title=\"定义函数参数\"></a>定义函数参数</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">demo1</span>(<span class=\"params\">&#123; a, b, c &#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// 李四</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(b); <span class=\"comment\">// 22</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(c); <span class=\"comment\">// 175</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">demo1(&#123; <span class=\"attr\">a</span>: <span class=\"string\">&quot;李四&quot;</span>, <span class=\"attr\">b</span>: <span class=\"number\">22</span>, <span class=\"attr\">c</span>: <span class=\"number\">175</span> &#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"函数参数的默认值\"><a href=\"#函数参数的默认值\" class=\"headerlink\" title=\"函数参数的默认值\"></a>函数参数的默认值</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn1</span>(<span class=\"params\">&#123; name = <span class=\"string\">&quot;张三&quot;</span> &#125;</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn1(&#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;李四&quot;</span> &#125;); <span class=\"comment\">// 李四</span></span><br><span class=\"line\">fn1(&#123;&#125;); <span class=\"comment\">// 张三</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"ES6-中字符串的用法\"><a href=\"#ES6-中字符串的用法\" class=\"headerlink\" title=\"ES6 中字符串的用法\"></a>ES6 中字符串的用法</h1><h2 id=\"模板字符串\"><a href=\"#模板字符串\" class=\"headerlink\" title=\"模板字符串\"></a>模板字符串</h2><p><strong><code>$&#123;&#125;</code></strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> Person = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;张三&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">22</span>,</span><br><span class=\"line\">  <span class=\"attr\">sex</span>: <span class=\"string\">&quot;男&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">hobby</span>: <span class=\"string\">&quot;钓鱼&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">`我的名字是<span class=\"subst\">$&#123;Person.name&#125;</span>,今年<span class=\"subst\">$&#123;Person.age&#125;</span>岁了,性别<span class=\"subst\">$&#123;Person.sex&#125;</span>,爱好<span class=\"subst\">$&#123;Person.hobby&#125;</span>`</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str); <span class=\"comment\">// 我的名字是张三,今年22岁了,性别男,爱好钓鱼</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"repeat\"><a href=\"#repeat\" class=\"headerlink\" title=\"repeat( )\"></a>repeat( )</h2><p><code>repeat()</code> 函数 : 将目标字符串重复 <code>N</code> 次 , 返回一个新的字符串 , 不影响原字符串</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str1 = <span class=\"string\">&quot;嘿&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> str2 = str1.repeat(<span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str2); <span class=\"comment\">// 嘿嘿</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"includes\"><a href=\"#includes\" class=\"headerlink\" title=\"includes( )\"></a>includes( )</h2><p><code>includes()</code> 函数 : 判断字符串中是否含有指定的子字符串 , 返回 <code>true</code> 表示含有, <code>false</code> 表示未含有。第二个参数选填 , 表示开始搜索的位置 (下标从 <code>0</code> 开始)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&quot;codehhr&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.includes(<span class=\"string\">&quot;c&quot;</span>)); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.includes(<span class=\"string\">&quot;code&quot;</span>)); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.includes(<span class=\"string\">&quot;h&quot;</span>, <span class=\"number\">5</span>)); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.includes(<span class=\"string\">&quot;h&quot;</span>, <span class=\"number\">6</span>)); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"startsWith\"><a href=\"#startsWith\" class=\"headerlink\" title=\"startsWith( )\"></a>startsWith( )</h2><p>判断指定的子字符串是否出现在目标字符串的开头位置 , 第二个参数选填，表示开始搜索的位置 (从下标 <code>0</code> 开始)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&quot;codehhr&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.startsWith(<span class=\"string\">&quot;c&quot;</span>)); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.startsWith(<span class=\"string\">&quot;code&quot;</span>)); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.startsWith(<span class=\"string\">&quot;c&quot;</span>, <span class=\"number\">0</span>)); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.startsWith(<span class=\"string\">&quot;c&quot;</span>, <span class=\"number\">1</span>)); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"endsWith\"><a href=\"#endsWith\" class=\"headerlink\" title=\"endsWith( )\"></a>endsWith( )</h2><p>判断子字符串是否出现在目标字符串的尾部位置 , 第二个参数选填 , 表示从头开始截取的长度</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&quot;codehhr&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.endsWith(<span class=\"string\">&quot;r&quot;</span>)); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.endsWith(<span class=\"string\">&quot;hr&quot;</span>)); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.endsWith(<span class=\"string\">&quot;hr&quot;</span>, <span class=\"number\">6</span>)); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.endsWith(<span class=\"string\">&quot;hr&quot;</span>, <span class=\"number\">7</span>)); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"String-raw\"><a href=\"#String-raw\" class=\"headerlink\" title=\"String.raw\"></a>String.raw</h2><p>返回未加工的字符串</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 后面跟模板字符串</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">String</span>.raw<span class=\"string\">`hello\\nworld`</span>); <span class=\"comment\">// hello\\nworld</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"ES6-中数组的用法\"><a href=\"#ES6-中数组的用法\" class=\"headerlink\" title=\"ES6 中数组的用法\"></a>ES6 中数组的用法</h1><h2 id=\"Array-of\"><a href=\"#Array-of\" class=\"headerlink\" title=\"Array.of( )\"></a>Array.of( )</h2><p>将一组值 , 转换成数组</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> newArr = <span class=\"built_in\">Array</span>.of(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArr); <span class=\"comment\">// [1,2,3,4,5]</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Array-from\"><a href=\"#Array-from\" class=\"headerlink\" title=\"Array.from( )\"></a>Array.from( )</h2><p>将类似数组的对象或者可遍历的对象转换成真正的数组</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&quot;hello&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Array</span>.from(str)); <span class=\"comment\">// [&quot;h&quot;, &quot;e&quot;, &quot;l&quot;, &quot;l&quot;, &quot;o&quot;]</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"find\"><a href=\"#find\" class=\"headerlink\" title=\"find( )\"></a>find( )</h2><p>找出数组中符合条件的第一个元素</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">  arr.find(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value &gt; <span class=\"number\">7</span>;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">); <span class=\"comment\">// 8</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"findIndex\"><a href=\"#findIndex\" class=\"headerlink\" title=\"findIndex( )\"></a>findIndex( )</h2><p>返回符合条件的第一个数组成员的位置</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">  arr.findIndex(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> value &gt; <span class=\"number\">7</span>;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">); <span class=\"comment\">// 7</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"fill\"><a href=\"#fill\" class=\"headerlink\" title=\"fill( )\"></a>fill( )</h2><p>用指定的值 , 填充到数组 , 会更改原数组<br>多个参数时 , 第一个为要填充的内容 , 第二个为起始位置 (下标从 <code>0</code> 开始) , 第三个参数为结束位置 ( 结束位置不填充 )</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\">arr.fill(<span class=\"number\">6</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr); <span class=\"comment\">// [6, 6, 6, 6, 6]</span></span><br><span class=\"line\">arr.fill(<span class=\"number\">6</span>, <span class=\"number\">0</span>, <span class=\"number\">2</span>); <span class=\"comment\">// [6, 6, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"entries\"><a href=\"#entries\" class=\"headerlink\" title=\"entries( )\"></a>entries( )</h2><p>对数组的键值对进行遍历 , 返回一个遍历器</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [index, value] <span class=\"keyword\">of</span> [<span class=\"string\">&quot;html&quot;</span>, <span class=\"string\">&quot;css&quot;</span>, <span class=\"string\">&quot;js&quot;</span>].entries()) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(index, value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 0 &quot;html&quot;</span></span><br><span class=\"line\"><span class=\"comment\">// 1 &quot;css&quot;</span></span><br><span class=\"line\"><span class=\"comment\">// 2 &quot;js&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"keys\"><a href=\"#keys\" class=\"headerlink\" title=\"keys( )\"></a>keys( )</h2><p>对数组的索引键进行遍历 , 返回一个遍历器</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index <span class=\"keyword\">of</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>].keys()) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(index);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 0</span></span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"values\"><a href=\"#values\" class=\"headerlink\" title=\"values\"></a>values</h2><p>对数组的元素进行遍历 , 返回一个遍历器</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> value <span class=\"keyword\">of</span> [<span class=\"number\">1</span>, <span class=\"number\">2</span>].values()) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"The-End\"><a href=\"#The-End\" class=\"headerlink\" title=\"The_End\"></a>The_End</h1>"},{"title":"ES6 新增用法 ( 三 )","date":"2021-06-23T13:57:46.000Z","top_img":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg","cover":"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/desktop.png","comments":1,"_content":"\n# ES6 中数值的用法\n\n## isNaN( )\n\n`isNaN` 函数 : 用于判断传入的是否是非数值  \n**注意** : 是判断非数值 , 而不是判断数值 , `isNaN` 的全称是： is not a number\n\n**传统写法**\n\n```js\nconsole.log(isNaN(2.5)); // false\nconsole.log(isNaN(\"2.5\")); // false,会隐式类型转化为 Number 类型\nconsole.log(isNaN(\"abc\")); // true,转换为 Number 后是一个非数值 (NaN)\nconsole.log(isNaN(NaN)); // true\n```\n\n`isNaN` 是全局函数 , 本身就是属于 `window` 对象下的一个方法 , 在 `ES6` 的标准中 , `isNaN` 方法被移植到了 `Number` 对象上 , 也就是原本属于全局对象 `window` 下的函数 , 现在属于 `Number` 对象上了\n\n**ES6 用法**\n\n```js\nconsole.log(Number.isNaN(2.5)); // false\nconsole.log(Number.isNaN(\"abc\")); // false,不做类型转换,是字符串,直接返回 false\nconsole.log(Number.isNaN(\"2.5\")); // false,也不会隐式类型转换,即还是字符串,返回 false\nconsole.log(Number.isNaN(NaN)); // true\n```\n\n## Number.isFinite( )\n\n`Number.isFinite` 函数 : 用来检查一个数值是否非无穷 ( 有穷的 , 有限的 )\n\n```js\nconsole.log(Number.isFinite(10)); // true\nconsole.log(Number.isFinite(\"10\")); // false,字符串也会返回 false\nconsole.log(Number.isFinite(Infinity)); // false\n```\n\n## Number.parseInt( )\n\n`parseInt` 函数 : 解析一个字符串 , 返回一个整数. `parseInt` 函数同样是从 `window` 对象下移植到 `Number` 对象下 , 但是它的作用没有任何变化\n\n```js\nconsole.log(Number.parseInt(2.3)); // 2\nconsole.log(Number.parseInt(2.7)); // 2\n```\n\n## Number.isInteger( )\n\n`Number.isInteger` 函数 : 用来判断是否是整数\n\n```js\nconsole.log(Number.isInteger(1)); // true\nconsole.log(Number.isInteger(1.0)); // true\nconsole.log(Number.isInteger(1.1)); // false\nconsole.log(Number.isInteger(\"1.0\")); // false\nconsole.log(Number.isInteger(\"1.a\")); // false\n```\n\n## Math.trunc( )\n\n`Math.trunc` 函数 : 用于去除一个数的小数部分 , 返回整数部分。\n\n```js\nconsole.log(Math.trunc(2.1)); // 2\nconsole.log(Math.trunc(2.8)); // 2\n```\n\n## Math.sign( )\n\n`Math.sign` 函数 : 用来判断一个数到底是正数 , 负数 , 还是零\n参数如果是正数 , 结果返回 `1` ; 如果是负数 , 结果返回 `-1` ; 如果是 0 , 结果返回 `0` ; 如果是一个非数值类型的参数 , 结果返回 `NaN`\n\n```js\nconsole.log(Math.sign(2)); // 1\nconsole.log(Math.sign(0)); // 0\nconsole.log(Math.sign(-20)); // -1\nconsole.log(Math.sign(\"-20\")); // -1\nconsole.log(Math.sign(\"asd\")); // NaN\n```\n\n# ES6 中对象的使用\n\n## 对象的写法\n\n**传统写法**\n\n```js\n// 传统方式\nlet name = \"张三\";\nlet age = 20;\nlet person = {\n  name: \"张三\",\n  // name: name,\n  age: 20,\n  // age: age,\n  say: function () {\n    console.log(\"Hello\");\n  },\n};\n```\n\n**ES6 写法**\n\n```js\n// ES6\nlet name = \"李四\";\nlet age = 20;\nlet person2 = {\n  name,\n  age,\n  say() {\n    console.log(\"Shit bro ~\");\n  },\n};\n```\n\n## ES6 中属性名的更新\n\n用字面量定义一个对象的时候 ,可以用表达式作为对象的属性名或者方法名\n\n```js\nlet h = \"hello\";\nlet w = \"world\";\nlet f = \"first\";\nlet l = \"name\";\nlet person3 = {\n  [f + l]: \"FirstName\",\n  [h + w]() {\n    console.log(\"Hello World\");\n  },\n};\nconsole.log(person3.firstname); // FirstName\nperson3.helloworld(); // Hello World\n```\n\n## Object.is( )\n\n`Object.is` 函数的作用 : 比较两个值是否严格相等 , 或者说全等 , 即 `===`\n\n```js\n// ===\nlet str = \"12\";\nlet num = 12;\nconsole.log(str == num); // true\nconsole.log(str === num); // false\n\n// ES6\nconsole.log(Object.is(str, num)); // false\n```\n\n## Object.assign( )\n\n`Object.assign` 函数作用 : 将新对象的属性赋值到原对象上 , 后面的属性值会覆盖前面的属性值\n\n```js\nlet before = {\n  a: 1,\n};\nlet after1 = {\n  b: 2,\n};\nlet after2 = {\n  c: 3,\n};\nlet after3 = {\n  a: 22,\n  b: 33,\n  c: 44,\n};\nObject.assign(before, after1, after2, after3);\nconsole.log(before); // {a: 22, b: 33, c: 44}\n```\n\n## Object.getPrototypeOf( )\n\n`Object.getPrototypeOf` 函数作用 : 获取一个对象的 `prototype` 属性\n\n```js\n// 构造函数\nfunction Person(name) {\n  this.name = name;\n}\n// 在 prototype 上添加方法\nPerson.prototype.say = function () {\n  console.log(\"Awesome man\");\n};\n// 实例一个新对象\nlet tom = new Person();\ntom.say(); // 成功打印 Awesome man , 添加成功!;\nconsole.log(Object.getPrototypeOf(tom)); // 打印 prototype 里的内容\n```\n\n## Object.setPrototypeOf( )\n\n`Object.setPrototypeOf` 函数作用 : 设置一个对象的 `prototype` 属性\n\n```js\nObject.setPrototypeOf(tom, {\n  hello() {\n    console.log(\"Hello\");\n  },\n});\ntom.hello(); // Hello\n```\n\n# ES6 中函数的使用\n\n## 参数的默认值\n\n**传统方式**\n\n```js\nfunction person(name, age) {\n  name = name || \"张三\";\n  age = age || 20;\n}\n```\n\n**ES6 写法**\n\n```js\nfunction person(name = \"张三\", age = 20) {\n  //\n}\n```\n\n如果函数有多个参数 , 但只有部分需要指定默认值 , 另一部分不需要的话 , 那么 , 设定默认值的参数一定要放在最后\n\n```js\n// 错误示范\nfunction person(age = 20, name) {\n  console.log(name, age);\n}\n// 正确写法\nfunction person(name, age = 20) {\n  console.log(name, age);\n}\n```\n\n另外 , 只有当传入的参数为 `undefined` , 才会触发默认值赋值。否则 , 哪怕你传的参数值为 `0` , `false` , `null` 都不会触发默认值赋值 , 这就完美的解决了传统实现方式的弊端\n\n```js\nfunction getAge(age = 20) {\n  console.log(age);\n}\ngetAge(); // 20\ngetAge(undefined); // 20\ngetAge(0); // 0\ngetAge(null); // null\n```\n\n还有一个要注意的地方 , 函数的参数是默认声明的 , 声明过的变量 , 就不能用 `let` 或者 `const` 关键字再次声明 , 否则会报错\n\n```js\nfunction person(age) {\n  let age = 20;\n  // 错误 :不能再次声明\n  // Uncaught SyntaxError: Identifier 'age' has already been declared\n}\n```\n\n## rest 函数\n\n**案例**\n\n`rest` 参数 , 它代表的意思是 : 在实参中 , 除了第一个参数以外 , 剩余的参数都会被 `...rest` 获取到 , 当然 `...rest` 是形参 , 也可以是别的名字 , 比如 `...value`\n\n```js\nlet result = 0;\nfunction sum(result, ...rest) {\n  rest.forEach(function (value) {\n    result += value;\n  });\n  return result;\n}\nconsole.log(sum(result, 1, 2, 3));\n```\n\n**`...rest` 必须放到参数最后**\n\n```js\n// 错误示范\n// Uncaught SyntaxError: Rest parameter must be last formal parameter\nfunction sum(...rest,a,b,c){\n    //\n}\n```\n\n## 扩展运算符\n\n扩展运算符 `...` 的作用 : 它可以将一个数组转成一个对应的参数数列表\n\n```js\nlet arr = [1, 2, 3];\nfunction sum(a, b, c) {\n  return a + b + c;\n}\nconsole.log(sum(...arr));\n```\n\n## 箭头函数\n\n```js\n// 传统写法\nfunction sumA(a, b) {\n  return a + b;\n}\n\n// ES6\n// 如果函数题单是返回一个东西 , return 也可以省略\nlet sumB = (a, b) => a + b;\n\nlet sumC = (a, b) => {\n  let c = a + b;\n  return c;\n};\n```\n\n```js\n// 传统写法\nlet sum = 0;\n[1, 2, 3].forEach(function (v) {\n  sum += v;\n});\nconsole.log(sum);\n\n// ES6\nlet sum = 0;\n[1, 2, 3].forEach((v) => {\n  sum += v;\n});\n```\n\n# ES6 新增数据类型 symbol 数据类型\n\n**回顾**\n`JavaScript` 有 6 种数据类型 , 分别是 :\n`String` 字符串类型;\n`Number` 数字类型;\n`Object` 对象类型;\n`Boolean` 布尔值类型;\n`Undefined`\n`Null`\n\n而 `ES6` 给我们带来一种全新的数据类型 : `Symbol` 每一种全新的事物的诞生都是为了解决某种问题 , `Symbol` 的初衷 : 解决对象的属性名冲突 , `Symbol()` , **它代表着一个独一无二的值** , 虽然我们看不到它长什么样子 , 但基本上 , 它有点类似字符串\n\n```js\nlet sm = Symbol();\nconsole.log(sm); // Symbol()\nconsole.log(typeof sm); // symbol\n\nlet sm1 = Symbol();\nlet sm2 = Symbol();\nconsole.log(sm1); // Symbol()\nconsole.log(sm2); // Symbol()\nconsole.log(sm1 == sm2); // false\nconsole.log(sm1 === sm2); // false\n\nlet sm3 = Symbol(\"sm3\");\nlet sm4 = Symbol(\"sm4\");\nconsole.log(sm3); // Symbol(sm3)\nconsole.log(sm4); // Symbol(sm4)\n```\n\n`Symbo()` 函数接受参数 , 用于对实例值的描述\n`symbol` 永远都是独一无二的值 , 谨记\n\n```js\nlet sm5 = Symbol(\"sm\");\nlet sm6 = Symbol(\"sm\");\nconsole.log(sm5 == sm6); // false\nconsole.log(sm5 === sm6); // false\n```\n\n下面 , 我们用两种方式获取 `name` 的值  \n第一种用中括号的形式 `[name]` 能正确获取到  \n第二种用点运算符的形式 , 获取失败\n原因是 : 当 `symbol` 值作为对象的属性名的时候 , 不能用点运算符获取对应的值\n\n```js\nlet name = Symbol();\nlet person = {\n  [name]: \"张三\",\n};\nconsole.log(person[name]); // 张三\nconsole.log(person.name); // undefined\n```\n\n因为用点运算符的话 , 会导致 `javascript` 把后面的属性名为理解为一个字符串类型 , 而不是 `symbol` 类型\n\n```js\nlet name = Symbol();\nlet person = {};\nperson.name = \"张三\";\nconsole.log(person.name); // 张三\nconsole.log(person[\"name\"]); // 张三\nconsole.log(person[name]); // undefined\n```\n\n## 属性名的遍历\n\n当 `symbol` 类型的值作为属性名的时候 , 该属性是不会出现在 `for...in` 和 `for...of` 中的  \n也不会被 `Object.keys()` 获取到\n\n```js\n// 属性名的遍历\nlet name = Symbol();\nlet person = {\n  [name]: \"张三\", // Symbol 类型\n  age: 20, // String 类型\n};\n\nObject.keys(person); // [\"age\"]\n\nfor (let key in person) {\n  console.log(key);\n}\n// 结果: [age];\n```\n\n## Object.getOwnPropertySymbols( )\n\n`Object.getOwnPropertySymbols()` 方法 , 它会找到 `symbol` 类型的属性并且返回一个数组 , 数组的成员就是 `symbol` 类型的属性值\n\n```js\nlet name = Symbol(\"name\");\nlet age = Symbol(\"age\");\nlet person = {\n  [name]: \"张三\",\n  [age]: 22,\n  sex: \"man\",\n};\nObject.getOwnPropertySymbols(person);\n// 结果: [Symbol(name),Symbol[age]]\n```\n\n## Reflect.ownKeys( )\n\n由于获取字符串类型的属性和获取 `symbol` 类型的属性要分开两种不同的方式来获取 , 难免有有时候会很不方便  \n我们可以用 `Reflect.ownKeys()` 方法一次性获取所有类型的属性 , 不管它是字符串类型还是 `symbol` 类型\n\n```js\nconsole.log(Reflect.ownKeys(person));\n```\n\n## Symbol.for( )\n\n`Symbol.for()` 函数作用 : 根据参数名 , 去**全局环境**中搜索是否有以该 `symbol.for()` 参数为名的 `symbol` 值  \n有就返回它 , 没有就以该参数名来创建一个新的 `symbol` 值\n\n```js\nlet n1 = Symbol.for(\"name\");\nlet n2 = Symbol.for(\"name\");\nconsole.log(n1 === n2); // true\n```\n\n## Symbol.keyFor( )\n\n`Symbol.keyFor()` 函数作用 : 返回一个以被登记在全局环境中的 `symbol` 值的 `key` , 没有就返回 `undefined`\n注意这句话的一个关键词 : **\"被登记在全局环境中\"**  \n也就是说这个 `symbol` 值是被 `Symbol.for()` 创建的 , 不是被 `Symbol()` 创建的\n\n```js\nlet n1 = Symbol(\"name\"); // 此时 n1 是创建在 Symbol 类型下的变量,并非全局\nlet n2 = Symbol.for(\"name\");\nconsole.log(n1 === n2); // false\n```\n\n```js\nlet n1 = Symbol.for(\"name\");\nconsole.log(Symbol.keyFor(n1)); // name\n```\n\n# Proxy 的实现\n\n## proxy 的实现\n\n```js\n// proxy\nlet personB = {\n  name: \"张三\",\n  age: 20,\n};\nlet pro = new Proxy(personB, {\n  get(target, property) {\n    return target;\n  },\n  set(target, property, value) {\n    target[property] = value;\n  },\n  ownKeys(target) {\n    return [\"name\"];\n  },\n  has(target, property) {\n    if (target[property] == undefined) {\n      return false;\n    } else {\n      return true;\n    }\n  },\n});\nconsole.log(pro.target); // {name: \"张三\", age: 20}\npro.name = \"王五\";\nconsole.log(pro.target); // {name: \"王五\", age: 20}\nconsole.log(Object.keys(personB)); // [\"name\", \"age\"]\nconsole.log(Object.keys(pro)); // [\"name\"]\nconsole.log(\"name\" in pro); // true\nconsole.log(\"cname\" in pro); // false\n```\n\n## apply( )\n\n除了对象类型的变量可以被代理 , 函数也可以被代理  \n如果被代理的变量是一个函数 , 那么还会支持一个拦截程序 : `apply` 调用\n\n```js\nfunction func(value) {\n  console.log(\"func\");\n}\nlet proxy = new Proxy(func, {\n  apply(target, property, value) {\n    return `today is ${value}`;\n  },\n});\nconsole.log(proxy(\"Saturday\"));\n```\n\n## proxy.revocable( )\n\n如果创建了代理之后又想取消代理的话 , 我们可以用 `Proxy.revocable()`( 可废止的 , 可撤回的 ) 函数来实现  \n它会返回一个对象 , 对象中含有一个 `proxy` 属性 , 它就是 `Proxy` 的代理实例对象\n还有一个 `revoke` 属性 , 它是一个方法 , 用于取消代理。\n\n```js\nlet personC = { name: \"张三\" };\nlet handle = {\n  get(target, property) {\n    return \"李四\";\n  },\n};\nlet obj = Proxy.revocable(proxy, handle);\nconsole.log(obj.proxy.name); // 李四\nobj.revoke();\nconsole.log(obj.proxy.name); // Uncaught TypeError: Cannot perform 'get' on a proxy that has been revoked\n```\n\n# for...of 使用\n\n**for...of 的优势** :\n\n1. 写法比 `for` 循环简洁很多\n2. 可以用 `break` 来终止整个循环 , 或者 `continute` 来跳出当前循环 , 继续后面的循环  \n   结合 `keys()` 获取到循环的索引 , 并且是数字类型 , 而不是字符串类型\n\n```js\nlet arrA = [1, 2, 3];\nfor (let value of arrA) {\n  console.log(value);\n}\n\nfor (let value of arrA) {\n  if (value > 1) {\n    console.log(value);\n    break;\n  }\n}\nfor (let value of arrA) {\n  if (value > 1) {\n    console.log(value);\n    continue;\n  }\n}\n```\n\n# The_End\n","source":"_posts/js/es6-day03.md","raw":"---\ntitle: ES6 新增用法 ( 三 )\ndate: 2021-06-23 21:57:46\ntop_img: https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg\ncover:\ntags:\n  - js\n  - javascript\n  - ES6\ncategories:\n  - js\n  - ES6\ncomments:\n---\n\n# ES6 中数值的用法\n\n## isNaN( )\n\n`isNaN` 函数 : 用于判断传入的是否是非数值  \n**注意** : 是判断非数值 , 而不是判断数值 , `isNaN` 的全称是： is not a number\n\n**传统写法**\n\n```js\nconsole.log(isNaN(2.5)); // false\nconsole.log(isNaN(\"2.5\")); // false,会隐式类型转化为 Number 类型\nconsole.log(isNaN(\"abc\")); // true,转换为 Number 后是一个非数值 (NaN)\nconsole.log(isNaN(NaN)); // true\n```\n\n`isNaN` 是全局函数 , 本身就是属于 `window` 对象下的一个方法 , 在 `ES6` 的标准中 , `isNaN` 方法被移植到了 `Number` 对象上 , 也就是原本属于全局对象 `window` 下的函数 , 现在属于 `Number` 对象上了\n\n**ES6 用法**\n\n```js\nconsole.log(Number.isNaN(2.5)); // false\nconsole.log(Number.isNaN(\"abc\")); // false,不做类型转换,是字符串,直接返回 false\nconsole.log(Number.isNaN(\"2.5\")); // false,也不会隐式类型转换,即还是字符串,返回 false\nconsole.log(Number.isNaN(NaN)); // true\n```\n\n## Number.isFinite( )\n\n`Number.isFinite` 函数 : 用来检查一个数值是否非无穷 ( 有穷的 , 有限的 )\n\n```js\nconsole.log(Number.isFinite(10)); // true\nconsole.log(Number.isFinite(\"10\")); // false,字符串也会返回 false\nconsole.log(Number.isFinite(Infinity)); // false\n```\n\n## Number.parseInt( )\n\n`parseInt` 函数 : 解析一个字符串 , 返回一个整数. `parseInt` 函数同样是从 `window` 对象下移植到 `Number` 对象下 , 但是它的作用没有任何变化\n\n```js\nconsole.log(Number.parseInt(2.3)); // 2\nconsole.log(Number.parseInt(2.7)); // 2\n```\n\n## Number.isInteger( )\n\n`Number.isInteger` 函数 : 用来判断是否是整数\n\n```js\nconsole.log(Number.isInteger(1)); // true\nconsole.log(Number.isInteger(1.0)); // true\nconsole.log(Number.isInteger(1.1)); // false\nconsole.log(Number.isInteger(\"1.0\")); // false\nconsole.log(Number.isInteger(\"1.a\")); // false\n```\n\n## Math.trunc( )\n\n`Math.trunc` 函数 : 用于去除一个数的小数部分 , 返回整数部分。\n\n```js\nconsole.log(Math.trunc(2.1)); // 2\nconsole.log(Math.trunc(2.8)); // 2\n```\n\n## Math.sign( )\n\n`Math.sign` 函数 : 用来判断一个数到底是正数 , 负数 , 还是零\n参数如果是正数 , 结果返回 `1` ; 如果是负数 , 结果返回 `-1` ; 如果是 0 , 结果返回 `0` ; 如果是一个非数值类型的参数 , 结果返回 `NaN`\n\n```js\nconsole.log(Math.sign(2)); // 1\nconsole.log(Math.sign(0)); // 0\nconsole.log(Math.sign(-20)); // -1\nconsole.log(Math.sign(\"-20\")); // -1\nconsole.log(Math.sign(\"asd\")); // NaN\n```\n\n# ES6 中对象的使用\n\n## 对象的写法\n\n**传统写法**\n\n```js\n// 传统方式\nlet name = \"张三\";\nlet age = 20;\nlet person = {\n  name: \"张三\",\n  // name: name,\n  age: 20,\n  // age: age,\n  say: function () {\n    console.log(\"Hello\");\n  },\n};\n```\n\n**ES6 写法**\n\n```js\n// ES6\nlet name = \"李四\";\nlet age = 20;\nlet person2 = {\n  name,\n  age,\n  say() {\n    console.log(\"Shit bro ~\");\n  },\n};\n```\n\n## ES6 中属性名的更新\n\n用字面量定义一个对象的时候 ,可以用表达式作为对象的属性名或者方法名\n\n```js\nlet h = \"hello\";\nlet w = \"world\";\nlet f = \"first\";\nlet l = \"name\";\nlet person3 = {\n  [f + l]: \"FirstName\",\n  [h + w]() {\n    console.log(\"Hello World\");\n  },\n};\nconsole.log(person3.firstname); // FirstName\nperson3.helloworld(); // Hello World\n```\n\n## Object.is( )\n\n`Object.is` 函数的作用 : 比较两个值是否严格相等 , 或者说全等 , 即 `===`\n\n```js\n// ===\nlet str = \"12\";\nlet num = 12;\nconsole.log(str == num); // true\nconsole.log(str === num); // false\n\n// ES6\nconsole.log(Object.is(str, num)); // false\n```\n\n## Object.assign( )\n\n`Object.assign` 函数作用 : 将新对象的属性赋值到原对象上 , 后面的属性值会覆盖前面的属性值\n\n```js\nlet before = {\n  a: 1,\n};\nlet after1 = {\n  b: 2,\n};\nlet after2 = {\n  c: 3,\n};\nlet after3 = {\n  a: 22,\n  b: 33,\n  c: 44,\n};\nObject.assign(before, after1, after2, after3);\nconsole.log(before); // {a: 22, b: 33, c: 44}\n```\n\n## Object.getPrototypeOf( )\n\n`Object.getPrototypeOf` 函数作用 : 获取一个对象的 `prototype` 属性\n\n```js\n// 构造函数\nfunction Person(name) {\n  this.name = name;\n}\n// 在 prototype 上添加方法\nPerson.prototype.say = function () {\n  console.log(\"Awesome man\");\n};\n// 实例一个新对象\nlet tom = new Person();\ntom.say(); // 成功打印 Awesome man , 添加成功!;\nconsole.log(Object.getPrototypeOf(tom)); // 打印 prototype 里的内容\n```\n\n## Object.setPrototypeOf( )\n\n`Object.setPrototypeOf` 函数作用 : 设置一个对象的 `prototype` 属性\n\n```js\nObject.setPrototypeOf(tom, {\n  hello() {\n    console.log(\"Hello\");\n  },\n});\ntom.hello(); // Hello\n```\n\n# ES6 中函数的使用\n\n## 参数的默认值\n\n**传统方式**\n\n```js\nfunction person(name, age) {\n  name = name || \"张三\";\n  age = age || 20;\n}\n```\n\n**ES6 写法**\n\n```js\nfunction person(name = \"张三\", age = 20) {\n  //\n}\n```\n\n如果函数有多个参数 , 但只有部分需要指定默认值 , 另一部分不需要的话 , 那么 , 设定默认值的参数一定要放在最后\n\n```js\n// 错误示范\nfunction person(age = 20, name) {\n  console.log(name, age);\n}\n// 正确写法\nfunction person(name, age = 20) {\n  console.log(name, age);\n}\n```\n\n另外 , 只有当传入的参数为 `undefined` , 才会触发默认值赋值。否则 , 哪怕你传的参数值为 `0` , `false` , `null` 都不会触发默认值赋值 , 这就完美的解决了传统实现方式的弊端\n\n```js\nfunction getAge(age = 20) {\n  console.log(age);\n}\ngetAge(); // 20\ngetAge(undefined); // 20\ngetAge(0); // 0\ngetAge(null); // null\n```\n\n还有一个要注意的地方 , 函数的参数是默认声明的 , 声明过的变量 , 就不能用 `let` 或者 `const` 关键字再次声明 , 否则会报错\n\n```js\nfunction person(age) {\n  let age = 20;\n  // 错误 :不能再次声明\n  // Uncaught SyntaxError: Identifier 'age' has already been declared\n}\n```\n\n## rest 函数\n\n**案例**\n\n`rest` 参数 , 它代表的意思是 : 在实参中 , 除了第一个参数以外 , 剩余的参数都会被 `...rest` 获取到 , 当然 `...rest` 是形参 , 也可以是别的名字 , 比如 `...value`\n\n```js\nlet result = 0;\nfunction sum(result, ...rest) {\n  rest.forEach(function (value) {\n    result += value;\n  });\n  return result;\n}\nconsole.log(sum(result, 1, 2, 3));\n```\n\n**`...rest` 必须放到参数最后**\n\n```js\n// 错误示范\n// Uncaught SyntaxError: Rest parameter must be last formal parameter\nfunction sum(...rest,a,b,c){\n    //\n}\n```\n\n## 扩展运算符\n\n扩展运算符 `...` 的作用 : 它可以将一个数组转成一个对应的参数数列表\n\n```js\nlet arr = [1, 2, 3];\nfunction sum(a, b, c) {\n  return a + b + c;\n}\nconsole.log(sum(...arr));\n```\n\n## 箭头函数\n\n```js\n// 传统写法\nfunction sumA(a, b) {\n  return a + b;\n}\n\n// ES6\n// 如果函数题单是返回一个东西 , return 也可以省略\nlet sumB = (a, b) => a + b;\n\nlet sumC = (a, b) => {\n  let c = a + b;\n  return c;\n};\n```\n\n```js\n// 传统写法\nlet sum = 0;\n[1, 2, 3].forEach(function (v) {\n  sum += v;\n});\nconsole.log(sum);\n\n// ES6\nlet sum = 0;\n[1, 2, 3].forEach((v) => {\n  sum += v;\n});\n```\n\n# ES6 新增数据类型 symbol 数据类型\n\n**回顾**\n`JavaScript` 有 6 种数据类型 , 分别是 :\n`String` 字符串类型;\n`Number` 数字类型;\n`Object` 对象类型;\n`Boolean` 布尔值类型;\n`Undefined`\n`Null`\n\n而 `ES6` 给我们带来一种全新的数据类型 : `Symbol` 每一种全新的事物的诞生都是为了解决某种问题 , `Symbol` 的初衷 : 解决对象的属性名冲突 , `Symbol()` , **它代表着一个独一无二的值** , 虽然我们看不到它长什么样子 , 但基本上 , 它有点类似字符串\n\n```js\nlet sm = Symbol();\nconsole.log(sm); // Symbol()\nconsole.log(typeof sm); // symbol\n\nlet sm1 = Symbol();\nlet sm2 = Symbol();\nconsole.log(sm1); // Symbol()\nconsole.log(sm2); // Symbol()\nconsole.log(sm1 == sm2); // false\nconsole.log(sm1 === sm2); // false\n\nlet sm3 = Symbol(\"sm3\");\nlet sm4 = Symbol(\"sm4\");\nconsole.log(sm3); // Symbol(sm3)\nconsole.log(sm4); // Symbol(sm4)\n```\n\n`Symbo()` 函数接受参数 , 用于对实例值的描述\n`symbol` 永远都是独一无二的值 , 谨记\n\n```js\nlet sm5 = Symbol(\"sm\");\nlet sm6 = Symbol(\"sm\");\nconsole.log(sm5 == sm6); // false\nconsole.log(sm5 === sm6); // false\n```\n\n下面 , 我们用两种方式获取 `name` 的值  \n第一种用中括号的形式 `[name]` 能正确获取到  \n第二种用点运算符的形式 , 获取失败\n原因是 : 当 `symbol` 值作为对象的属性名的时候 , 不能用点运算符获取对应的值\n\n```js\nlet name = Symbol();\nlet person = {\n  [name]: \"张三\",\n};\nconsole.log(person[name]); // 张三\nconsole.log(person.name); // undefined\n```\n\n因为用点运算符的话 , 会导致 `javascript` 把后面的属性名为理解为一个字符串类型 , 而不是 `symbol` 类型\n\n```js\nlet name = Symbol();\nlet person = {};\nperson.name = \"张三\";\nconsole.log(person.name); // 张三\nconsole.log(person[\"name\"]); // 张三\nconsole.log(person[name]); // undefined\n```\n\n## 属性名的遍历\n\n当 `symbol` 类型的值作为属性名的时候 , 该属性是不会出现在 `for...in` 和 `for...of` 中的  \n也不会被 `Object.keys()` 获取到\n\n```js\n// 属性名的遍历\nlet name = Symbol();\nlet person = {\n  [name]: \"张三\", // Symbol 类型\n  age: 20, // String 类型\n};\n\nObject.keys(person); // [\"age\"]\n\nfor (let key in person) {\n  console.log(key);\n}\n// 结果: [age];\n```\n\n## Object.getOwnPropertySymbols( )\n\n`Object.getOwnPropertySymbols()` 方法 , 它会找到 `symbol` 类型的属性并且返回一个数组 , 数组的成员就是 `symbol` 类型的属性值\n\n```js\nlet name = Symbol(\"name\");\nlet age = Symbol(\"age\");\nlet person = {\n  [name]: \"张三\",\n  [age]: 22,\n  sex: \"man\",\n};\nObject.getOwnPropertySymbols(person);\n// 结果: [Symbol(name),Symbol[age]]\n```\n\n## Reflect.ownKeys( )\n\n由于获取字符串类型的属性和获取 `symbol` 类型的属性要分开两种不同的方式来获取 , 难免有有时候会很不方便  \n我们可以用 `Reflect.ownKeys()` 方法一次性获取所有类型的属性 , 不管它是字符串类型还是 `symbol` 类型\n\n```js\nconsole.log(Reflect.ownKeys(person));\n```\n\n## Symbol.for( )\n\n`Symbol.for()` 函数作用 : 根据参数名 , 去**全局环境**中搜索是否有以该 `symbol.for()` 参数为名的 `symbol` 值  \n有就返回它 , 没有就以该参数名来创建一个新的 `symbol` 值\n\n```js\nlet n1 = Symbol.for(\"name\");\nlet n2 = Symbol.for(\"name\");\nconsole.log(n1 === n2); // true\n```\n\n## Symbol.keyFor( )\n\n`Symbol.keyFor()` 函数作用 : 返回一个以被登记在全局环境中的 `symbol` 值的 `key` , 没有就返回 `undefined`\n注意这句话的一个关键词 : **\"被登记在全局环境中\"**  \n也就是说这个 `symbol` 值是被 `Symbol.for()` 创建的 , 不是被 `Symbol()` 创建的\n\n```js\nlet n1 = Symbol(\"name\"); // 此时 n1 是创建在 Symbol 类型下的变量,并非全局\nlet n2 = Symbol.for(\"name\");\nconsole.log(n1 === n2); // false\n```\n\n```js\nlet n1 = Symbol.for(\"name\");\nconsole.log(Symbol.keyFor(n1)); // name\n```\n\n# Proxy 的实现\n\n## proxy 的实现\n\n```js\n// proxy\nlet personB = {\n  name: \"张三\",\n  age: 20,\n};\nlet pro = new Proxy(personB, {\n  get(target, property) {\n    return target;\n  },\n  set(target, property, value) {\n    target[property] = value;\n  },\n  ownKeys(target) {\n    return [\"name\"];\n  },\n  has(target, property) {\n    if (target[property] == undefined) {\n      return false;\n    } else {\n      return true;\n    }\n  },\n});\nconsole.log(pro.target); // {name: \"张三\", age: 20}\npro.name = \"王五\";\nconsole.log(pro.target); // {name: \"王五\", age: 20}\nconsole.log(Object.keys(personB)); // [\"name\", \"age\"]\nconsole.log(Object.keys(pro)); // [\"name\"]\nconsole.log(\"name\" in pro); // true\nconsole.log(\"cname\" in pro); // false\n```\n\n## apply( )\n\n除了对象类型的变量可以被代理 , 函数也可以被代理  \n如果被代理的变量是一个函数 , 那么还会支持一个拦截程序 : `apply` 调用\n\n```js\nfunction func(value) {\n  console.log(\"func\");\n}\nlet proxy = new Proxy(func, {\n  apply(target, property, value) {\n    return `today is ${value}`;\n  },\n});\nconsole.log(proxy(\"Saturday\"));\n```\n\n## proxy.revocable( )\n\n如果创建了代理之后又想取消代理的话 , 我们可以用 `Proxy.revocable()`( 可废止的 , 可撤回的 ) 函数来实现  \n它会返回一个对象 , 对象中含有一个 `proxy` 属性 , 它就是 `Proxy` 的代理实例对象\n还有一个 `revoke` 属性 , 它是一个方法 , 用于取消代理。\n\n```js\nlet personC = { name: \"张三\" };\nlet handle = {\n  get(target, property) {\n    return \"李四\";\n  },\n};\nlet obj = Proxy.revocable(proxy, handle);\nconsole.log(obj.proxy.name); // 李四\nobj.revoke();\nconsole.log(obj.proxy.name); // Uncaught TypeError: Cannot perform 'get' on a proxy that has been revoked\n```\n\n# for...of 使用\n\n**for...of 的优势** :\n\n1. 写法比 `for` 循环简洁很多\n2. 可以用 `break` 来终止整个循环 , 或者 `continute` 来跳出当前循环 , 继续后面的循环  \n   结合 `keys()` 获取到循环的索引 , 并且是数字类型 , 而不是字符串类型\n\n```js\nlet arrA = [1, 2, 3];\nfor (let value of arrA) {\n  console.log(value);\n}\n\nfor (let value of arrA) {\n  if (value > 1) {\n    console.log(value);\n    break;\n  }\n}\nfor (let value of arrA) {\n  if (value > 1) {\n    console.log(value);\n    continue;\n  }\n}\n```\n\n# The_End\n","slug":"js/es6-day03","published":1,"updated":"2021-06-24T13:17:31.942Z","layout":"post","photos":[],"link":"","_id":"cksvxwnne0014gubqbr6c4ddv","content":"<h1 id=\"ES6-中数值的用法\"><a href=\"#ES6-中数值的用法\" class=\"headerlink\" title=\"ES6 中数值的用法\"></a>ES6 中数值的用法</h1><h2 id=\"isNaN\"><a href=\"#isNaN\" class=\"headerlink\" title=\"isNaN( )\"></a>isNaN( )</h2><p><code>isNaN</code> 函数 : 用于判断传入的是否是非数值<br><strong>注意</strong> : 是判断非数值 , 而不是判断数值 , <code>isNaN</code> 的全称是： is not a number</p>\n<p><strong>传统写法</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">isNaN</span>(<span class=\"number\">2.5</span>)); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">isNaN</span>(<span class=\"string\">&quot;2.5&quot;</span>)); <span class=\"comment\">// false,会隐式类型转化为 Number 类型</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">isNaN</span>(<span class=\"string\">&quot;abc&quot;</span>)); <span class=\"comment\">// true,转换为 Number 后是一个非数值 (NaN)</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">isNaN</span>(<span class=\"literal\">NaN</span>)); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p><code>isNaN</code> 是全局函数 , 本身就是属于 <code>window</code> 对象下的一个方法 , 在 <code>ES6</code> 的标准中 , <code>isNaN</code> 方法被移植到了 <code>Number</code> 对象上 , 也就是原本属于全局对象 <code>window</code> 下的函数 , 现在属于 <code>Number</code> 对象上了</p>\n<p><strong>ES6 用法</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>.isNaN(<span class=\"number\">2.5</span>)); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>.isNaN(<span class=\"string\">&quot;abc&quot;</span>)); <span class=\"comment\">// false,不做类型转换,是字符串,直接返回 false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>.isNaN(<span class=\"string\">&quot;2.5&quot;</span>)); <span class=\"comment\">// false,也不会隐式类型转换,即还是字符串,返回 false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>.isNaN(<span class=\"literal\">NaN</span>)); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Number-isFinite\"><a href=\"#Number-isFinite\" class=\"headerlink\" title=\"Number.isFinite( )\"></a>Number.isFinite( )</h2><p><code>Number.isFinite</code> 函数 : 用来检查一个数值是否非无穷 ( 有穷的 , 有限的 )</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>.isFinite(<span class=\"number\">10</span>)); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>.isFinite(<span class=\"string\">&quot;10&quot;</span>)); <span class=\"comment\">// false,字符串也会返回 false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>.isFinite(<span class=\"literal\">Infinity</span>)); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Number-parseInt\"><a href=\"#Number-parseInt\" class=\"headerlink\" title=\"Number.parseInt( )\"></a>Number.parseInt( )</h2><p><code>parseInt</code> 函数 : 解析一个字符串 , 返回一个整数. <code>parseInt</code> 函数同样是从 <code>window</code> 对象下移植到 <code>Number</code> 对象下 , 但是它的作用没有任何变化</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>.parseInt(<span class=\"number\">2.3</span>)); <span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>.parseInt(<span class=\"number\">2.7</span>)); <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Number-isInteger\"><a href=\"#Number-isInteger\" class=\"headerlink\" title=\"Number.isInteger( )\"></a>Number.isInteger( )</h2><p><code>Number.isInteger</code> 函数 : 用来判断是否是整数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>.isInteger(<span class=\"number\">1</span>)); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>.isInteger(<span class=\"number\">1.0</span>)); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>.isInteger(<span class=\"number\">1.1</span>)); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>.isInteger(<span class=\"string\">&quot;1.0&quot;</span>)); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>.isInteger(<span class=\"string\">&quot;1.a&quot;</span>)); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Math-trunc\"><a href=\"#Math-trunc\" class=\"headerlink\" title=\"Math.trunc( )\"></a>Math.trunc( )</h2><p><code>Math.trunc</code> 函数 : 用于去除一个数的小数部分 , 返回整数部分。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.trunc(<span class=\"number\">2.1</span>)); <span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.trunc(<span class=\"number\">2.8</span>)); <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Math-sign\"><a href=\"#Math-sign\" class=\"headerlink\" title=\"Math.sign( )\"></a>Math.sign( )</h2><p><code>Math.sign</code> 函数 : 用来判断一个数到底是正数 , 负数 , 还是零<br>参数如果是正数 , 结果返回 <code>1</code> ; 如果是负数 , 结果返回 <code>-1</code> ; 如果是 0 , 结果返回 <code>0</code> ; 如果是一个非数值类型的参数 , 结果返回 <code>NaN</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.sign(<span class=\"number\">2</span>)); <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.sign(<span class=\"number\">0</span>)); <span class=\"comment\">// 0</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.sign(-<span class=\"number\">20</span>)); <span class=\"comment\">// -1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.sign(<span class=\"string\">&quot;-20&quot;</span>)); <span class=\"comment\">// -1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.sign(<span class=\"string\">&quot;asd&quot;</span>)); <span class=\"comment\">// NaN</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"ES6-中对象的使用\"><a href=\"#ES6-中对象的使用\" class=\"headerlink\" title=\"ES6 中对象的使用\"></a>ES6 中对象的使用</h1><h2 id=\"对象的写法\"><a href=\"#对象的写法\" class=\"headerlink\" title=\"对象的写法\"></a>对象的写法</h2><p><strong>传统写法</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 传统方式</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> name = <span class=\"string\">&quot;张三&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> age = <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> person = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;张三&quot;</span>,</span><br><span class=\"line\">  <span class=\"comment\">// name: name,</span></span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">20</span>,</span><br><span class=\"line\">  <span class=\"comment\">// age: age,</span></span><br><span class=\"line\">  <span class=\"attr\">say</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;Hello&quot;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>ES6 写法</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ES6</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> name = <span class=\"string\">&quot;李四&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> age = <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> person2 = &#123;</span><br><span class=\"line\">  name,</span><br><span class=\"line\">  age,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">say</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;Shit bro ~&quot;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ES6-中属性名的更新\"><a href=\"#ES6-中属性名的更新\" class=\"headerlink\" title=\"ES6 中属性名的更新\"></a>ES6 中属性名的更新</h2><p>用字面量定义一个对象的时候 ,可以用表达式作为对象的属性名或者方法名</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> h = <span class=\"string\">&quot;hello&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> w = <span class=\"string\">&quot;world&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> f = <span class=\"string\">&quot;first&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> l = <span class=\"string\">&quot;name&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> person3 = &#123;</span><br><span class=\"line\">  [f + l]: <span class=\"string\">&quot;FirstName&quot;</span>,</span><br><span class=\"line\">  [h + w]() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;Hello World&quot;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person3.firstname); <span class=\"comment\">// FirstName</span></span><br><span class=\"line\">person3.helloworld(); <span class=\"comment\">// Hello World</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Object-is\"><a href=\"#Object-is\" class=\"headerlink\" title=\"Object.is( )\"></a>Object.is( )</h2><p><code>Object.is</code> 函数的作用 : 比较两个值是否严格相等 , 或者说全等 , 即 <code>===</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ===</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&quot;12&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> num = <span class=\"number\">12</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str == num); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str === num); <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ES6</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.is(str, num)); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Object-assign\"><a href=\"#Object-assign\" class=\"headerlink\" title=\"Object.assign( )\"></a>Object.assign( )</h2><p><code>Object.assign</code> 函数作用 : 将新对象的属性赋值到原对象上 , 后面的属性值会覆盖前面的属性值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> before = &#123;</span><br><span class=\"line\">  <span class=\"attr\">a</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> after1 = &#123;</span><br><span class=\"line\">  <span class=\"attr\">b</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> after2 = &#123;</span><br><span class=\"line\">  <span class=\"attr\">c</span>: <span class=\"number\">3</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> after3 = &#123;</span><br><span class=\"line\">  <span class=\"attr\">a</span>: <span class=\"number\">22</span>,</span><br><span class=\"line\">  <span class=\"attr\">b</span>: <span class=\"number\">33</span>,</span><br><span class=\"line\">  <span class=\"attr\">c</span>: <span class=\"number\">44</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(before, after1, after2, after3);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(before); <span class=\"comment\">// &#123;a: 22, b: 33, c: 44&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Object-getPrototypeOf\"><a href=\"#Object-getPrototypeOf\" class=\"headerlink\" title=\"Object.getPrototypeOf( )\"></a>Object.getPrototypeOf( )</h2><p><code>Object.getPrototypeOf</code> 函数作用 : 获取一个对象的 <code>prototype</code> 属性</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 构造函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 在 prototype 上添加方法</span></span><br><span class=\"line\">Person.prototype.say = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;Awesome man&quot;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 实例一个新对象</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> tom = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">tom.say(); <span class=\"comment\">// 成功打印 Awesome man , 添加成功!;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.getPrototypeOf(tom)); <span class=\"comment\">// 打印 prototype 里的内容</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Object-setPrototypeOf\"><a href=\"#Object-setPrototypeOf\" class=\"headerlink\" title=\"Object.setPrototypeOf( )\"></a>Object.setPrototypeOf( )</h2><p><code>Object.setPrototypeOf</code> 函数作用 : 设置一个对象的 <code>prototype</code> 属性</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.setPrototypeOf(tom, &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">hello</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;Hello&quot;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">tom.hello(); <span class=\"comment\">// Hello</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"ES6-中函数的使用\"><a href=\"#ES6-中函数的使用\" class=\"headerlink\" title=\"ES6 中函数的使用\"></a>ES6 中函数的使用</h1><h2 id=\"参数的默认值\"><a href=\"#参数的默认值\" class=\"headerlink\" title=\"参数的默认值\"></a>参数的默认值</h2><p><strong>传统方式</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">person</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">  name = name || <span class=\"string\">&quot;张三&quot;</span>;</span><br><span class=\"line\">  age = age || <span class=\"number\">20</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>ES6 写法</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">person</span>(<span class=\"params\">name = <span class=\"string\">&quot;张三&quot;</span>, age = <span class=\"number\">20</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果函数有多个参数 , 但只有部分需要指定默认值 , 另一部分不需要的话 , 那么 , 设定默认值的参数一定要放在最后</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 错误示范</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">person</span>(<span class=\"params\">age = <span class=\"number\">20</span>, name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(name, age);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 正确写法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">person</span>(<span class=\"params\">name, age = <span class=\"number\">20</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(name, age);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>另外 , 只有当传入的参数为 <code>undefined</code> , 才会触发默认值赋值。否则 , 哪怕你传的参数值为 <code>0</code> , <code>false</code> , <code>null</code> 都不会触发默认值赋值 , 这就完美的解决了传统实现方式的弊端</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getAge</span>(<span class=\"params\">age = <span class=\"number\">20</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(age);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">getAge(); <span class=\"comment\">// 20</span></span><br><span class=\"line\">getAge(<span class=\"literal\">undefined</span>); <span class=\"comment\">// 20</span></span><br><span class=\"line\">getAge(<span class=\"number\">0</span>); <span class=\"comment\">// 0</span></span><br><span class=\"line\">getAge(<span class=\"literal\">null</span>); <span class=\"comment\">// null</span></span><br></pre></td></tr></table></figure>\n\n<p>还有一个要注意的地方 , 函数的参数是默认声明的 , 声明过的变量 , 就不能用 <code>let</code> 或者 <code>const</code> 关键字再次声明 , 否则会报错</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">person</span>(<span class=\"params\">age</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> age = <span class=\"number\">20</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 错误 :不能再次声明</span></span><br><span class=\"line\">  <span class=\"comment\">// Uncaught SyntaxError: Identifier &#x27;age&#x27; has already been declared</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"rest-函数\"><a href=\"#rest-函数\" class=\"headerlink\" title=\"rest 函数\"></a>rest 函数</h2><p><strong>案例</strong></p>\n<p><code>rest</code> 参数 , 它代表的意思是 : 在实参中 , 除了第一个参数以外 , 剩余的参数都会被 <code>...rest</code> 获取到 , 当然 <code>...rest</code> 是形参 , 也可以是别的名字 , 比如 <code>...value</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> result = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">result, ...rest</span>) </span>&#123;</span><br><span class=\"line\">  rest.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    result += value;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum(result, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>));</span><br></pre></td></tr></table></figure>\n\n<p><strong><code>...rest</code> 必须放到参数最后</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 错误示范</span></span><br><span class=\"line\"><span class=\"comment\">// Uncaught SyntaxError: Rest parameter must be last formal parameter</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">...rest,a,b,c</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"扩展运算符\"><a href=\"#扩展运算符\" class=\"headerlink\" title=\"扩展运算符\"></a>扩展运算符</h2><p>扩展运算符 <code>...</code> 的作用 : 它可以将一个数组转成一个对应的参数数列表</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">a, b, c</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a + b + c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum(...arr));</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 传统写法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sumA</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ES6</span></span><br><span class=\"line\"><span class=\"comment\">// 如果函数题单是返回一个东西 , return 也可以省略</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> sumB = <span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a + b;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> sumC = <span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> c = a + b;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 传统写法</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">v</span>) </span>&#123;</span><br><span class=\"line\">  sum += v;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ES6</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].forEach(<span class=\"function\">(<span class=\"params\">v</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  sum += v;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"ES6-新增数据类型-symbol-数据类型\"><a href=\"#ES6-新增数据类型-symbol-数据类型\" class=\"headerlink\" title=\"ES6 新增数据类型 symbol 数据类型\"></a>ES6 新增数据类型 symbol 数据类型</h1><p><strong>回顾</strong><br><code>JavaScript</code> 有 6 种数据类型 , 分别是 :<br><code>String</code> 字符串类型;<br><code>Number</code> 数字类型;<br><code>Object</code> 对象类型;<br><code>Boolean</code> 布尔值类型;<br><code>Undefined</code><br><code>Null</code></p>\n<p>而 <code>ES6</code> 给我们带来一种全新的数据类型 : <code>Symbol</code> 每一种全新的事物的诞生都是为了解决某种问题 , <code>Symbol</code> 的初衷 : 解决对象的属性名冲突 , <code>Symbol()</code> , <strong>它代表着一个独一无二的值</strong> , 虽然我们看不到它长什么样子 , 但基本上 , 它有点类似字符串</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> sm = <span class=\"built_in\">Symbol</span>();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sm); <span class=\"comment\">// Symbol()</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> sm); <span class=\"comment\">// symbol</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> sm1 = <span class=\"built_in\">Symbol</span>();</span><br><span class=\"line\"><span class=\"keyword\">let</span> sm2 = <span class=\"built_in\">Symbol</span>();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sm1); <span class=\"comment\">// Symbol()</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sm2); <span class=\"comment\">// Symbol()</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sm1 == sm2); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sm1 === sm2); <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> sm3 = <span class=\"built_in\">Symbol</span>(<span class=\"string\">&quot;sm3&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> sm4 = <span class=\"built_in\">Symbol</span>(<span class=\"string\">&quot;sm4&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sm3); <span class=\"comment\">// Symbol(sm3)</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sm4); <span class=\"comment\">// Symbol(sm4)</span></span><br></pre></td></tr></table></figure>\n\n<p><code>Symbo()</code> 函数接受参数 , 用于对实例值的描述<br><code>symbol</code> 永远都是独一无二的值 , 谨记</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> sm5 = <span class=\"built_in\">Symbol</span>(<span class=\"string\">&quot;sm&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> sm6 = <span class=\"built_in\">Symbol</span>(<span class=\"string\">&quot;sm&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sm5 == sm6); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sm5 === sm6); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<p>下面 , 我们用两种方式获取 <code>name</code> 的值<br>第一种用中括号的形式 <code>[name]</code> 能正确获取到<br>第二种用点运算符的形式 , 获取失败<br>原因是 : 当 <code>symbol</code> 值作为对象的属性名的时候 , 不能用点运算符获取对应的值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> name = <span class=\"built_in\">Symbol</span>();</span><br><span class=\"line\"><span class=\"keyword\">let</span> person = &#123;</span><br><span class=\"line\">  [name]: <span class=\"string\">&quot;张三&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person[name]); <span class=\"comment\">// 张三</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person.name); <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n\n<p>因为用点运算符的话 , 会导致 <code>javascript</code> 把后面的属性名为理解为一个字符串类型 , 而不是 <code>symbol</code> 类型</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> name = <span class=\"built_in\">Symbol</span>();</span><br><span class=\"line\"><span class=\"keyword\">let</span> person = &#123;&#125;;</span><br><span class=\"line\">person.name = <span class=\"string\">&quot;张三&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person.name); <span class=\"comment\">// 张三</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person[<span class=\"string\">&quot;name&quot;</span>]); <span class=\"comment\">// 张三</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person[name]); <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"属性名的遍历\"><a href=\"#属性名的遍历\" class=\"headerlink\" title=\"属性名的遍历\"></a>属性名的遍历</h2><p>当 <code>symbol</code> 类型的值作为属性名的时候 , 该属性是不会出现在 <code>for...in</code> 和 <code>for...of</code> 中的<br>也不会被 <code>Object.keys()</code> 获取到</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 属性名的遍历</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> name = <span class=\"built_in\">Symbol</span>();</span><br><span class=\"line\"><span class=\"keyword\">let</span> person = &#123;</span><br><span class=\"line\">  [name]: <span class=\"string\">&quot;张三&quot;</span>, <span class=\"comment\">// Symbol 类型</span></span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">20</span>, <span class=\"comment\">// String 类型</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.keys(person); <span class=\"comment\">// [&quot;age&quot;]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> person) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(key);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 结果: [age];</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Object-getOwnPropertySymbols\"><a href=\"#Object-getOwnPropertySymbols\" class=\"headerlink\" title=\"Object.getOwnPropertySymbols( )\"></a>Object.getOwnPropertySymbols( )</h2><p><code>Object.getOwnPropertySymbols()</code> 方法 , 它会找到 <code>symbol</code> 类型的属性并且返回一个数组 , 数组的成员就是 <code>symbol</code> 类型的属性值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> name = <span class=\"built_in\">Symbol</span>(<span class=\"string\">&quot;name&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> age = <span class=\"built_in\">Symbol</span>(<span class=\"string\">&quot;age&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> person = &#123;</span><br><span class=\"line\">  [name]: <span class=\"string\">&quot;张三&quot;</span>,</span><br><span class=\"line\">  [age]: <span class=\"number\">22</span>,</span><br><span class=\"line\">  <span class=\"attr\">sex</span>: <span class=\"string\">&quot;man&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.getOwnPropertySymbols(person);</span><br><span class=\"line\"><span class=\"comment\">// 结果: [Symbol(name),Symbol[age]]</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Reflect-ownKeys\"><a href=\"#Reflect-ownKeys\" class=\"headerlink\" title=\"Reflect.ownKeys( )\"></a>Reflect.ownKeys( )</h2><p>由于获取字符串类型的属性和获取 <code>symbol</code> 类型的属性要分开两种不同的方式来获取 , 难免有有时候会很不方便<br>我们可以用 <code>Reflect.ownKeys()</code> 方法一次性获取所有类型的属性 , 不管它是字符串类型还是 <code>symbol</code> 类型</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Reflect</span>.ownKeys(person));</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Symbol-for\"><a href=\"#Symbol-for\" class=\"headerlink\" title=\"Symbol.for( )\"></a>Symbol.for( )</h2><p><code>Symbol.for()</code> 函数作用 : 根据参数名 , 去<strong>全局环境</strong>中搜索是否有以该 <code>symbol.for()</code> 参数为名的 <code>symbol</code> 值<br>有就返回它 , 没有就以该参数名来创建一个新的 <code>symbol</code> 值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> n1 = <span class=\"built_in\">Symbol</span>.for(<span class=\"string\">&quot;name&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> n2 = <span class=\"built_in\">Symbol</span>.for(<span class=\"string\">&quot;name&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(n1 === n2); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Symbol-keyFor\"><a href=\"#Symbol-keyFor\" class=\"headerlink\" title=\"Symbol.keyFor( )\"></a>Symbol.keyFor( )</h2><p><code>Symbol.keyFor()</code> 函数作用 : 返回一个以被登记在全局环境中的 <code>symbol</code> 值的 <code>key</code> , 没有就返回 <code>undefined</code><br>注意这句话的一个关键词 : <strong>“被登记在全局环境中”</strong><br>也就是说这个 <code>symbol</code> 值是被 <code>Symbol.for()</code> 创建的 , 不是被 <code>Symbol()</code> 创建的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> n1 = <span class=\"built_in\">Symbol</span>(<span class=\"string\">&quot;name&quot;</span>); <span class=\"comment\">// 此时 n1 是创建在 Symbol 类型下的变量,并非全局</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> n2 = <span class=\"built_in\">Symbol</span>.for(<span class=\"string\">&quot;name&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(n1 === n2); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> n1 = <span class=\"built_in\">Symbol</span>.for(<span class=\"string\">&quot;name&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Symbol</span>.keyFor(n1)); <span class=\"comment\">// name</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Proxy-的实现\"><a href=\"#Proxy-的实现\" class=\"headerlink\" title=\"Proxy 的实现\"></a>Proxy 的实现</h1><h2 id=\"proxy-的实现\"><a href=\"#proxy-的实现\" class=\"headerlink\" title=\"proxy 的实现\"></a>proxy 的实现</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// proxy</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> personB = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;张三&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">20</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> pro = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(personB, &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">get</span>(<span class=\"params\">target, property</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> target;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">set</span>(<span class=\"params\">target, property, value</span>)</span> &#123;</span><br><span class=\"line\">    target[property] = value;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">ownKeys</span>(<span class=\"params\">target</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"string\">&quot;name&quot;</span>];</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">has</span>(<span class=\"params\">target, property</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (target[property] == <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(pro.target); <span class=\"comment\">// &#123;name: &quot;张三&quot;, age: 20&#125;</span></span><br><span class=\"line\">pro.name = <span class=\"string\">&quot;王五&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(pro.target); <span class=\"comment\">// &#123;name: &quot;王五&quot;, age: 20&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.keys(personB)); <span class=\"comment\">// [&quot;name&quot;, &quot;age&quot;]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.keys(pro)); <span class=\"comment\">// [&quot;name&quot;]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;name&quot;</span> <span class=\"keyword\">in</span> pro); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;cname&quot;</span> <span class=\"keyword\">in</span> pro); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"apply\"><a href=\"#apply\" class=\"headerlink\" title=\"apply( )\"></a>apply( )</h2><p>除了对象类型的变量可以被代理 , 函数也可以被代理<br>如果被代理的变量是一个函数 , 那么还会支持一个拦截程序 : <code>apply</code> 调用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;func&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(func, &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">apply</span>(<span class=\"params\">target, property, value</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`today is <span class=\"subst\">$&#123;value&#125;</span>`</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(proxy(<span class=\"string\">&quot;Saturday&quot;</span>));</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"proxy-revocable\"><a href=\"#proxy-revocable\" class=\"headerlink\" title=\"proxy.revocable( )\"></a>proxy.revocable( )</h2><p>如果创建了代理之后又想取消代理的话 , 我们可以用 <code>Proxy.revocable()</code>( 可废止的 , 可撤回的 ) 函数来实现<br>它会返回一个对象 , 对象中含有一个 <code>proxy</code> 属性 , 它就是 <code>Proxy</code> 的代理实例对象<br>还有一个 <code>revoke</code> 属性 , 它是一个方法 , 用于取消代理。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> personC = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;张三&quot;</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> handle = &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">get</span>(<span class=\"params\">target, property</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;李四&quot;</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = <span class=\"built_in\">Proxy</span>.revocable(proxy, handle);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.proxy.name); <span class=\"comment\">// 李四</span></span><br><span class=\"line\">obj.revoke();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.proxy.name); <span class=\"comment\">// Uncaught TypeError: Cannot perform &#x27;get&#x27; on a proxy that has been revoked</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"for…of-使用\"><a href=\"#for…of-使用\" class=\"headerlink\" title=\"for…of 使用\"></a>for…of 使用</h1><p><strong>for…of 的优势</strong> :</p>\n<ol>\n<li>写法比 <code>for</code> 循环简洁很多</li>\n<li>可以用 <code>break</code> 来终止整个循环 , 或者 <code>continute</code> 来跳出当前循环 , 继续后面的循环<br>结合 <code>keys()</code> 获取到循环的索引 , 并且是数字类型 , 而不是字符串类型</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arrA = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> value <span class=\"keyword\">of</span> arrA) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> value <span class=\"keyword\">of</span> arrA) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (value &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> value <span class=\"keyword\">of</span> arrA) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (value &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"The-End\"><a href=\"#The-End\" class=\"headerlink\" title=\"The_End\"></a>The_End</h1>","site":{"data":{"link":{"class1":{"class_name":"舍友","link_list":{"1":{"name":"codeAntg","link":"https://blog.csdn.net/weixin_44745147","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/fjh.jpg","descr":"那家刀削面不错","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class2":{"class_name":"致谢","link_list":{"1":{"name":"JerrC","link":"https://immyw.com","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/immyw.png","descr":"今日事,今日毕","width":"1px","style":"solid","color":"#60d0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/hexo.svg","descr":"A fast, simple & powerful blog framework","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class3":{"class_name":"友人","link_list":{"1":{"name":"Chester","link":"http://chesterlds.cn","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/chester.jpg","descr":null,"width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Wangs","link":"https://wangsss.cn/","avatar":"https://wangsss.cn/img/avatar.png","descr":"不疯魔，不成活 ~","width":"1px","style":"solid","color":"#9d9d9d","custom":"link_custom1","time":"4s","namecolor":"0094ff","descolor":"#ff9191"}}}}}},"excerpt":"","more":"<h1 id=\"ES6-中数值的用法\"><a href=\"#ES6-中数值的用法\" class=\"headerlink\" title=\"ES6 中数值的用法\"></a>ES6 中数值的用法</h1><h2 id=\"isNaN\"><a href=\"#isNaN\" class=\"headerlink\" title=\"isNaN( )\"></a>isNaN( )</h2><p><code>isNaN</code> 函数 : 用于判断传入的是否是非数值<br><strong>注意</strong> : 是判断非数值 , 而不是判断数值 , <code>isNaN</code> 的全称是： is not a number</p>\n<p><strong>传统写法</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">isNaN</span>(<span class=\"number\">2.5</span>)); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">isNaN</span>(<span class=\"string\">&quot;2.5&quot;</span>)); <span class=\"comment\">// false,会隐式类型转化为 Number 类型</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">isNaN</span>(<span class=\"string\">&quot;abc&quot;</span>)); <span class=\"comment\">// true,转换为 Number 后是一个非数值 (NaN)</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">isNaN</span>(<span class=\"literal\">NaN</span>)); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p><code>isNaN</code> 是全局函数 , 本身就是属于 <code>window</code> 对象下的一个方法 , 在 <code>ES6</code> 的标准中 , <code>isNaN</code> 方法被移植到了 <code>Number</code> 对象上 , 也就是原本属于全局对象 <code>window</code> 下的函数 , 现在属于 <code>Number</code> 对象上了</p>\n<p><strong>ES6 用法</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>.isNaN(<span class=\"number\">2.5</span>)); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>.isNaN(<span class=\"string\">&quot;abc&quot;</span>)); <span class=\"comment\">// false,不做类型转换,是字符串,直接返回 false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>.isNaN(<span class=\"string\">&quot;2.5&quot;</span>)); <span class=\"comment\">// false,也不会隐式类型转换,即还是字符串,返回 false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>.isNaN(<span class=\"literal\">NaN</span>)); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Number-isFinite\"><a href=\"#Number-isFinite\" class=\"headerlink\" title=\"Number.isFinite( )\"></a>Number.isFinite( )</h2><p><code>Number.isFinite</code> 函数 : 用来检查一个数值是否非无穷 ( 有穷的 , 有限的 )</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>.isFinite(<span class=\"number\">10</span>)); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>.isFinite(<span class=\"string\">&quot;10&quot;</span>)); <span class=\"comment\">// false,字符串也会返回 false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>.isFinite(<span class=\"literal\">Infinity</span>)); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Number-parseInt\"><a href=\"#Number-parseInt\" class=\"headerlink\" title=\"Number.parseInt( )\"></a>Number.parseInt( )</h2><p><code>parseInt</code> 函数 : 解析一个字符串 , 返回一个整数. <code>parseInt</code> 函数同样是从 <code>window</code> 对象下移植到 <code>Number</code> 对象下 , 但是它的作用没有任何变化</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>.parseInt(<span class=\"number\">2.3</span>)); <span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>.parseInt(<span class=\"number\">2.7</span>)); <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Number-isInteger\"><a href=\"#Number-isInteger\" class=\"headerlink\" title=\"Number.isInteger( )\"></a>Number.isInteger( )</h2><p><code>Number.isInteger</code> 函数 : 用来判断是否是整数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>.isInteger(<span class=\"number\">1</span>)); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>.isInteger(<span class=\"number\">1.0</span>)); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>.isInteger(<span class=\"number\">1.1</span>)); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>.isInteger(<span class=\"string\">&quot;1.0&quot;</span>)); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Number</span>.isInteger(<span class=\"string\">&quot;1.a&quot;</span>)); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Math-trunc\"><a href=\"#Math-trunc\" class=\"headerlink\" title=\"Math.trunc( )\"></a>Math.trunc( )</h2><p><code>Math.trunc</code> 函数 : 用于去除一个数的小数部分 , 返回整数部分。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.trunc(<span class=\"number\">2.1</span>)); <span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.trunc(<span class=\"number\">2.8</span>)); <span class=\"comment\">// 2</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Math-sign\"><a href=\"#Math-sign\" class=\"headerlink\" title=\"Math.sign( )\"></a>Math.sign( )</h2><p><code>Math.sign</code> 函数 : 用来判断一个数到底是正数 , 负数 , 还是零<br>参数如果是正数 , 结果返回 <code>1</code> ; 如果是负数 , 结果返回 <code>-1</code> ; 如果是 0 , 结果返回 <code>0</code> ; 如果是一个非数值类型的参数 , 结果返回 <code>NaN</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.sign(<span class=\"number\">2</span>)); <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.sign(<span class=\"number\">0</span>)); <span class=\"comment\">// 0</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.sign(-<span class=\"number\">20</span>)); <span class=\"comment\">// -1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.sign(<span class=\"string\">&quot;-20&quot;</span>)); <span class=\"comment\">// -1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Math</span>.sign(<span class=\"string\">&quot;asd&quot;</span>)); <span class=\"comment\">// NaN</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"ES6-中对象的使用\"><a href=\"#ES6-中对象的使用\" class=\"headerlink\" title=\"ES6 中对象的使用\"></a>ES6 中对象的使用</h1><h2 id=\"对象的写法\"><a href=\"#对象的写法\" class=\"headerlink\" title=\"对象的写法\"></a>对象的写法</h2><p><strong>传统写法</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 传统方式</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> name = <span class=\"string\">&quot;张三&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> age = <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> person = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;张三&quot;</span>,</span><br><span class=\"line\">  <span class=\"comment\">// name: name,</span></span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">20</span>,</span><br><span class=\"line\">  <span class=\"comment\">// age: age,</span></span><br><span class=\"line\">  <span class=\"attr\">say</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;Hello&quot;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>ES6 写法</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ES6</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> name = <span class=\"string\">&quot;李四&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> age = <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> person2 = &#123;</span><br><span class=\"line\">  name,</span><br><span class=\"line\">  age,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">say</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;Shit bro ~&quot;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ES6-中属性名的更新\"><a href=\"#ES6-中属性名的更新\" class=\"headerlink\" title=\"ES6 中属性名的更新\"></a>ES6 中属性名的更新</h2><p>用字面量定义一个对象的时候 ,可以用表达式作为对象的属性名或者方法名</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> h = <span class=\"string\">&quot;hello&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> w = <span class=\"string\">&quot;world&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> f = <span class=\"string\">&quot;first&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> l = <span class=\"string\">&quot;name&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> person3 = &#123;</span><br><span class=\"line\">  [f + l]: <span class=\"string\">&quot;FirstName&quot;</span>,</span><br><span class=\"line\">  [h + w]() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;Hello World&quot;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person3.firstname); <span class=\"comment\">// FirstName</span></span><br><span class=\"line\">person3.helloworld(); <span class=\"comment\">// Hello World</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Object-is\"><a href=\"#Object-is\" class=\"headerlink\" title=\"Object.is( )\"></a>Object.is( )</h2><p><code>Object.is</code> 函数的作用 : 比较两个值是否严格相等 , 或者说全等 , 即 <code>===</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ===</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">&quot;12&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> num = <span class=\"number\">12</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str == num); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str === num); <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ES6</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.is(str, num)); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Object-assign\"><a href=\"#Object-assign\" class=\"headerlink\" title=\"Object.assign( )\"></a>Object.assign( )</h2><p><code>Object.assign</code> 函数作用 : 将新对象的属性赋值到原对象上 , 后面的属性值会覆盖前面的属性值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> before = &#123;</span><br><span class=\"line\">  <span class=\"attr\">a</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> after1 = &#123;</span><br><span class=\"line\">  <span class=\"attr\">b</span>: <span class=\"number\">2</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> after2 = &#123;</span><br><span class=\"line\">  <span class=\"attr\">c</span>: <span class=\"number\">3</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> after3 = &#123;</span><br><span class=\"line\">  <span class=\"attr\">a</span>: <span class=\"number\">22</span>,</span><br><span class=\"line\">  <span class=\"attr\">b</span>: <span class=\"number\">33</span>,</span><br><span class=\"line\">  <span class=\"attr\">c</span>: <span class=\"number\">44</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.assign(before, after1, after2, after3);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(before); <span class=\"comment\">// &#123;a: 22, b: 33, c: 44&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Object-getPrototypeOf\"><a href=\"#Object-getPrototypeOf\" class=\"headerlink\" title=\"Object.getPrototypeOf( )\"></a>Object.getPrototypeOf( )</h2><p><code>Object.getPrototypeOf</code> 函数作用 : 获取一个对象的 <code>prototype</code> 属性</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 构造函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 在 prototype 上添加方法</span></span><br><span class=\"line\">Person.prototype.say = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;Awesome man&quot;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 实例一个新对象</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> tom = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">tom.say(); <span class=\"comment\">// 成功打印 Awesome man , 添加成功!;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.getPrototypeOf(tom)); <span class=\"comment\">// 打印 prototype 里的内容</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Object-setPrototypeOf\"><a href=\"#Object-setPrototypeOf\" class=\"headerlink\" title=\"Object.setPrototypeOf( )\"></a>Object.setPrototypeOf( )</h2><p><code>Object.setPrototypeOf</code> 函数作用 : 设置一个对象的 <code>prototype</code> 属性</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Object</span>.setPrototypeOf(tom, &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">hello</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;Hello&quot;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">tom.hello(); <span class=\"comment\">// Hello</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"ES6-中函数的使用\"><a href=\"#ES6-中函数的使用\" class=\"headerlink\" title=\"ES6 中函数的使用\"></a>ES6 中函数的使用</h1><h2 id=\"参数的默认值\"><a href=\"#参数的默认值\" class=\"headerlink\" title=\"参数的默认值\"></a>参数的默认值</h2><p><strong>传统方式</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">person</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">  name = name || <span class=\"string\">&quot;张三&quot;</span>;</span><br><span class=\"line\">  age = age || <span class=\"number\">20</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>ES6 写法</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">person</span>(<span class=\"params\">name = <span class=\"string\">&quot;张三&quot;</span>, age = <span class=\"number\">20</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果函数有多个参数 , 但只有部分需要指定默认值 , 另一部分不需要的话 , 那么 , 设定默认值的参数一定要放在最后</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 错误示范</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">person</span>(<span class=\"params\">age = <span class=\"number\">20</span>, name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(name, age);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 正确写法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">person</span>(<span class=\"params\">name, age = <span class=\"number\">20</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(name, age);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>另外 , 只有当传入的参数为 <code>undefined</code> , 才会触发默认值赋值。否则 , 哪怕你传的参数值为 <code>0</code> , <code>false</code> , <code>null</code> 都不会触发默认值赋值 , 这就完美的解决了传统实现方式的弊端</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getAge</span>(<span class=\"params\">age = <span class=\"number\">20</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(age);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">getAge(); <span class=\"comment\">// 20</span></span><br><span class=\"line\">getAge(<span class=\"literal\">undefined</span>); <span class=\"comment\">// 20</span></span><br><span class=\"line\">getAge(<span class=\"number\">0</span>); <span class=\"comment\">// 0</span></span><br><span class=\"line\">getAge(<span class=\"literal\">null</span>); <span class=\"comment\">// null</span></span><br></pre></td></tr></table></figure>\n\n<p>还有一个要注意的地方 , 函数的参数是默认声明的 , 声明过的变量 , 就不能用 <code>let</code> 或者 <code>const</code> 关键字再次声明 , 否则会报错</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">person</span>(<span class=\"params\">age</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> age = <span class=\"number\">20</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 错误 :不能再次声明</span></span><br><span class=\"line\">  <span class=\"comment\">// Uncaught SyntaxError: Identifier &#x27;age&#x27; has already been declared</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"rest-函数\"><a href=\"#rest-函数\" class=\"headerlink\" title=\"rest 函数\"></a>rest 函数</h2><p><strong>案例</strong></p>\n<p><code>rest</code> 参数 , 它代表的意思是 : 在实参中 , 除了第一个参数以外 , 剩余的参数都会被 <code>...rest</code> 获取到 , 当然 <code>...rest</code> 是形参 , 也可以是别的名字 , 比如 <code>...value</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> result = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">result, ...rest</span>) </span>&#123;</span><br><span class=\"line\">  rest.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    result += value;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum(result, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>));</span><br></pre></td></tr></table></figure>\n\n<p><strong><code>...rest</code> 必须放到参数最后</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 错误示范</span></span><br><span class=\"line\"><span class=\"comment\">// Uncaught SyntaxError: Rest parameter must be last formal parameter</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">...rest,a,b,c</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"扩展运算符\"><a href=\"#扩展运算符\" class=\"headerlink\" title=\"扩展运算符\"></a>扩展运算符</h2><p>扩展运算符 <code>...</code> 的作用 : 它可以将一个数组转成一个对应的参数数列表</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">a, b, c</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a + b + c;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum(...arr));</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"箭头函数\"><a href=\"#箭头函数\" class=\"headerlink\" title=\"箭头函数\"></a>箭头函数</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 传统写法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sumA</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a + b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ES6</span></span><br><span class=\"line\"><span class=\"comment\">// 如果函数题单是返回一个东西 , return 也可以省略</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> sumB = <span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> a + b;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> sumC = <span class=\"function\">(<span class=\"params\">a, b</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> c = a + b;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 传统写法</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">v</span>) </span>&#123;</span><br><span class=\"line\">  sum += v;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ES6</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>].forEach(<span class=\"function\">(<span class=\"params\">v</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  sum += v;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"ES6-新增数据类型-symbol-数据类型\"><a href=\"#ES6-新增数据类型-symbol-数据类型\" class=\"headerlink\" title=\"ES6 新增数据类型 symbol 数据类型\"></a>ES6 新增数据类型 symbol 数据类型</h1><p><strong>回顾</strong><br><code>JavaScript</code> 有 6 种数据类型 , 分别是 :<br><code>String</code> 字符串类型;<br><code>Number</code> 数字类型;<br><code>Object</code> 对象类型;<br><code>Boolean</code> 布尔值类型;<br><code>Undefined</code><br><code>Null</code></p>\n<p>而 <code>ES6</code> 给我们带来一种全新的数据类型 : <code>Symbol</code> 每一种全新的事物的诞生都是为了解决某种问题 , <code>Symbol</code> 的初衷 : 解决对象的属性名冲突 , <code>Symbol()</code> , <strong>它代表着一个独一无二的值</strong> , 虽然我们看不到它长什么样子 , 但基本上 , 它有点类似字符串</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> sm = <span class=\"built_in\">Symbol</span>();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sm); <span class=\"comment\">// Symbol()</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> sm); <span class=\"comment\">// symbol</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> sm1 = <span class=\"built_in\">Symbol</span>();</span><br><span class=\"line\"><span class=\"keyword\">let</span> sm2 = <span class=\"built_in\">Symbol</span>();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sm1); <span class=\"comment\">// Symbol()</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sm2); <span class=\"comment\">// Symbol()</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sm1 == sm2); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sm1 === sm2); <span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> sm3 = <span class=\"built_in\">Symbol</span>(<span class=\"string\">&quot;sm3&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> sm4 = <span class=\"built_in\">Symbol</span>(<span class=\"string\">&quot;sm4&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sm3); <span class=\"comment\">// Symbol(sm3)</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sm4); <span class=\"comment\">// Symbol(sm4)</span></span><br></pre></td></tr></table></figure>\n\n<p><code>Symbo()</code> 函数接受参数 , 用于对实例值的描述<br><code>symbol</code> 永远都是独一无二的值 , 谨记</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> sm5 = <span class=\"built_in\">Symbol</span>(<span class=\"string\">&quot;sm&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> sm6 = <span class=\"built_in\">Symbol</span>(<span class=\"string\">&quot;sm&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sm5 == sm6); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sm5 === sm6); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<p>下面 , 我们用两种方式获取 <code>name</code> 的值<br>第一种用中括号的形式 <code>[name]</code> 能正确获取到<br>第二种用点运算符的形式 , 获取失败<br>原因是 : 当 <code>symbol</code> 值作为对象的属性名的时候 , 不能用点运算符获取对应的值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> name = <span class=\"built_in\">Symbol</span>();</span><br><span class=\"line\"><span class=\"keyword\">let</span> person = &#123;</span><br><span class=\"line\">  [name]: <span class=\"string\">&quot;张三&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person[name]); <span class=\"comment\">// 张三</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person.name); <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n\n<p>因为用点运算符的话 , 会导致 <code>javascript</code> 把后面的属性名为理解为一个字符串类型 , 而不是 <code>symbol</code> 类型</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> name = <span class=\"built_in\">Symbol</span>();</span><br><span class=\"line\"><span class=\"keyword\">let</span> person = &#123;&#125;;</span><br><span class=\"line\">person.name = <span class=\"string\">&quot;张三&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person.name); <span class=\"comment\">// 张三</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person[<span class=\"string\">&quot;name&quot;</span>]); <span class=\"comment\">// 张三</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person[name]); <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"属性名的遍历\"><a href=\"#属性名的遍历\" class=\"headerlink\" title=\"属性名的遍历\"></a>属性名的遍历</h2><p>当 <code>symbol</code> 类型的值作为属性名的时候 , 该属性是不会出现在 <code>for...in</code> 和 <code>for...of</code> 中的<br>也不会被 <code>Object.keys()</code> 获取到</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 属性名的遍历</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> name = <span class=\"built_in\">Symbol</span>();</span><br><span class=\"line\"><span class=\"keyword\">let</span> person = &#123;</span><br><span class=\"line\">  [name]: <span class=\"string\">&quot;张三&quot;</span>, <span class=\"comment\">// Symbol 类型</span></span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">20</span>, <span class=\"comment\">// String 类型</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.keys(person); <span class=\"comment\">// [&quot;age&quot;]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> person) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(key);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 结果: [age];</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Object-getOwnPropertySymbols\"><a href=\"#Object-getOwnPropertySymbols\" class=\"headerlink\" title=\"Object.getOwnPropertySymbols( )\"></a>Object.getOwnPropertySymbols( )</h2><p><code>Object.getOwnPropertySymbols()</code> 方法 , 它会找到 <code>symbol</code> 类型的属性并且返回一个数组 , 数组的成员就是 <code>symbol</code> 类型的属性值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> name = <span class=\"built_in\">Symbol</span>(<span class=\"string\">&quot;name&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> age = <span class=\"built_in\">Symbol</span>(<span class=\"string\">&quot;age&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> person = &#123;</span><br><span class=\"line\">  [name]: <span class=\"string\">&quot;张三&quot;</span>,</span><br><span class=\"line\">  [age]: <span class=\"number\">22</span>,</span><br><span class=\"line\">  <span class=\"attr\">sex</span>: <span class=\"string\">&quot;man&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">Object</span>.getOwnPropertySymbols(person);</span><br><span class=\"line\"><span class=\"comment\">// 结果: [Symbol(name),Symbol[age]]</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Reflect-ownKeys\"><a href=\"#Reflect-ownKeys\" class=\"headerlink\" title=\"Reflect.ownKeys( )\"></a>Reflect.ownKeys( )</h2><p>由于获取字符串类型的属性和获取 <code>symbol</code> 类型的属性要分开两种不同的方式来获取 , 难免有有时候会很不方便<br>我们可以用 <code>Reflect.ownKeys()</code> 方法一次性获取所有类型的属性 , 不管它是字符串类型还是 <code>symbol</code> 类型</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Reflect</span>.ownKeys(person));</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Symbol-for\"><a href=\"#Symbol-for\" class=\"headerlink\" title=\"Symbol.for( )\"></a>Symbol.for( )</h2><p><code>Symbol.for()</code> 函数作用 : 根据参数名 , 去<strong>全局环境</strong>中搜索是否有以该 <code>symbol.for()</code> 参数为名的 <code>symbol</code> 值<br>有就返回它 , 没有就以该参数名来创建一个新的 <code>symbol</code> 值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> n1 = <span class=\"built_in\">Symbol</span>.for(<span class=\"string\">&quot;name&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> n2 = <span class=\"built_in\">Symbol</span>.for(<span class=\"string\">&quot;name&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(n1 === n2); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Symbol-keyFor\"><a href=\"#Symbol-keyFor\" class=\"headerlink\" title=\"Symbol.keyFor( )\"></a>Symbol.keyFor( )</h2><p><code>Symbol.keyFor()</code> 函数作用 : 返回一个以被登记在全局环境中的 <code>symbol</code> 值的 <code>key</code> , 没有就返回 <code>undefined</code><br>注意这句话的一个关键词 : <strong>“被登记在全局环境中”</strong><br>也就是说这个 <code>symbol</code> 值是被 <code>Symbol.for()</code> 创建的 , 不是被 <code>Symbol()</code> 创建的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> n1 = <span class=\"built_in\">Symbol</span>(<span class=\"string\">&quot;name&quot;</span>); <span class=\"comment\">// 此时 n1 是创建在 Symbol 类型下的变量,并非全局</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> n2 = <span class=\"built_in\">Symbol</span>.for(<span class=\"string\">&quot;name&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(n1 === n2); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> n1 = <span class=\"built_in\">Symbol</span>.for(<span class=\"string\">&quot;name&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Symbol</span>.keyFor(n1)); <span class=\"comment\">// name</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Proxy-的实现\"><a href=\"#Proxy-的实现\" class=\"headerlink\" title=\"Proxy 的实现\"></a>Proxy 的实现</h1><h2 id=\"proxy-的实现\"><a href=\"#proxy-的实现\" class=\"headerlink\" title=\"proxy 的实现\"></a>proxy 的实现</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// proxy</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> personB = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;张三&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">20</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> pro = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(personB, &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">get</span>(<span class=\"params\">target, property</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> target;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">set</span>(<span class=\"params\">target, property, value</span>)</span> &#123;</span><br><span class=\"line\">    target[property] = value;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">ownKeys</span>(<span class=\"params\">target</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [<span class=\"string\">&quot;name&quot;</span>];</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">has</span>(<span class=\"params\">target, property</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (target[property] == <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(pro.target); <span class=\"comment\">// &#123;name: &quot;张三&quot;, age: 20&#125;</span></span><br><span class=\"line\">pro.name = <span class=\"string\">&quot;王五&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(pro.target); <span class=\"comment\">// &#123;name: &quot;王五&quot;, age: 20&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.keys(personB)); <span class=\"comment\">// [&quot;name&quot;, &quot;age&quot;]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.keys(pro)); <span class=\"comment\">// [&quot;name&quot;]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;name&quot;</span> <span class=\"keyword\">in</span> pro); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;cname&quot;</span> <span class=\"keyword\">in</span> pro); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"apply\"><a href=\"#apply\" class=\"headerlink\" title=\"apply( )\"></a>apply( )</h2><p>除了对象类型的变量可以被代理 , 函数也可以被代理<br>如果被代理的变量是一个函数 , 那么还会支持一个拦截程序 : <code>apply</code> 调用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;func&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> proxy = <span class=\"keyword\">new</span> <span class=\"built_in\">Proxy</span>(func, &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">apply</span>(<span class=\"params\">target, property, value</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`today is <span class=\"subst\">$&#123;value&#125;</span>`</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(proxy(<span class=\"string\">&quot;Saturday&quot;</span>));</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"proxy-revocable\"><a href=\"#proxy-revocable\" class=\"headerlink\" title=\"proxy.revocable( )\"></a>proxy.revocable( )</h2><p>如果创建了代理之后又想取消代理的话 , 我们可以用 <code>Proxy.revocable()</code>( 可废止的 , 可撤回的 ) 函数来实现<br>它会返回一个对象 , 对象中含有一个 <code>proxy</code> 属性 , 它就是 <code>Proxy</code> 的代理实例对象<br>还有一个 <code>revoke</code> 属性 , 它是一个方法 , 用于取消代理。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> personC = &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;张三&quot;</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> handle = &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">get</span>(<span class=\"params\">target, property</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;李四&quot;</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = <span class=\"built_in\">Proxy</span>.revocable(proxy, handle);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.proxy.name); <span class=\"comment\">// 李四</span></span><br><span class=\"line\">obj.revoke();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.proxy.name); <span class=\"comment\">// Uncaught TypeError: Cannot perform &#x27;get&#x27; on a proxy that has been revoked</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"for…of-使用\"><a href=\"#for…of-使用\" class=\"headerlink\" title=\"for…of 使用\"></a>for…of 使用</h1><p><strong>for…of 的优势</strong> :</p>\n<ol>\n<li>写法比 <code>for</code> 循环简洁很多</li>\n<li>可以用 <code>break</code> 来终止整个循环 , 或者 <code>continute</code> 来跳出当前循环 , 继续后面的循环<br>结合 <code>keys()</code> 获取到循环的索引 , 并且是数字类型 , 而不是字符串类型</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arrA = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> value <span class=\"keyword\">of</span> arrA) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> value <span class=\"keyword\">of</span> arrA) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (value &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> value <span class=\"keyword\">of</span> arrA) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (value &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(value);</span><br><span class=\"line\">    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"The-End\"><a href=\"#The-End\" class=\"headerlink\" title=\"The_End\"></a>The_End</h1>"},{"title":"ES6 新增用法 ( 四 )","date":"2021-06-24T13:06:25.000Z","top_img":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg","cover":"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/desktop.png","comments":1,"_content":"\n# Iterator 遍历器\n\n## for...of 为什么不遍历 object 对象\n\n要想能够被 `for...of` 正常遍历的 , 都需要实现一个遍历器 `Iterator` , 而数组 , `Set` 和 `Map` 结构 , 早就内置好了遍历器 `Iterator` ( 又叫迭代器 ) , 它们的原型中都有一个 `Symbol.iterator` 方法 : 而 `Object` 对象并没有实现这个接口 , 使得它无法被 `for...of` 遍历\n\n验证一下 , 它们的原型中到底是不是有个叫 `Symbol.iterator` 的方法:\n\n```js\n//数组\nconsole.log(Array.prototype[Symbol.iterator]); //结果 : function values(){...}\n//字符串\nconsole.log(String.prototype[Symbol.iterator]); //结果 : function [Symbol.iterator](){...}\n//Set结构\nconsole.log(Set.prototype[Symbol.iterator]); //结果 : function values(){...}\n//Map结构\nconsole.log(Map.prototype[Symbol.iterator]); //结果 : function entries(){...}\n//Object对象\nconsole.log(Object.prototype[Symbol.iterator]); // undefined\n```\n\n唯独 `Object` 对象的原型上没有 `Symbol.iterator` , 返回了 : `undefined` , 其他的数据类型的原型上都含有一个名字叫 `Symbol.iterator` 的方法\n\n**注意** : `Symbol.iterator` 是 `Symbol` 对象的 `iterator` 属性 , 是一个特殊的 `Symbol` 值 , 因此 , 当它作为 `prototype` 对象属性名的时候 , 获取它的时候需要使用 `[]` 的形式: `prototype[Symbol.iterator]` , 不能使用点形式获取 : prototype.Symbol.iterator\n也就说 , 只要一个数据结构拥有一个叫 `[Symbol.iterator]()` 方法的数据结构 , 就可以被 `for...of` 遍历\n\n## Iterator 原理\n\n当可遍历对象被 `for...of` 遍历的时候 , `[Symbol.iterator]()` 就会被调用 , 返回一个 `iterator` 对象 , `iterator` 对象里有一个很重要的方法 : `next()`\n\n```js\nlet arr = [\"a\", \"b\", \"c\"];\nlet iterator = arr[Symbol.iterator]();\nconsole.log(iterator); // Array Iterator {}\nconsole.log(iterator.next()); // {value: \"a\", done: false}\nconsole.log(iterator.next()); // {value: \"b\", done: false}\nconsole.log(iterator.next()); // {value: \"c\", done: false}\nconsole.log(iterator.next()); // {value: undefined, done: true}\n```\n\n第 1 次调用 `next()` 方法 : 返回数组的第 1 个元素 : \"a\" , 以及 `done` 的值为 `fasle` , 表示循环没有结束 , 继续遍历\n第 2 次调用 `next()` 方法 : 返回数组的第 2 个元素 : \"b\" , 以及 `done` 的值还是为 `fasle` , 表示循环没有结束 , 继续遍历\n第 3 次调用 `next()` 方法 : 返回数组的第 3 个元素 : \"c\" , 以及 `done` 的值依然为 `fasle` , 表示循环没有结束 , 继续遍历\n第 4 次调用 `next()` 方法 : 返回的 value 值为 undefined , 以及 `done` 的值变成了 `true` , 表示遍历结束\n\n`for...of` 的原理就是 : 先调用可遍历对象的 `[Symbol.iterator]()` 方法 , 得到一个 `iterator` 遍历器对象 , 然后就在遍历器上不断调用 `next()` 方法 , 直到 `done` 的值为 `true` 的时候 , 就表示遍历完成结束了\n\n## 自定义 Iterator 遍历器\n\n给一个 `Object` 对象加一个 `[Symbol.iterator]()` 方法 , 看看它是不是就能被 `for...of` 遍历了\n\n```js\nlet obj = {\n  name: \"张三\",\n  age: 20,\n};\n\n// 自定义 [Symbol.iterator] 迭代器\nobj[Symbol.iterator] = function () {\n  // 获取到对象的每个 key 值返回一个数组\n  let keys = Object.keys(obj);\n  // 获取到 key 值 ( 对象 ) 的长度\n  let length = keys.length;\n  // 定义循环变量\n  let index = 0;\n  // 返回对象:每次迭代会自动调用返回对象里面的 next() 方法\n  return {\n    next() {\n      // 返回值有 value 和 done\n      // value 能自定义\n      // done为 true 时跳出循环\n      return index < length\n        ? {\n            value: { k: keys[index], v: obj[keys[index++]] },\n            done: false,\n          }\n        : {\n            done: true,\n          };\n    },\n  };\n};\n```\n\n**现在用 for...of 试一下能不能遍历此对象**\n\n```js\nfor (let { k, v } of obj) {\n  console.log(k, v);\n}\n// 打印结果:\n//  name 张三\n//  age 20\n```\n\n我们定义了一个 `Object` 对象 , 同时给它添加了 `[Symbol.iterator]()` 方法 , 并在 `[Symbol.iterator]()` 方法返回的对象里实现了 `next()`方法 , `next()` 方法返回的对象包含了 `value` 属性和 `done` 属性\n\n也就是说可以通过添加 `[Symbol.iterator]()` 方法 , 把一个不可遍历的 `Object` 对象 , 变成可遍历的对象\n\n# Generator 函数\n\n## 声明 Generator 函数\n\n`Generator` 函数 , 又称生成器函数 , 是 `ES6` 的一个重要的新特性\n\n```js\n// 声明一个 hello 的 Generator 函数\nfunction* hello(name) {\n  yield `hello ${name}`;\n  yield `bye`;\n}\n```\n\n## 调用 Generator 函数\n\n```js\n// 声明一个 hello 的 Generator 函数\nfunction* hello(name) {\n  yield `hello ${name}`;\n  yield `bye`;\n}\n\n// 调用 hello 函数\nlet ite = hello(\"前端君\");\nconsole.log(ite.next()); // {value: \"hello 前端君\", done: false}\nconsole.log(ite.next()); // {value: \"bye\", done: false}\nconsole.log(ite.next()); // {value: undefined, done: true}\n```\n\n一开始 , 调用 `hello(\"前端君\")` , 函数执行后 , 返回了一个 : `[object Genrator]` 生成器对象 , 这里生成器的 `next()` 方法的和遍历器 `iterator` 的 `next()` 方法的返回结果很像\n可以把 `Generator` 函数被调用后得到的生成器理解成一个遍历器 `iterator` , 用于遍历函数内部的状态\n\n## Generator 函数的行为\n\n`Generator` 函数被调用后并不会一直执行到最后 , 它是先回返回一个生成器对象 , 然后暂停 , 等到生成器对象的 `next()` 方法被调用后 , 函数才会继续执行 , 直到遇到关键字 `yield` 后 , 又会停止执行 , 并返回一个 `Object` 对象 , 然后继续等待 , 直到 `next()` 再一次被调用的时候 , 才会继续接着往下执行 , 直到 `done` 的值为 `true`\n\n## yield 语句的使用\n\n`yield` 有点像传统函数的 `return` 的作用 , 但不同的是普通函数只能 `return` 一次 , 但是 `Generator` 函数可以有很多个 `yield` , 而 `return` 代表的是终止执行 , `yield` 代表的是暂停执行 , 后续通过调用生成器的 `next()` 方法 , 可以恢复执行\n\n## next 方法接收参数\n\n`next()` 方法还可以接受一个参数 , 它的参数会作为上一个 `yield` 的返回值\n\n**案例**\n\n```js\nfunction* gen() {\n  let params = yield 2; // params =  3\n  let params1 = yield 3; // params1= 1\n  let params2 = yield params1 + 6; // params2 = 7\n  let params3 = yield 7; // params3 = 4\n  return params2 * params + params3;\n}\nlet lt = gen();\nconsole.log(lt.next()); // { value: 2, done: false }\nconsole.log(lt.next(3)); // { value: 3, done: false }\nconsole.log(lt.next(lt.next(1).value)); // { value: 7, done: false }\nconsole.log(lt.next(4)); // { value: 25, done: true }\n```\n\n## 关键字 yield\\*\n\n在一个 `Generator` 函数里面 , 如果我们想调用另一个 `Generator` 函数 , 就需要用到的关键字是 : yield\\*\n\n**案例**\n\n```js\n// 声明 Generator 函数 : gen1\nfunction* gen1() {\n  yield \"gen1 start\";\n  yield \"gen1 end\";\n}\n// 声明 Generator 函数 : gen2\nfunction* gen2() {\n  yield \"gen2 start\";\n  yield \"gen2 end\";\n}\n\n// 声明 Generator 函数 : start\nfunction* start() {\n  yield \"start\";\n  yield* gen1();\n  yield* gen2();\n  yield \"end\";\n}\n\n// 调用 start 函数\nvar ite = start(); // 创建一个生成器\nite.next(); // {value: \"start\", done: false}\nite.next(); // {value: \"gen1 start\", done: false}\nite.next(); // {value: \"gen1 end\", done: false}\nite.next(); // {value: \"gen2 start\", done: false}\nite.next(); // {value: \"gen2 end\", done: false}\nite.next(); // {value: \"end\", done: false}\nite.next(); // {value: undefined, done: true}\n```\n\n## Generator 函数的用途\n\n是 `ES6` 的一个很重要的新特性 , 它可以控制函数的内部状态 , 依次遍历每个状态 ; 可以根据需要 , 轻松地让函数暂停执行或者继续执行 , 根据这个特点 , 我们可以利用 `Generator` 函数来实现异步操作的效果\n\n# Set 和 WeakSet 用法\n\n## 什么是 Set\n\n`Set` 是 `ES6` 给开发者带来的一种新的数据结构 , 你可以理解为值的集合 , 我们平时见到的数组 `Array` 也是一种数据结构 , 但是 `Set` 跟其他数据结构不同的地方就在于 : 它的值不会有重复项\n\n## Set 的基本用法\n\n```js\nlet set1 = new Set();\nconsole.log(set1); // Set(0) {}\n\nlet set2 = new Set([1, 2, 3]);\nconsole.log(set2); // Set(3) {1, 2, 3}\n\nlet set3 = new Set();\nset3.add(4);\nset3.add(5);\nset3.add(6);\nconsole.log(set3); // Set(3) {4, 5, 6}\n```\n\n## Set 成员值唯一\n\n```js\nlet set = new Set();\nset.add(1);\nset.add(1);\nset.add(2);\nset.add(2);\nconsole.log(set); // Set(2) {1, 2}\n```\n\n## size 属性\n\n`size` 属性 : 获取成员的个数\n\n```js\nlet set = new Set([1, 2, 3, 4, 5]);\nconsole.log(set); // 5\n```\n\n## delete( )\n\n`delete()` 方法 : 用户删除 `Set` 结构中的指定值 , 删除成功返回 : `true` , 删除失败返回 : `fasle`\n\n```js\nlet set = new Set([5, 6, 7, 8]);\nconsole.log(set); // Set(4) {5, 6, 7, 8}\nconsole.log(set.delete(8)); // true\nconsole.log(set.delete(8)); // false\nconsole.log(set); // Set(3) {5, 6, 7}\n```\n\n## clear( )\n\n`clear()` 方法 : 清除所有成员 , 一个不留\n\n```js\nlet set = new Set([5, 6, 7, 8]);\nconsole.log(set); // Set(4) {5, 6, 7, 8}\nset.clear();\nconsole.log(set); // Set(0) {}\n```\n\n## has( )\n\n`has()` 方法 : 判断 `set` 结构中是否含有指定的值 , 如果有 , 返回 `true` , 如果没有 , 返回 `fasle`\n\n```js\nlet set = new Set([1, 2, 3]);\nconsole.log(set.has(1)); // true\nconsole.log(set.has(6)); // false\n```\n\n## entries( )\n\n`entries()` 方法 : 返回一个键值对的遍历器\n\n```js\nvar set = new Set([\"a\", \"b\", \"c\"]);\nconsole.log(set.entries()); // SetIterator {\"a\" => \"a\", \"b\" => \"b\", \"c\" => \"c\"}\n```\n\n注意得到的结果 , 成员值 `a` 对应的键值对是 `[\"a\",\"a\"]` , 也就是说 : `Set` 结构是键名和键值是同一个值\n\n## keys( ) 和 values( )\n\n`keys()` 方法 : 返回键名的遍历器\n`values()` 方法 : 返回键值的遍历器\n\n## forEach( )\n\n使用方式跟数组的 `forEach` 一样 , 当然 , 得到的 `value` 是 `key` 的值是一样的\n\n```js\nvar set = new Set([\"a\", \"b\", \"c\"]);\n// 使用回调函数遍历每个成员\nset.forEach(function (value, key) {\n  console.log(value, key);\n});\n// 打印结果\n// a a\n// b b\n// c c\n```\n\n## set 用途之一\n\n**数组去重** , 顺便我们把它封装成一个函数\n\n```js\nlet arr = [1, 1, 1, 2, 2, 2, 3, 3, 4, 4, 4, 4];\n\n// 数组去重\nfunction deduplication(arr) {\n  return Array.from(new Set(arr));\n}\n\nconsole.log(deduplication(arr));\n```\n\n## Weakset 结构\n\n`WeakSet` 结构同样不会存储重复的值 , 不同的是 , 它的成员必须是对象类型的值 , 否则就会报错\n\n```js\nlet ws = new WeakSet([{ age: 18 }]);\n```\n\n```js\n// 错误示范\nlet ws = new WeakSet([1, 2]);\n```\n\n实际上 , 任何可遍历的对象 , 都可以作为 `WeakSet` 的初始化参数 , 比如 : **数组**\n\n```js\nlet arr1 = [1];\nlet arr2 = [2];\n// 初始化一个 WeakSet 对象,参数是 数组 类型\nlet ws = new WeakSet([arr1, arr2]); //结果 : WeakSet {Object {age: 18}}\n```\n\n同样 , `WeakSet` 结构也提供了 `add()` 方法 , `delete()` 方法 , `has()` 方法给开发者使用 , 作用与用法跟 `Set` 结构完全一致\n\n另一个不同点是 : `WeakSet` 结构不可遍历 , 因为它的成员都是对象的弱引用 , 随时被回收机制回收 , 成员消失 , 所以 WeakSet 结构不会有 `keys()` , `values()` , `entries()` , `forEach()` 等方法和 `size` 属性\n\n# Map 和 WeakMap\n\n## 什么是 Map\n\n`ES6` 提供了 `Map` 结构给我们使用 , 它跟 `Object` 对象很像 , 但是不同的是 , 它的 `key` 键名的类型不再局限于字符串类型了 , 它可以是各种类型的值 ; 可以说 , 它比 `Object` 对象更加灵活了 , 当然 , 也更加复杂了。\n\n## Map 的基本用法\n\n跟 `Set` 类似\n\n```js\nlet map1 = new Map();\nconsole.log(map1); // Map(0) {}\n\nlet map2 = new Map([\n  [\"name\", \"前端君\"],\n  [\"gender\", 1],\n]);\nconsole.log(map2); // Map(2) {\"name\" => \"前端君\", \"gender\" => 1}\n```\n\n`Map()` 方法里面的参数 , 首先它是一个数组 , 而里面的内容也是由多个数组组成 , `\"name\"` : `\"前端君\"` 作为一个键值对 , 将它们装在一个数组里面 , `[\"name\",\"前端君\"]` , 另外一组键值对也一样 : `[\"gender\",1]` 这就是初始化一个 `Map` 结构实例的基本写法\n\n## set( )\n\n`set()` 方法作用 : 给实例设置一对键值对 , 返回 `map` 实例\n\n```js\nlet map = new Map();\n// 添加一个 string 类型的键名\nmap.set(\"name\", \"前端君\");\n// 添加一个数字类型的键名\nmap.set(1, 2);\nconsole.log(map); // Map(2) {\"name\" => \"前端君\", 1 => 2}\n```\n\n`Map` 结构可以存储非字符串类型的键名 , 当然还可以设置更多其它类型的键名 , 比如更过分点的 :\n\n```js\n// 数组类型的键名\nmap.set([1], 2);\n// 对象类型的键名\nmap.set({ name: \"Zhangsan\" }, 2);\n// 布尔类型的键名\nmap.set(true, 2);\n// Symbol 类型的键名\nmap.set(Symbol(\"name\"), 2);\n// null 为键名\nmap.set(null, 2);\n// undefined 为键名\nmap.set(undefined, 2);\n```\n\n使用 `set` 方法的时候有一点需要注意 , 如果你设置一个已经存在的键名 , 那么后面的键值会覆盖前面的键值\n\n```js\nlet map = new Map();\nmap.set(\"name\", \"前端君\");\nconsole.log(map); // 结果 : Map(1) {\"name\" => \"前端君\"}\n// 再次设置 name 的值\nmap.set(\"name\", \"隔壁老王\");\nconsole.log(map); // 结果 : Map(1) {\"name\" => \"隔壁老王\"}\n```\n\n## get( )\n\n`get()` 方法作用 : 获取指定键名的键值 , 返回键值\n\n```js\nlet map = new Map([\n  [\"name\", \"前端君\"],\n  [\"age\", 20],\n]);\nconsole.log(map.get(\"name\")); // 前端君\nconsole.log(map.get(\"age\")); // 20\nconsole.log(map.get(\"gender\")); // undefined\n```\n\n## delete( )\n\n`delete()` 方法作用 : 删除指定的键值对 , 删除成功返回 : `true` , 否则返回 : `false`\n\n```js\nlet map = new Map();\nmap.set(\"name\", \"前端君\");\nconsole.log(map); // Map(1) {\"name\" => \"前端君\"}\nconsole.log(map.delete(\"name\")); // true\nconsole.log(map.delete(\"name\")); // false\n```\n\n## clear( )\n\n跟 `Set` 结构一样 , `Map` 结构也提供了 `clear()` 方法 , 让你一次性删除所有键值对\n\n```js\nlet map = new Map();\nmap.set(\"name\", \"前端君\");\nmap.set(\"gender\", 1);\nmap.clear();\nconsole.log(map); // Map(0) {}\n```\n\n## has( )\n\n`has()` 方法作用 : 判断 `Map` 实例内是否含有指定的键值对 , 有就返回 : `true` , 否则返回 : `false`\n\n```js\nlet map = new Map();\nmap.set(\"name\", \"前端君\");\nconsole.log(map.has(\"name\")); // 结果 : true\nconsole.log(map.has(\"age\")); // 结果 : false\n```\n\n## entries()\n\n`entries()` 方法作用 : 返回实例的键值对遍历器\n\n```js\nlet map = new Map([\n  [\"name\", \"前端君\"],\n  [\"age\", 25],\n]);\nfor (let [key, value] of map.entries()) {\n  console.log(key + \"  \" + value);\n}\n// 打印结果\n//  name  前端君\n//  age  25\n```\n\n## keys( ) 和 values( )\n\n`keys()` 方法 : 返回实例所有键名的遍历器\n`values()` 方法 : 返回实例所有键值的遍历器\n\n## forEach( )\n\n```js\nlet map = new Map([\n  [\"name\", \"前端君\"],\n  [\"age\", 25],\n]);\nmap.forEach(function (value, key) {\n  console.log(key + \" \" + value);\n});\n// 打印结果\n//  name 前端君\n//  age 25\n```\n\n## size 属性\n\n获取实例的成员数\n\n```js\nlet map = new Map();\nmap.set(1, 3);\nmap.set(\"1\", \"3\");\nconsole.log(map.size); // 结果: 2\n```\n\n## 什么是 WeakMap\n\n`WeakMap` 结构和 `Map` 结构很类似 , 不同点在于 `WeakMap` 结构的键名只支持引用类型的数据 , 比如 : 数组 , 对象 , 函数\n\n## WeakMap 的基本用法\n\n`WeakMap` 结构的使用方式和 `Map` 结构一样\n\n```js\nlet wm = new WeakMap();\n```\n\n两者都是使用 `new` 来创建实例 , 如果添加键值对的话 , 我们同样是使用 `set` 方法 , 不过键名的类型必须要求是引用类型的值\n\n```js\nlet wm = new WeakMap();\n// 数组类型的键名\nwm.set([1], 2);\n// 对象类型的键名\nwm.set({ name: \"Zhangsan\" }, 2);\n// 函数类型的键名\nfunction fn() {}\nwm.set(fn, 2);\nconsole.log(wm); // WeakMap {ƒ => 2, {…} => 2, Array(1) => 2}\n```\n\n从打印结果可以看出 , 以上类型的键名都可以成功添加到 `WeakMap` 实例中\n\n## WeakMap 与 Map 的区别\n\n如果是普通的值类型则不允许 , 比如 : `String` , `Number` , `null` , `undefined` , `boolean` , 而 `Map` 结构是允许的 , 这就是两者的不同之处 , 谨记\n\n跟 `Map` 一样 , `WeakMap` 也拥有 `get` , `has` , `delete` 方法 , 用法和用途都一样 , 不同地方在于 , `WeakMap` 不支持 `clear` 方法 , 不支持遍历 , 也就没有了 `keys` , `values` , `entries` , `forEach` 这 4 个方法 , 也没有属性 `size`\n\n理由跟 `WeakSet` 结构一样 : 键名中的引用类型是弱引用 , 你永远不知道这个引用对象什么时候会被垃圾回收机制回收了 , 如果这个引用类型的值被垃圾机制回收了 , `WeakMap` 实例中的对应键值对也会消失。\n","source":"_posts/js/es6-day04.md","raw":"---\ntitle: ES6 新增用法 ( 四 )\ndate: 2021-06-24 21:06:25\ntop_img: https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg\ncover:\ntags:\n  - js\n  - javascript\n  - ES6\n  - 数组去重\ncategories:\n  - js\n  - ES6\ncomments:\n---\n\n# Iterator 遍历器\n\n## for...of 为什么不遍历 object 对象\n\n要想能够被 `for...of` 正常遍历的 , 都需要实现一个遍历器 `Iterator` , 而数组 , `Set` 和 `Map` 结构 , 早就内置好了遍历器 `Iterator` ( 又叫迭代器 ) , 它们的原型中都有一个 `Symbol.iterator` 方法 : 而 `Object` 对象并没有实现这个接口 , 使得它无法被 `for...of` 遍历\n\n验证一下 , 它们的原型中到底是不是有个叫 `Symbol.iterator` 的方法:\n\n```js\n//数组\nconsole.log(Array.prototype[Symbol.iterator]); //结果 : function values(){...}\n//字符串\nconsole.log(String.prototype[Symbol.iterator]); //结果 : function [Symbol.iterator](){...}\n//Set结构\nconsole.log(Set.prototype[Symbol.iterator]); //结果 : function values(){...}\n//Map结构\nconsole.log(Map.prototype[Symbol.iterator]); //结果 : function entries(){...}\n//Object对象\nconsole.log(Object.prototype[Symbol.iterator]); // undefined\n```\n\n唯独 `Object` 对象的原型上没有 `Symbol.iterator` , 返回了 : `undefined` , 其他的数据类型的原型上都含有一个名字叫 `Symbol.iterator` 的方法\n\n**注意** : `Symbol.iterator` 是 `Symbol` 对象的 `iterator` 属性 , 是一个特殊的 `Symbol` 值 , 因此 , 当它作为 `prototype` 对象属性名的时候 , 获取它的时候需要使用 `[]` 的形式: `prototype[Symbol.iterator]` , 不能使用点形式获取 : prototype.Symbol.iterator\n也就说 , 只要一个数据结构拥有一个叫 `[Symbol.iterator]()` 方法的数据结构 , 就可以被 `for...of` 遍历\n\n## Iterator 原理\n\n当可遍历对象被 `for...of` 遍历的时候 , `[Symbol.iterator]()` 就会被调用 , 返回一个 `iterator` 对象 , `iterator` 对象里有一个很重要的方法 : `next()`\n\n```js\nlet arr = [\"a\", \"b\", \"c\"];\nlet iterator = arr[Symbol.iterator]();\nconsole.log(iterator); // Array Iterator {}\nconsole.log(iterator.next()); // {value: \"a\", done: false}\nconsole.log(iterator.next()); // {value: \"b\", done: false}\nconsole.log(iterator.next()); // {value: \"c\", done: false}\nconsole.log(iterator.next()); // {value: undefined, done: true}\n```\n\n第 1 次调用 `next()` 方法 : 返回数组的第 1 个元素 : \"a\" , 以及 `done` 的值为 `fasle` , 表示循环没有结束 , 继续遍历\n第 2 次调用 `next()` 方法 : 返回数组的第 2 个元素 : \"b\" , 以及 `done` 的值还是为 `fasle` , 表示循环没有结束 , 继续遍历\n第 3 次调用 `next()` 方法 : 返回数组的第 3 个元素 : \"c\" , 以及 `done` 的值依然为 `fasle` , 表示循环没有结束 , 继续遍历\n第 4 次调用 `next()` 方法 : 返回的 value 值为 undefined , 以及 `done` 的值变成了 `true` , 表示遍历结束\n\n`for...of` 的原理就是 : 先调用可遍历对象的 `[Symbol.iterator]()` 方法 , 得到一个 `iterator` 遍历器对象 , 然后就在遍历器上不断调用 `next()` 方法 , 直到 `done` 的值为 `true` 的时候 , 就表示遍历完成结束了\n\n## 自定义 Iterator 遍历器\n\n给一个 `Object` 对象加一个 `[Symbol.iterator]()` 方法 , 看看它是不是就能被 `for...of` 遍历了\n\n```js\nlet obj = {\n  name: \"张三\",\n  age: 20,\n};\n\n// 自定义 [Symbol.iterator] 迭代器\nobj[Symbol.iterator] = function () {\n  // 获取到对象的每个 key 值返回一个数组\n  let keys = Object.keys(obj);\n  // 获取到 key 值 ( 对象 ) 的长度\n  let length = keys.length;\n  // 定义循环变量\n  let index = 0;\n  // 返回对象:每次迭代会自动调用返回对象里面的 next() 方法\n  return {\n    next() {\n      // 返回值有 value 和 done\n      // value 能自定义\n      // done为 true 时跳出循环\n      return index < length\n        ? {\n            value: { k: keys[index], v: obj[keys[index++]] },\n            done: false,\n          }\n        : {\n            done: true,\n          };\n    },\n  };\n};\n```\n\n**现在用 for...of 试一下能不能遍历此对象**\n\n```js\nfor (let { k, v } of obj) {\n  console.log(k, v);\n}\n// 打印结果:\n//  name 张三\n//  age 20\n```\n\n我们定义了一个 `Object` 对象 , 同时给它添加了 `[Symbol.iterator]()` 方法 , 并在 `[Symbol.iterator]()` 方法返回的对象里实现了 `next()`方法 , `next()` 方法返回的对象包含了 `value` 属性和 `done` 属性\n\n也就是说可以通过添加 `[Symbol.iterator]()` 方法 , 把一个不可遍历的 `Object` 对象 , 变成可遍历的对象\n\n# Generator 函数\n\n## 声明 Generator 函数\n\n`Generator` 函数 , 又称生成器函数 , 是 `ES6` 的一个重要的新特性\n\n```js\n// 声明一个 hello 的 Generator 函数\nfunction* hello(name) {\n  yield `hello ${name}`;\n  yield `bye`;\n}\n```\n\n## 调用 Generator 函数\n\n```js\n// 声明一个 hello 的 Generator 函数\nfunction* hello(name) {\n  yield `hello ${name}`;\n  yield `bye`;\n}\n\n// 调用 hello 函数\nlet ite = hello(\"前端君\");\nconsole.log(ite.next()); // {value: \"hello 前端君\", done: false}\nconsole.log(ite.next()); // {value: \"bye\", done: false}\nconsole.log(ite.next()); // {value: undefined, done: true}\n```\n\n一开始 , 调用 `hello(\"前端君\")` , 函数执行后 , 返回了一个 : `[object Genrator]` 生成器对象 , 这里生成器的 `next()` 方法的和遍历器 `iterator` 的 `next()` 方法的返回结果很像\n可以把 `Generator` 函数被调用后得到的生成器理解成一个遍历器 `iterator` , 用于遍历函数内部的状态\n\n## Generator 函数的行为\n\n`Generator` 函数被调用后并不会一直执行到最后 , 它是先回返回一个生成器对象 , 然后暂停 , 等到生成器对象的 `next()` 方法被调用后 , 函数才会继续执行 , 直到遇到关键字 `yield` 后 , 又会停止执行 , 并返回一个 `Object` 对象 , 然后继续等待 , 直到 `next()` 再一次被调用的时候 , 才会继续接着往下执行 , 直到 `done` 的值为 `true`\n\n## yield 语句的使用\n\n`yield` 有点像传统函数的 `return` 的作用 , 但不同的是普通函数只能 `return` 一次 , 但是 `Generator` 函数可以有很多个 `yield` , 而 `return` 代表的是终止执行 , `yield` 代表的是暂停执行 , 后续通过调用生成器的 `next()` 方法 , 可以恢复执行\n\n## next 方法接收参数\n\n`next()` 方法还可以接受一个参数 , 它的参数会作为上一个 `yield` 的返回值\n\n**案例**\n\n```js\nfunction* gen() {\n  let params = yield 2; // params =  3\n  let params1 = yield 3; // params1= 1\n  let params2 = yield params1 + 6; // params2 = 7\n  let params3 = yield 7; // params3 = 4\n  return params2 * params + params3;\n}\nlet lt = gen();\nconsole.log(lt.next()); // { value: 2, done: false }\nconsole.log(lt.next(3)); // { value: 3, done: false }\nconsole.log(lt.next(lt.next(1).value)); // { value: 7, done: false }\nconsole.log(lt.next(4)); // { value: 25, done: true }\n```\n\n## 关键字 yield\\*\n\n在一个 `Generator` 函数里面 , 如果我们想调用另一个 `Generator` 函数 , 就需要用到的关键字是 : yield\\*\n\n**案例**\n\n```js\n// 声明 Generator 函数 : gen1\nfunction* gen1() {\n  yield \"gen1 start\";\n  yield \"gen1 end\";\n}\n// 声明 Generator 函数 : gen2\nfunction* gen2() {\n  yield \"gen2 start\";\n  yield \"gen2 end\";\n}\n\n// 声明 Generator 函数 : start\nfunction* start() {\n  yield \"start\";\n  yield* gen1();\n  yield* gen2();\n  yield \"end\";\n}\n\n// 调用 start 函数\nvar ite = start(); // 创建一个生成器\nite.next(); // {value: \"start\", done: false}\nite.next(); // {value: \"gen1 start\", done: false}\nite.next(); // {value: \"gen1 end\", done: false}\nite.next(); // {value: \"gen2 start\", done: false}\nite.next(); // {value: \"gen2 end\", done: false}\nite.next(); // {value: \"end\", done: false}\nite.next(); // {value: undefined, done: true}\n```\n\n## Generator 函数的用途\n\n是 `ES6` 的一个很重要的新特性 , 它可以控制函数的内部状态 , 依次遍历每个状态 ; 可以根据需要 , 轻松地让函数暂停执行或者继续执行 , 根据这个特点 , 我们可以利用 `Generator` 函数来实现异步操作的效果\n\n# Set 和 WeakSet 用法\n\n## 什么是 Set\n\n`Set` 是 `ES6` 给开发者带来的一种新的数据结构 , 你可以理解为值的集合 , 我们平时见到的数组 `Array` 也是一种数据结构 , 但是 `Set` 跟其他数据结构不同的地方就在于 : 它的值不会有重复项\n\n## Set 的基本用法\n\n```js\nlet set1 = new Set();\nconsole.log(set1); // Set(0) {}\n\nlet set2 = new Set([1, 2, 3]);\nconsole.log(set2); // Set(3) {1, 2, 3}\n\nlet set3 = new Set();\nset3.add(4);\nset3.add(5);\nset3.add(6);\nconsole.log(set3); // Set(3) {4, 5, 6}\n```\n\n## Set 成员值唯一\n\n```js\nlet set = new Set();\nset.add(1);\nset.add(1);\nset.add(2);\nset.add(2);\nconsole.log(set); // Set(2) {1, 2}\n```\n\n## size 属性\n\n`size` 属性 : 获取成员的个数\n\n```js\nlet set = new Set([1, 2, 3, 4, 5]);\nconsole.log(set); // 5\n```\n\n## delete( )\n\n`delete()` 方法 : 用户删除 `Set` 结构中的指定值 , 删除成功返回 : `true` , 删除失败返回 : `fasle`\n\n```js\nlet set = new Set([5, 6, 7, 8]);\nconsole.log(set); // Set(4) {5, 6, 7, 8}\nconsole.log(set.delete(8)); // true\nconsole.log(set.delete(8)); // false\nconsole.log(set); // Set(3) {5, 6, 7}\n```\n\n## clear( )\n\n`clear()` 方法 : 清除所有成员 , 一个不留\n\n```js\nlet set = new Set([5, 6, 7, 8]);\nconsole.log(set); // Set(4) {5, 6, 7, 8}\nset.clear();\nconsole.log(set); // Set(0) {}\n```\n\n## has( )\n\n`has()` 方法 : 判断 `set` 结构中是否含有指定的值 , 如果有 , 返回 `true` , 如果没有 , 返回 `fasle`\n\n```js\nlet set = new Set([1, 2, 3]);\nconsole.log(set.has(1)); // true\nconsole.log(set.has(6)); // false\n```\n\n## entries( )\n\n`entries()` 方法 : 返回一个键值对的遍历器\n\n```js\nvar set = new Set([\"a\", \"b\", \"c\"]);\nconsole.log(set.entries()); // SetIterator {\"a\" => \"a\", \"b\" => \"b\", \"c\" => \"c\"}\n```\n\n注意得到的结果 , 成员值 `a` 对应的键值对是 `[\"a\",\"a\"]` , 也就是说 : `Set` 结构是键名和键值是同一个值\n\n## keys( ) 和 values( )\n\n`keys()` 方法 : 返回键名的遍历器\n`values()` 方法 : 返回键值的遍历器\n\n## forEach( )\n\n使用方式跟数组的 `forEach` 一样 , 当然 , 得到的 `value` 是 `key` 的值是一样的\n\n```js\nvar set = new Set([\"a\", \"b\", \"c\"]);\n// 使用回调函数遍历每个成员\nset.forEach(function (value, key) {\n  console.log(value, key);\n});\n// 打印结果\n// a a\n// b b\n// c c\n```\n\n## set 用途之一\n\n**数组去重** , 顺便我们把它封装成一个函数\n\n```js\nlet arr = [1, 1, 1, 2, 2, 2, 3, 3, 4, 4, 4, 4];\n\n// 数组去重\nfunction deduplication(arr) {\n  return Array.from(new Set(arr));\n}\n\nconsole.log(deduplication(arr));\n```\n\n## Weakset 结构\n\n`WeakSet` 结构同样不会存储重复的值 , 不同的是 , 它的成员必须是对象类型的值 , 否则就会报错\n\n```js\nlet ws = new WeakSet([{ age: 18 }]);\n```\n\n```js\n// 错误示范\nlet ws = new WeakSet([1, 2]);\n```\n\n实际上 , 任何可遍历的对象 , 都可以作为 `WeakSet` 的初始化参数 , 比如 : **数组**\n\n```js\nlet arr1 = [1];\nlet arr2 = [2];\n// 初始化一个 WeakSet 对象,参数是 数组 类型\nlet ws = new WeakSet([arr1, arr2]); //结果 : WeakSet {Object {age: 18}}\n```\n\n同样 , `WeakSet` 结构也提供了 `add()` 方法 , `delete()` 方法 , `has()` 方法给开发者使用 , 作用与用法跟 `Set` 结构完全一致\n\n另一个不同点是 : `WeakSet` 结构不可遍历 , 因为它的成员都是对象的弱引用 , 随时被回收机制回收 , 成员消失 , 所以 WeakSet 结构不会有 `keys()` , `values()` , `entries()` , `forEach()` 等方法和 `size` 属性\n\n# Map 和 WeakMap\n\n## 什么是 Map\n\n`ES6` 提供了 `Map` 结构给我们使用 , 它跟 `Object` 对象很像 , 但是不同的是 , 它的 `key` 键名的类型不再局限于字符串类型了 , 它可以是各种类型的值 ; 可以说 , 它比 `Object` 对象更加灵活了 , 当然 , 也更加复杂了。\n\n## Map 的基本用法\n\n跟 `Set` 类似\n\n```js\nlet map1 = new Map();\nconsole.log(map1); // Map(0) {}\n\nlet map2 = new Map([\n  [\"name\", \"前端君\"],\n  [\"gender\", 1],\n]);\nconsole.log(map2); // Map(2) {\"name\" => \"前端君\", \"gender\" => 1}\n```\n\n`Map()` 方法里面的参数 , 首先它是一个数组 , 而里面的内容也是由多个数组组成 , `\"name\"` : `\"前端君\"` 作为一个键值对 , 将它们装在一个数组里面 , `[\"name\",\"前端君\"]` , 另外一组键值对也一样 : `[\"gender\",1]` 这就是初始化一个 `Map` 结构实例的基本写法\n\n## set( )\n\n`set()` 方法作用 : 给实例设置一对键值对 , 返回 `map` 实例\n\n```js\nlet map = new Map();\n// 添加一个 string 类型的键名\nmap.set(\"name\", \"前端君\");\n// 添加一个数字类型的键名\nmap.set(1, 2);\nconsole.log(map); // Map(2) {\"name\" => \"前端君\", 1 => 2}\n```\n\n`Map` 结构可以存储非字符串类型的键名 , 当然还可以设置更多其它类型的键名 , 比如更过分点的 :\n\n```js\n// 数组类型的键名\nmap.set([1], 2);\n// 对象类型的键名\nmap.set({ name: \"Zhangsan\" }, 2);\n// 布尔类型的键名\nmap.set(true, 2);\n// Symbol 类型的键名\nmap.set(Symbol(\"name\"), 2);\n// null 为键名\nmap.set(null, 2);\n// undefined 为键名\nmap.set(undefined, 2);\n```\n\n使用 `set` 方法的时候有一点需要注意 , 如果你设置一个已经存在的键名 , 那么后面的键值会覆盖前面的键值\n\n```js\nlet map = new Map();\nmap.set(\"name\", \"前端君\");\nconsole.log(map); // 结果 : Map(1) {\"name\" => \"前端君\"}\n// 再次设置 name 的值\nmap.set(\"name\", \"隔壁老王\");\nconsole.log(map); // 结果 : Map(1) {\"name\" => \"隔壁老王\"}\n```\n\n## get( )\n\n`get()` 方法作用 : 获取指定键名的键值 , 返回键值\n\n```js\nlet map = new Map([\n  [\"name\", \"前端君\"],\n  [\"age\", 20],\n]);\nconsole.log(map.get(\"name\")); // 前端君\nconsole.log(map.get(\"age\")); // 20\nconsole.log(map.get(\"gender\")); // undefined\n```\n\n## delete( )\n\n`delete()` 方法作用 : 删除指定的键值对 , 删除成功返回 : `true` , 否则返回 : `false`\n\n```js\nlet map = new Map();\nmap.set(\"name\", \"前端君\");\nconsole.log(map); // Map(1) {\"name\" => \"前端君\"}\nconsole.log(map.delete(\"name\")); // true\nconsole.log(map.delete(\"name\")); // false\n```\n\n## clear( )\n\n跟 `Set` 结构一样 , `Map` 结构也提供了 `clear()` 方法 , 让你一次性删除所有键值对\n\n```js\nlet map = new Map();\nmap.set(\"name\", \"前端君\");\nmap.set(\"gender\", 1);\nmap.clear();\nconsole.log(map); // Map(0) {}\n```\n\n## has( )\n\n`has()` 方法作用 : 判断 `Map` 实例内是否含有指定的键值对 , 有就返回 : `true` , 否则返回 : `false`\n\n```js\nlet map = new Map();\nmap.set(\"name\", \"前端君\");\nconsole.log(map.has(\"name\")); // 结果 : true\nconsole.log(map.has(\"age\")); // 结果 : false\n```\n\n## entries()\n\n`entries()` 方法作用 : 返回实例的键值对遍历器\n\n```js\nlet map = new Map([\n  [\"name\", \"前端君\"],\n  [\"age\", 25],\n]);\nfor (let [key, value] of map.entries()) {\n  console.log(key + \"  \" + value);\n}\n// 打印结果\n//  name  前端君\n//  age  25\n```\n\n## keys( ) 和 values( )\n\n`keys()` 方法 : 返回实例所有键名的遍历器\n`values()` 方法 : 返回实例所有键值的遍历器\n\n## forEach( )\n\n```js\nlet map = new Map([\n  [\"name\", \"前端君\"],\n  [\"age\", 25],\n]);\nmap.forEach(function (value, key) {\n  console.log(key + \" \" + value);\n});\n// 打印结果\n//  name 前端君\n//  age 25\n```\n\n## size 属性\n\n获取实例的成员数\n\n```js\nlet map = new Map();\nmap.set(1, 3);\nmap.set(\"1\", \"3\");\nconsole.log(map.size); // 结果: 2\n```\n\n## 什么是 WeakMap\n\n`WeakMap` 结构和 `Map` 结构很类似 , 不同点在于 `WeakMap` 结构的键名只支持引用类型的数据 , 比如 : 数组 , 对象 , 函数\n\n## WeakMap 的基本用法\n\n`WeakMap` 结构的使用方式和 `Map` 结构一样\n\n```js\nlet wm = new WeakMap();\n```\n\n两者都是使用 `new` 来创建实例 , 如果添加键值对的话 , 我们同样是使用 `set` 方法 , 不过键名的类型必须要求是引用类型的值\n\n```js\nlet wm = new WeakMap();\n// 数组类型的键名\nwm.set([1], 2);\n// 对象类型的键名\nwm.set({ name: \"Zhangsan\" }, 2);\n// 函数类型的键名\nfunction fn() {}\nwm.set(fn, 2);\nconsole.log(wm); // WeakMap {ƒ => 2, {…} => 2, Array(1) => 2}\n```\n\n从打印结果可以看出 , 以上类型的键名都可以成功添加到 `WeakMap` 实例中\n\n## WeakMap 与 Map 的区别\n\n如果是普通的值类型则不允许 , 比如 : `String` , `Number` , `null` , `undefined` , `boolean` , 而 `Map` 结构是允许的 , 这就是两者的不同之处 , 谨记\n\n跟 `Map` 一样 , `WeakMap` 也拥有 `get` , `has` , `delete` 方法 , 用法和用途都一样 , 不同地方在于 , `WeakMap` 不支持 `clear` 方法 , 不支持遍历 , 也就没有了 `keys` , `values` , `entries` , `forEach` 这 4 个方法 , 也没有属性 `size`\n\n理由跟 `WeakSet` 结构一样 : 键名中的引用类型是弱引用 , 你永远不知道这个引用对象什么时候会被垃圾回收机制回收了 , 如果这个引用类型的值被垃圾机制回收了 , `WeakMap` 实例中的对应键值对也会消失。\n","slug":"js/es6-day04","published":1,"updated":"2021-06-25T09:06:29.066Z","layout":"post","photos":[],"link":"","_id":"cksvxwnng001agubq2tddh0z4","content":"<h1 id=\"Iterator-遍历器\"><a href=\"#Iterator-遍历器\" class=\"headerlink\" title=\"Iterator 遍历器\"></a>Iterator 遍历器</h1><h2 id=\"for…of-为什么不遍历-object-对象\"><a href=\"#for…of-为什么不遍历-object-对象\" class=\"headerlink\" title=\"for…of 为什么不遍历 object 对象\"></a>for…of 为什么不遍历 object 对象</h2><p>要想能够被 <code>for...of</code> 正常遍历的 , 都需要实现一个遍历器 <code>Iterator</code> , 而数组 , <code>Set</code> 和 <code>Map</code> 结构 , 早就内置好了遍历器 <code>Iterator</code> ( 又叫迭代器 ) , 它们的原型中都有一个 <code>Symbol.iterator</code> 方法 : 而 <code>Object</code> 对象并没有实现这个接口 , 使得它无法被 <code>for...of</code> 遍历</p>\n<p>验证一下 , 它们的原型中到底是不是有个叫 <code>Symbol.iterator</code> 的方法:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//数组</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Array</span>.prototype[<span class=\"built_in\">Symbol</span>.iterator]); <span class=\"comment\">//结果 : function values()&#123;...&#125;</span></span><br><span class=\"line\"><span class=\"comment\">//字符串</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">String</span>.prototype[<span class=\"built_in\">Symbol</span>.iterator]); <span class=\"comment\">//结果 : function [Symbol.iterator]()&#123;...&#125;</span></span><br><span class=\"line\"><span class=\"comment\">//Set结构</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Set</span>.prototype[<span class=\"built_in\">Symbol</span>.iterator]); <span class=\"comment\">//结果 : function values()&#123;...&#125;</span></span><br><span class=\"line\"><span class=\"comment\">//Map结构</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Map</span>.prototype[<span class=\"built_in\">Symbol</span>.iterator]); <span class=\"comment\">//结果 : function entries()&#123;...&#125;</span></span><br><span class=\"line\"><span class=\"comment\">//Object对象</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.prototype[<span class=\"built_in\">Symbol</span>.iterator]); <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n\n<p>唯独 <code>Object</code> 对象的原型上没有 <code>Symbol.iterator</code> , 返回了 : <code>undefined</code> , 其他的数据类型的原型上都含有一个名字叫 <code>Symbol.iterator</code> 的方法</p>\n<p><strong>注意</strong> : <code>Symbol.iterator</code> 是 <code>Symbol</code> 对象的 <code>iterator</code> 属性 , 是一个特殊的 <code>Symbol</code> 值 , 因此 , 当它作为 <code>prototype</code> 对象属性名的时候 , 获取它的时候需要使用 <code>[]</code> 的形式: <code>prototype[Symbol.iterator]</code> , 不能使用点形式获取 : prototype.Symbol.iterator<br>也就说 , 只要一个数据结构拥有一个叫 <code>[Symbol.iterator]()</code> 方法的数据结构 , 就可以被 <code>for...of</code> 遍历</p>\n<h2 id=\"Iterator-原理\"><a href=\"#Iterator-原理\" class=\"headerlink\" title=\"Iterator 原理\"></a>Iterator 原理</h2><p>当可遍历对象被 <code>for...of</code> 遍历的时候 , <code>[Symbol.iterator]()</code> 就会被调用 , 返回一个 <code>iterator</code> 对象 , <code>iterator</code> 对象里有一个很重要的方法 : <code>next()</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;c&quot;</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> iterator = arr[<span class=\"built_in\">Symbol</span>.iterator]();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator); <span class=\"comment\">// Array Iterator &#123;&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: &quot;a&quot;, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: &quot;b&quot;, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: &quot;c&quot;, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>第 1 次调用 <code>next()</code> 方法 : 返回数组的第 1 个元素 : “a” , 以及 <code>done</code> 的值为 <code>fasle</code> , 表示循环没有结束 , 继续遍历<br>第 2 次调用 <code>next()</code> 方法 : 返回数组的第 2 个元素 : “b” , 以及 <code>done</code> 的值还是为 <code>fasle</code> , 表示循环没有结束 , 继续遍历<br>第 3 次调用 <code>next()</code> 方法 : 返回数组的第 3 个元素 : “c” , 以及 <code>done</code> 的值依然为 <code>fasle</code> , 表示循环没有结束 , 继续遍历<br>第 4 次调用 <code>next()</code> 方法 : 返回的 value 值为 undefined , 以及 <code>done</code> 的值变成了 <code>true</code> , 表示遍历结束</p>\n<p><code>for...of</code> 的原理就是 : 先调用可遍历对象的 <code>[Symbol.iterator]()</code> 方法 , 得到一个 <code>iterator</code> 遍历器对象 , 然后就在遍历器上不断调用 <code>next()</code> 方法 , 直到 <code>done</code> 的值为 <code>true</code> 的时候 , 就表示遍历完成结束了</p>\n<h2 id=\"自定义-Iterator-遍历器\"><a href=\"#自定义-Iterator-遍历器\" class=\"headerlink\" title=\"自定义 Iterator 遍历器\"></a>自定义 Iterator 遍历器</h2><p>给一个 <code>Object</code> 对象加一个 <code>[Symbol.iterator]()</code> 方法 , 看看它是不是就能被 <code>for...of</code> 遍历了</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;张三&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">20</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 自定义 [Symbol.iterator] 迭代器</span></span><br><span class=\"line\">obj[<span class=\"built_in\">Symbol</span>.iterator] = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 获取到对象的每个 key 值返回一个数组</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> keys = <span class=\"built_in\">Object</span>.keys(obj);</span><br><span class=\"line\">  <span class=\"comment\">// 获取到 key 值 ( 对象 ) 的长度</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> length = keys.length;</span><br><span class=\"line\">  <span class=\"comment\">// 定义循环变量</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 返回对象:每次迭代会自动调用返回对象里面的 next() 方法</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">next</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 返回值有 value 和 done</span></span><br><span class=\"line\">      <span class=\"comment\">// value 能自定义</span></span><br><span class=\"line\">      <span class=\"comment\">// done为 true 时跳出循环</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> index &lt; length</span><br><span class=\"line\">        ? &#123;</span><br><span class=\"line\">            <span class=\"attr\">value</span>: &#123; <span class=\"attr\">k</span>: keys[index], <span class=\"attr\">v</span>: obj[keys[index++]] &#125;,</span><br><span class=\"line\">            <span class=\"attr\">done</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        : &#123;</span><br><span class=\"line\">            <span class=\"attr\">done</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          &#125;;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>现在用 for…of 试一下能不能遍历此对象</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> &#123; k, v &#125; <span class=\"keyword\">of</span> obj) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(k, v);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 打印结果:</span></span><br><span class=\"line\"><span class=\"comment\">//  name 张三</span></span><br><span class=\"line\"><span class=\"comment\">//  age 20</span></span><br></pre></td></tr></table></figure>\n\n<p>我们定义了一个 <code>Object</code> 对象 , 同时给它添加了 <code>[Symbol.iterator]()</code> 方法 , 并在 <code>[Symbol.iterator]()</code> 方法返回的对象里实现了 <code>next()</code>方法 , <code>next()</code> 方法返回的对象包含了 <code>value</code> 属性和 <code>done</code> 属性</p>\n<p>也就是说可以通过添加 <code>[Symbol.iterator]()</code> 方法 , 把一个不可遍历的 <code>Object</code> 对象 , 变成可遍历的对象</p>\n<h1 id=\"Generator-函数\"><a href=\"#Generator-函数\" class=\"headerlink\" title=\"Generator 函数\"></a>Generator 函数</h1><h2 id=\"声明-Generator-函数\"><a href=\"#声明-Generator-函数\" class=\"headerlink\" title=\"声明 Generator 函数\"></a>声明 Generator 函数</h2><p><code>Generator</code> 函数 , 又称生成器函数 , 是 <code>ES6</code> 的一个重要的新特性</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 声明一个 hello 的 Generator 函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">hello</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">`hello <span class=\"subst\">$&#123;name&#125;</span>`</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">`bye`</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"调用-Generator-函数\"><a href=\"#调用-Generator-函数\" class=\"headerlink\" title=\"调用 Generator 函数\"></a>调用 Generator 函数</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 声明一个 hello 的 Generator 函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">hello</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">`hello <span class=\"subst\">$&#123;name&#125;</span>`</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">`bye`</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调用 hello 函数</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> ite = hello(<span class=\"string\">&quot;前端君&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ite.next()); <span class=\"comment\">// &#123;value: &quot;hello 前端君&quot;, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ite.next()); <span class=\"comment\">// &#123;value: &quot;bye&quot;, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ite.next()); <span class=\"comment\">// &#123;value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>一开始 , 调用 <code>hello(&quot;前端君&quot;)</code> , 函数执行后 , 返回了一个 : <code>[object Genrator]</code> 生成器对象 , 这里生成器的 <code>next()</code> 方法的和遍历器 <code>iterator</code> 的 <code>next()</code> 方法的返回结果很像<br>可以把 <code>Generator</code> 函数被调用后得到的生成器理解成一个遍历器 <code>iterator</code> , 用于遍历函数内部的状态</p>\n<h2 id=\"Generator-函数的行为\"><a href=\"#Generator-函数的行为\" class=\"headerlink\" title=\"Generator 函数的行为\"></a>Generator 函数的行为</h2><p><code>Generator</code> 函数被调用后并不会一直执行到最后 , 它是先回返回一个生成器对象 , 然后暂停 , 等到生成器对象的 <code>next()</code> 方法被调用后 , 函数才会继续执行 , 直到遇到关键字 <code>yield</code> 后 , 又会停止执行 , 并返回一个 <code>Object</code> 对象 , 然后继续等待 , 直到 <code>next()</code> 再一次被调用的时候 , 才会继续接着往下执行 , 直到 <code>done</code> 的值为 <code>true</code></p>\n<h2 id=\"yield-语句的使用\"><a href=\"#yield-语句的使用\" class=\"headerlink\" title=\"yield 语句的使用\"></a>yield 语句的使用</h2><p><code>yield</code> 有点像传统函数的 <code>return</code> 的作用 , 但不同的是普通函数只能 <code>return</code> 一次 , 但是 <code>Generator</code> 函数可以有很多个 <code>yield</code> , 而 <code>return</code> 代表的是终止执行 , <code>yield</code> 代表的是暂停执行 , 后续通过调用生成器的 <code>next()</code> 方法 , 可以恢复执行</p>\n<h2 id=\"next-方法接收参数\"><a href=\"#next-方法接收参数\" class=\"headerlink\" title=\"next 方法接收参数\"></a>next 方法接收参数</h2><p><code>next()</code> 方法还可以接受一个参数 , 它的参数会作为上一个 <code>yield</code> 的返回值</p>\n<p><strong>案例</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">gen</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> params = <span class=\"keyword\">yield</span> <span class=\"number\">2</span>; <span class=\"comment\">// params =  3</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> params1 = <span class=\"keyword\">yield</span> <span class=\"number\">3</span>; <span class=\"comment\">// params1= 1</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> params2 = <span class=\"keyword\">yield</span> params1 + <span class=\"number\">6</span>; <span class=\"comment\">// params2 = 7</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> params3 = <span class=\"keyword\">yield</span> <span class=\"number\">7</span>; <span class=\"comment\">// params3 = 4</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> params2 * params + params3;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> lt = gen();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(lt.next()); <span class=\"comment\">// &#123; value: 2, done: false &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(lt.next(<span class=\"number\">3</span>)); <span class=\"comment\">// &#123; value: 3, done: false &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(lt.next(lt.next(<span class=\"number\">1</span>).value)); <span class=\"comment\">// &#123; value: 7, done: false &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(lt.next(<span class=\"number\">4</span>)); <span class=\"comment\">// &#123; value: 25, done: true &#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"关键字-yield\"><a href=\"#关键字-yield\" class=\"headerlink\" title=\"关键字 yield*\"></a>关键字 yield*</h2><p>在一个 <code>Generator</code> 函数里面 , 如果我们想调用另一个 <code>Generator</code> 函数 , 就需要用到的关键字是 : yield*</p>\n<p><strong>案例</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 声明 Generator 函数 : gen1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">gen1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">&quot;gen1 start&quot;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">&quot;gen1 end&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 声明 Generator 函数 : gen2</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">gen2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">&quot;gen2 start&quot;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">&quot;gen2 end&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 声明 Generator 函数 : start</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">start</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">&quot;start&quot;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span>* gen1();</span><br><span class=\"line\">  <span class=\"keyword\">yield</span>* gen2();</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">&quot;end&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调用 start 函数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> ite = start(); <span class=\"comment\">// 创建一个生成器</span></span><br><span class=\"line\">ite.next(); <span class=\"comment\">// &#123;value: &quot;start&quot;, done: false&#125;</span></span><br><span class=\"line\">ite.next(); <span class=\"comment\">// &#123;value: &quot;gen1 start&quot;, done: false&#125;</span></span><br><span class=\"line\">ite.next(); <span class=\"comment\">// &#123;value: &quot;gen1 end&quot;, done: false&#125;</span></span><br><span class=\"line\">ite.next(); <span class=\"comment\">// &#123;value: &quot;gen2 start&quot;, done: false&#125;</span></span><br><span class=\"line\">ite.next(); <span class=\"comment\">// &#123;value: &quot;gen2 end&quot;, done: false&#125;</span></span><br><span class=\"line\">ite.next(); <span class=\"comment\">// &#123;value: &quot;end&quot;, done: false&#125;</span></span><br><span class=\"line\">ite.next(); <span class=\"comment\">// &#123;value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Generator-函数的用途\"><a href=\"#Generator-函数的用途\" class=\"headerlink\" title=\"Generator 函数的用途\"></a>Generator 函数的用途</h2><p>是 <code>ES6</code> 的一个很重要的新特性 , 它可以控制函数的内部状态 , 依次遍历每个状态 ; 可以根据需要 , 轻松地让函数暂停执行或者继续执行 , 根据这个特点 , 我们可以利用 <code>Generator</code> 函数来实现异步操作的效果</p>\n<h1 id=\"Set-和-WeakSet-用法\"><a href=\"#Set-和-WeakSet-用法\" class=\"headerlink\" title=\"Set 和 WeakSet 用法\"></a>Set 和 WeakSet 用法</h1><h2 id=\"什么是-Set\"><a href=\"#什么是-Set\" class=\"headerlink\" title=\"什么是 Set\"></a>什么是 Set</h2><p><code>Set</code> 是 <code>ES6</code> 给开发者带来的一种新的数据结构 , 你可以理解为值的集合 , 我们平时见到的数组 <code>Array</code> 也是一种数据结构 , 但是 <code>Set</code> 跟其他数据结构不同的地方就在于 : 它的值不会有重复项</p>\n<h2 id=\"Set-的基本用法\"><a href=\"#Set-的基本用法\" class=\"headerlink\" title=\"Set 的基本用法\"></a>Set 的基本用法</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> set1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(set1); <span class=\"comment\">// Set(0) &#123;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> set2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(set2); <span class=\"comment\">// Set(3) &#123;1, 2, 3&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> set3 = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>();</span><br><span class=\"line\">set3.add(<span class=\"number\">4</span>);</span><br><span class=\"line\">set3.add(<span class=\"number\">5</span>);</span><br><span class=\"line\">set3.add(<span class=\"number\">6</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(set3); <span class=\"comment\">// Set(3) &#123;4, 5, 6&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Set-成员值唯一\"><a href=\"#Set-成员值唯一\" class=\"headerlink\" title=\"Set 成员值唯一\"></a>Set 成员值唯一</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> set = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>();</span><br><span class=\"line\">set.add(<span class=\"number\">1</span>);</span><br><span class=\"line\">set.add(<span class=\"number\">1</span>);</span><br><span class=\"line\">set.add(<span class=\"number\">2</span>);</span><br><span class=\"line\">set.add(<span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(set); <span class=\"comment\">// Set(2) &#123;1, 2&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"size-属性\"><a href=\"#size-属性\" class=\"headerlink\" title=\"size 属性\"></a>size 属性</h2><p><code>size</code> 属性 : 获取成员的个数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> set = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(set); <span class=\"comment\">// 5</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"delete\"><a href=\"#delete\" class=\"headerlink\" title=\"delete( )\"></a>delete( )</h2><p><code>delete()</code> 方法 : 用户删除 <code>Set</code> 结构中的指定值 , 删除成功返回 : <code>true</code> , 删除失败返回 : <code>fasle</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> set = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>]);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(set); <span class=\"comment\">// Set(4) &#123;5, 6, 7, 8&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(set.delete(<span class=\"number\">8</span>)); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(set.delete(<span class=\"number\">8</span>)); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(set); <span class=\"comment\">// Set(3) &#123;5, 6, 7&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"clear\"><a href=\"#clear\" class=\"headerlink\" title=\"clear( )\"></a>clear( )</h2><p><code>clear()</code> 方法 : 清除所有成员 , 一个不留</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> set = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>]);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(set); <span class=\"comment\">// Set(4) &#123;5, 6, 7, 8&#125;</span></span><br><span class=\"line\">set.clear();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(set); <span class=\"comment\">// Set(0) &#123;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"has\"><a href=\"#has\" class=\"headerlink\" title=\"has( )\"></a>has( )</h2><p><code>has()</code> 方法 : 判断 <code>set</code> 结构中是否含有指定的值 , 如果有 , 返回 <code>true</code> , 如果没有 , 返回 <code>fasle</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> set = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(set.has(<span class=\"number\">1</span>)); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(set.has(<span class=\"number\">6</span>)); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"entries\"><a href=\"#entries\" class=\"headerlink\" title=\"entries( )\"></a>entries( )</h2><p><code>entries()</code> 方法 : 返回一个键值对的遍历器</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> set = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;c&quot;</span>]);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(set.entries()); <span class=\"comment\">// SetIterator &#123;&quot;a&quot; =&gt; &quot;a&quot;, &quot;b&quot; =&gt; &quot;b&quot;, &quot;c&quot; =&gt; &quot;c&quot;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>注意得到的结果 , 成员值 <code>a</code> 对应的键值对是 <code>[&quot;a&quot;,&quot;a&quot;]</code> , 也就是说 : <code>Set</code> 结构是键名和键值是同一个值</p>\n<h2 id=\"keys-和-values\"><a href=\"#keys-和-values\" class=\"headerlink\" title=\"keys( ) 和 values( )\"></a>keys( ) 和 values( )</h2><p><code>keys()</code> 方法 : 返回键名的遍历器<br><code>values()</code> 方法 : 返回键值的遍历器</p>\n<h2 id=\"forEach\"><a href=\"#forEach\" class=\"headerlink\" title=\"forEach( )\"></a>forEach( )</h2><p>使用方式跟数组的 <code>forEach</code> 一样 , 当然 , 得到的 <code>value</code> 是 <code>key</code> 的值是一样的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> set = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;c&quot;</span>]);</span><br><span class=\"line\"><span class=\"comment\">// 使用回调函数遍历每个成员</span></span><br><span class=\"line\">set.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value, key</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(value, key);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\"><span class=\"comment\">// a a</span></span><br><span class=\"line\"><span class=\"comment\">// b b</span></span><br><span class=\"line\"><span class=\"comment\">// c c</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"set-用途之一\"><a href=\"#set-用途之一\" class=\"headerlink\" title=\"set 用途之一\"></a>set 用途之一</h2><p><strong>数组去重</strong> , 顺便我们把它封装成一个函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">4</span>, <span class=\"number\">4</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 数组去重</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deduplication</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Array</span>.from(<span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(arr));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(deduplication(arr));</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Weakset-结构\"><a href=\"#Weakset-结构\" class=\"headerlink\" title=\"Weakset 结构\"></a>Weakset 结构</h2><p><code>WeakSet</code> 结构同样不会存储重复的值 , 不同的是 , 它的成员必须是对象类型的值 , 否则就会报错</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ws = <span class=\"keyword\">new</span> <span class=\"built_in\">WeakSet</span>([&#123; <span class=\"attr\">age</span>: <span class=\"number\">18</span> &#125;]);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 错误示范</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> ws = <span class=\"keyword\">new</span> <span class=\"built_in\">WeakSet</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>]);</span><br></pre></td></tr></table></figure>\n\n<p>实际上 , 任何可遍历的对象 , 都可以作为 <code>WeakSet</code> 的初始化参数 , 比如 : <strong>数组</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr1 = [<span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = [<span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"comment\">// 初始化一个 WeakSet 对象,参数是 数组 类型</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> ws = <span class=\"keyword\">new</span> <span class=\"built_in\">WeakSet</span>([arr1, arr2]); <span class=\"comment\">//结果 : WeakSet &#123;Object &#123;age: 18&#125;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>同样 , <code>WeakSet</code> 结构也提供了 <code>add()</code> 方法 , <code>delete()</code> 方法 , <code>has()</code> 方法给开发者使用 , 作用与用法跟 <code>Set</code> 结构完全一致</p>\n<p>另一个不同点是 : <code>WeakSet</code> 结构不可遍历 , 因为它的成员都是对象的弱引用 , 随时被回收机制回收 , 成员消失 , 所以 WeakSet 结构不会有 <code>keys()</code> , <code>values()</code> , <code>entries()</code> , <code>forEach()</code> 等方法和 <code>size</code> 属性</p>\n<h1 id=\"Map-和-WeakMap\"><a href=\"#Map-和-WeakMap\" class=\"headerlink\" title=\"Map 和 WeakMap\"></a>Map 和 WeakMap</h1><h2 id=\"什么是-Map\"><a href=\"#什么是-Map\" class=\"headerlink\" title=\"什么是 Map\"></a>什么是 Map</h2><p><code>ES6</code> 提供了 <code>Map</code> 结构给我们使用 , 它跟 <code>Object</code> 对象很像 , 但是不同的是 , 它的 <code>key</code> 键名的类型不再局限于字符串类型了 , 它可以是各种类型的值 ; 可以说 , 它比 <code>Object</code> 对象更加灵活了 , 当然 , 也更加复杂了。</p>\n<h2 id=\"Map-的基本用法\"><a href=\"#Map-的基本用法\" class=\"headerlink\" title=\"Map 的基本用法\"></a>Map 的基本用法</h2><p>跟 <code>Set</code> 类似</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> map1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(map1); <span class=\"comment\">// Map(0) &#123;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> map2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([</span><br><span class=\"line\">  [<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;前端君&quot;</span>],</span><br><span class=\"line\">  [<span class=\"string\">&quot;gender&quot;</span>, <span class=\"number\">1</span>],</span><br><span class=\"line\">]);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(map2); <span class=\"comment\">// Map(2) &#123;&quot;name&quot; =&gt; &quot;前端君&quot;, &quot;gender&quot; =&gt; 1&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>Map()</code> 方法里面的参数 , 首先它是一个数组 , 而里面的内容也是由多个数组组成 , <code>&quot;name&quot;</code> : <code>&quot;前端君&quot;</code> 作为一个键值对 , 将它们装在一个数组里面 , <code>[&quot;name&quot;,&quot;前端君&quot;]</code> , 另外一组键值对也一样 : <code>[&quot;gender&quot;,1]</code> 这就是初始化一个 <code>Map</code> 结构实例的基本写法</p>\n<h2 id=\"set\"><a href=\"#set\" class=\"headerlink\" title=\"set( )\"></a>set( )</h2><p><code>set()</code> 方法作用 : 给实例设置一对键值对 , 返回 <code>map</code> 实例</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\"><span class=\"comment\">// 添加一个 string 类型的键名</span></span><br><span class=\"line\">map.set(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;前端君&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 添加一个数字类型的键名</span></span><br><span class=\"line\">map.set(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(map); <span class=\"comment\">// Map(2) &#123;&quot;name&quot; =&gt; &quot;前端君&quot;, 1 =&gt; 2&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>Map</code> 结构可以存储非字符串类型的键名 , 当然还可以设置更多其它类型的键名 , 比如更过分点的 :</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 数组类型的键名</span></span><br><span class=\"line\">map.set([<span class=\"number\">1</span>], <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"comment\">// 对象类型的键名</span></span><br><span class=\"line\">map.set(&#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;Zhangsan&quot;</span> &#125;, <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"comment\">// 布尔类型的键名</span></span><br><span class=\"line\">map.set(<span class=\"literal\">true</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"comment\">// Symbol 类型的键名</span></span><br><span class=\"line\">map.set(<span class=\"built_in\">Symbol</span>(<span class=\"string\">&quot;name&quot;</span>), <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"comment\">// null 为键名</span></span><br><span class=\"line\">map.set(<span class=\"literal\">null</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"comment\">// undefined 为键名</span></span><br><span class=\"line\">map.set(<span class=\"literal\">undefined</span>, <span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n\n<p>使用 <code>set</code> 方法的时候有一点需要注意 , 如果你设置一个已经存在的键名 , 那么后面的键值会覆盖前面的键值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">map.set(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;前端君&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(map); <span class=\"comment\">// 结果 : Map(1) &#123;&quot;name&quot; =&gt; &quot;前端君&quot;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// 再次设置 name 的值</span></span><br><span class=\"line\">map.set(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;隔壁老王&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(map); <span class=\"comment\">// 结果 : Map(1) &#123;&quot;name&quot; =&gt; &quot;隔壁老王&quot;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"get\"><a href=\"#get\" class=\"headerlink\" title=\"get( )\"></a>get( )</h2><p><code>get()</code> 方法作用 : 获取指定键名的键值 , 返回键值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([</span><br><span class=\"line\">  [<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;前端君&quot;</span>],</span><br><span class=\"line\">  [<span class=\"string\">&quot;age&quot;</span>, <span class=\"number\">20</span>],</span><br><span class=\"line\">]);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(map.get(<span class=\"string\">&quot;name&quot;</span>)); <span class=\"comment\">// 前端君</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(map.get(<span class=\"string\">&quot;age&quot;</span>)); <span class=\"comment\">// 20</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(map.get(<span class=\"string\">&quot;gender&quot;</span>)); <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"delete-1\"><a href=\"#delete-1\" class=\"headerlink\" title=\"delete( )\"></a>delete( )</h2><p><code>delete()</code> 方法作用 : 删除指定的键值对 , 删除成功返回 : <code>true</code> , 否则返回 : <code>false</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">map.set(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;前端君&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(map); <span class=\"comment\">// Map(1) &#123;&quot;name&quot; =&gt; &quot;前端君&quot;&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(map.delete(<span class=\"string\">&quot;name&quot;</span>)); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(map.delete(<span class=\"string\">&quot;name&quot;</span>)); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"clear-1\"><a href=\"#clear-1\" class=\"headerlink\" title=\"clear( )\"></a>clear( )</h2><p>跟 <code>Set</code> 结构一样 , <code>Map</code> 结构也提供了 <code>clear()</code> 方法 , 让你一次性删除所有键值对</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">map.set(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;前端君&quot;</span>);</span><br><span class=\"line\">map.set(<span class=\"string\">&quot;gender&quot;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">map.clear();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(map); <span class=\"comment\">// Map(0) &#123;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"has-1\"><a href=\"#has-1\" class=\"headerlink\" title=\"has( )\"></a>has( )</h2><p><code>has()</code> 方法作用 : 判断 <code>Map</code> 实例内是否含有指定的键值对 , 有就返回 : <code>true</code> , 否则返回 : <code>false</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">map.set(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;前端君&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(map.has(<span class=\"string\">&quot;name&quot;</span>)); <span class=\"comment\">// 结果 : true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(map.has(<span class=\"string\">&quot;age&quot;</span>)); <span class=\"comment\">// 结果 : false</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"entries-1\"><a href=\"#entries-1\" class=\"headerlink\" title=\"entries()\"></a>entries()</h2><p><code>entries()</code> 方法作用 : 返回实例的键值对遍历器</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([</span><br><span class=\"line\">  [<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;前端君&quot;</span>],</span><br><span class=\"line\">  [<span class=\"string\">&quot;age&quot;</span>, <span class=\"number\">25</span>],</span><br><span class=\"line\">]);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [key, value] <span class=\"keyword\">of</span> map.entries()) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(key + <span class=\"string\">&quot;  &quot;</span> + value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\"><span class=\"comment\">//  name  前端君</span></span><br><span class=\"line\"><span class=\"comment\">//  age  25</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"keys-和-values-1\"><a href=\"#keys-和-values-1\" class=\"headerlink\" title=\"keys( ) 和 values( )\"></a>keys( ) 和 values( )</h2><p><code>keys()</code> 方法 : 返回实例所有键名的遍历器<br><code>values()</code> 方法 : 返回实例所有键值的遍历器</p>\n<h2 id=\"forEach-1\"><a href=\"#forEach-1\" class=\"headerlink\" title=\"forEach( )\"></a>forEach( )</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([</span><br><span class=\"line\">  [<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;前端君&quot;</span>],</span><br><span class=\"line\">  [<span class=\"string\">&quot;age&quot;</span>, <span class=\"number\">25</span>],</span><br><span class=\"line\">]);</span><br><span class=\"line\">map.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value, key</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(key + <span class=\"string\">&quot; &quot;</span> + value);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\"><span class=\"comment\">//  name 前端君</span></span><br><span class=\"line\"><span class=\"comment\">//  age 25</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"size-属性-1\"><a href=\"#size-属性-1\" class=\"headerlink\" title=\"size 属性\"></a>size 属性</h2><p>获取实例的成员数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">map.set(<span class=\"number\">1</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">map.set(<span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&quot;3&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(map.size); <span class=\"comment\">// 结果: 2</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"什么是-WeakMap\"><a href=\"#什么是-WeakMap\" class=\"headerlink\" title=\"什么是 WeakMap\"></a>什么是 WeakMap</h2><p><code>WeakMap</code> 结构和 <code>Map</code> 结构很类似 , 不同点在于 <code>WeakMap</code> 结构的键名只支持引用类型的数据 , 比如 : 数组 , 对象 , 函数</p>\n<h2 id=\"WeakMap-的基本用法\"><a href=\"#WeakMap-的基本用法\" class=\"headerlink\" title=\"WeakMap 的基本用法\"></a>WeakMap 的基本用法</h2><p><code>WeakMap</code> 结构的使用方式和 <code>Map</code> 结构一样</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> wm = <span class=\"keyword\">new</span> <span class=\"built_in\">WeakMap</span>();</span><br></pre></td></tr></table></figure>\n\n<p>两者都是使用 <code>new</code> 来创建实例 , 如果添加键值对的话 , 我们同样是使用 <code>set</code> 方法 , 不过键名的类型必须要求是引用类型的值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> wm = <span class=\"keyword\">new</span> <span class=\"built_in\">WeakMap</span>();</span><br><span class=\"line\"><span class=\"comment\">// 数组类型的键名</span></span><br><span class=\"line\">wm.set([<span class=\"number\">1</span>], <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"comment\">// 对象类型的键名</span></span><br><span class=\"line\">wm.set(&#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;Zhangsan&quot;</span> &#125;, <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"comment\">// 函数类型的键名</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">wm.set(fn, <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(wm); <span class=\"comment\">// WeakMap &#123;ƒ =&gt; 2, &#123;…&#125; =&gt; 2, Array(1) =&gt; 2&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>从打印结果可以看出 , 以上类型的键名都可以成功添加到 <code>WeakMap</code> 实例中</p>\n<h2 id=\"WeakMap-与-Map-的区别\"><a href=\"#WeakMap-与-Map-的区别\" class=\"headerlink\" title=\"WeakMap 与 Map 的区别\"></a>WeakMap 与 Map 的区别</h2><p>如果是普通的值类型则不允许 , 比如 : <code>String</code> , <code>Number</code> , <code>null</code> , <code>undefined</code> , <code>boolean</code> , 而 <code>Map</code> 结构是允许的 , 这就是两者的不同之处 , 谨记</p>\n<p>跟 <code>Map</code> 一样 , <code>WeakMap</code> 也拥有 <code>get</code> , <code>has</code> , <code>delete</code> 方法 , 用法和用途都一样 , 不同地方在于 , <code>WeakMap</code> 不支持 <code>clear</code> 方法 , 不支持遍历 , 也就没有了 <code>keys</code> , <code>values</code> , <code>entries</code> , <code>forEach</code> 这 4 个方法 , 也没有属性 <code>size</code></p>\n<p>理由跟 <code>WeakSet</code> 结构一样 : 键名中的引用类型是弱引用 , 你永远不知道这个引用对象什么时候会被垃圾回收机制回收了 , 如果这个引用类型的值被垃圾机制回收了 , <code>WeakMap</code> 实例中的对应键值对也会消失。</p>\n","site":{"data":{"link":{"class1":{"class_name":"舍友","link_list":{"1":{"name":"codeAntg","link":"https://blog.csdn.net/weixin_44745147","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/fjh.jpg","descr":"那家刀削面不错","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class2":{"class_name":"致谢","link_list":{"1":{"name":"JerrC","link":"https://immyw.com","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/immyw.png","descr":"今日事,今日毕","width":"1px","style":"solid","color":"#60d0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/hexo.svg","descr":"A fast, simple & powerful blog framework","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class3":{"class_name":"友人","link_list":{"1":{"name":"Chester","link":"http://chesterlds.cn","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/chester.jpg","descr":null,"width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Wangs","link":"https://wangsss.cn/","avatar":"https://wangsss.cn/img/avatar.png","descr":"不疯魔，不成活 ~","width":"1px","style":"solid","color":"#9d9d9d","custom":"link_custom1","time":"4s","namecolor":"0094ff","descolor":"#ff9191"}}}}}},"excerpt":"","more":"<h1 id=\"Iterator-遍历器\"><a href=\"#Iterator-遍历器\" class=\"headerlink\" title=\"Iterator 遍历器\"></a>Iterator 遍历器</h1><h2 id=\"for…of-为什么不遍历-object-对象\"><a href=\"#for…of-为什么不遍历-object-对象\" class=\"headerlink\" title=\"for…of 为什么不遍历 object 对象\"></a>for…of 为什么不遍历 object 对象</h2><p>要想能够被 <code>for...of</code> 正常遍历的 , 都需要实现一个遍历器 <code>Iterator</code> , 而数组 , <code>Set</code> 和 <code>Map</code> 结构 , 早就内置好了遍历器 <code>Iterator</code> ( 又叫迭代器 ) , 它们的原型中都有一个 <code>Symbol.iterator</code> 方法 : 而 <code>Object</code> 对象并没有实现这个接口 , 使得它无法被 <code>for...of</code> 遍历</p>\n<p>验证一下 , 它们的原型中到底是不是有个叫 <code>Symbol.iterator</code> 的方法:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//数组</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Array</span>.prototype[<span class=\"built_in\">Symbol</span>.iterator]); <span class=\"comment\">//结果 : function values()&#123;...&#125;</span></span><br><span class=\"line\"><span class=\"comment\">//字符串</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">String</span>.prototype[<span class=\"built_in\">Symbol</span>.iterator]); <span class=\"comment\">//结果 : function [Symbol.iterator]()&#123;...&#125;</span></span><br><span class=\"line\"><span class=\"comment\">//Set结构</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Set</span>.prototype[<span class=\"built_in\">Symbol</span>.iterator]); <span class=\"comment\">//结果 : function values()&#123;...&#125;</span></span><br><span class=\"line\"><span class=\"comment\">//Map结构</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Map</span>.prototype[<span class=\"built_in\">Symbol</span>.iterator]); <span class=\"comment\">//结果 : function entries()&#123;...&#125;</span></span><br><span class=\"line\"><span class=\"comment\">//Object对象</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Object</span>.prototype[<span class=\"built_in\">Symbol</span>.iterator]); <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n\n<p>唯独 <code>Object</code> 对象的原型上没有 <code>Symbol.iterator</code> , 返回了 : <code>undefined</code> , 其他的数据类型的原型上都含有一个名字叫 <code>Symbol.iterator</code> 的方法</p>\n<p><strong>注意</strong> : <code>Symbol.iterator</code> 是 <code>Symbol</code> 对象的 <code>iterator</code> 属性 , 是一个特殊的 <code>Symbol</code> 值 , 因此 , 当它作为 <code>prototype</code> 对象属性名的时候 , 获取它的时候需要使用 <code>[]</code> 的形式: <code>prototype[Symbol.iterator]</code> , 不能使用点形式获取 : prototype.Symbol.iterator<br>也就说 , 只要一个数据结构拥有一个叫 <code>[Symbol.iterator]()</code> 方法的数据结构 , 就可以被 <code>for...of</code> 遍历</p>\n<h2 id=\"Iterator-原理\"><a href=\"#Iterator-原理\" class=\"headerlink\" title=\"Iterator 原理\"></a>Iterator 原理</h2><p>当可遍历对象被 <code>for...of</code> 遍历的时候 , <code>[Symbol.iterator]()</code> 就会被调用 , 返回一个 <code>iterator</code> 对象 , <code>iterator</code> 对象里有一个很重要的方法 : <code>next()</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;c&quot;</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> iterator = arr[<span class=\"built_in\">Symbol</span>.iterator]();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator); <span class=\"comment\">// Array Iterator &#123;&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: &quot;a&quot;, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: &quot;b&quot;, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: &quot;c&quot;, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(iterator.next()); <span class=\"comment\">// &#123;value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>第 1 次调用 <code>next()</code> 方法 : 返回数组的第 1 个元素 : “a” , 以及 <code>done</code> 的值为 <code>fasle</code> , 表示循环没有结束 , 继续遍历<br>第 2 次调用 <code>next()</code> 方法 : 返回数组的第 2 个元素 : “b” , 以及 <code>done</code> 的值还是为 <code>fasle</code> , 表示循环没有结束 , 继续遍历<br>第 3 次调用 <code>next()</code> 方法 : 返回数组的第 3 个元素 : “c” , 以及 <code>done</code> 的值依然为 <code>fasle</code> , 表示循环没有结束 , 继续遍历<br>第 4 次调用 <code>next()</code> 方法 : 返回的 value 值为 undefined , 以及 <code>done</code> 的值变成了 <code>true</code> , 表示遍历结束</p>\n<p><code>for...of</code> 的原理就是 : 先调用可遍历对象的 <code>[Symbol.iterator]()</code> 方法 , 得到一个 <code>iterator</code> 遍历器对象 , 然后就在遍历器上不断调用 <code>next()</code> 方法 , 直到 <code>done</code> 的值为 <code>true</code> 的时候 , 就表示遍历完成结束了</p>\n<h2 id=\"自定义-Iterator-遍历器\"><a href=\"#自定义-Iterator-遍历器\" class=\"headerlink\" title=\"自定义 Iterator 遍历器\"></a>自定义 Iterator 遍历器</h2><p>给一个 <code>Object</code> 对象加一个 <code>[Symbol.iterator]()</code> 方法 , 看看它是不是就能被 <code>for...of</code> 遍历了</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;张三&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">20</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 自定义 [Symbol.iterator] 迭代器</span></span><br><span class=\"line\">obj[<span class=\"built_in\">Symbol</span>.iterator] = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 获取到对象的每个 key 值返回一个数组</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> keys = <span class=\"built_in\">Object</span>.keys(obj);</span><br><span class=\"line\">  <span class=\"comment\">// 获取到 key 值 ( 对象 ) 的长度</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> length = keys.length;</span><br><span class=\"line\">  <span class=\"comment\">// 定义循环变量</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"comment\">// 返回对象:每次迭代会自动调用返回对象里面的 next() 方法</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">next</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 返回值有 value 和 done</span></span><br><span class=\"line\">      <span class=\"comment\">// value 能自定义</span></span><br><span class=\"line\">      <span class=\"comment\">// done为 true 时跳出循环</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> index &lt; length</span><br><span class=\"line\">        ? &#123;</span><br><span class=\"line\">            <span class=\"attr\">value</span>: &#123; <span class=\"attr\">k</span>: keys[index], <span class=\"attr\">v</span>: obj[keys[index++]] &#125;,</span><br><span class=\"line\">            <span class=\"attr\">done</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        : &#123;</span><br><span class=\"line\">            <span class=\"attr\">done</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          &#125;;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>现在用 for…of 试一下能不能遍历此对象</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> &#123; k, v &#125; <span class=\"keyword\">of</span> obj) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(k, v);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 打印结果:</span></span><br><span class=\"line\"><span class=\"comment\">//  name 张三</span></span><br><span class=\"line\"><span class=\"comment\">//  age 20</span></span><br></pre></td></tr></table></figure>\n\n<p>我们定义了一个 <code>Object</code> 对象 , 同时给它添加了 <code>[Symbol.iterator]()</code> 方法 , 并在 <code>[Symbol.iterator]()</code> 方法返回的对象里实现了 <code>next()</code>方法 , <code>next()</code> 方法返回的对象包含了 <code>value</code> 属性和 <code>done</code> 属性</p>\n<p>也就是说可以通过添加 <code>[Symbol.iterator]()</code> 方法 , 把一个不可遍历的 <code>Object</code> 对象 , 变成可遍历的对象</p>\n<h1 id=\"Generator-函数\"><a href=\"#Generator-函数\" class=\"headerlink\" title=\"Generator 函数\"></a>Generator 函数</h1><h2 id=\"声明-Generator-函数\"><a href=\"#声明-Generator-函数\" class=\"headerlink\" title=\"声明 Generator 函数\"></a>声明 Generator 函数</h2><p><code>Generator</code> 函数 , 又称生成器函数 , 是 <code>ES6</code> 的一个重要的新特性</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 声明一个 hello 的 Generator 函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">hello</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">`hello <span class=\"subst\">$&#123;name&#125;</span>`</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">`bye`</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"调用-Generator-函数\"><a href=\"#调用-Generator-函数\" class=\"headerlink\" title=\"调用 Generator 函数\"></a>调用 Generator 函数</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 声明一个 hello 的 Generator 函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">hello</span>(<span class=\"params\">name</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">`hello <span class=\"subst\">$&#123;name&#125;</span>`</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">`bye`</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调用 hello 函数</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> ite = hello(<span class=\"string\">&quot;前端君&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ite.next()); <span class=\"comment\">// &#123;value: &quot;hello 前端君&quot;, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ite.next()); <span class=\"comment\">// &#123;value: &quot;bye&quot;, done: false&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(ite.next()); <span class=\"comment\">// &#123;value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>一开始 , 调用 <code>hello(&quot;前端君&quot;)</code> , 函数执行后 , 返回了一个 : <code>[object Genrator]</code> 生成器对象 , 这里生成器的 <code>next()</code> 方法的和遍历器 <code>iterator</code> 的 <code>next()</code> 方法的返回结果很像<br>可以把 <code>Generator</code> 函数被调用后得到的生成器理解成一个遍历器 <code>iterator</code> , 用于遍历函数内部的状态</p>\n<h2 id=\"Generator-函数的行为\"><a href=\"#Generator-函数的行为\" class=\"headerlink\" title=\"Generator 函数的行为\"></a>Generator 函数的行为</h2><p><code>Generator</code> 函数被调用后并不会一直执行到最后 , 它是先回返回一个生成器对象 , 然后暂停 , 等到生成器对象的 <code>next()</code> 方法被调用后 , 函数才会继续执行 , 直到遇到关键字 <code>yield</code> 后 , 又会停止执行 , 并返回一个 <code>Object</code> 对象 , 然后继续等待 , 直到 <code>next()</code> 再一次被调用的时候 , 才会继续接着往下执行 , 直到 <code>done</code> 的值为 <code>true</code></p>\n<h2 id=\"yield-语句的使用\"><a href=\"#yield-语句的使用\" class=\"headerlink\" title=\"yield 语句的使用\"></a>yield 语句的使用</h2><p><code>yield</code> 有点像传统函数的 <code>return</code> 的作用 , 但不同的是普通函数只能 <code>return</code> 一次 , 但是 <code>Generator</code> 函数可以有很多个 <code>yield</code> , 而 <code>return</code> 代表的是终止执行 , <code>yield</code> 代表的是暂停执行 , 后续通过调用生成器的 <code>next()</code> 方法 , 可以恢复执行</p>\n<h2 id=\"next-方法接收参数\"><a href=\"#next-方法接收参数\" class=\"headerlink\" title=\"next 方法接收参数\"></a>next 方法接收参数</h2><p><code>next()</code> 方法还可以接受一个参数 , 它的参数会作为上一个 <code>yield</code> 的返回值</p>\n<p><strong>案例</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">gen</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> params = <span class=\"keyword\">yield</span> <span class=\"number\">2</span>; <span class=\"comment\">// params =  3</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> params1 = <span class=\"keyword\">yield</span> <span class=\"number\">3</span>; <span class=\"comment\">// params1= 1</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> params2 = <span class=\"keyword\">yield</span> params1 + <span class=\"number\">6</span>; <span class=\"comment\">// params2 = 7</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> params3 = <span class=\"keyword\">yield</span> <span class=\"number\">7</span>; <span class=\"comment\">// params3 = 4</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> params2 * params + params3;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> lt = gen();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(lt.next()); <span class=\"comment\">// &#123; value: 2, done: false &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(lt.next(<span class=\"number\">3</span>)); <span class=\"comment\">// &#123; value: 3, done: false &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(lt.next(lt.next(<span class=\"number\">1</span>).value)); <span class=\"comment\">// &#123; value: 7, done: false &#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(lt.next(<span class=\"number\">4</span>)); <span class=\"comment\">// &#123; value: 25, done: true &#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"关键字-yield\"><a href=\"#关键字-yield\" class=\"headerlink\" title=\"关键字 yield*\"></a>关键字 yield*</h2><p>在一个 <code>Generator</code> 函数里面 , 如果我们想调用另一个 <code>Generator</code> 函数 , 就需要用到的关键字是 : yield*</p>\n<p><strong>案例</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 声明 Generator 函数 : gen1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">gen1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">&quot;gen1 start&quot;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">&quot;gen1 end&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 声明 Generator 函数 : gen2</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">gen2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">&quot;gen2 start&quot;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">&quot;gen2 end&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 声明 Generator 函数 : start</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">start</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">&quot;start&quot;</span>;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span>* gen1();</span><br><span class=\"line\">  <span class=\"keyword\">yield</span>* gen2();</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> <span class=\"string\">&quot;end&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 调用 start 函数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> ite = start(); <span class=\"comment\">// 创建一个生成器</span></span><br><span class=\"line\">ite.next(); <span class=\"comment\">// &#123;value: &quot;start&quot;, done: false&#125;</span></span><br><span class=\"line\">ite.next(); <span class=\"comment\">// &#123;value: &quot;gen1 start&quot;, done: false&#125;</span></span><br><span class=\"line\">ite.next(); <span class=\"comment\">// &#123;value: &quot;gen1 end&quot;, done: false&#125;</span></span><br><span class=\"line\">ite.next(); <span class=\"comment\">// &#123;value: &quot;gen2 start&quot;, done: false&#125;</span></span><br><span class=\"line\">ite.next(); <span class=\"comment\">// &#123;value: &quot;gen2 end&quot;, done: false&#125;</span></span><br><span class=\"line\">ite.next(); <span class=\"comment\">// &#123;value: &quot;end&quot;, done: false&#125;</span></span><br><span class=\"line\">ite.next(); <span class=\"comment\">// &#123;value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Generator-函数的用途\"><a href=\"#Generator-函数的用途\" class=\"headerlink\" title=\"Generator 函数的用途\"></a>Generator 函数的用途</h2><p>是 <code>ES6</code> 的一个很重要的新特性 , 它可以控制函数的内部状态 , 依次遍历每个状态 ; 可以根据需要 , 轻松地让函数暂停执行或者继续执行 , 根据这个特点 , 我们可以利用 <code>Generator</code> 函数来实现异步操作的效果</p>\n<h1 id=\"Set-和-WeakSet-用法\"><a href=\"#Set-和-WeakSet-用法\" class=\"headerlink\" title=\"Set 和 WeakSet 用法\"></a>Set 和 WeakSet 用法</h1><h2 id=\"什么是-Set\"><a href=\"#什么是-Set\" class=\"headerlink\" title=\"什么是 Set\"></a>什么是 Set</h2><p><code>Set</code> 是 <code>ES6</code> 给开发者带来的一种新的数据结构 , 你可以理解为值的集合 , 我们平时见到的数组 <code>Array</code> 也是一种数据结构 , 但是 <code>Set</code> 跟其他数据结构不同的地方就在于 : 它的值不会有重复项</p>\n<h2 id=\"Set-的基本用法\"><a href=\"#Set-的基本用法\" class=\"headerlink\" title=\"Set 的基本用法\"></a>Set 的基本用法</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> set1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(set1); <span class=\"comment\">// Set(0) &#123;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> set2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(set2); <span class=\"comment\">// Set(3) &#123;1, 2, 3&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> set3 = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>();</span><br><span class=\"line\">set3.add(<span class=\"number\">4</span>);</span><br><span class=\"line\">set3.add(<span class=\"number\">5</span>);</span><br><span class=\"line\">set3.add(<span class=\"number\">6</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(set3); <span class=\"comment\">// Set(3) &#123;4, 5, 6&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Set-成员值唯一\"><a href=\"#Set-成员值唯一\" class=\"headerlink\" title=\"Set 成员值唯一\"></a>Set 成员值唯一</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> set = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>();</span><br><span class=\"line\">set.add(<span class=\"number\">1</span>);</span><br><span class=\"line\">set.add(<span class=\"number\">1</span>);</span><br><span class=\"line\">set.add(<span class=\"number\">2</span>);</span><br><span class=\"line\">set.add(<span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(set); <span class=\"comment\">// Set(2) &#123;1, 2&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"size-属性\"><a href=\"#size-属性\" class=\"headerlink\" title=\"size 属性\"></a>size 属性</h2><p><code>size</code> 属性 : 获取成员的个数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> set = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(set); <span class=\"comment\">// 5</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"delete\"><a href=\"#delete\" class=\"headerlink\" title=\"delete( )\"></a>delete( )</h2><p><code>delete()</code> 方法 : 用户删除 <code>Set</code> 结构中的指定值 , 删除成功返回 : <code>true</code> , 删除失败返回 : <code>fasle</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> set = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>]);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(set); <span class=\"comment\">// Set(4) &#123;5, 6, 7, 8&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(set.delete(<span class=\"number\">8</span>)); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(set.delete(<span class=\"number\">8</span>)); <span class=\"comment\">// false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(set); <span class=\"comment\">// Set(3) &#123;5, 6, 7&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"clear\"><a href=\"#clear\" class=\"headerlink\" title=\"clear( )\"></a>clear( )</h2><p><code>clear()</code> 方法 : 清除所有成员 , 一个不留</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> set = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>]);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(set); <span class=\"comment\">// Set(4) &#123;5, 6, 7, 8&#125;</span></span><br><span class=\"line\">set.clear();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(set); <span class=\"comment\">// Set(0) &#123;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"has\"><a href=\"#has\" class=\"headerlink\" title=\"has( )\"></a>has( )</h2><p><code>has()</code> 方法 : 判断 <code>set</code> 结构中是否含有指定的值 , 如果有 , 返回 <code>true</code> , 如果没有 , 返回 <code>fasle</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> set = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(set.has(<span class=\"number\">1</span>)); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(set.has(<span class=\"number\">6</span>)); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"entries\"><a href=\"#entries\" class=\"headerlink\" title=\"entries( )\"></a>entries( )</h2><p><code>entries()</code> 方法 : 返回一个键值对的遍历器</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> set = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;c&quot;</span>]);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(set.entries()); <span class=\"comment\">// SetIterator &#123;&quot;a&quot; =&gt; &quot;a&quot;, &quot;b&quot; =&gt; &quot;b&quot;, &quot;c&quot; =&gt; &quot;c&quot;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>注意得到的结果 , 成员值 <code>a</code> 对应的键值对是 <code>[&quot;a&quot;,&quot;a&quot;]</code> , 也就是说 : <code>Set</code> 结构是键名和键值是同一个值</p>\n<h2 id=\"keys-和-values\"><a href=\"#keys-和-values\" class=\"headerlink\" title=\"keys( ) 和 values( )\"></a>keys( ) 和 values( )</h2><p><code>keys()</code> 方法 : 返回键名的遍历器<br><code>values()</code> 方法 : 返回键值的遍历器</p>\n<h2 id=\"forEach\"><a href=\"#forEach\" class=\"headerlink\" title=\"forEach( )\"></a>forEach( )</h2><p>使用方式跟数组的 <code>forEach</code> 一样 , 当然 , 得到的 <code>value</code> 是 <code>key</code> 的值是一样的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> set = <span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>([<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;b&quot;</span>, <span class=\"string\">&quot;c&quot;</span>]);</span><br><span class=\"line\"><span class=\"comment\">// 使用回调函数遍历每个成员</span></span><br><span class=\"line\">set.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value, key</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(value, key);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\"><span class=\"comment\">// a a</span></span><br><span class=\"line\"><span class=\"comment\">// b b</span></span><br><span class=\"line\"><span class=\"comment\">// c c</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"set-用途之一\"><a href=\"#set-用途之一\" class=\"headerlink\" title=\"set 用途之一\"></a>set 用途之一</h2><p><strong>数组去重</strong> , 顺便我们把它封装成一个函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">4</span>, <span class=\"number\">4</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 数组去重</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deduplication</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Array</span>.from(<span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(arr));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(deduplication(arr));</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Weakset-结构\"><a href=\"#Weakset-结构\" class=\"headerlink\" title=\"Weakset 结构\"></a>Weakset 结构</h2><p><code>WeakSet</code> 结构同样不会存储重复的值 , 不同的是 , 它的成员必须是对象类型的值 , 否则就会报错</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> ws = <span class=\"keyword\">new</span> <span class=\"built_in\">WeakSet</span>([&#123; <span class=\"attr\">age</span>: <span class=\"number\">18</span> &#125;]);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 错误示范</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> ws = <span class=\"keyword\">new</span> <span class=\"built_in\">WeakSet</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>]);</span><br></pre></td></tr></table></figure>\n\n<p>实际上 , 任何可遍历的对象 , 都可以作为 <code>WeakSet</code> 的初始化参数 , 比如 : <strong>数组</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr1 = [<span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> arr2 = [<span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"comment\">// 初始化一个 WeakSet 对象,参数是 数组 类型</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> ws = <span class=\"keyword\">new</span> <span class=\"built_in\">WeakSet</span>([arr1, arr2]); <span class=\"comment\">//结果 : WeakSet &#123;Object &#123;age: 18&#125;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>同样 , <code>WeakSet</code> 结构也提供了 <code>add()</code> 方法 , <code>delete()</code> 方法 , <code>has()</code> 方法给开发者使用 , 作用与用法跟 <code>Set</code> 结构完全一致</p>\n<p>另一个不同点是 : <code>WeakSet</code> 结构不可遍历 , 因为它的成员都是对象的弱引用 , 随时被回收机制回收 , 成员消失 , 所以 WeakSet 结构不会有 <code>keys()</code> , <code>values()</code> , <code>entries()</code> , <code>forEach()</code> 等方法和 <code>size</code> 属性</p>\n<h1 id=\"Map-和-WeakMap\"><a href=\"#Map-和-WeakMap\" class=\"headerlink\" title=\"Map 和 WeakMap\"></a>Map 和 WeakMap</h1><h2 id=\"什么是-Map\"><a href=\"#什么是-Map\" class=\"headerlink\" title=\"什么是 Map\"></a>什么是 Map</h2><p><code>ES6</code> 提供了 <code>Map</code> 结构给我们使用 , 它跟 <code>Object</code> 对象很像 , 但是不同的是 , 它的 <code>key</code> 键名的类型不再局限于字符串类型了 , 它可以是各种类型的值 ; 可以说 , 它比 <code>Object</code> 对象更加灵活了 , 当然 , 也更加复杂了。</p>\n<h2 id=\"Map-的基本用法\"><a href=\"#Map-的基本用法\" class=\"headerlink\" title=\"Map 的基本用法\"></a>Map 的基本用法</h2><p>跟 <code>Set</code> 类似</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> map1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(map1); <span class=\"comment\">// Map(0) &#123;&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> map2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([</span><br><span class=\"line\">  [<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;前端君&quot;</span>],</span><br><span class=\"line\">  [<span class=\"string\">&quot;gender&quot;</span>, <span class=\"number\">1</span>],</span><br><span class=\"line\">]);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(map2); <span class=\"comment\">// Map(2) &#123;&quot;name&quot; =&gt; &quot;前端君&quot;, &quot;gender&quot; =&gt; 1&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>Map()</code> 方法里面的参数 , 首先它是一个数组 , 而里面的内容也是由多个数组组成 , <code>&quot;name&quot;</code> : <code>&quot;前端君&quot;</code> 作为一个键值对 , 将它们装在一个数组里面 , <code>[&quot;name&quot;,&quot;前端君&quot;]</code> , 另外一组键值对也一样 : <code>[&quot;gender&quot;,1]</code> 这就是初始化一个 <code>Map</code> 结构实例的基本写法</p>\n<h2 id=\"set\"><a href=\"#set\" class=\"headerlink\" title=\"set( )\"></a>set( )</h2><p><code>set()</code> 方法作用 : 给实例设置一对键值对 , 返回 <code>map</code> 实例</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\"><span class=\"comment\">// 添加一个 string 类型的键名</span></span><br><span class=\"line\">map.set(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;前端君&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 添加一个数字类型的键名</span></span><br><span class=\"line\">map.set(<span class=\"number\">1</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(map); <span class=\"comment\">// Map(2) &#123;&quot;name&quot; =&gt; &quot;前端君&quot;, 1 =&gt; 2&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p><code>Map</code> 结构可以存储非字符串类型的键名 , 当然还可以设置更多其它类型的键名 , 比如更过分点的 :</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 数组类型的键名</span></span><br><span class=\"line\">map.set([<span class=\"number\">1</span>], <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"comment\">// 对象类型的键名</span></span><br><span class=\"line\">map.set(&#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;Zhangsan&quot;</span> &#125;, <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"comment\">// 布尔类型的键名</span></span><br><span class=\"line\">map.set(<span class=\"literal\">true</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"comment\">// Symbol 类型的键名</span></span><br><span class=\"line\">map.set(<span class=\"built_in\">Symbol</span>(<span class=\"string\">&quot;name&quot;</span>), <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"comment\">// null 为键名</span></span><br><span class=\"line\">map.set(<span class=\"literal\">null</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"comment\">// undefined 为键名</span></span><br><span class=\"line\">map.set(<span class=\"literal\">undefined</span>, <span class=\"number\">2</span>);</span><br></pre></td></tr></table></figure>\n\n<p>使用 <code>set</code> 方法的时候有一点需要注意 , 如果你设置一个已经存在的键名 , 那么后面的键值会覆盖前面的键值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">map.set(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;前端君&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(map); <span class=\"comment\">// 结果 : Map(1) &#123;&quot;name&quot; =&gt; &quot;前端君&quot;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// 再次设置 name 的值</span></span><br><span class=\"line\">map.set(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;隔壁老王&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(map); <span class=\"comment\">// 结果 : Map(1) &#123;&quot;name&quot; =&gt; &quot;隔壁老王&quot;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"get\"><a href=\"#get\" class=\"headerlink\" title=\"get( )\"></a>get( )</h2><p><code>get()</code> 方法作用 : 获取指定键名的键值 , 返回键值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([</span><br><span class=\"line\">  [<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;前端君&quot;</span>],</span><br><span class=\"line\">  [<span class=\"string\">&quot;age&quot;</span>, <span class=\"number\">20</span>],</span><br><span class=\"line\">]);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(map.get(<span class=\"string\">&quot;name&quot;</span>)); <span class=\"comment\">// 前端君</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(map.get(<span class=\"string\">&quot;age&quot;</span>)); <span class=\"comment\">// 20</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(map.get(<span class=\"string\">&quot;gender&quot;</span>)); <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"delete-1\"><a href=\"#delete-1\" class=\"headerlink\" title=\"delete( )\"></a>delete( )</h2><p><code>delete()</code> 方法作用 : 删除指定的键值对 , 删除成功返回 : <code>true</code> , 否则返回 : <code>false</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">map.set(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;前端君&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(map); <span class=\"comment\">// Map(1) &#123;&quot;name&quot; =&gt; &quot;前端君&quot;&#125;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(map.delete(<span class=\"string\">&quot;name&quot;</span>)); <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(map.delete(<span class=\"string\">&quot;name&quot;</span>)); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"clear-1\"><a href=\"#clear-1\" class=\"headerlink\" title=\"clear( )\"></a>clear( )</h2><p>跟 <code>Set</code> 结构一样 , <code>Map</code> 结构也提供了 <code>clear()</code> 方法 , 让你一次性删除所有键值对</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">map.set(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;前端君&quot;</span>);</span><br><span class=\"line\">map.set(<span class=\"string\">&quot;gender&quot;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">map.clear();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(map); <span class=\"comment\">// Map(0) &#123;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"has-1\"><a href=\"#has-1\" class=\"headerlink\" title=\"has( )\"></a>has( )</h2><p><code>has()</code> 方法作用 : 判断 <code>Map</code> 实例内是否含有指定的键值对 , 有就返回 : <code>true</code> , 否则返回 : <code>false</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">map.set(<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;前端君&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(map.has(<span class=\"string\">&quot;name&quot;</span>)); <span class=\"comment\">// 结果 : true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(map.has(<span class=\"string\">&quot;age&quot;</span>)); <span class=\"comment\">// 结果 : false</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"entries-1\"><a href=\"#entries-1\" class=\"headerlink\" title=\"entries()\"></a>entries()</h2><p><code>entries()</code> 方法作用 : 返回实例的键值对遍历器</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([</span><br><span class=\"line\">  [<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;前端君&quot;</span>],</span><br><span class=\"line\">  [<span class=\"string\">&quot;age&quot;</span>, <span class=\"number\">25</span>],</span><br><span class=\"line\">]);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [key, value] <span class=\"keyword\">of</span> map.entries()) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(key + <span class=\"string\">&quot;  &quot;</span> + value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\"><span class=\"comment\">//  name  前端君</span></span><br><span class=\"line\"><span class=\"comment\">//  age  25</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"keys-和-values-1\"><a href=\"#keys-和-values-1\" class=\"headerlink\" title=\"keys( ) 和 values( )\"></a>keys( ) 和 values( )</h2><p><code>keys()</code> 方法 : 返回实例所有键名的遍历器<br><code>values()</code> 方法 : 返回实例所有键值的遍历器</p>\n<h2 id=\"forEach-1\"><a href=\"#forEach-1\" class=\"headerlink\" title=\"forEach( )\"></a>forEach( )</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>([</span><br><span class=\"line\">  [<span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;前端君&quot;</span>],</span><br><span class=\"line\">  [<span class=\"string\">&quot;age&quot;</span>, <span class=\"number\">25</span>],</span><br><span class=\"line\">]);</span><br><span class=\"line\">map.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value, key</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(key + <span class=\"string\">&quot; &quot;</span> + value);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 打印结果</span></span><br><span class=\"line\"><span class=\"comment\">//  name 前端君</span></span><br><span class=\"line\"><span class=\"comment\">//  age 25</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"size-属性-1\"><a href=\"#size-属性-1\" class=\"headerlink\" title=\"size 属性\"></a>size 属性</h2><p>获取实例的成员数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> map = <span class=\"keyword\">new</span> <span class=\"built_in\">Map</span>();</span><br><span class=\"line\">map.set(<span class=\"number\">1</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">map.set(<span class=\"string\">&quot;1&quot;</span>, <span class=\"string\">&quot;3&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(map.size); <span class=\"comment\">// 结果: 2</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"什么是-WeakMap\"><a href=\"#什么是-WeakMap\" class=\"headerlink\" title=\"什么是 WeakMap\"></a>什么是 WeakMap</h2><p><code>WeakMap</code> 结构和 <code>Map</code> 结构很类似 , 不同点在于 <code>WeakMap</code> 结构的键名只支持引用类型的数据 , 比如 : 数组 , 对象 , 函数</p>\n<h2 id=\"WeakMap-的基本用法\"><a href=\"#WeakMap-的基本用法\" class=\"headerlink\" title=\"WeakMap 的基本用法\"></a>WeakMap 的基本用法</h2><p><code>WeakMap</code> 结构的使用方式和 <code>Map</code> 结构一样</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> wm = <span class=\"keyword\">new</span> <span class=\"built_in\">WeakMap</span>();</span><br></pre></td></tr></table></figure>\n\n<p>两者都是使用 <code>new</code> 来创建实例 , 如果添加键值对的话 , 我们同样是使用 <code>set</code> 方法 , 不过键名的类型必须要求是引用类型的值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> wm = <span class=\"keyword\">new</span> <span class=\"built_in\">WeakMap</span>();</span><br><span class=\"line\"><span class=\"comment\">// 数组类型的键名</span></span><br><span class=\"line\">wm.set([<span class=\"number\">1</span>], <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"comment\">// 对象类型的键名</span></span><br><span class=\"line\">wm.set(&#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;Zhangsan&quot;</span> &#125;, <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"comment\">// 函数类型的键名</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">wm.set(fn, <span class=\"number\">2</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(wm); <span class=\"comment\">// WeakMap &#123;ƒ =&gt; 2, &#123;…&#125; =&gt; 2, Array(1) =&gt; 2&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>从打印结果可以看出 , 以上类型的键名都可以成功添加到 <code>WeakMap</code> 实例中</p>\n<h2 id=\"WeakMap-与-Map-的区别\"><a href=\"#WeakMap-与-Map-的区别\" class=\"headerlink\" title=\"WeakMap 与 Map 的区别\"></a>WeakMap 与 Map 的区别</h2><p>如果是普通的值类型则不允许 , 比如 : <code>String</code> , <code>Number</code> , <code>null</code> , <code>undefined</code> , <code>boolean</code> , 而 <code>Map</code> 结构是允许的 , 这就是两者的不同之处 , 谨记</p>\n<p>跟 <code>Map</code> 一样 , <code>WeakMap</code> 也拥有 <code>get</code> , <code>has</code> , <code>delete</code> 方法 , 用法和用途都一样 , 不同地方在于 , <code>WeakMap</code> 不支持 <code>clear</code> 方法 , 不支持遍历 , 也就没有了 <code>keys</code> , <code>values</code> , <code>entries</code> , <code>forEach</code> 这 4 个方法 , 也没有属性 <code>size</code></p>\n<p>理由跟 <code>WeakSet</code> 结构一样 : 键名中的引用类型是弱引用 , 你永远不知道这个引用对象什么时候会被垃圾回收机制回收了 , 如果这个引用类型的值被垃圾机制回收了 , <code>WeakMap</code> 实例中的对应键值对也会消失。</p>\n"},{"title":"ES6 新增用法 ( 五 )","date":"2021-06-25T09:02:58.000Z","top_img":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg","cover":"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/desktop.png","comments":1,"_content":"\n# ES6 的 Promise 对象\n\n## Promise 设计初衷\n\n如果存在多个请求操作层层依赖的话 , 那么以上的嵌套就有可能不止三层那么少了 , 加上每一层还会有复杂的业务逻辑处理 , 代码可读性也越来越差 , 不直观 , 调试起来也不方便。如果多人开发的时候没有足够的沟通协商 , 大家的代码风格不一致的话 , 更是雪上加霜 , 给后面的维护带来极大的不便 , 既然使用这种回调函数层层嵌套( 又称 : 回调地狱 ) 的形式存在缺点 , `ES6` 想了办法治它 , 所以就有了 Promise 的出现了\n\n## Promise 基本用法\n\n`Promise` 对象是全局对象 , 你也可以理解为一个类 , 创建 `Promise` 实例的时候 , 要有那个 `new` 关键字。参数是一个匿名函数 , 其中有两个参数 : `resolve` ( 解决 ) 和 `reject` ( 拒绝 ) , 两个函数均为方法 , `resolve` 方法用于处理异步操作成功后业务 ; `reject` 方法用于操作异步操作失败后的业务\n\n```js\nlet promise = new Promise(function (resolve, reject) {\n  //\n});\n```\n\n## Promise 的三种状态\n\n`Promise` 对象有三种状态 :\n\n1. `pending` : 刚刚创建一个 Promise 实例的时候 , 表示初始状态 ;\n2. `fulfilled` : resolve 方法调用的时候 , 表示操作成功 ;\n3. `rejected` : reject 方法调用的时候 , 表示操作失败 ;\n   状态只能从 初始化 -> 成功 或者 初始化 -> 失败 , 不能逆向转换 , 也不能在成功 `fulfilled` 和失败 `rejected` 之间转换\n\n```js\nlet promise = new Promise(function (resolve, reject) {\n  // 实例化后状态 : pending\n  if (\"操作成功\") {\n    resolve(\"resolved\"); // resolve 方法调用 , 状态为 : fulfilled\n  } else {\n    reject(\"rejected\"); // reject 方法调用 , 状态为 : rejected\n  }\n});\n```\n\n## Then( )\n\n`then()` 方法 : 用于绑定处理操作后的处理程序\n参数是两个函数 , 第一个用于处理操作成功后的业务 , 第二个用于处理操作异常后的业务\n\n```js\npromise.then(\n  function (res) {\n    // 成功后处理的程序\n  },\n  function (error) {\n    // 失败后处理的程序\n  }\n);\n```\n\n## Catch( )\n\n对于操作异常的程序 , `Promise` 专门提供了一个实例方法来处理 : `catch()` 方法\n`catch` 只接受一个参数 , 用于处理操作异常后的业务\n\n```js\npromise.catch(function (error) {\n  // 失败后处理的程序\n});\n```\n\n建议将 `then` 方法用于处理操作成功 , `catch` 方法用于处理操作异常 , 也就是\n\n```js\npromise\n  .then(function (res) {\n    // 操作成功的处理程序\n  })\n  .catch(function (error) {\n    // 操作失败的处理程序\n  });\n```\n\n之所以能够使用链式调用 , 是因为 `then` 方法和 `catch` 方法调用后 , 都会返回 `promise` 对象\n\n**案例 1**\n\n```js\n// 用 new 关键字创建一个 Promise 实例\nlet promise = new Promise(function (resolve, reject) {\n  // 假设 condition 的值为 true\n  let condition = true;\n\n  if (condition) {\n    // 调用操作成功方法\n    resolve(\"操作成功\"); // 状态 : pending -> fulfilled\n  } else {\n    // 调用操作异常方法\n    reject(\"操作异常\"); //状态 : pending -> rejected\n  }\n});\n\n//用then处理操作成功，catch处理操作异常\npromise\n  .then(function (res) {\n    // 操作成功的处理程序\n    console.log(res);\n  })\n  .catch(function (error) {\n    // 操作失败的处理程序\n    console.log(error);\n  });\n\n// 控制台输出 : 操作成功\n```\n\n**案例 2 链式调用**\n\n```js\nlet promise = new Promise(function (resolve, reject) {\n  if (true) {\n    // 调用操作成功方法\n    resolve(\"操作成功\");\n  } else {\n    // 调用操作异常方法\n    reject(\"操作异常\");\n  }\n});\n\n// 用 then 处理操作成功 , catch 处理操作异常\npromise.then(requestA).then(requestB).then(requestC).catch(requestError);\n\nfunction requestA() {\n  console.log(\"请求A成功\");\n  return \"请求B，下一个就是你了\";\n}\nfunction requestB(res) {\n  console.log(\"上一步的结果：\" + res);\n  console.log(\"请求B成功\");\n  return \"请求C，下一个就是你了\";\n}\nfunction requestC(res) {\n  console.log(\"上一步的结果：\" + res);\n  console.log(\"请求C成功\");\n}\nfunction requestError() {\n  console.log(\"请求失败\");\n}\n// 打印结果:\n//  请求A成功\n//  上一步的结果：请求B，下一个就是你了\n//  请求B成功\n//  上一步的结果：请求C，下一个就是你了\n//  请求C成功\n```\n\n## Promise.all( )\n\n`Promise.all()` 方法 : 接受一个数组作为参数 , 数组的元素是 `Promise` 实例对象 , 当参数中的实例对象的状态都为 `fulfilled` 时 , `Promise.all()` 才会有返回\n\n```js\n// 创建实例 promise1\nlet promise1 = new Promise(function (resolve) {\n  setTimeout(function () {\n    resolve(\"实例1操作成功\");\n  }, 5000);\n});\n\n// 创建实例 promise2\nlet promise2 = new Promise(function (resolve) {\n  setTimeout(function () {\n    resolve(\"实例2操作成功\");\n  }, 1000);\n});\n\nPromise.all([promise1, promise2]).then(function (result) {\n  console.log(result);\n});\n// 打印结果:\n// 5秒后打印 : [\"实例1操作成功\", \"实例2操作成功\"]\n```\n\n这个方法有什么用呢 ? 一般这样的场景 : 我们执行某个操作 , 这个操作需要得到需要多个接口请求回来的数据来支持 , 但是这些接口请求之前互不依赖 , 不需要层层嵌套 , 这种情况下就适合使用 `Promise.all()` 方法 , 因为它会得到所有接口都请求成功了 , 才会进行操作\n\n## Promise.race( )\n\n`Promise.race()` 方法 : 它的参数要求跟 `Promise.all()` 方法一样 , 不同的是 , 它参数中的 `promise` 实例 , 只要有一个状态发生变化 ( 不管是成功 `fulfilled` 还是异常 `rejected` ) , 它就会有返回 , 其他实例中再发生变化 , 它也不管了\n\n```js\n// 初始化实例 promise1\nlet promise1 = new Promise(function (resolve) {\n  setTimeout(function () {\n    resolve(\"实例1操作成功\");\n  }, 4000);\n});\n\n// 初始化实例 promise2\nlet promise2 = new Promise(function (resolve, reject) {\n  setTimeout(function () {\n    reject(\"实例2操作失败\");\n  }, 2000);\n});\n\nPromise.race([promise2, promise1])\n  .then(function (result) {\n    console.log(result);\n  })\n  .catch(function (error) {\n    console.log(error);\n  });\n// 打印结果:\n// 两秒后打印 : 实例2操作失败\n```\n\n# The_End\n","source":"_posts/js/es6-day05.md","raw":"---\ntitle: ES6 新增用法 ( 五 )\ndate: 2021-06-25 17:02:58\ntop_img: https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg\ncover:\ntags:\n  - js\n  - javascript\n  - ES6\n  - Promise\n  - then\n  - catch\n  - resolve\n  - reject\ncategories:\n  - js\n  - ES6\ncomments:\n---\n\n# ES6 的 Promise 对象\n\n## Promise 设计初衷\n\n如果存在多个请求操作层层依赖的话 , 那么以上的嵌套就有可能不止三层那么少了 , 加上每一层还会有复杂的业务逻辑处理 , 代码可读性也越来越差 , 不直观 , 调试起来也不方便。如果多人开发的时候没有足够的沟通协商 , 大家的代码风格不一致的话 , 更是雪上加霜 , 给后面的维护带来极大的不便 , 既然使用这种回调函数层层嵌套( 又称 : 回调地狱 ) 的形式存在缺点 , `ES6` 想了办法治它 , 所以就有了 Promise 的出现了\n\n## Promise 基本用法\n\n`Promise` 对象是全局对象 , 你也可以理解为一个类 , 创建 `Promise` 实例的时候 , 要有那个 `new` 关键字。参数是一个匿名函数 , 其中有两个参数 : `resolve` ( 解决 ) 和 `reject` ( 拒绝 ) , 两个函数均为方法 , `resolve` 方法用于处理异步操作成功后业务 ; `reject` 方法用于操作异步操作失败后的业务\n\n```js\nlet promise = new Promise(function (resolve, reject) {\n  //\n});\n```\n\n## Promise 的三种状态\n\n`Promise` 对象有三种状态 :\n\n1. `pending` : 刚刚创建一个 Promise 实例的时候 , 表示初始状态 ;\n2. `fulfilled` : resolve 方法调用的时候 , 表示操作成功 ;\n3. `rejected` : reject 方法调用的时候 , 表示操作失败 ;\n   状态只能从 初始化 -> 成功 或者 初始化 -> 失败 , 不能逆向转换 , 也不能在成功 `fulfilled` 和失败 `rejected` 之间转换\n\n```js\nlet promise = new Promise(function (resolve, reject) {\n  // 实例化后状态 : pending\n  if (\"操作成功\") {\n    resolve(\"resolved\"); // resolve 方法调用 , 状态为 : fulfilled\n  } else {\n    reject(\"rejected\"); // reject 方法调用 , 状态为 : rejected\n  }\n});\n```\n\n## Then( )\n\n`then()` 方法 : 用于绑定处理操作后的处理程序\n参数是两个函数 , 第一个用于处理操作成功后的业务 , 第二个用于处理操作异常后的业务\n\n```js\npromise.then(\n  function (res) {\n    // 成功后处理的程序\n  },\n  function (error) {\n    // 失败后处理的程序\n  }\n);\n```\n\n## Catch( )\n\n对于操作异常的程序 , `Promise` 专门提供了一个实例方法来处理 : `catch()` 方法\n`catch` 只接受一个参数 , 用于处理操作异常后的业务\n\n```js\npromise.catch(function (error) {\n  // 失败后处理的程序\n});\n```\n\n建议将 `then` 方法用于处理操作成功 , `catch` 方法用于处理操作异常 , 也就是\n\n```js\npromise\n  .then(function (res) {\n    // 操作成功的处理程序\n  })\n  .catch(function (error) {\n    // 操作失败的处理程序\n  });\n```\n\n之所以能够使用链式调用 , 是因为 `then` 方法和 `catch` 方法调用后 , 都会返回 `promise` 对象\n\n**案例 1**\n\n```js\n// 用 new 关键字创建一个 Promise 实例\nlet promise = new Promise(function (resolve, reject) {\n  // 假设 condition 的值为 true\n  let condition = true;\n\n  if (condition) {\n    // 调用操作成功方法\n    resolve(\"操作成功\"); // 状态 : pending -> fulfilled\n  } else {\n    // 调用操作异常方法\n    reject(\"操作异常\"); //状态 : pending -> rejected\n  }\n});\n\n//用then处理操作成功，catch处理操作异常\npromise\n  .then(function (res) {\n    // 操作成功的处理程序\n    console.log(res);\n  })\n  .catch(function (error) {\n    // 操作失败的处理程序\n    console.log(error);\n  });\n\n// 控制台输出 : 操作成功\n```\n\n**案例 2 链式调用**\n\n```js\nlet promise = new Promise(function (resolve, reject) {\n  if (true) {\n    // 调用操作成功方法\n    resolve(\"操作成功\");\n  } else {\n    // 调用操作异常方法\n    reject(\"操作异常\");\n  }\n});\n\n// 用 then 处理操作成功 , catch 处理操作异常\npromise.then(requestA).then(requestB).then(requestC).catch(requestError);\n\nfunction requestA() {\n  console.log(\"请求A成功\");\n  return \"请求B，下一个就是你了\";\n}\nfunction requestB(res) {\n  console.log(\"上一步的结果：\" + res);\n  console.log(\"请求B成功\");\n  return \"请求C，下一个就是你了\";\n}\nfunction requestC(res) {\n  console.log(\"上一步的结果：\" + res);\n  console.log(\"请求C成功\");\n}\nfunction requestError() {\n  console.log(\"请求失败\");\n}\n// 打印结果:\n//  请求A成功\n//  上一步的结果：请求B，下一个就是你了\n//  请求B成功\n//  上一步的结果：请求C，下一个就是你了\n//  请求C成功\n```\n\n## Promise.all( )\n\n`Promise.all()` 方法 : 接受一个数组作为参数 , 数组的元素是 `Promise` 实例对象 , 当参数中的实例对象的状态都为 `fulfilled` 时 , `Promise.all()` 才会有返回\n\n```js\n// 创建实例 promise1\nlet promise1 = new Promise(function (resolve) {\n  setTimeout(function () {\n    resolve(\"实例1操作成功\");\n  }, 5000);\n});\n\n// 创建实例 promise2\nlet promise2 = new Promise(function (resolve) {\n  setTimeout(function () {\n    resolve(\"实例2操作成功\");\n  }, 1000);\n});\n\nPromise.all([promise1, promise2]).then(function (result) {\n  console.log(result);\n});\n// 打印结果:\n// 5秒后打印 : [\"实例1操作成功\", \"实例2操作成功\"]\n```\n\n这个方法有什么用呢 ? 一般这样的场景 : 我们执行某个操作 , 这个操作需要得到需要多个接口请求回来的数据来支持 , 但是这些接口请求之前互不依赖 , 不需要层层嵌套 , 这种情况下就适合使用 `Promise.all()` 方法 , 因为它会得到所有接口都请求成功了 , 才会进行操作\n\n## Promise.race( )\n\n`Promise.race()` 方法 : 它的参数要求跟 `Promise.all()` 方法一样 , 不同的是 , 它参数中的 `promise` 实例 , 只要有一个状态发生变化 ( 不管是成功 `fulfilled` 还是异常 `rejected` ) , 它就会有返回 , 其他实例中再发生变化 , 它也不管了\n\n```js\n// 初始化实例 promise1\nlet promise1 = new Promise(function (resolve) {\n  setTimeout(function () {\n    resolve(\"实例1操作成功\");\n  }, 4000);\n});\n\n// 初始化实例 promise2\nlet promise2 = new Promise(function (resolve, reject) {\n  setTimeout(function () {\n    reject(\"实例2操作失败\");\n  }, 2000);\n});\n\nPromise.race([promise2, promise1])\n  .then(function (result) {\n    console.log(result);\n  })\n  .catch(function (error) {\n    console.log(error);\n  });\n// 打印结果:\n// 两秒后打印 : 实例2操作失败\n```\n\n# The_End\n","slug":"js/es6-day05","published":1,"updated":"2021-06-25T12:32:04.948Z","layout":"post","photos":[],"link":"","_id":"cksvxwnni001cgubqc3xk8195","content":"<h1 id=\"ES6-的-Promise-对象\"><a href=\"#ES6-的-Promise-对象\" class=\"headerlink\" title=\"ES6 的 Promise 对象\"></a>ES6 的 Promise 对象</h1><h2 id=\"Promise-设计初衷\"><a href=\"#Promise-设计初衷\" class=\"headerlink\" title=\"Promise 设计初衷\"></a>Promise 设计初衷</h2><p>如果存在多个请求操作层层依赖的话 , 那么以上的嵌套就有可能不止三层那么少了 , 加上每一层还会有复杂的业务逻辑处理 , 代码可读性也越来越差 , 不直观 , 调试起来也不方便。如果多人开发的时候没有足够的沟通协商 , 大家的代码风格不一致的话 , 更是雪上加霜 , 给后面的维护带来极大的不便 , 既然使用这种回调函数层层嵌套( 又称 : 回调地狱 ) 的形式存在缺点 , <code>ES6</code> 想了办法治它 , 所以就有了 Promise 的出现了</p>\n<h2 id=\"Promise-基本用法\"><a href=\"#Promise-基本用法\" class=\"headerlink\" title=\"Promise 基本用法\"></a>Promise 基本用法</h2><p><code>Promise</code> 对象是全局对象 , 你也可以理解为一个类 , 创建 <code>Promise</code> 实例的时候 , 要有那个 <code>new</code> 关键字。参数是一个匿名函数 , 其中有两个参数 : <code>resolve</code> ( 解决 ) 和 <code>reject</code> ( 拒绝 ) , 两个函数均为方法 , <code>resolve</code> 方法用于处理异步操作成功后业务 ; <code>reject</code> 方法用于操作异步操作失败后的业务</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Promise-的三种状态\"><a href=\"#Promise-的三种状态\" class=\"headerlink\" title=\"Promise 的三种状态\"></a>Promise 的三种状态</h2><p><code>Promise</code> 对象有三种状态 :</p>\n<ol>\n<li><code>pending</code> : 刚刚创建一个 Promise 实例的时候 , 表示初始状态 ;</li>\n<li><code>fulfilled</code> : resolve 方法调用的时候 , 表示操作成功 ;</li>\n<li><code>rejected</code> : reject 方法调用的时候 , 表示操作失败 ;<br>状态只能从 初始化 -&gt; 成功 或者 初始化 -&gt; 失败 , 不能逆向转换 , 也不能在成功 <code>fulfilled</code> 和失败 <code>rejected</code> 之间转换</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 实例化后状态 : pending</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"string\">&quot;操作成功&quot;</span>) &#123;</span><br><span class=\"line\">    resolve(<span class=\"string\">&quot;resolved&quot;</span>); <span class=\"comment\">// resolve 方法调用 , 状态为 : fulfilled</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    reject(<span class=\"string\">&quot;rejected&quot;</span>); <span class=\"comment\">// reject 方法调用 , 状态为 : rejected</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Then\"><a href=\"#Then\" class=\"headerlink\" title=\"Then( )\"></a>Then( )</h2><p><code>then()</code> 方法 : 用于绑定处理操作后的处理程序<br>参数是两个函数 , 第一个用于处理操作成功后的业务 , 第二个用于处理操作异常后的业务</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">promise.then(</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 成功后处理的程序</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 失败后处理的程序</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Catch\"><a href=\"#Catch\" class=\"headerlink\" title=\"Catch( )\"></a>Catch( )</h2><p>对于操作异常的程序 , <code>Promise</code> 专门提供了一个实例方法来处理 : <code>catch()</code> 方法<br><code>catch</code> 只接受一个参数 , 用于处理操作异常后的业务</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">promise.catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 失败后处理的程序</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>建议将 <code>then</code> 方法用于处理操作成功 , <code>catch</code> 方法用于处理操作异常 , 也就是</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">promise</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 操作成功的处理程序</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 操作失败的处理程序</span></span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>之所以能够使用链式调用 , 是因为 <code>then</code> 方法和 <code>catch</code> 方法调用后 , 都会返回 <code>promise</code> 对象</p>\n<p><strong>案例 1</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 用 new 关键字创建一个 Promise 实例</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 假设 condition 的值为 true</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> condition = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (condition) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 调用操作成功方法</span></span><br><span class=\"line\">    resolve(<span class=\"string\">&quot;操作成功&quot;</span>); <span class=\"comment\">// 状态 : pending -&gt; fulfilled</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 调用操作异常方法</span></span><br><span class=\"line\">    reject(<span class=\"string\">&quot;操作异常&quot;</span>); <span class=\"comment\">//状态 : pending -&gt; rejected</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//用then处理操作成功，catch处理操作异常</span></span><br><span class=\"line\">promise</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 操作成功的处理程序</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 操作失败的处理程序</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 控制台输出 : 操作成功</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>案例 2 链式调用</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 调用操作成功方法</span></span><br><span class=\"line\">    resolve(<span class=\"string\">&quot;操作成功&quot;</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 调用操作异常方法</span></span><br><span class=\"line\">    reject(<span class=\"string\">&quot;操作异常&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 用 then 处理操作成功 , catch 处理操作异常</span></span><br><span class=\"line\">promise.then(requestA).then(requestB).then(requestC).catch(requestError);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">requestA</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;请求A成功&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&quot;请求B，下一个就是你了&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">requestB</span>(<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;上一步的结果：&quot;</span> + res);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;请求B成功&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&quot;请求C，下一个就是你了&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">requestC</span>(<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;上一步的结果：&quot;</span> + res);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;请求C成功&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">requestError</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;请求失败&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 打印结果:</span></span><br><span class=\"line\"><span class=\"comment\">//  请求A成功</span></span><br><span class=\"line\"><span class=\"comment\">//  上一步的结果：请求B，下一个就是你了</span></span><br><span class=\"line\"><span class=\"comment\">//  请求B成功</span></span><br><span class=\"line\"><span class=\"comment\">//  上一步的结果：请求C，下一个就是你了</span></span><br><span class=\"line\"><span class=\"comment\">//  请求C成功</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Promise-all\"><a href=\"#Promise-all\" class=\"headerlink\" title=\"Promise.all( )\"></a>Promise.all( )</h2><p><code>Promise.all()</code> 方法 : 接受一个数组作为参数 , 数组的元素是 <code>Promise</code> 实例对象 , 当参数中的实例对象的状态都为 <code>fulfilled</code> 时 , <code>Promise.all()</code> 才会有返回</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建实例 promise1</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> promise1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    resolve(<span class=\"string\">&quot;实例1操作成功&quot;</span>);</span><br><span class=\"line\">  &#125;, <span class=\"number\">5000</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建实例 promise2</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> promise2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    resolve(<span class=\"string\">&quot;实例2操作成功&quot;</span>);</span><br><span class=\"line\">  &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.all([promise1, promise2]).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">result</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 打印结果:</span></span><br><span class=\"line\"><span class=\"comment\">// 5秒后打印 : [&quot;实例1操作成功&quot;, &quot;实例2操作成功&quot;]</span></span><br></pre></td></tr></table></figure>\n\n<p>这个方法有什么用呢 ? 一般这样的场景 : 我们执行某个操作 , 这个操作需要得到需要多个接口请求回来的数据来支持 , 但是这些接口请求之前互不依赖 , 不需要层层嵌套 , 这种情况下就适合使用 <code>Promise.all()</code> 方法 , 因为它会得到所有接口都请求成功了 , 才会进行操作</p>\n<h2 id=\"Promise-race\"><a href=\"#Promise-race\" class=\"headerlink\" title=\"Promise.race( )\"></a>Promise.race( )</h2><p><code>Promise.race()</code> 方法 : 它的参数要求跟 <code>Promise.all()</code> 方法一样 , 不同的是 , 它参数中的 <code>promise</code> 实例 , 只要有一个状态发生变化 ( 不管是成功 <code>fulfilled</code> 还是异常 <code>rejected</code> ) , 它就会有返回 , 其他实例中再发生变化 , 它也不管了</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 初始化实例 promise1</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> promise1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    resolve(<span class=\"string\">&quot;实例1操作成功&quot;</span>);</span><br><span class=\"line\">  &#125;, <span class=\"number\">4000</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化实例 promise2</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> promise2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    reject(<span class=\"string\">&quot;实例2操作失败&quot;</span>);</span><br><span class=\"line\">  &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.race([promise2, promise1])</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">result</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"><span class=\"comment\">// 打印结果:</span></span><br><span class=\"line\"><span class=\"comment\">// 两秒后打印 : 实例2操作失败</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"The-End\"><a href=\"#The-End\" class=\"headerlink\" title=\"The_End\"></a>The_End</h1>","site":{"data":{"link":{"class1":{"class_name":"舍友","link_list":{"1":{"name":"codeAntg","link":"https://blog.csdn.net/weixin_44745147","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/fjh.jpg","descr":"那家刀削面不错","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class2":{"class_name":"致谢","link_list":{"1":{"name":"JerrC","link":"https://immyw.com","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/immyw.png","descr":"今日事,今日毕","width":"1px","style":"solid","color":"#60d0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/hexo.svg","descr":"A fast, simple & powerful blog framework","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class3":{"class_name":"友人","link_list":{"1":{"name":"Chester","link":"http://chesterlds.cn","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/chester.jpg","descr":null,"width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Wangs","link":"https://wangsss.cn/","avatar":"https://wangsss.cn/img/avatar.png","descr":"不疯魔，不成活 ~","width":"1px","style":"solid","color":"#9d9d9d","custom":"link_custom1","time":"4s","namecolor":"0094ff","descolor":"#ff9191"}}}}}},"excerpt":"","more":"<h1 id=\"ES6-的-Promise-对象\"><a href=\"#ES6-的-Promise-对象\" class=\"headerlink\" title=\"ES6 的 Promise 对象\"></a>ES6 的 Promise 对象</h1><h2 id=\"Promise-设计初衷\"><a href=\"#Promise-设计初衷\" class=\"headerlink\" title=\"Promise 设计初衷\"></a>Promise 设计初衷</h2><p>如果存在多个请求操作层层依赖的话 , 那么以上的嵌套就有可能不止三层那么少了 , 加上每一层还会有复杂的业务逻辑处理 , 代码可读性也越来越差 , 不直观 , 调试起来也不方便。如果多人开发的时候没有足够的沟通协商 , 大家的代码风格不一致的话 , 更是雪上加霜 , 给后面的维护带来极大的不便 , 既然使用这种回调函数层层嵌套( 又称 : 回调地狱 ) 的形式存在缺点 , <code>ES6</code> 想了办法治它 , 所以就有了 Promise 的出现了</p>\n<h2 id=\"Promise-基本用法\"><a href=\"#Promise-基本用法\" class=\"headerlink\" title=\"Promise 基本用法\"></a>Promise 基本用法</h2><p><code>Promise</code> 对象是全局对象 , 你也可以理解为一个类 , 创建 <code>Promise</code> 实例的时候 , 要有那个 <code>new</code> 关键字。参数是一个匿名函数 , 其中有两个参数 : <code>resolve</code> ( 解决 ) 和 <code>reject</code> ( 拒绝 ) , 两个函数均为方法 , <code>resolve</code> 方法用于处理异步操作成功后业务 ; <code>reject</code> 方法用于操作异步操作失败后的业务</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">//</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Promise-的三种状态\"><a href=\"#Promise-的三种状态\" class=\"headerlink\" title=\"Promise 的三种状态\"></a>Promise 的三种状态</h2><p><code>Promise</code> 对象有三种状态 :</p>\n<ol>\n<li><code>pending</code> : 刚刚创建一个 Promise 实例的时候 , 表示初始状态 ;</li>\n<li><code>fulfilled</code> : resolve 方法调用的时候 , 表示操作成功 ;</li>\n<li><code>rejected</code> : reject 方法调用的时候 , 表示操作失败 ;<br>状态只能从 初始化 -&gt; 成功 或者 初始化 -&gt; 失败 , 不能逆向转换 , 也不能在成功 <code>fulfilled</code> 和失败 <code>rejected</code> 之间转换</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 实例化后状态 : pending</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"string\">&quot;操作成功&quot;</span>) &#123;</span><br><span class=\"line\">    resolve(<span class=\"string\">&quot;resolved&quot;</span>); <span class=\"comment\">// resolve 方法调用 , 状态为 : fulfilled</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    reject(<span class=\"string\">&quot;rejected&quot;</span>); <span class=\"comment\">// reject 方法调用 , 状态为 : rejected</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Then\"><a href=\"#Then\" class=\"headerlink\" title=\"Then( )\"></a>Then( )</h2><p><code>then()</code> 方法 : 用于绑定处理操作后的处理程序<br>参数是两个函数 , 第一个用于处理操作成功后的业务 , 第二个用于处理操作异常后的业务</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">promise.then(</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 成功后处理的程序</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 失败后处理的程序</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Catch\"><a href=\"#Catch\" class=\"headerlink\" title=\"Catch( )\"></a>Catch( )</h2><p>对于操作异常的程序 , <code>Promise</code> 专门提供了一个实例方法来处理 : <code>catch()</code> 方法<br><code>catch</code> 只接受一个参数 , 用于处理操作异常后的业务</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">promise.catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 失败后处理的程序</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>建议将 <code>then</code> 方法用于处理操作成功 , <code>catch</code> 方法用于处理操作异常 , 也就是</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">promise</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 操作成功的处理程序</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 操作失败的处理程序</span></span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>之所以能够使用链式调用 , 是因为 <code>then</code> 方法和 <code>catch</code> 方法调用后 , 都会返回 <code>promise</code> 对象</p>\n<p><strong>案例 1</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 用 new 关键字创建一个 Promise 实例</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 假设 condition 的值为 true</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> condition = <span class=\"literal\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (condition) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 调用操作成功方法</span></span><br><span class=\"line\">    resolve(<span class=\"string\">&quot;操作成功&quot;</span>); <span class=\"comment\">// 状态 : pending -&gt; fulfilled</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 调用操作异常方法</span></span><br><span class=\"line\">    reject(<span class=\"string\">&quot;操作异常&quot;</span>); <span class=\"comment\">//状态 : pending -&gt; rejected</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//用then处理操作成功，catch处理操作异常</span></span><br><span class=\"line\">promise</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 操作成功的处理程序</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 操作失败的处理程序</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 控制台输出 : 操作成功</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>案例 2 链式调用</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> promise = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 调用操作成功方法</span></span><br><span class=\"line\">    resolve(<span class=\"string\">&quot;操作成功&quot;</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 调用操作异常方法</span></span><br><span class=\"line\">    reject(<span class=\"string\">&quot;操作异常&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 用 then 处理操作成功 , catch 处理操作异常</span></span><br><span class=\"line\">promise.then(requestA).then(requestB).then(requestC).catch(requestError);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">requestA</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;请求A成功&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&quot;请求B，下一个就是你了&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">requestB</span>(<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;上一步的结果：&quot;</span> + res);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;请求B成功&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&quot;请求C，下一个就是你了&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">requestC</span>(<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;上一步的结果：&quot;</span> + res);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;请求C成功&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">requestError</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;请求失败&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 打印结果:</span></span><br><span class=\"line\"><span class=\"comment\">//  请求A成功</span></span><br><span class=\"line\"><span class=\"comment\">//  上一步的结果：请求B，下一个就是你了</span></span><br><span class=\"line\"><span class=\"comment\">//  请求B成功</span></span><br><span class=\"line\"><span class=\"comment\">//  上一步的结果：请求C，下一个就是你了</span></span><br><span class=\"line\"><span class=\"comment\">//  请求C成功</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Promise-all\"><a href=\"#Promise-all\" class=\"headerlink\" title=\"Promise.all( )\"></a>Promise.all( )</h2><p><code>Promise.all()</code> 方法 : 接受一个数组作为参数 , 数组的元素是 <code>Promise</code> 实例对象 , 当参数中的实例对象的状态都为 <code>fulfilled</code> 时 , <code>Promise.all()</code> 才会有返回</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建实例 promise1</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> promise1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    resolve(<span class=\"string\">&quot;实例1操作成功&quot;</span>);</span><br><span class=\"line\">  &#125;, <span class=\"number\">5000</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建实例 promise2</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> promise2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    resolve(<span class=\"string\">&quot;实例2操作成功&quot;</span>);</span><br><span class=\"line\">  &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.all([promise1, promise2]).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">result</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 打印结果:</span></span><br><span class=\"line\"><span class=\"comment\">// 5秒后打印 : [&quot;实例1操作成功&quot;, &quot;实例2操作成功&quot;]</span></span><br></pre></td></tr></table></figure>\n\n<p>这个方法有什么用呢 ? 一般这样的场景 : 我们执行某个操作 , 这个操作需要得到需要多个接口请求回来的数据来支持 , 但是这些接口请求之前互不依赖 , 不需要层层嵌套 , 这种情况下就适合使用 <code>Promise.all()</code> 方法 , 因为它会得到所有接口都请求成功了 , 才会进行操作</p>\n<h2 id=\"Promise-race\"><a href=\"#Promise-race\" class=\"headerlink\" title=\"Promise.race( )\"></a>Promise.race( )</h2><p><code>Promise.race()</code> 方法 : 它的参数要求跟 <code>Promise.all()</code> 方法一样 , 不同的是 , 它参数中的 <code>promise</code> 实例 , 只要有一个状态发生变化 ( 不管是成功 <code>fulfilled</code> 还是异常 <code>rejected</code> ) , 它就会有返回 , 其他实例中再发生变化 , 它也不管了</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 初始化实例 promise1</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> promise1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    resolve(<span class=\"string\">&quot;实例1操作成功&quot;</span>);</span><br><span class=\"line\">  &#125;, <span class=\"number\">4000</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 初始化实例 promise2</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> promise2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">resolve, reject</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    reject(<span class=\"string\">&quot;实例2操作失败&quot;</span>);</span><br><span class=\"line\">  &#125;, <span class=\"number\">2000</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.race([promise2, promise1])</span><br><span class=\"line\">  .then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">result</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(result);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .catch(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"><span class=\"comment\">// 打印结果:</span></span><br><span class=\"line\"><span class=\"comment\">// 两秒后打印 : 实例2操作失败</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"The-End\"><a href=\"#The-End\" class=\"headerlink\" title=\"The_End\"></a>The_End</h1>"},{"title":"var 与 ES6 中的 let const 的区别","date":"2021-06-29T06:22:44.000Z","top_img":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg","cover":"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/desktop.png","comments":1,"_content":"\n# let const var 定义变量的区别是什么\n\n- `let`\n\n  - 块作用域\n  - 没有变量提升\n  - 不能重复声明\n\n- `const`\n\n  - 声明常量，不能修改\n  - 必须初始化\n  - 块作用域\n  - 没有变量提升\n  - 不能重复声明\n\n- `var`\n  - 没有块的概念\n  - 可以跨块访问，但是不能跨函数访问\n  - 会进行变量提升\n","source":"_posts/js/es6-var-let-const.md","raw":"---\ntitle: var 与 ES6 中的 let const 的区别\ndate: 2021-06-29 14:22:44\ntop_img: https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg\ncover:\ntags:\n  - js\n  - jsvascript\n  - ES6\n  - var\n  - let\n  - const\ncategories:\n  - js\n  - ES6\ncomments:\n---\n\n# let const var 定义变量的区别是什么\n\n- `let`\n\n  - 块作用域\n  - 没有变量提升\n  - 不能重复声明\n\n- `const`\n\n  - 声明常量，不能修改\n  - 必须初始化\n  - 块作用域\n  - 没有变量提升\n  - 不能重复声明\n\n- `var`\n  - 没有块的概念\n  - 可以跨块访问，但是不能跨函数访问\n  - 会进行变量提升\n","slug":"js/es6-var-let-const","published":1,"updated":"2021-06-29T06:34:09.824Z","layout":"post","photos":[],"link":"","_id":"cksvxwnnk001ggubqe0ztdcba","content":"<h1 id=\"let-const-var-定义变量的区别是什么\"><a href=\"#let-const-var-定义变量的区别是什么\" class=\"headerlink\" title=\"let const var 定义变量的区别是什么\"></a>let const var 定义变量的区别是什么</h1><ul>\n<li><p><code>let</code></p>\n<ul>\n<li>块作用域</li>\n<li>没有变量提升</li>\n<li>不能重复声明</li>\n</ul>\n</li>\n<li><p><code>const</code></p>\n<ul>\n<li>声明常量，不能修改</li>\n<li>必须初始化</li>\n<li>块作用域</li>\n<li>没有变量提升</li>\n<li>不能重复声明</li>\n</ul>\n</li>\n<li><p><code>var</code></p>\n<ul>\n<li>没有块的概念</li>\n<li>可以跨块访问，但是不能跨函数访问</li>\n<li>会进行变量提升</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{"link":{"class1":{"class_name":"舍友","link_list":{"1":{"name":"codeAntg","link":"https://blog.csdn.net/weixin_44745147","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/fjh.jpg","descr":"那家刀削面不错","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class2":{"class_name":"致谢","link_list":{"1":{"name":"JerrC","link":"https://immyw.com","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/immyw.png","descr":"今日事,今日毕","width":"1px","style":"solid","color":"#60d0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/hexo.svg","descr":"A fast, simple & powerful blog framework","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class3":{"class_name":"友人","link_list":{"1":{"name":"Chester","link":"http://chesterlds.cn","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/chester.jpg","descr":null,"width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Wangs","link":"https://wangsss.cn/","avatar":"https://wangsss.cn/img/avatar.png","descr":"不疯魔，不成活 ~","width":"1px","style":"solid","color":"#9d9d9d","custom":"link_custom1","time":"4s","namecolor":"0094ff","descolor":"#ff9191"}}}}}},"excerpt":"","more":"<h1 id=\"let-const-var-定义变量的区别是什么\"><a href=\"#let-const-var-定义变量的区别是什么\" class=\"headerlink\" title=\"let const var 定义变量的区别是什么\"></a>let const var 定义变量的区别是什么</h1><ul>\n<li><p><code>let</code></p>\n<ul>\n<li>块作用域</li>\n<li>没有变量提升</li>\n<li>不能重复声明</li>\n</ul>\n</li>\n<li><p><code>const</code></p>\n<ul>\n<li>声明常量，不能修改</li>\n<li>必须初始化</li>\n<li>块作用域</li>\n<li>没有变量提升</li>\n<li>不能重复声明</li>\n</ul>\n</li>\n<li><p><code>var</code></p>\n<ul>\n<li>没有块的概念</li>\n<li>可以跨块访问，但是不能跨函数访问</li>\n<li>会进行变量提升</li>\n</ul>\n</li>\n</ul>\n"},{"title":"ES6 新增用法 ( 六 )","date":"2021-06-25T11:17:42.000Z","top_img":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg","cover":"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/desktop.png","comments":1,"_content":"\n# 类基本用法\n\n## 类的属性和方法\n\n声明一个类的写法 :\n\n```js\n// 定义一个叫  Animal 的类\nclass Animal {\n  // constructor 构造函数\n  constructor(color) {\n    this.color = color;\n  }\n}\n```\n\n可以看到类里面 ( 花括号 `{}` 里面 ) 有一个叫 `constructor` 方法 , 它就是构造方法 , 构造方法里面的 `this` , 指向的是该类实例化后的对象 , 这就是实现了一个类的声明 , 如果你没有编写 `constructor` 方法 , 执行的时候也会被加上一个默认的空的 `constructor` 方法 , constructor 方法是必须的 , 也是唯一的 , 一个类体不能含有多个 constructor 构造方法\n\n## 类的实例化对象\n\n给类添加属性和方法 , 把类名后面的括号 `{}` 里面的内容称之为类体 , 我们会在类体内来编写类的属性和方法\n\n```js\nclass Animal {\n  // 构造方法\n  constructor(name) {\n    // 属性\n    this.name = name;\n  }\n  // 自定义方法 getName()\n  getName() {\n    return this.name;\n  }\n}\n```\n\n## 类的自定义方法\n\n```js\nclass Animal {\n  // 构造方法\n  constructor(name) {\n    // 属性\n    this.name = name;\n  }\n  // 自定义方法 getName()\n  getName() {\n    return `我想念 ${this.name}`;\n  }\n}\n\n// 创建一个 Animal 实例对象 dog\nlet dog = new Animal(\"村口消失的大黄\");\nconsole.log(dog.name); // 村口消失的大黄\nconsole.log(dog.getName()); // 我想念 村口消失的大黄\n```\n\n## 类的静态方法\n\n如果在一个方法前 , 加上 `static` 关键字 , 就表示该方法**不会被实例继承** , 而是直接通过类来调用 , 这就称为 \"静态方法\" , 类的静态方法可以被类直接调用\n\n```js\nclass Father {\n  static hello() {\n    return \"hello\";\n  }\n}\nconsole.log(Father.hello());\n```\n\n## 类的继承\n\n`ES6` 使用 `extends` 关键字来实现子类继承父类\n`super` , 它相当于是父类中的 `this`\n\n```js\n// 父类 Animal\nclass Animal {}\n\n// 子类 Dog\nclass Dog extends Animal {\n  // 构造方法\n  constructor(name, color) {\n    super(name);\n    this.color = color;\n  }\n}\n```\n\n**可以用 `super` 来引用父类 , 访问父类的方法**\n\n```js\nclass Animal {\n  // 构造方法\n  constructor(name) {\n    // 属性\n    this.name = name;\n  }\n\n  // 父类自定义方法\n  hello() {\n    return \"Hello ~\";\n  }\n}\n\n// 子类 Dog\nclass Dog extends Animal {\n  // 构造方法\n  constructor(name, color) {\n    super(name);\n    this.color = color;\n  }\n\n  // 子类的实例方法\n  getSomething() {\n    return super.hello();\n  }\n}\n// 创建 dog 实例对象\nlet dog = new Dog(\"dog\", \"orange\");\n// 调用子类方法\nconsole.log(dog.getSomething());\n```\n\n在父类中 , 我们定义了 `say` 方法 , 想要在子类中调用父类的 `say` 方法的话 , 我们使用 `super.say()` 即可实现\n\n**使用 `super` 有几个要注意的事项 :**\n\n1. 子类必须在 `constructor` 方法中调用 `super` 方法\n2. 调用 `super()` , 才可以使用 `this` , 否则报错\n\n# Module 模块\n\n## 模块化的初衷\n\n高内聚,低耦合\n\n目前还没有浏览器支持 `ES6` 的 `module` 模块\n但是可以解决 :\n\n1. vscode 安装 live sever\n2. `<script type=\"module\">` 将 `script` 标签中的 `type` 的类型换成 `module` , 告诉浏览器我们要使用 `es6` 的模块化了\n\n## 导出 Export\n\n导出 `Export` : 作为一个模块 , 它可以选择性地给其他模块暴露 ( 提供 ) 自己的属性和方法 , 供其他模块使用\n\n## 导入 Import\n\n导入 `Import` : 作为一个模块 , 可以根据需要 , 引入其他模块的提供的属性或者方法 , 供自己模块使用\n\n## 实现 导入 Import 和 导出 Export\n\n假设 `moduleB` 模块代码 :\n\n```js\n// moduleB.js\n// 导出变量 name\nlet name = \"前端君\";\nexport { name };\n```\n\n假设 `moduleA` 模块代码 :\n\n```js\n// moduleA.js\n// 导入 moduleB 的属性 name\nimport { name } from \"./moduleB.js\";\nconsole.log(name); // 前端君\n```\n\n## 批量 导入 和 导出\n\n模块 B 批量导出\n\n```js\n// moduleB.js\nlet name = \"前端君\";\nlet age = 20;\nfunction hello() {\n  console.log(\"Hello ~ 前端君\");\n}\nexport { name, age, hello };\n```\n\n模块 A 批量导入\n\n```js\n// moduleA.js\nimport { name, age, hello } from \"./moduleB.js\";\nconsole.log(name); // 前端君\nconsole.log(age); // 20\nhello(); // Hello ~ 前端君\n```\n\n## 重命名导出的变量\n\n想给导入的变量换一个名字的话 , 可以这样做 :\n使用关键字 `as` , 可以实现给变量重命名\n\n```js\n// moduleA.js\nimport { name as newName } from \"./moduleB.js\";\nconsole.log(newName); // 前端君\n```\n\n## 整体导入\n\n可以使用星号 `*` 实现整体导入 :\n使用星号符 `*` 将模块 `B` 提供的所有属性和方法整体导入赋值给变量 `obj` , 我们可以用点运算符 `.` 来获取它的属性和方法\n\n```js\n// moduleB.js\nlet name = \"前端君\";\nlet age = 20;\nfunction hello() {\n  console.log(\"Hello ~ 前端君\");\n}\nexport { name, age, hello };\n```\n\n```js\n// moduleA.js\nimport * as obj from \"./moduleB.js\";\nconsole.log(obj.name); // 前端君\nconsole.log(obj.age); // 20\nobj.hello(); // Hello ~ 前端君\n```\n\n## 默认导出\n\n默认导出 , 每个模块支持导出一个没有名字的变量 , 使用关键语句 `export default` 来实现 :\n\n```js\n// moduleB.js\nexport default function () {\n  console.log(\"I'm a default function.\");\n}\n```\n\n导入这个模块的时候 , 可以为这个匿名函数取任意的名字 , 我们试一下导入上面那个匿名函数\n\n```js\n// moduleA.js\nimport defaultFunction from \"./moduleB.js\";\ndefaultFunction(); // I'm a default function.\n```\n\n## 注意事项\n\n### 声明的变量 , 对外都是只读的\n\n```js\n// moduleB.js\nlet name = \"前端君\";\nexport { name };\n```\n\n```js\n// moduleA.js\nimport { name } from \"./moduleB.js\";\nname = \"tom\"; // 报错: name is read-only\n```\n\n但是 , 如果模块 `B` 导出的是对象类型的值 , 就可修改 , 实质上是地址不可修改 , 可修改的是地址指向的内容\n\n```js\n// moduleB.js\nlet person = {\n  name: \"张三\",\n  age: 40,\n};\nexport { person };\n```\n\n```js\n// moduleA.js\nimport { person } from \"./moduleB.js\";\nperson.name = \"李四\";\nconsole.log(person.name); // 李四\n```\n\n### 导入不存在的变量会报错\n\n```js\n// moduleB.js\nlet name = \"前端君\";\nexport { name };\n```\n\n```js\n// moduleA.js\nimport { height } from \"./moduleB.js\";\nconsole.log(height); // 报错: does not provide an export named 'height'\n```\n","source":"_posts/js/es6-day06.md","raw":"---\ntitle: ES6 新增用法 ( 六 )\ndate: 2021-06-25 19:17:42\ntop_img: https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg\ncover:\ntags:\n  - js\n  - javascript\n  - ES6\n  - class\n  - export\n  - import\n  - module\n  - extends\ncategories:\n  - js\n  - ES6\ncomments:\n---\n\n# 类基本用法\n\n## 类的属性和方法\n\n声明一个类的写法 :\n\n```js\n// 定义一个叫  Animal 的类\nclass Animal {\n  // constructor 构造函数\n  constructor(color) {\n    this.color = color;\n  }\n}\n```\n\n可以看到类里面 ( 花括号 `{}` 里面 ) 有一个叫 `constructor` 方法 , 它就是构造方法 , 构造方法里面的 `this` , 指向的是该类实例化后的对象 , 这就是实现了一个类的声明 , 如果你没有编写 `constructor` 方法 , 执行的时候也会被加上一个默认的空的 `constructor` 方法 , constructor 方法是必须的 , 也是唯一的 , 一个类体不能含有多个 constructor 构造方法\n\n## 类的实例化对象\n\n给类添加属性和方法 , 把类名后面的括号 `{}` 里面的内容称之为类体 , 我们会在类体内来编写类的属性和方法\n\n```js\nclass Animal {\n  // 构造方法\n  constructor(name) {\n    // 属性\n    this.name = name;\n  }\n  // 自定义方法 getName()\n  getName() {\n    return this.name;\n  }\n}\n```\n\n## 类的自定义方法\n\n```js\nclass Animal {\n  // 构造方法\n  constructor(name) {\n    // 属性\n    this.name = name;\n  }\n  // 自定义方法 getName()\n  getName() {\n    return `我想念 ${this.name}`;\n  }\n}\n\n// 创建一个 Animal 实例对象 dog\nlet dog = new Animal(\"村口消失的大黄\");\nconsole.log(dog.name); // 村口消失的大黄\nconsole.log(dog.getName()); // 我想念 村口消失的大黄\n```\n\n## 类的静态方法\n\n如果在一个方法前 , 加上 `static` 关键字 , 就表示该方法**不会被实例继承** , 而是直接通过类来调用 , 这就称为 \"静态方法\" , 类的静态方法可以被类直接调用\n\n```js\nclass Father {\n  static hello() {\n    return \"hello\";\n  }\n}\nconsole.log(Father.hello());\n```\n\n## 类的继承\n\n`ES6` 使用 `extends` 关键字来实现子类继承父类\n`super` , 它相当于是父类中的 `this`\n\n```js\n// 父类 Animal\nclass Animal {}\n\n// 子类 Dog\nclass Dog extends Animal {\n  // 构造方法\n  constructor(name, color) {\n    super(name);\n    this.color = color;\n  }\n}\n```\n\n**可以用 `super` 来引用父类 , 访问父类的方法**\n\n```js\nclass Animal {\n  // 构造方法\n  constructor(name) {\n    // 属性\n    this.name = name;\n  }\n\n  // 父类自定义方法\n  hello() {\n    return \"Hello ~\";\n  }\n}\n\n// 子类 Dog\nclass Dog extends Animal {\n  // 构造方法\n  constructor(name, color) {\n    super(name);\n    this.color = color;\n  }\n\n  // 子类的实例方法\n  getSomething() {\n    return super.hello();\n  }\n}\n// 创建 dog 实例对象\nlet dog = new Dog(\"dog\", \"orange\");\n// 调用子类方法\nconsole.log(dog.getSomething());\n```\n\n在父类中 , 我们定义了 `say` 方法 , 想要在子类中调用父类的 `say` 方法的话 , 我们使用 `super.say()` 即可实现\n\n**使用 `super` 有几个要注意的事项 :**\n\n1. 子类必须在 `constructor` 方法中调用 `super` 方法\n2. 调用 `super()` , 才可以使用 `this` , 否则报错\n\n# Module 模块\n\n## 模块化的初衷\n\n高内聚,低耦合\n\n目前还没有浏览器支持 `ES6` 的 `module` 模块\n但是可以解决 :\n\n1. vscode 安装 live sever\n2. `<script type=\"module\">` 将 `script` 标签中的 `type` 的类型换成 `module` , 告诉浏览器我们要使用 `es6` 的模块化了\n\n## 导出 Export\n\n导出 `Export` : 作为一个模块 , 它可以选择性地给其他模块暴露 ( 提供 ) 自己的属性和方法 , 供其他模块使用\n\n## 导入 Import\n\n导入 `Import` : 作为一个模块 , 可以根据需要 , 引入其他模块的提供的属性或者方法 , 供自己模块使用\n\n## 实现 导入 Import 和 导出 Export\n\n假设 `moduleB` 模块代码 :\n\n```js\n// moduleB.js\n// 导出变量 name\nlet name = \"前端君\";\nexport { name };\n```\n\n假设 `moduleA` 模块代码 :\n\n```js\n// moduleA.js\n// 导入 moduleB 的属性 name\nimport { name } from \"./moduleB.js\";\nconsole.log(name); // 前端君\n```\n\n## 批量 导入 和 导出\n\n模块 B 批量导出\n\n```js\n// moduleB.js\nlet name = \"前端君\";\nlet age = 20;\nfunction hello() {\n  console.log(\"Hello ~ 前端君\");\n}\nexport { name, age, hello };\n```\n\n模块 A 批量导入\n\n```js\n// moduleA.js\nimport { name, age, hello } from \"./moduleB.js\";\nconsole.log(name); // 前端君\nconsole.log(age); // 20\nhello(); // Hello ~ 前端君\n```\n\n## 重命名导出的变量\n\n想给导入的变量换一个名字的话 , 可以这样做 :\n使用关键字 `as` , 可以实现给变量重命名\n\n```js\n// moduleA.js\nimport { name as newName } from \"./moduleB.js\";\nconsole.log(newName); // 前端君\n```\n\n## 整体导入\n\n可以使用星号 `*` 实现整体导入 :\n使用星号符 `*` 将模块 `B` 提供的所有属性和方法整体导入赋值给变量 `obj` , 我们可以用点运算符 `.` 来获取它的属性和方法\n\n```js\n// moduleB.js\nlet name = \"前端君\";\nlet age = 20;\nfunction hello() {\n  console.log(\"Hello ~ 前端君\");\n}\nexport { name, age, hello };\n```\n\n```js\n// moduleA.js\nimport * as obj from \"./moduleB.js\";\nconsole.log(obj.name); // 前端君\nconsole.log(obj.age); // 20\nobj.hello(); // Hello ~ 前端君\n```\n\n## 默认导出\n\n默认导出 , 每个模块支持导出一个没有名字的变量 , 使用关键语句 `export default` 来实现 :\n\n```js\n// moduleB.js\nexport default function () {\n  console.log(\"I'm a default function.\");\n}\n```\n\n导入这个模块的时候 , 可以为这个匿名函数取任意的名字 , 我们试一下导入上面那个匿名函数\n\n```js\n// moduleA.js\nimport defaultFunction from \"./moduleB.js\";\ndefaultFunction(); // I'm a default function.\n```\n\n## 注意事项\n\n### 声明的变量 , 对外都是只读的\n\n```js\n// moduleB.js\nlet name = \"前端君\";\nexport { name };\n```\n\n```js\n// moduleA.js\nimport { name } from \"./moduleB.js\";\nname = \"tom\"; // 报错: name is read-only\n```\n\n但是 , 如果模块 `B` 导出的是对象类型的值 , 就可修改 , 实质上是地址不可修改 , 可修改的是地址指向的内容\n\n```js\n// moduleB.js\nlet person = {\n  name: \"张三\",\n  age: 40,\n};\nexport { person };\n```\n\n```js\n// moduleA.js\nimport { person } from \"./moduleB.js\";\nperson.name = \"李四\";\nconsole.log(person.name); // 李四\n```\n\n### 导入不存在的变量会报错\n\n```js\n// moduleB.js\nlet name = \"前端君\";\nexport { name };\n```\n\n```js\n// moduleA.js\nimport { height } from \"./moduleB.js\";\nconsole.log(height); // 报错: does not provide an export named 'height'\n```\n","slug":"js/es6-day06","published":1,"updated":"2021-06-28T10:45:47.006Z","layout":"post","photos":[],"link":"","_id":"cksvxwnnm001igubqcc6i7dlr","content":"<h1 id=\"类基本用法\"><a href=\"#类基本用法\" class=\"headerlink\" title=\"类基本用法\"></a>类基本用法</h1><h2 id=\"类的属性和方法\"><a href=\"#类的属性和方法\" class=\"headerlink\" title=\"类的属性和方法\"></a>类的属性和方法</h2><p>声明一个类的写法 :</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义一个叫  Animal 的类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// constructor 构造函数</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">color</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.color = color;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到类里面 ( 花括号 <code>&#123;&#125;</code> 里面 ) 有一个叫 <code>constructor</code> 方法 , 它就是构造方法 , 构造方法里面的 <code>this</code> , 指向的是该类实例化后的对象 , 这就是实现了一个类的声明 , 如果你没有编写 <code>constructor</code> 方法 , 执行的时候也会被加上一个默认的空的 <code>constructor</code> 方法 , constructor 方法是必须的 , 也是唯一的 , 一个类体不能含有多个 constructor 构造方法</p>\n<h2 id=\"类的实例化对象\"><a href=\"#类的实例化对象\" class=\"headerlink\" title=\"类的实例化对象\"></a>类的实例化对象</h2><p>给类添加属性和方法 , 把类名后面的括号 <code>&#123;&#125;</code> 里面的内容称之为类体 , 我们会在类体内来编写类的属性和方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 构造方法</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">name</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 属性</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 自定义方法 getName()</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">getName</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"类的自定义方法\"><a href=\"#类的自定义方法\" class=\"headerlink\" title=\"类的自定义方法\"></a>类的自定义方法</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 构造方法</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">name</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 属性</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 自定义方法 getName()</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">getName</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`我想念 <span class=\"subst\">$&#123;<span class=\"built_in\">this</span>.name&#125;</span>`</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建一个 Animal 实例对象 dog</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> dog = <span class=\"keyword\">new</span> Animal(<span class=\"string\">&quot;村口消失的大黄&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(dog.name); <span class=\"comment\">// 村口消失的大黄</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(dog.getName()); <span class=\"comment\">// 我想念 村口消失的大黄</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"类的静态方法\"><a href=\"#类的静态方法\" class=\"headerlink\" title=\"类的静态方法\"></a>类的静态方法</h2><p>如果在一个方法前 , 加上 <code>static</code> 关键字 , 就表示该方法<strong>不会被实例继承</strong> , 而是直接通过类来调用 , 这就称为 “静态方法” , 类的静态方法可以被类直接调用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Father</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"title\">hello</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello&quot;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Father.hello());</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"类的继承\"><a href=\"#类的继承\" class=\"headerlink\" title=\"类的继承\"></a>类的继承</h2><p><code>ES6</code> 使用 <code>extends</code> 关键字来实现子类继承父类<br><code>super</code> , 它相当于是父类中的 <code>this</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 父类 Animal</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 子类 Dog</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span> <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 构造方法</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">name, color</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">super</span>(name);</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.color = color;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>可以用 <code>super</code> 来引用父类 , 访问父类的方法</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 构造方法</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">name</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 属性</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 父类自定义方法</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">hello</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;Hello ~&quot;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 子类 Dog</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span> <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 构造方法</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">name, color</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">super</span>(name);</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.color = color;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 子类的实例方法</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">getSomething</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">super</span>.hello();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 创建 dog 实例对象</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> dog = <span class=\"keyword\">new</span> Dog(<span class=\"string\">&quot;dog&quot;</span>, <span class=\"string\">&quot;orange&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 调用子类方法</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(dog.getSomething());</span><br></pre></td></tr></table></figure>\n\n<p>在父类中 , 我们定义了 <code>say</code> 方法 , 想要在子类中调用父类的 <code>say</code> 方法的话 , 我们使用 <code>super.say()</code> 即可实现</p>\n<p><strong>使用 <code>super</code> 有几个要注意的事项 :</strong></p>\n<ol>\n<li>子类必须在 <code>constructor</code> 方法中调用 <code>super</code> 方法</li>\n<li>调用 <code>super()</code> , 才可以使用 <code>this</code> , 否则报错</li>\n</ol>\n<h1 id=\"Module-模块\"><a href=\"#Module-模块\" class=\"headerlink\" title=\"Module 模块\"></a>Module 模块</h1><h2 id=\"模块化的初衷\"><a href=\"#模块化的初衷\" class=\"headerlink\" title=\"模块化的初衷\"></a>模块化的初衷</h2><p>高内聚,低耦合</p>\n<p>目前还没有浏览器支持 <code>ES6</code> 的 <code>module</code> 模块<br>但是可以解决 :</p>\n<ol>\n<li>vscode 安装 live sever</li>\n<li><code>&lt;script type=&quot;module&quot;&gt;</code> 将 <code>script</code> 标签中的 <code>type</code> 的类型换成 <code>module</code> , 告诉浏览器我们要使用 <code>es6</code> 的模块化了</li>\n</ol>\n<h2 id=\"导出-Export\"><a href=\"#导出-Export\" class=\"headerlink\" title=\"导出 Export\"></a>导出 Export</h2><p>导出 <code>Export</code> : 作为一个模块 , 它可以选择性地给其他模块暴露 ( 提供 ) 自己的属性和方法 , 供其他模块使用</p>\n<h2 id=\"导入-Import\"><a href=\"#导入-Import\" class=\"headerlink\" title=\"导入 Import\"></a>导入 Import</h2><p>导入 <code>Import</code> : 作为一个模块 , 可以根据需要 , 引入其他模块的提供的属性或者方法 , 供自己模块使用</p>\n<h2 id=\"实现-导入-Import-和-导出-Export\"><a href=\"#实现-导入-Import-和-导出-Export\" class=\"headerlink\" title=\"实现 导入 Import 和 导出 Export\"></a>实现 导入 Import 和 导出 Export</h2><p>假设 <code>moduleB</code> 模块代码 :</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// moduleB.js</span></span><br><span class=\"line\"><span class=\"comment\">// 导出变量 name</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> name = <span class=\"string\">&quot;前端君&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; name &#125;;</span><br></pre></td></tr></table></figure>\n\n<p>假设 <code>moduleA</code> 模块代码 :</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// moduleA.js</span></span><br><span class=\"line\"><span class=\"comment\">// 导入 moduleB 的属性 name</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; name &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./moduleB.js&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(name); <span class=\"comment\">// 前端君</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"批量-导入-和-导出\"><a href=\"#批量-导入-和-导出\" class=\"headerlink\" title=\"批量 导入 和 导出\"></a>批量 导入 和 导出</h2><p>模块 B 批量导出</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// moduleB.js</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> name = <span class=\"string\">&quot;前端君&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> age = <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hello</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;Hello ~ 前端君&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; name, age, hello &#125;;</span><br></pre></td></tr></table></figure>\n\n<p>模块 A 批量导入</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// moduleA.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; name, age, hello &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./moduleB.js&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(name); <span class=\"comment\">// 前端君</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(age); <span class=\"comment\">// 20</span></span><br><span class=\"line\">hello(); <span class=\"comment\">// Hello ~ 前端君</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"重命名导出的变量\"><a href=\"#重命名导出的变量\" class=\"headerlink\" title=\"重命名导出的变量\"></a>重命名导出的变量</h2><p>想给导入的变量换一个名字的话 , 可以这样做 :<br>使用关键字 <code>as</code> , 可以实现给变量重命名</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// moduleA.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; name <span class=\"keyword\">as</span> newName &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./moduleB.js&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newName); <span class=\"comment\">// 前端君</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"整体导入\"><a href=\"#整体导入\" class=\"headerlink\" title=\"整体导入\"></a>整体导入</h2><p>可以使用星号 <code>*</code> 实现整体导入 :<br>使用星号符 <code>*</code> 将模块 <code>B</code> 提供的所有属性和方法整体导入赋值给变量 <code>obj</code> , 我们可以用点运算符 <code>.</code> 来获取它的属性和方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// moduleB.js</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> name = <span class=\"string\">&quot;前端君&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> age = <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hello</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;Hello ~ 前端君&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; name, age, hello &#125;;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// moduleA.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> obj <span class=\"keyword\">from</span> <span class=\"string\">&quot;./moduleB.js&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.name); <span class=\"comment\">// 前端君</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.age); <span class=\"comment\">// 20</span></span><br><span class=\"line\">obj.hello(); <span class=\"comment\">// Hello ~ 前端君</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"默认导出\"><a href=\"#默认导出\" class=\"headerlink\" title=\"默认导出\"></a>默认导出</h2><p>默认导出 , 每个模块支持导出一个没有名字的变量 , 使用关键语句 <code>export default</code> 来实现 :</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// moduleB.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;I&#x27;m a default function.&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>导入这个模块的时候 , 可以为这个匿名函数取任意的名字 , 我们试一下导入上面那个匿名函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// moduleA.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> defaultFunction <span class=\"keyword\">from</span> <span class=\"string\">&quot;./moduleB.js&quot;</span>;</span><br><span class=\"line\">defaultFunction(); <span class=\"comment\">// I&#x27;m a default function.</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><h3 id=\"声明的变量-对外都是只读的\"><a href=\"#声明的变量-对外都是只读的\" class=\"headerlink\" title=\"声明的变量 , 对外都是只读的\"></a>声明的变量 , 对外都是只读的</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// moduleB.js</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> name = <span class=\"string\">&quot;前端君&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; name &#125;;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// moduleA.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; name &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./moduleB.js&quot;</span>;</span><br><span class=\"line\">name = <span class=\"string\">&quot;tom&quot;</span>; <span class=\"comment\">// 报错: name is read-only</span></span><br></pre></td></tr></table></figure>\n\n<p>但是 , 如果模块 <code>B</code> 导出的是对象类型的值 , 就可修改 , 实质上是地址不可修改 , 可修改的是地址指向的内容</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// moduleB.js</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> person = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;张三&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">40</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; person &#125;;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// moduleA.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; person &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./moduleB.js&quot;</span>;</span><br><span class=\"line\">person.name = <span class=\"string\">&quot;李四&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person.name); <span class=\"comment\">// 李四</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"导入不存在的变量会报错\"><a href=\"#导入不存在的变量会报错\" class=\"headerlink\" title=\"导入不存在的变量会报错\"></a>导入不存在的变量会报错</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// moduleB.js</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> name = <span class=\"string\">&quot;前端君&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; name &#125;;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// moduleA.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; height &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./moduleB.js&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(height); <span class=\"comment\">// 报错: does not provide an export named &#x27;height&#x27;</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{"link":{"class1":{"class_name":"舍友","link_list":{"1":{"name":"codeAntg","link":"https://blog.csdn.net/weixin_44745147","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/fjh.jpg","descr":"那家刀削面不错","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class2":{"class_name":"致谢","link_list":{"1":{"name":"JerrC","link":"https://immyw.com","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/immyw.png","descr":"今日事,今日毕","width":"1px","style":"solid","color":"#60d0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/hexo.svg","descr":"A fast, simple & powerful blog framework","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class3":{"class_name":"友人","link_list":{"1":{"name":"Chester","link":"http://chesterlds.cn","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/chester.jpg","descr":null,"width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Wangs","link":"https://wangsss.cn/","avatar":"https://wangsss.cn/img/avatar.png","descr":"不疯魔，不成活 ~","width":"1px","style":"solid","color":"#9d9d9d","custom":"link_custom1","time":"4s","namecolor":"0094ff","descolor":"#ff9191"}}}}}},"excerpt":"","more":"<h1 id=\"类基本用法\"><a href=\"#类基本用法\" class=\"headerlink\" title=\"类基本用法\"></a>类基本用法</h1><h2 id=\"类的属性和方法\"><a href=\"#类的属性和方法\" class=\"headerlink\" title=\"类的属性和方法\"></a>类的属性和方法</h2><p>声明一个类的写法 :</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义一个叫  Animal 的类</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// constructor 构造函数</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">color</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.color = color;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到类里面 ( 花括号 <code>&#123;&#125;</code> 里面 ) 有一个叫 <code>constructor</code> 方法 , 它就是构造方法 , 构造方法里面的 <code>this</code> , 指向的是该类实例化后的对象 , 这就是实现了一个类的声明 , 如果你没有编写 <code>constructor</code> 方法 , 执行的时候也会被加上一个默认的空的 <code>constructor</code> 方法 , constructor 方法是必须的 , 也是唯一的 , 一个类体不能含有多个 constructor 构造方法</p>\n<h2 id=\"类的实例化对象\"><a href=\"#类的实例化对象\" class=\"headerlink\" title=\"类的实例化对象\"></a>类的实例化对象</h2><p>给类添加属性和方法 , 把类名后面的括号 <code>&#123;&#125;</code> 里面的内容称之为类体 , 我们会在类体内来编写类的属性和方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 构造方法</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">name</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 属性</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 自定义方法 getName()</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">getName</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"类的自定义方法\"><a href=\"#类的自定义方法\" class=\"headerlink\" title=\"类的自定义方法\"></a>类的自定义方法</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 构造方法</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">name</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 属性</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 自定义方法 getName()</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">getName</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`我想念 <span class=\"subst\">$&#123;<span class=\"built_in\">this</span>.name&#125;</span>`</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建一个 Animal 实例对象 dog</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> dog = <span class=\"keyword\">new</span> Animal(<span class=\"string\">&quot;村口消失的大黄&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(dog.name); <span class=\"comment\">// 村口消失的大黄</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(dog.getName()); <span class=\"comment\">// 我想念 村口消失的大黄</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"类的静态方法\"><a href=\"#类的静态方法\" class=\"headerlink\" title=\"类的静态方法\"></a>类的静态方法</h2><p>如果在一个方法前 , 加上 <code>static</code> 关键字 , 就表示该方法<strong>不会被实例继承</strong> , 而是直接通过类来调用 , 这就称为 “静态方法” , 类的静态方法可以被类直接调用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Father</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"function\"><span class=\"title\">hello</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;hello&quot;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Father.hello());</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"类的继承\"><a href=\"#类的继承\" class=\"headerlink\" title=\"类的继承\"></a>类的继承</h2><p><code>ES6</code> 使用 <code>extends</code> 关键字来实现子类继承父类<br><code>super</code> , 它相当于是父类中的 <code>this</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 父类 Animal</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span> </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 子类 Dog</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span> <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 构造方法</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">name, color</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">super</span>(name);</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.color = color;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>可以用 <code>super</code> 来引用父类 , 访问父类的方法</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 构造方法</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">name</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 属性</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 父类自定义方法</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">hello</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;Hello ~&quot;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 子类 Dog</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Dog</span> <span class=\"keyword\">extends</span> <span class=\"title\">Animal</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 构造方法</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">name, color</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">super</span>(name);</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.color = color;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 子类的实例方法</span></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">getSomething</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">super</span>.hello();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 创建 dog 实例对象</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> dog = <span class=\"keyword\">new</span> Dog(<span class=\"string\">&quot;dog&quot;</span>, <span class=\"string\">&quot;orange&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 调用子类方法</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(dog.getSomething());</span><br></pre></td></tr></table></figure>\n\n<p>在父类中 , 我们定义了 <code>say</code> 方法 , 想要在子类中调用父类的 <code>say</code> 方法的话 , 我们使用 <code>super.say()</code> 即可实现</p>\n<p><strong>使用 <code>super</code> 有几个要注意的事项 :</strong></p>\n<ol>\n<li>子类必须在 <code>constructor</code> 方法中调用 <code>super</code> 方法</li>\n<li>调用 <code>super()</code> , 才可以使用 <code>this</code> , 否则报错</li>\n</ol>\n<h1 id=\"Module-模块\"><a href=\"#Module-模块\" class=\"headerlink\" title=\"Module 模块\"></a>Module 模块</h1><h2 id=\"模块化的初衷\"><a href=\"#模块化的初衷\" class=\"headerlink\" title=\"模块化的初衷\"></a>模块化的初衷</h2><p>高内聚,低耦合</p>\n<p>目前还没有浏览器支持 <code>ES6</code> 的 <code>module</code> 模块<br>但是可以解决 :</p>\n<ol>\n<li>vscode 安装 live sever</li>\n<li><code>&lt;script type=&quot;module&quot;&gt;</code> 将 <code>script</code> 标签中的 <code>type</code> 的类型换成 <code>module</code> , 告诉浏览器我们要使用 <code>es6</code> 的模块化了</li>\n</ol>\n<h2 id=\"导出-Export\"><a href=\"#导出-Export\" class=\"headerlink\" title=\"导出 Export\"></a>导出 Export</h2><p>导出 <code>Export</code> : 作为一个模块 , 它可以选择性地给其他模块暴露 ( 提供 ) 自己的属性和方法 , 供其他模块使用</p>\n<h2 id=\"导入-Import\"><a href=\"#导入-Import\" class=\"headerlink\" title=\"导入 Import\"></a>导入 Import</h2><p>导入 <code>Import</code> : 作为一个模块 , 可以根据需要 , 引入其他模块的提供的属性或者方法 , 供自己模块使用</p>\n<h2 id=\"实现-导入-Import-和-导出-Export\"><a href=\"#实现-导入-Import-和-导出-Export\" class=\"headerlink\" title=\"实现 导入 Import 和 导出 Export\"></a>实现 导入 Import 和 导出 Export</h2><p>假设 <code>moduleB</code> 模块代码 :</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// moduleB.js</span></span><br><span class=\"line\"><span class=\"comment\">// 导出变量 name</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> name = <span class=\"string\">&quot;前端君&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; name &#125;;</span><br></pre></td></tr></table></figure>\n\n<p>假设 <code>moduleA</code> 模块代码 :</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// moduleA.js</span></span><br><span class=\"line\"><span class=\"comment\">// 导入 moduleB 的属性 name</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; name &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./moduleB.js&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(name); <span class=\"comment\">// 前端君</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"批量-导入-和-导出\"><a href=\"#批量-导入-和-导出\" class=\"headerlink\" title=\"批量 导入 和 导出\"></a>批量 导入 和 导出</h2><p>模块 B 批量导出</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// moduleB.js</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> name = <span class=\"string\">&quot;前端君&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> age = <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hello</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;Hello ~ 前端君&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; name, age, hello &#125;;</span><br></pre></td></tr></table></figure>\n\n<p>模块 A 批量导入</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// moduleA.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; name, age, hello &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./moduleB.js&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(name); <span class=\"comment\">// 前端君</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(age); <span class=\"comment\">// 20</span></span><br><span class=\"line\">hello(); <span class=\"comment\">// Hello ~ 前端君</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"重命名导出的变量\"><a href=\"#重命名导出的变量\" class=\"headerlink\" title=\"重命名导出的变量\"></a>重命名导出的变量</h2><p>想给导入的变量换一个名字的话 , 可以这样做 :<br>使用关键字 <code>as</code> , 可以实现给变量重命名</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// moduleA.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; name <span class=\"keyword\">as</span> newName &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./moduleB.js&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newName); <span class=\"comment\">// 前端君</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"整体导入\"><a href=\"#整体导入\" class=\"headerlink\" title=\"整体导入\"></a>整体导入</h2><p>可以使用星号 <code>*</code> 实现整体导入 :<br>使用星号符 <code>*</code> 将模块 <code>B</code> 提供的所有属性和方法整体导入赋值给变量 <code>obj</code> , 我们可以用点运算符 <code>.</code> 来获取它的属性和方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// moduleB.js</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> name = <span class=\"string\">&quot;前端君&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> age = <span class=\"number\">20</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hello</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;Hello ~ 前端君&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; name, age, hello &#125;;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// moduleA.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> * <span class=\"keyword\">as</span> obj <span class=\"keyword\">from</span> <span class=\"string\">&quot;./moduleB.js&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.name); <span class=\"comment\">// 前端君</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj.age); <span class=\"comment\">// 20</span></span><br><span class=\"line\">obj.hello(); <span class=\"comment\">// Hello ~ 前端君</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"默认导出\"><a href=\"#默认导出\" class=\"headerlink\" title=\"默认导出\"></a>默认导出</h2><p>默认导出 , 每个模块支持导出一个没有名字的变量 , 使用关键语句 <code>export default</code> 来实现 :</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// moduleB.js</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;I&#x27;m a default function.&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>导入这个模块的时候 , 可以为这个匿名函数取任意的名字 , 我们试一下导入上面那个匿名函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// moduleA.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> defaultFunction <span class=\"keyword\">from</span> <span class=\"string\">&quot;./moduleB.js&quot;</span>;</span><br><span class=\"line\">defaultFunction(); <span class=\"comment\">// I&#x27;m a default function.</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><h3 id=\"声明的变量-对外都是只读的\"><a href=\"#声明的变量-对外都是只读的\" class=\"headerlink\" title=\"声明的变量 , 对外都是只读的\"></a>声明的变量 , 对外都是只读的</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// moduleB.js</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> name = <span class=\"string\">&quot;前端君&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; name &#125;;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// moduleA.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; name &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./moduleB.js&quot;</span>;</span><br><span class=\"line\">name = <span class=\"string\">&quot;tom&quot;</span>; <span class=\"comment\">// 报错: name is read-only</span></span><br></pre></td></tr></table></figure>\n\n<p>但是 , 如果模块 <code>B</code> 导出的是对象类型的值 , 就可修改 , 实质上是地址不可修改 , 可修改的是地址指向的内容</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// moduleB.js</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> person = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;张三&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">40</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; person &#125;;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// moduleA.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; person &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./moduleB.js&quot;</span>;</span><br><span class=\"line\">person.name = <span class=\"string\">&quot;李四&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(person.name); <span class=\"comment\">// 李四</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"导入不存在的变量会报错\"><a href=\"#导入不存在的变量会报错\" class=\"headerlink\" title=\"导入不存在的变量会报错\"></a>导入不存在的变量会报错</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// moduleB.js</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> name = <span class=\"string\">&quot;前端君&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123; name &#125;;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// moduleA.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; height &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;./moduleB.js&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(height); <span class=\"comment\">// 报错: does not provide an export named &#x27;height&#x27;</span></span><br></pre></td></tr></table></figure>\n"},{"title":"ES7 中的 Async/await","date":"2021-06-25T12:34:37.000Z","top_img":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg","cover":"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/desktop.png","comments":1,"_content":"\n# Async/await\n\n## 为什么要有 Async/await ?\n\n`Promise` 虽然跳出了异步嵌套的怪圈 , 解决了回调地狱的问题 , 用链式表达更加清晰 , 但是我们也发现如果有大量的异步请求的时候 , 流程复杂的情况下 , 会发现充满了屏幕的 `then` , 看起来非常吃力 , 而 `ES7` 的 `Async/Await` 的出现就是为了解决这种复杂的情况\n\n## Async/await 的基本使用\n\n`async` 用于申明一个 `function` 是异步的 , 返回一个 `promise` 对象 , 而 `await` 可以认为是 `async wait` 的简写 , 等待一个异步方法执行完成 , `async` 必须声明的是一个 `function` , `await` 必须在声明的函数内部使用\n\n```js\n// async 用于声明一个 function 是异步的 , 返回一个 Promise 对象\nasync function demo() {\n  setTimeout(() => {\n    console.log(\"我是 async 声明的异步函数\");\n  }, 3000);\n\n  return \"我是 async 声明的异步函数的返回值\";\n}\ndemo();\nconsole.log(demo());\ndemo().then((res) => {\n  console.log(res);\n});\n\n// 打印结果:\n//  Promise {<fulfilled>: \"我是 async 声明的异步函数的返回值\"}\n//  我是 async 声明的异步函数的返回值\n//  我是 async 声明的异步函数 ( 调用了三次,打印了三遍 )\n```\n\n`await` 可以认为是 `async wait` 的简写 , `await` 必须在声明的函数内部使用 , 不能单独使用\n`await` 等待的虽然是 `Promise` 对象 , 但不必写 `.then()` , 直接可以得到返回值\n\n```js\nasync function demo2() {\n  let res = await Promise.resolve(123);\n  console.log(res);\n}\ndemo2();\n```\n","source":"_posts/js/es7-async-await.md","raw":"---\ntitle: ES7 中的 Async/await\ndate: 2021-06-25 20:34:37\ntop_img: https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg\ncover:\ntags:\n  - js\n  - javascript\n  - ES6\n  - async\n  - await\ncategories:\n  - js\n  - ES7\ncomments:\n---\n\n# Async/await\n\n## 为什么要有 Async/await ?\n\n`Promise` 虽然跳出了异步嵌套的怪圈 , 解决了回调地狱的问题 , 用链式表达更加清晰 , 但是我们也发现如果有大量的异步请求的时候 , 流程复杂的情况下 , 会发现充满了屏幕的 `then` , 看起来非常吃力 , 而 `ES7` 的 `Async/Await` 的出现就是为了解决这种复杂的情况\n\n## Async/await 的基本使用\n\n`async` 用于申明一个 `function` 是异步的 , 返回一个 `promise` 对象 , 而 `await` 可以认为是 `async wait` 的简写 , 等待一个异步方法执行完成 , `async` 必须声明的是一个 `function` , `await` 必须在声明的函数内部使用\n\n```js\n// async 用于声明一个 function 是异步的 , 返回一个 Promise 对象\nasync function demo() {\n  setTimeout(() => {\n    console.log(\"我是 async 声明的异步函数\");\n  }, 3000);\n\n  return \"我是 async 声明的异步函数的返回值\";\n}\ndemo();\nconsole.log(demo());\ndemo().then((res) => {\n  console.log(res);\n});\n\n// 打印结果:\n//  Promise {<fulfilled>: \"我是 async 声明的异步函数的返回值\"}\n//  我是 async 声明的异步函数的返回值\n//  我是 async 声明的异步函数 ( 调用了三次,打印了三遍 )\n```\n\n`await` 可以认为是 `async wait` 的简写 , `await` 必须在声明的函数内部使用 , 不能单独使用\n`await` 等待的虽然是 `Promise` 对象 , 但不必写 `.then()` , 直接可以得到返回值\n\n```js\nasync function demo2() {\n  let res = await Promise.resolve(123);\n  console.log(res);\n}\ndemo2();\n```\n","slug":"js/es7-async-await","published":1,"updated":"2021-07-08T11:59:07.594Z","layout":"post","photos":[],"link":"","_id":"cksvxwnnn001ngubq23ucafv7","content":"<h1 id=\"Async-await\"><a href=\"#Async-await\" class=\"headerlink\" title=\"Async/await\"></a>Async/await</h1><h2 id=\"为什么要有-Async-await\"><a href=\"#为什么要有-Async-await\" class=\"headerlink\" title=\"为什么要有 Async/await ?\"></a>为什么要有 Async/await ?</h2><p><code>Promise</code> 虽然跳出了异步嵌套的怪圈 , 解决了回调地狱的问题 , 用链式表达更加清晰 , 但是我们也发现如果有大量的异步请求的时候 , 流程复杂的情况下 , 会发现充满了屏幕的 <code>then</code> , 看起来非常吃力 , 而 <code>ES7</code> 的 <code>Async/Await</code> 的出现就是为了解决这种复杂的情况</p>\n<h2 id=\"Async-await-的基本使用\"><a href=\"#Async-await-的基本使用\" class=\"headerlink\" title=\"Async/await 的基本使用\"></a>Async/await 的基本使用</h2><p><code>async</code> 用于申明一个 <code>function</code> 是异步的 , 返回一个 <code>promise</code> 对象 , 而 <code>await</code> 可以认为是 <code>async wait</code> 的简写 , 等待一个异步方法执行完成 , <code>async</code> 必须声明的是一个 <code>function</code> , <code>await</code> 必须在声明的函数内部使用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// async 用于声明一个 function 是异步的 , 返回一个 Promise 对象</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">demo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;我是 async 声明的异步函数&quot;</span>);</span><br><span class=\"line\">  &#125;, <span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&quot;我是 async 声明的异步函数的返回值&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">demo();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(demo());</span><br><span class=\"line\">demo().then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果:</span></span><br><span class=\"line\"><span class=\"comment\">//  Promise &#123;&lt;fulfilled&gt;: &quot;我是 async 声明的异步函数的返回值&quot;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">//  我是 async 声明的异步函数的返回值</span></span><br><span class=\"line\"><span class=\"comment\">//  我是 async 声明的异步函数 ( 调用了三次,打印了三遍 )</span></span><br></pre></td></tr></table></figure>\n\n<p><code>await</code> 可以认为是 <code>async wait</code> 的简写 , <code>await</code> 必须在声明的函数内部使用 , 不能单独使用<br><code>await</code> 等待的虽然是 <code>Promise</code> 对象 , 但不必写 <code>.then()</code> , 直接可以得到返回值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">demo2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = <span class=\"keyword\">await</span> <span class=\"built_in\">Promise</span>.resolve(<span class=\"number\">123</span>);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">demo2();</span><br></pre></td></tr></table></figure>\n","site":{"data":{"link":{"class1":{"class_name":"舍友","link_list":{"1":{"name":"codeAntg","link":"https://blog.csdn.net/weixin_44745147","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/fjh.jpg","descr":"那家刀削面不错","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class2":{"class_name":"致谢","link_list":{"1":{"name":"JerrC","link":"https://immyw.com","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/immyw.png","descr":"今日事,今日毕","width":"1px","style":"solid","color":"#60d0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/hexo.svg","descr":"A fast, simple & powerful blog framework","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class3":{"class_name":"友人","link_list":{"1":{"name":"Chester","link":"http://chesterlds.cn","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/chester.jpg","descr":null,"width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Wangs","link":"https://wangsss.cn/","avatar":"https://wangsss.cn/img/avatar.png","descr":"不疯魔，不成活 ~","width":"1px","style":"solid","color":"#9d9d9d","custom":"link_custom1","time":"4s","namecolor":"0094ff","descolor":"#ff9191"}}}}}},"excerpt":"","more":"<h1 id=\"Async-await\"><a href=\"#Async-await\" class=\"headerlink\" title=\"Async/await\"></a>Async/await</h1><h2 id=\"为什么要有-Async-await\"><a href=\"#为什么要有-Async-await\" class=\"headerlink\" title=\"为什么要有 Async/await ?\"></a>为什么要有 Async/await ?</h2><p><code>Promise</code> 虽然跳出了异步嵌套的怪圈 , 解决了回调地狱的问题 , 用链式表达更加清晰 , 但是我们也发现如果有大量的异步请求的时候 , 流程复杂的情况下 , 会发现充满了屏幕的 <code>then</code> , 看起来非常吃力 , 而 <code>ES7</code> 的 <code>Async/Await</code> 的出现就是为了解决这种复杂的情况</p>\n<h2 id=\"Async-await-的基本使用\"><a href=\"#Async-await-的基本使用\" class=\"headerlink\" title=\"Async/await 的基本使用\"></a>Async/await 的基本使用</h2><p><code>async</code> 用于申明一个 <code>function</code> 是异步的 , 返回一个 <code>promise</code> 对象 , 而 <code>await</code> 可以认为是 <code>async wait</code> 的简写 , 等待一个异步方法执行完成 , <code>async</code> 必须声明的是一个 <code>function</code> , <code>await</code> 必须在声明的函数内部使用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// async 用于声明一个 function 是异步的 , 返回一个 Promise 对象</span></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">demo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;我是 async 声明的异步函数&quot;</span>);</span><br><span class=\"line\">  &#125;, <span class=\"number\">3000</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&quot;我是 async 声明的异步函数的返回值&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">demo();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(demo());</span><br><span class=\"line\">demo().then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印结果:</span></span><br><span class=\"line\"><span class=\"comment\">//  Promise &#123;&lt;fulfilled&gt;: &quot;我是 async 声明的异步函数的返回值&quot;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">//  我是 async 声明的异步函数的返回值</span></span><br><span class=\"line\"><span class=\"comment\">//  我是 async 声明的异步函数 ( 调用了三次,打印了三遍 )</span></span><br></pre></td></tr></table></figure>\n\n<p><code>await</code> 可以认为是 <code>async wait</code> 的简写 , <code>await</code> 必须在声明的函数内部使用 , 不能单独使用<br><code>await</code> 等待的虽然是 <code>Promise</code> 对象 , 但不必写 <code>.then()</code> , 直接可以得到返回值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">demo2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> res = <span class=\"keyword\">await</span> <span class=\"built_in\">Promise</span>.resolve(<span class=\"number\">123</span>);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">demo2();</span><br></pre></td></tr></table></figure>\n"},{"title":"jQuery Ajax 模板","date":"2021-07-01T14:34:13.000Z","top_img":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg","cover":"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/desktop.png","comments":1,"_content":"\n```js\n$.ajax({\n  url: \"\",\n  type: \"POST\", //GET\n  async: true, //或 false,是否异步\n  data: {\n    name: \"llc\",\n    age: 22,\n  },\n  timeout: 5000, //超时时间\n  dataType: \"json\", //返回的数据格式：json/xml/html/script/jsonp/text\n  beforeSend: function (xhr) {\n    console.log(xhr);\n    console.log(\"发送前\");\n  },\n  success: function (data, textStatus, jqXHR) {\n    console.log(data);\n  },\n  error: function (xhr, textStatus) {\n    console.log(xhr.responseText);\n    console.log(xhr);\n    console.log(textStatus);\n  },\n});\n```\n","source":"_posts/js/jquery-ajax.md","raw":"---\ntitle: jQuery Ajax 模板\ndate: 2021-07-01 22:34:13\ntop_img: https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg\ncover:\ntags:\n  - js\n  - javascript\n  - jQuery\n  - Ajax\ncategories:\n  - js\n  - jQuery\ncomments:\n---\n\n```js\n$.ajax({\n  url: \"\",\n  type: \"POST\", //GET\n  async: true, //或 false,是否异步\n  data: {\n    name: \"llc\",\n    age: 22,\n  },\n  timeout: 5000, //超时时间\n  dataType: \"json\", //返回的数据格式：json/xml/html/script/jsonp/text\n  beforeSend: function (xhr) {\n    console.log(xhr);\n    console.log(\"发送前\");\n  },\n  success: function (data, textStatus, jqXHR) {\n    console.log(data);\n  },\n  error: function (xhr, textStatus) {\n    console.log(xhr.responseText);\n    console.log(xhr);\n    console.log(textStatus);\n  },\n});\n```\n","slug":"js/jquery-ajax","published":1,"updated":"2021-07-06T03:31:01.384Z","layout":"post","photos":[],"link":"","_id":"cksvxwnno001pgubq81tt7v00","content":"<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.ajax(&#123;</span><br><span class=\"line\">  <span class=\"attr\">url</span>: <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">type</span>: <span class=\"string\">&quot;POST&quot;</span>, <span class=\"comment\">//GET</span></span><br><span class=\"line\">  <span class=\"attr\">async</span>: <span class=\"literal\">true</span>, <span class=\"comment\">//或 false,是否异步</span></span><br><span class=\"line\">  <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&quot;llc&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">22</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">timeout</span>: <span class=\"number\">5000</span>, <span class=\"comment\">//超时时间</span></span><br><span class=\"line\">  <span class=\"attr\">dataType</span>: <span class=\"string\">&quot;json&quot;</span>, <span class=\"comment\">//返回的数据格式：json/xml/html/script/jsonp/text</span></span><br><span class=\"line\">  <span class=\"attr\">beforeSend</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">xhr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(xhr);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;发送前&quot;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">success</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data, textStatus, jqXHR</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">error</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">xhr, textStatus</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(xhr.responseText);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(xhr);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(textStatus);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n","site":{"data":{"link":{"class1":{"class_name":"舍友","link_list":{"1":{"name":"codeAntg","link":"https://blog.csdn.net/weixin_44745147","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/fjh.jpg","descr":"那家刀削面不错","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class2":{"class_name":"致谢","link_list":{"1":{"name":"JerrC","link":"https://immyw.com","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/immyw.png","descr":"今日事,今日毕","width":"1px","style":"solid","color":"#60d0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/hexo.svg","descr":"A fast, simple & powerful blog framework","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class3":{"class_name":"友人","link_list":{"1":{"name":"Chester","link":"http://chesterlds.cn","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/chester.jpg","descr":null,"width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Wangs","link":"https://wangsss.cn/","avatar":"https://wangsss.cn/img/avatar.png","descr":"不疯魔，不成活 ~","width":"1px","style":"solid","color":"#9d9d9d","custom":"link_custom1","time":"4s","namecolor":"0094ff","descolor":"#ff9191"}}}}}},"excerpt":"","more":"<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$.ajax(&#123;</span><br><span class=\"line\">  <span class=\"attr\">url</span>: <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">type</span>: <span class=\"string\">&quot;POST&quot;</span>, <span class=\"comment\">//GET</span></span><br><span class=\"line\">  <span class=\"attr\">async</span>: <span class=\"literal\">true</span>, <span class=\"comment\">//或 false,是否异步</span></span><br><span class=\"line\">  <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&quot;llc&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">22</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">timeout</span>: <span class=\"number\">5000</span>, <span class=\"comment\">//超时时间</span></span><br><span class=\"line\">  <span class=\"attr\">dataType</span>: <span class=\"string\">&quot;json&quot;</span>, <span class=\"comment\">//返回的数据格式：json/xml/html/script/jsonp/text</span></span><br><span class=\"line\">  <span class=\"attr\">beforeSend</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">xhr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(xhr);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;发送前&quot;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">success</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data, textStatus, jqXHR</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">error</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">xhr, textStatus</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(xhr.responseText);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(xhr);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(textStatus);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n"},{"title":"jQuery ( 一 )","date":"2021-06-29T08:39:11.000Z","top_img":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg","cover":"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/desktop.png","comments":1,"_content":"\n# jQuery 整体结构图\n\n![jQuery](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/js/jquery.png)\n\n# jQuery 语法\n\n## 基础语法\n\n美元符号定义 `jQuery` , `jQuery` 简化了 `DOM` 操作\n`jQuery` 使用 `$(selector).action()` 的格式给一个 ( 或多个 ) 元素绑定事件 , 具体来说 , `$(selector)` 让 `jQuery` 选择匹配 `CSS` 选择器 `selector` 的元素 , 并将它/它们传递给叫做 `.action()` 的事件 `API`\n\n## 实例\n\n`jQuery` 入口函数\n\n```js\n// jQuery 入口函数\n$(document).ready(function () {\n  alert(\"Hello World!\");\n  $(\"#blackBox\").hide();\n});\n```\n\n**上述代码和以下原生 `js` 代码功能相同 :**\n\n```js\nwindow.onload = function () {\n  alert(\"Hello World!\");\n  document.getElementById(\"blackBox\").style.display = \"none\";\n};\n```\n\n## jQuery 入口函数与 JavaScript 入口函数的区别\n\n![load and ready](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/js/loadandready.png)\n\n# JQuery 选择器\n\n## 基本选择器\n\n| 名称       | 用法                | 描述                                                                                |\n| ---------- | ------------------- | ----------------------------------------------------------------------------------- |\n| ID 选择器  | `$(\"#id\")`          | 获取指定 ID 的元素                                                                  |\n| 类选择器   | `$(\".class\")`       | 获取同一类 `class` 的元素                                                           |\n| 标签选择器 | `$(\"div\")`          | 获取同一类标签的所有元素                                                            |\n| 并集选择器 | `$(\"div,p,li\")`     | 使用逗号分隔,只要符合条件之一就可,获取所有的 `div`,`p`,`li` 元素                    |\n| 交集选择器 | `$(\"div.redClass\")` | 此选择器 `div` 和 `.redClass` 之间没有空格,是指 `class` 为 `redClass` 的 `div` 元素 |\n\n## 层级选择器\n\n| 名称       | 用法         | 描述                                                            |\n| ---------- | ------------ | --------------------------------------------------------------- |\n| 子代选择器 | `$(\"ul>li\")` | 使用 `>`号,获取儿子层级的元素,注意,并不会获取孙子层级的元素     |\n| 后代选择器 | `$\"ul li\")`  | 使用空格,代表后代选择器,获取 `ul` 下的所有 `li` 元素,包括孙子等 |\n\n## 过滤选择器\n\n|              | 用法                               | 描述                                                                    |\n| ------------ | ---------------------------------- | ----------------------------------------------------------------------- |\n| `:eq(index)` | `$(\"li:eq(2)\").css(\"color\",\"red\")` | 获取到的 `li` 元素中,选择索引号为 `2` 的元素,索引号 `index` 从 `0` 开始 |\n| `:odd`       | `$(\"li:odd\").css(\"color\",\"red\")`   | 获取到的 `li` 元素中,选择索引号为 奇数 的元素                           |\n| `:even`      | `$(\"li:even\").css(\"color\",\"red\")`  | 获取到的 `li` 元素中,选择索引号为 偶数 的元素                           |\n\n## 筛选选择器 (方法)\n\n|                      | 用法                         | 说明                                         |\n| -------------------- | ---------------------------- | -------------------------------------------- |\n| `children(selector)` | `$(\"ul\").children(\"li\")`     | 相当于 `$(\"ul>li\")` , 子类选择器             |\n| `find(selector)`     | `$(\"ul\").find(\"li\")`         | 相当于 `$(\"ul li\")` , 后代选择器             |\n| `siblings(selector)` | `$(\"#first\").siblings(\"li\")` | 查找兄弟节点 , 不包括自己本身                |\n| `parent()`           | `$(\"#first\").parent()`       | 查找父亲                                     |\n| `eq(index)`          | `$(\"li\").eq(2)`              | 相当于 `$(\"li:eq(2)\")` , `index` 从 `0` 开始 |\n| `next()`             | `$(\"li\").next()`             | 找下一个兄弟                                 |\n| `prev()`             | `$(\"li\").prev()`             | 找上一次兄弟                                 |\n| `Index()`            | `$(\"li\").index()`            | 获取当前的位置 (索引)                        |\n| `not()`              | `$(\"p\").not(\".intro\")`       | 返回不带有类名 `intro` 的所有 `p` 元素       |\n\n## DOM 对象和 jQuery 对象的转换\n\n### DOM 对象转 JQuery 对象\n\n```js\n$(DOM);\n```\n\n**比如 :**\n\n```js\n$(\"div\");\n$(\".class\");\n$(this);\n// ...\n```\n\n### JQuery 对象转 DOM 对象\n\n```js\n$(DOM)[0];\n```\n\n**比如 :**\n\n```js\n$(\"div\")[0];\n$(\".class\")[0];\n$(this)[0];\n// ...\n```\n\n# jQuery 事件\n\n## 事件语法\n\n### 单击事件\n\n```js\n$(\"button\").click(function () {\n  // 动作触发后执行的代码 !\n});\n```\n\n### 双击事件\n\n```js\n$(\"button\").dblclick(function () {\n  // 动作触发后执行的代码 !\n});\n```\n\n### 鼠标进入\n\n```js\n$(\"#div\").mouseenter(function () {\n  // 动作触发后执行的代码 !\n});\n```\n\n### 鼠标移出\n\n```js\n$(\"#div\").mouseleave(function () {\n  // 动作触发后执行的代码 !\n});\n```\n\n### 获取焦点\n\n```js\n$(\"input\").focus(function () {\n  // 动作触发后执行的代码 !\n});\n```\n\n### 失去焦点\n\n```js\n$(\"input\").blur(function () {\n  // 动作触发后执行的代码 !\n});\n```\n\n# jQuery 的 css() 方法\n\n`jQuery` 的 `css()` 方法设置或返回被选元素的一个或多个样式属性\n\n## 返回 CSS 属性\n\n```js\n$(\"p\").css(\"background-color\");\n```\n\n## 设置 CSS 属性\n\n```js\n$(\"p\").css(\"background-color\", \"yellow\");\n```\n\n## 设置多个 CSS 属性\n\n```js\n$(\"p\").css({\n  \"background-color\": \"yellow\",\n  \"font-size\": \"20px\",\n});\n```\n\n# jQuery css 类\n\n## addClass( )\n\n向被选元素添加一个或多个类\n\n```css\n.important {\n  font-weight: bold;\n  font-size: xx-large;\n}\n.blue {\n  color: #0000ff;\n}\n```\n\n```js\n$(\"button\").click(function () {\n  $(\"h1,p\").addClass(\"blue\");\n  $(\"div\").addClass(\"important\");\n});\n```\n\n## removeClass( )\n\n从被选元素删除一个或多个类\n\n```js\n$(\"button\").click(function () {\n  $(\"h1,h2,p\").removeClass(\"blue\");\n});\n```\n\n## toggleClass( )\n\n对被选元素进行添加或删除类的切换操作\n\n```js\n$(\"button\").click(function () {\n  $(\"h1,h2,p\").toggleClass(\"blue\");\n});\n```\n\n## eq( )\n\n方法返回带有被选元素的指定索引号的元素 , 索引号从 `0` 开头 , 所以第一个元素的索引号是 `0`\n\n```js\n$(selector).eq(index);\n```\n\n## index( )\n\n`index()` 方法返回指定元素相对于其他 <span id=\"green-block\">同级</span> 元素的 `index` 位置\n\n```js\n$(\"li\").click(function () {\n  console.log($(this).index());\n});\n```\n\n## not()\n\n`Not()` 方法返回指定元素之外的元素\n\n```js\n$(\"input\").not(\".inputA\");\n```\n\n# jQuery 动画\n\n## jQuery 隐藏显示\n\n可以使用 `hide()` 和 `show()` 方法来隐藏和显示 `HTML` 元素\n\n```js\n$(\"#hide\").click(function () {\n  $(\"p\").hide();\n});\n$(\"#show\").click(function () {\n  $(\"p\").show();\n});\n```\n\n可以使用 `toggle()` 方法来切换 `hide()` 和 `show()` 方法\n\n```js\n$(\"button\").click(function () {\n  $(\"p\").toggle();\n});\n```\n\n## jQuery 淡入淡出\n\n`fadeIn()` 用于淡入已隐藏的元素 , `fadeOut()` 方法用于淡出可见元素\n\n```js\n$(\"button\").click(function () {\n  $(\"#div1\").fadeIn();\n  $(\"#div2\").fadeIn(\"slow\");\n  $(\"#div3\").fadeOut(3000);\n});\n```\n\n`fadeToggle()` 方法可以在 `fadeIn()` 与 `fadeOut()` 方法之间进行切换\n\n```js\n$(\"button\").click(function () {\n  $(\"#div2\").fadeToggle(\"fast\");\n});\n```\n\n`fadeTo()` 方法允许渐变为给定的不透明度 ( 值介于 `0` 与 `1` 之间 )\n\n```js\n$(\"button\").click(function () {\n  $(\"#div1\").fadeTo(\"slow\", 0.15);\n});\n```\n\n## jQuery 滑动\n\n`slideDown()` 方法用于向下滑动元素 , `slideUp()` 方法用于向上滑动元素\n\n```js\n$(\"#flip\").click(function () {\n  $(\"#div1\").slideDown();\n  $(\"#div1\").slideUp();\n});\n```\n\n`slideToggle()` 方法可以在 `slideDown()` 与 `slideUp()` 方法之间进行切换\n\n```js\n$(\"#flip\").click(function () {\n  $(\"#panel\").slideToggle();\n});\n```\n\n## jQuery 自定义动画\n\n`animate()` 方法用于创建自定义动画 , 可选的 `speed` 参数规定效果的时长 , 它可以取以下值 : `\"slow\"`,`\"fast\"` 或`毫秒` , 可选的 `callback` 参数是动画完成后所执行的函数名称\n\n```js\n$(\"button\").click(function () {\n  $(\"div\").animate({\n    left: \"250px\",\n    opacity: \"0.5\",\n    width: \"150px\",\n    height: \"150px\",\n  });\n});\n```\n\n## stop( )\n\n`jQuery` 的 `stop()` 方法用于停止动画或效果 , 在它们完成之前 , 适用于所有 `jQuery` 效果函数 , 包括滑动 , 淡入淡出和自定义动画\n\n```js\n$(\"#stop\").click(function () {\n  $(\"#panel\").stop();\n});\n```\n\n## 回调函数\n\n在当前动画 `100%` 完成之后执行\n\n```js\n$(\"button\").click(function () {\n  $(\"p\").hide(\"slow\", function () {\n    alert(\"段落现在被隐藏了\");\n  });\n});\n```\n\n# 案例\n\n## 简单的 tab 切换\n\n```css\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n.tab {\n  margin: 100px auto;\n  width: 800px;\n  height: 400px;\n  background-color: #abaeb6;\n}\n.tab-title {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n.tab-title-item {\n  width: 25%;\n  height: 40px;\n  text-align: center;\n  line-height: 40px;\n  border-right: 1px solid #171829;\n  border-bottom: 1px solid #171829;\n}\n.tab-title-item:nth-last-of-type(1) {\n  border-right: none;\n}\n.tab-title-item:hover {\n  background-color: #82858f;\n}\n.tab-content-item {\n  font-size: 40px;\n  text-align: center;\n  line-height: 360px;\n}\n```\n\n```html\n<div class=\"tab\">\n  <div class=\"tab-title\">\n    <div class=\"tab-title-item\">A</div>\n    <div class=\"tab-title-item\">B</div>\n    <div class=\"tab-title-item\">C</div>\n    <div class=\"tab-title-item\">D</div>\n  </div>\n  <div class=\"tab-content\">\n    <div class=\"tab-content-item\">A</div>\n    <div class=\"tab-content-item\">B</div>\n    <div class=\"tab-content-item\">C</div>\n    <div class=\"tab-content-item\">D</div>\n  </div>\n</div>\n```\n\n```js\n$(function () {\n  $(\".tab-content-item\").hide();\n  $(\".tab-content-item:eq(0)\").show();\n\n  $(\".tab-title-item\").click(function () {\n    $(\".tab-content-item\").hide();\n    $(\".tab-content-item\").eq($(this).index()).show();\n  });\n});\n```\n\n## 手风琴\n\n```css\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n.main {\n  margin: 100px auto;\n  width: 600px;\n  /* height: 200px; */\n  background-color: #9298a5;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n.item {\n  width: inherit;\n}\n.title {\n  width: inherit;\n  height: 50px;\n  text-align: center;\n  line-height: 50px;\n  cursor: pointer;\n}\n.title:hover {\n  background-color: #c1d5e2;\n}\n.content {\n  height: 100px;\n  text-align: center;\n  line-height: 100px;\n  font-size: 48px;\n  font-weight: 800;\n  color: #ffffff;\n  background-color: #696d77;\n}\n```\n\n```html\n<div class=\"main\">\n  <div class=\"item\">\n    <div class=\"title\">首 页</div>\n    <div class=\"content\">666</div>\n  </div>\n  <div class=\"item\">\n    <div class=\"title\">归 档</div>\n    <div class=\"content\">666</div>\n  </div>\n  <div class=\"item\">\n    <div class=\"title\">标签</div>\n    <div class=\"content\">666</div>\n  </div>\n  <div class=\"item\">\n    <div class=\"title\">分类</div>\n    <div class=\"content\">666</div>\n  </div>\n</div>\n```\n\n```js\n$(function () {\n  $(\".content\").hide();\n  $(\".title\").click(function () {\n    $(\".content\").slideUp();\n    $(this).next().stop().slideDown();\n  });\n});\n```\n","source":"_posts/js/jquery-day01.md","raw":"---\ntitle: jQuery ( 一 )\ndate: 2021-06-29 16:39:11\ntop_img: https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg\ncover:\ntags:\n  - js\n  - javascript\n  - jQuery\ncategories:\n  - js\n  - jQuery\ncomments:\n---\n\n# jQuery 整体结构图\n\n![jQuery](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/js/jquery.png)\n\n# jQuery 语法\n\n## 基础语法\n\n美元符号定义 `jQuery` , `jQuery` 简化了 `DOM` 操作\n`jQuery` 使用 `$(selector).action()` 的格式给一个 ( 或多个 ) 元素绑定事件 , 具体来说 , `$(selector)` 让 `jQuery` 选择匹配 `CSS` 选择器 `selector` 的元素 , 并将它/它们传递给叫做 `.action()` 的事件 `API`\n\n## 实例\n\n`jQuery` 入口函数\n\n```js\n// jQuery 入口函数\n$(document).ready(function () {\n  alert(\"Hello World!\");\n  $(\"#blackBox\").hide();\n});\n```\n\n**上述代码和以下原生 `js` 代码功能相同 :**\n\n```js\nwindow.onload = function () {\n  alert(\"Hello World!\");\n  document.getElementById(\"blackBox\").style.display = \"none\";\n};\n```\n\n## jQuery 入口函数与 JavaScript 入口函数的区别\n\n![load and ready](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/js/loadandready.png)\n\n# JQuery 选择器\n\n## 基本选择器\n\n| 名称       | 用法                | 描述                                                                                |\n| ---------- | ------------------- | ----------------------------------------------------------------------------------- |\n| ID 选择器  | `$(\"#id\")`          | 获取指定 ID 的元素                                                                  |\n| 类选择器   | `$(\".class\")`       | 获取同一类 `class` 的元素                                                           |\n| 标签选择器 | `$(\"div\")`          | 获取同一类标签的所有元素                                                            |\n| 并集选择器 | `$(\"div,p,li\")`     | 使用逗号分隔,只要符合条件之一就可,获取所有的 `div`,`p`,`li` 元素                    |\n| 交集选择器 | `$(\"div.redClass\")` | 此选择器 `div` 和 `.redClass` 之间没有空格,是指 `class` 为 `redClass` 的 `div` 元素 |\n\n## 层级选择器\n\n| 名称       | 用法         | 描述                                                            |\n| ---------- | ------------ | --------------------------------------------------------------- |\n| 子代选择器 | `$(\"ul>li\")` | 使用 `>`号,获取儿子层级的元素,注意,并不会获取孙子层级的元素     |\n| 后代选择器 | `$\"ul li\")`  | 使用空格,代表后代选择器,获取 `ul` 下的所有 `li` 元素,包括孙子等 |\n\n## 过滤选择器\n\n|              | 用法                               | 描述                                                                    |\n| ------------ | ---------------------------------- | ----------------------------------------------------------------------- |\n| `:eq(index)` | `$(\"li:eq(2)\").css(\"color\",\"red\")` | 获取到的 `li` 元素中,选择索引号为 `2` 的元素,索引号 `index` 从 `0` 开始 |\n| `:odd`       | `$(\"li:odd\").css(\"color\",\"red\")`   | 获取到的 `li` 元素中,选择索引号为 奇数 的元素                           |\n| `:even`      | `$(\"li:even\").css(\"color\",\"red\")`  | 获取到的 `li` 元素中,选择索引号为 偶数 的元素                           |\n\n## 筛选选择器 (方法)\n\n|                      | 用法                         | 说明                                         |\n| -------------------- | ---------------------------- | -------------------------------------------- |\n| `children(selector)` | `$(\"ul\").children(\"li\")`     | 相当于 `$(\"ul>li\")` , 子类选择器             |\n| `find(selector)`     | `$(\"ul\").find(\"li\")`         | 相当于 `$(\"ul li\")` , 后代选择器             |\n| `siblings(selector)` | `$(\"#first\").siblings(\"li\")` | 查找兄弟节点 , 不包括自己本身                |\n| `parent()`           | `$(\"#first\").parent()`       | 查找父亲                                     |\n| `eq(index)`          | `$(\"li\").eq(2)`              | 相当于 `$(\"li:eq(2)\")` , `index` 从 `0` 开始 |\n| `next()`             | `$(\"li\").next()`             | 找下一个兄弟                                 |\n| `prev()`             | `$(\"li\").prev()`             | 找上一次兄弟                                 |\n| `Index()`            | `$(\"li\").index()`            | 获取当前的位置 (索引)                        |\n| `not()`              | `$(\"p\").not(\".intro\")`       | 返回不带有类名 `intro` 的所有 `p` 元素       |\n\n## DOM 对象和 jQuery 对象的转换\n\n### DOM 对象转 JQuery 对象\n\n```js\n$(DOM);\n```\n\n**比如 :**\n\n```js\n$(\"div\");\n$(\".class\");\n$(this);\n// ...\n```\n\n### JQuery 对象转 DOM 对象\n\n```js\n$(DOM)[0];\n```\n\n**比如 :**\n\n```js\n$(\"div\")[0];\n$(\".class\")[0];\n$(this)[0];\n// ...\n```\n\n# jQuery 事件\n\n## 事件语法\n\n### 单击事件\n\n```js\n$(\"button\").click(function () {\n  // 动作触发后执行的代码 !\n});\n```\n\n### 双击事件\n\n```js\n$(\"button\").dblclick(function () {\n  // 动作触发后执行的代码 !\n});\n```\n\n### 鼠标进入\n\n```js\n$(\"#div\").mouseenter(function () {\n  // 动作触发后执行的代码 !\n});\n```\n\n### 鼠标移出\n\n```js\n$(\"#div\").mouseleave(function () {\n  // 动作触发后执行的代码 !\n});\n```\n\n### 获取焦点\n\n```js\n$(\"input\").focus(function () {\n  // 动作触发后执行的代码 !\n});\n```\n\n### 失去焦点\n\n```js\n$(\"input\").blur(function () {\n  // 动作触发后执行的代码 !\n});\n```\n\n# jQuery 的 css() 方法\n\n`jQuery` 的 `css()` 方法设置或返回被选元素的一个或多个样式属性\n\n## 返回 CSS 属性\n\n```js\n$(\"p\").css(\"background-color\");\n```\n\n## 设置 CSS 属性\n\n```js\n$(\"p\").css(\"background-color\", \"yellow\");\n```\n\n## 设置多个 CSS 属性\n\n```js\n$(\"p\").css({\n  \"background-color\": \"yellow\",\n  \"font-size\": \"20px\",\n});\n```\n\n# jQuery css 类\n\n## addClass( )\n\n向被选元素添加一个或多个类\n\n```css\n.important {\n  font-weight: bold;\n  font-size: xx-large;\n}\n.blue {\n  color: #0000ff;\n}\n```\n\n```js\n$(\"button\").click(function () {\n  $(\"h1,p\").addClass(\"blue\");\n  $(\"div\").addClass(\"important\");\n});\n```\n\n## removeClass( )\n\n从被选元素删除一个或多个类\n\n```js\n$(\"button\").click(function () {\n  $(\"h1,h2,p\").removeClass(\"blue\");\n});\n```\n\n## toggleClass( )\n\n对被选元素进行添加或删除类的切换操作\n\n```js\n$(\"button\").click(function () {\n  $(\"h1,h2,p\").toggleClass(\"blue\");\n});\n```\n\n## eq( )\n\n方法返回带有被选元素的指定索引号的元素 , 索引号从 `0` 开头 , 所以第一个元素的索引号是 `0`\n\n```js\n$(selector).eq(index);\n```\n\n## index( )\n\n`index()` 方法返回指定元素相对于其他 <span id=\"green-block\">同级</span> 元素的 `index` 位置\n\n```js\n$(\"li\").click(function () {\n  console.log($(this).index());\n});\n```\n\n## not()\n\n`Not()` 方法返回指定元素之外的元素\n\n```js\n$(\"input\").not(\".inputA\");\n```\n\n# jQuery 动画\n\n## jQuery 隐藏显示\n\n可以使用 `hide()` 和 `show()` 方法来隐藏和显示 `HTML` 元素\n\n```js\n$(\"#hide\").click(function () {\n  $(\"p\").hide();\n});\n$(\"#show\").click(function () {\n  $(\"p\").show();\n});\n```\n\n可以使用 `toggle()` 方法来切换 `hide()` 和 `show()` 方法\n\n```js\n$(\"button\").click(function () {\n  $(\"p\").toggle();\n});\n```\n\n## jQuery 淡入淡出\n\n`fadeIn()` 用于淡入已隐藏的元素 , `fadeOut()` 方法用于淡出可见元素\n\n```js\n$(\"button\").click(function () {\n  $(\"#div1\").fadeIn();\n  $(\"#div2\").fadeIn(\"slow\");\n  $(\"#div3\").fadeOut(3000);\n});\n```\n\n`fadeToggle()` 方法可以在 `fadeIn()` 与 `fadeOut()` 方法之间进行切换\n\n```js\n$(\"button\").click(function () {\n  $(\"#div2\").fadeToggle(\"fast\");\n});\n```\n\n`fadeTo()` 方法允许渐变为给定的不透明度 ( 值介于 `0` 与 `1` 之间 )\n\n```js\n$(\"button\").click(function () {\n  $(\"#div1\").fadeTo(\"slow\", 0.15);\n});\n```\n\n## jQuery 滑动\n\n`slideDown()` 方法用于向下滑动元素 , `slideUp()` 方法用于向上滑动元素\n\n```js\n$(\"#flip\").click(function () {\n  $(\"#div1\").slideDown();\n  $(\"#div1\").slideUp();\n});\n```\n\n`slideToggle()` 方法可以在 `slideDown()` 与 `slideUp()` 方法之间进行切换\n\n```js\n$(\"#flip\").click(function () {\n  $(\"#panel\").slideToggle();\n});\n```\n\n## jQuery 自定义动画\n\n`animate()` 方法用于创建自定义动画 , 可选的 `speed` 参数规定效果的时长 , 它可以取以下值 : `\"slow\"`,`\"fast\"` 或`毫秒` , 可选的 `callback` 参数是动画完成后所执行的函数名称\n\n```js\n$(\"button\").click(function () {\n  $(\"div\").animate({\n    left: \"250px\",\n    opacity: \"0.5\",\n    width: \"150px\",\n    height: \"150px\",\n  });\n});\n```\n\n## stop( )\n\n`jQuery` 的 `stop()` 方法用于停止动画或效果 , 在它们完成之前 , 适用于所有 `jQuery` 效果函数 , 包括滑动 , 淡入淡出和自定义动画\n\n```js\n$(\"#stop\").click(function () {\n  $(\"#panel\").stop();\n});\n```\n\n## 回调函数\n\n在当前动画 `100%` 完成之后执行\n\n```js\n$(\"button\").click(function () {\n  $(\"p\").hide(\"slow\", function () {\n    alert(\"段落现在被隐藏了\");\n  });\n});\n```\n\n# 案例\n\n## 简单的 tab 切换\n\n```css\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n.tab {\n  margin: 100px auto;\n  width: 800px;\n  height: 400px;\n  background-color: #abaeb6;\n}\n.tab-title {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n}\n.tab-title-item {\n  width: 25%;\n  height: 40px;\n  text-align: center;\n  line-height: 40px;\n  border-right: 1px solid #171829;\n  border-bottom: 1px solid #171829;\n}\n.tab-title-item:nth-last-of-type(1) {\n  border-right: none;\n}\n.tab-title-item:hover {\n  background-color: #82858f;\n}\n.tab-content-item {\n  font-size: 40px;\n  text-align: center;\n  line-height: 360px;\n}\n```\n\n```html\n<div class=\"tab\">\n  <div class=\"tab-title\">\n    <div class=\"tab-title-item\">A</div>\n    <div class=\"tab-title-item\">B</div>\n    <div class=\"tab-title-item\">C</div>\n    <div class=\"tab-title-item\">D</div>\n  </div>\n  <div class=\"tab-content\">\n    <div class=\"tab-content-item\">A</div>\n    <div class=\"tab-content-item\">B</div>\n    <div class=\"tab-content-item\">C</div>\n    <div class=\"tab-content-item\">D</div>\n  </div>\n</div>\n```\n\n```js\n$(function () {\n  $(\".tab-content-item\").hide();\n  $(\".tab-content-item:eq(0)\").show();\n\n  $(\".tab-title-item\").click(function () {\n    $(\".tab-content-item\").hide();\n    $(\".tab-content-item\").eq($(this).index()).show();\n  });\n});\n```\n\n## 手风琴\n\n```css\n* {\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n}\n.main {\n  margin: 100px auto;\n  width: 600px;\n  /* height: 200px; */\n  background-color: #9298a5;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n.item {\n  width: inherit;\n}\n.title {\n  width: inherit;\n  height: 50px;\n  text-align: center;\n  line-height: 50px;\n  cursor: pointer;\n}\n.title:hover {\n  background-color: #c1d5e2;\n}\n.content {\n  height: 100px;\n  text-align: center;\n  line-height: 100px;\n  font-size: 48px;\n  font-weight: 800;\n  color: #ffffff;\n  background-color: #696d77;\n}\n```\n\n```html\n<div class=\"main\">\n  <div class=\"item\">\n    <div class=\"title\">首 页</div>\n    <div class=\"content\">666</div>\n  </div>\n  <div class=\"item\">\n    <div class=\"title\">归 档</div>\n    <div class=\"content\">666</div>\n  </div>\n  <div class=\"item\">\n    <div class=\"title\">标签</div>\n    <div class=\"content\">666</div>\n  </div>\n  <div class=\"item\">\n    <div class=\"title\">分类</div>\n    <div class=\"content\">666</div>\n  </div>\n</div>\n```\n\n```js\n$(function () {\n  $(\".content\").hide();\n  $(\".title\").click(function () {\n    $(\".content\").slideUp();\n    $(this).next().stop().slideDown();\n  });\n});\n```\n","slug":"js/jquery-day01","published":1,"updated":"2021-06-30T08:46:08.013Z","layout":"post","photos":[],"link":"","_id":"cksvxwnnq001tgubq6gau022u","content":"<h1 id=\"jQuery-整体结构图\"><a href=\"#jQuery-整体结构图\" class=\"headerlink\" title=\"jQuery 整体结构图\"></a>jQuery 整体结构图</h1><p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/js/jquery.png\" alt=\"jQuery\"></p>\n<h1 id=\"jQuery-语法\"><a href=\"#jQuery-语法\" class=\"headerlink\" title=\"jQuery 语法\"></a>jQuery 语法</h1><h2 id=\"基础语法\"><a href=\"#基础语法\" class=\"headerlink\" title=\"基础语法\"></a>基础语法</h2><p>美元符号定义 <code>jQuery</code> , <code>jQuery</code> 简化了 <code>DOM</code> 操作<br><code>jQuery</code> 使用 <code>$(selector).action()</code> 的格式给一个 ( 或多个 ) 元素绑定事件 , 具体来说 , <code>$(selector)</code> 让 <code>jQuery</code> 选择匹配 <code>CSS</code> 选择器 <code>selector</code> 的元素 , 并将它/它们传递给叫做 <code>.action()</code> 的事件 <code>API</code></p>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><p><code>jQuery</code> 入口函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// jQuery 入口函数</span></span><br><span class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  alert(<span class=\"string\">&quot;Hello World!&quot;</span>);</span><br><span class=\"line\">  $(<span class=\"string\">&quot;#blackBox&quot;</span>).hide();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>上述代码和以下原生 <code>js</code> 代码功能相同 :</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  alert(<span class=\"string\">&quot;Hello World!&quot;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;blackBox&quot;</span>).style.display = <span class=\"string\">&quot;none&quot;</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"jQuery-入口函数与-JavaScript-入口函数的区别\"><a href=\"#jQuery-入口函数与-JavaScript-入口函数的区别\" class=\"headerlink\" title=\"jQuery 入口函数与 JavaScript 入口函数的区别\"></a>jQuery 入口函数与 JavaScript 入口函数的区别</h2><p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/js/loadandready.png\" alt=\"load and ready\"></p>\n<h1 id=\"JQuery-选择器\"><a href=\"#JQuery-选择器\" class=\"headerlink\" title=\"JQuery 选择器\"></a>JQuery 选择器</h1><h2 id=\"基本选择器\"><a href=\"#基本选择器\" class=\"headerlink\" title=\"基本选择器\"></a>基本选择器</h2><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>用法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ID 选择器</td>\n<td><code>$(&quot;#id&quot;)</code></td>\n<td>获取指定 ID 的元素</td>\n</tr>\n<tr>\n<td>类选择器</td>\n<td><code>$(&quot;.class&quot;)</code></td>\n<td>获取同一类 <code>class</code> 的元素</td>\n</tr>\n<tr>\n<td>标签选择器</td>\n<td><code>$(&quot;div&quot;)</code></td>\n<td>获取同一类标签的所有元素</td>\n</tr>\n<tr>\n<td>并集选择器</td>\n<td><code>$(&quot;div,p,li&quot;)</code></td>\n<td>使用逗号分隔,只要符合条件之一就可,获取所有的 <code>div</code>,<code>p</code>,<code>li</code> 元素</td>\n</tr>\n<tr>\n<td>交集选择器</td>\n<td><code>$(&quot;div.redClass&quot;)</code></td>\n<td>此选择器 <code>div</code> 和 <code>.redClass</code> 之间没有空格,是指 <code>class</code> 为 <code>redClass</code> 的 <code>div</code> 元素</td>\n</tr>\n</tbody></table>\n<h2 id=\"层级选择器\"><a href=\"#层级选择器\" class=\"headerlink\" title=\"层级选择器\"></a>层级选择器</h2><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>用法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>子代选择器</td>\n<td><code>$(&quot;ul&gt;li&quot;)</code></td>\n<td>使用 <code>&gt;</code>号,获取儿子层级的元素,注意,并不会获取孙子层级的元素</td>\n</tr>\n<tr>\n<td>后代选择器</td>\n<td><code>$&quot;ul li&quot;)</code></td>\n<td>使用空格,代表后代选择器,获取 <code>ul</code> 下的所有 <code>li</code> 元素,包括孙子等</td>\n</tr>\n</tbody></table>\n<h2 id=\"过滤选择器\"><a href=\"#过滤选择器\" class=\"headerlink\" title=\"过滤选择器\"></a>过滤选择器</h2><table>\n<thead>\n<tr>\n<th></th>\n<th>用法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>:eq(index)</code></td>\n<td><code>$(&quot;li:eq(2)&quot;).css(&quot;color&quot;,&quot;red&quot;)</code></td>\n<td>获取到的 <code>li</code> 元素中,选择索引号为 <code>2</code> 的元素,索引号 <code>index</code> 从 <code>0</code> 开始</td>\n</tr>\n<tr>\n<td><code>:odd</code></td>\n<td><code>$(&quot;li:odd&quot;).css(&quot;color&quot;,&quot;red&quot;)</code></td>\n<td>获取到的 <code>li</code> 元素中,选择索引号为 奇数 的元素</td>\n</tr>\n<tr>\n<td><code>:even</code></td>\n<td><code>$(&quot;li:even&quot;).css(&quot;color&quot;,&quot;red&quot;)</code></td>\n<td>获取到的 <code>li</code> 元素中,选择索引号为 偶数 的元素</td>\n</tr>\n</tbody></table>\n<h2 id=\"筛选选择器-方法\"><a href=\"#筛选选择器-方法\" class=\"headerlink\" title=\"筛选选择器 (方法)\"></a>筛选选择器 (方法)</h2><table>\n<thead>\n<tr>\n<th></th>\n<th>用法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>children(selector)</code></td>\n<td><code>$(&quot;ul&quot;).children(&quot;li&quot;)</code></td>\n<td>相当于 <code>$(&quot;ul&gt;li&quot;)</code> , 子类选择器</td>\n</tr>\n<tr>\n<td><code>find(selector)</code></td>\n<td><code>$(&quot;ul&quot;).find(&quot;li&quot;)</code></td>\n<td>相当于 <code>$(&quot;ul li&quot;)</code> , 后代选择器</td>\n</tr>\n<tr>\n<td><code>siblings(selector)</code></td>\n<td><code>$(&quot;#first&quot;).siblings(&quot;li&quot;)</code></td>\n<td>查找兄弟节点 , 不包括自己本身</td>\n</tr>\n<tr>\n<td><code>parent()</code></td>\n<td><code>$(&quot;#first&quot;).parent()</code></td>\n<td>查找父亲</td>\n</tr>\n<tr>\n<td><code>eq(index)</code></td>\n<td><code>$(&quot;li&quot;).eq(2)</code></td>\n<td>相当于 <code>$(&quot;li:eq(2)&quot;)</code> , <code>index</code> 从 <code>0</code> 开始</td>\n</tr>\n<tr>\n<td><code>next()</code></td>\n<td><code>$(&quot;li&quot;).next()</code></td>\n<td>找下一个兄弟</td>\n</tr>\n<tr>\n<td><code>prev()</code></td>\n<td><code>$(&quot;li&quot;).prev()</code></td>\n<td>找上一次兄弟</td>\n</tr>\n<tr>\n<td><code>Index()</code></td>\n<td><code>$(&quot;li&quot;).index()</code></td>\n<td>获取当前的位置 (索引)</td>\n</tr>\n<tr>\n<td><code>not()</code></td>\n<td><code>$(&quot;p&quot;).not(&quot;.intro&quot;)</code></td>\n<td>返回不带有类名 <code>intro</code> 的所有 <code>p</code> 元素</td>\n</tr>\n</tbody></table>\n<h2 id=\"DOM-对象和-jQuery-对象的转换\"><a href=\"#DOM-对象和-jQuery-对象的转换\" class=\"headerlink\" title=\"DOM 对象和 jQuery 对象的转换\"></a>DOM 对象和 jQuery 对象的转换</h2><h3 id=\"DOM-对象转-JQuery-对象\"><a href=\"#DOM-对象转-JQuery-对象\" class=\"headerlink\" title=\"DOM 对象转 JQuery 对象\"></a>DOM 对象转 JQuery 对象</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(DOM);</span><br></pre></td></tr></table></figure>\n\n<p><strong>比如 :</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;div&quot;</span>);</span><br><span class=\"line\">$(<span class=\"string\">&quot;.class&quot;</span>);</span><br><span class=\"line\">$(<span class=\"built_in\">this</span>);</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"JQuery-对象转-DOM-对象\"><a href=\"#JQuery-对象转-DOM-对象\" class=\"headerlink\" title=\"JQuery 对象转 DOM 对象\"></a>JQuery 对象转 DOM 对象</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(DOM)[<span class=\"number\">0</span>];</span><br></pre></td></tr></table></figure>\n\n<p><strong>比如 :</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;div&quot;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">$(<span class=\"string\">&quot;.class&quot;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">$(<span class=\"built_in\">this</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"jQuery-事件\"><a href=\"#jQuery-事件\" class=\"headerlink\" title=\"jQuery 事件\"></a>jQuery 事件</h1><h2 id=\"事件语法\"><a href=\"#事件语法\" class=\"headerlink\" title=\"事件语法\"></a>事件语法</h2><h3 id=\"单击事件\"><a href=\"#单击事件\" class=\"headerlink\" title=\"单击事件\"></a>单击事件</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;button&quot;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 动作触发后执行的代码 !</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"双击事件\"><a href=\"#双击事件\" class=\"headerlink\" title=\"双击事件\"></a>双击事件</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;button&quot;</span>).dblclick(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 动作触发后执行的代码 !</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"鼠标进入\"><a href=\"#鼠标进入\" class=\"headerlink\" title=\"鼠标进入\"></a>鼠标进入</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;#div&quot;</span>).mouseenter(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 动作触发后执行的代码 !</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"鼠标移出\"><a href=\"#鼠标移出\" class=\"headerlink\" title=\"鼠标移出\"></a>鼠标移出</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;#div&quot;</span>).mouseleave(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 动作触发后执行的代码 !</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"获取焦点\"><a href=\"#获取焦点\" class=\"headerlink\" title=\"获取焦点\"></a>获取焦点</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;input&quot;</span>).focus(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 动作触发后执行的代码 !</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"失去焦点\"><a href=\"#失去焦点\" class=\"headerlink\" title=\"失去焦点\"></a>失去焦点</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;input&quot;</span>).blur(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 动作触发后执行的代码 !</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"jQuery-的-css-方法\"><a href=\"#jQuery-的-css-方法\" class=\"headerlink\" title=\"jQuery 的 css() 方法\"></a>jQuery 的 css() 方法</h1><p><code>jQuery</code> 的 <code>css()</code> 方法设置或返回被选元素的一个或多个样式属性</p>\n<h2 id=\"返回-CSS-属性\"><a href=\"#返回-CSS-属性\" class=\"headerlink\" title=\"返回 CSS 属性\"></a>返回 CSS 属性</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;p&quot;</span>).css(<span class=\"string\">&quot;background-color&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"设置-CSS-属性\"><a href=\"#设置-CSS-属性\" class=\"headerlink\" title=\"设置 CSS 属性\"></a>设置 CSS 属性</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;p&quot;</span>).css(<span class=\"string\">&quot;background-color&quot;</span>, <span class=\"string\">&quot;yellow&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"设置多个-CSS-属性\"><a href=\"#设置多个-CSS-属性\" class=\"headerlink\" title=\"设置多个 CSS 属性\"></a>设置多个 CSS 属性</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;p&quot;</span>).css(&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;background-color&quot;</span>: <span class=\"string\">&quot;yellow&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;font-size&quot;</span>: <span class=\"string\">&quot;20px&quot;</span>,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"jQuery-css-类\"><a href=\"#jQuery-css-类\" class=\"headerlink\" title=\"jQuery css 类\"></a>jQuery css 类</h1><h2 id=\"addClass\"><a href=\"#addClass\" class=\"headerlink\" title=\"addClass( )\"></a>addClass( )</h2><p>向被选元素添加一个或多个类</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.important</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-weight</span>: bold;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: xx-large;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.blue</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#0000ff</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;button&quot;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">&quot;h1,p&quot;</span>).addClass(<span class=\"string\">&quot;blue&quot;</span>);</span><br><span class=\"line\">  $(<span class=\"string\">&quot;div&quot;</span>).addClass(<span class=\"string\">&quot;important&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"removeClass\"><a href=\"#removeClass\" class=\"headerlink\" title=\"removeClass( )\"></a>removeClass( )</h2><p>从被选元素删除一个或多个类</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;button&quot;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">&quot;h1,h2,p&quot;</span>).removeClass(<span class=\"string\">&quot;blue&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"toggleClass\"><a href=\"#toggleClass\" class=\"headerlink\" title=\"toggleClass( )\"></a>toggleClass( )</h2><p>对被选元素进行添加或删除类的切换操作</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;button&quot;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">&quot;h1,h2,p&quot;</span>).toggleClass(<span class=\"string\">&quot;blue&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"eq\"><a href=\"#eq\" class=\"headerlink\" title=\"eq( )\"></a>eq( )</h2><p>方法返回带有被选元素的指定索引号的元素 , 索引号从 <code>0</code> 开头 , 所以第一个元素的索引号是 <code>0</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(selector).eq(index);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"index\"><a href=\"#index\" class=\"headerlink\" title=\"index( )\"></a>index( )</h2><p><code>index()</code> 方法返回指定元素相对于其他 <span id=\"green-block\">同级</span> 元素的 <code>index</code> 位置</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;li&quot;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log($(<span class=\"built_in\">this</span>).index());</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"not\"><a href=\"#not\" class=\"headerlink\" title=\"not()\"></a>not()</h2><p><code>Not()</code> 方法返回指定元素之外的元素</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;input&quot;</span>).not(<span class=\"string\">&quot;.inputA&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"jQuery-动画\"><a href=\"#jQuery-动画\" class=\"headerlink\" title=\"jQuery 动画\"></a>jQuery 动画</h1><h2 id=\"jQuery-隐藏显示\"><a href=\"#jQuery-隐藏显示\" class=\"headerlink\" title=\"jQuery 隐藏显示\"></a>jQuery 隐藏显示</h2><p>可以使用 <code>hide()</code> 和 <code>show()</code> 方法来隐藏和显示 <code>HTML</code> 元素</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;#hide&quot;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">&quot;p&quot;</span>).hide();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">$(<span class=\"string\">&quot;#show&quot;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">&quot;p&quot;</span>).show();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>可以使用 <code>toggle()</code> 方法来切换 <code>hide()</code> 和 <code>show()</code> 方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;button&quot;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">&quot;p&quot;</span>).toggle();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"jQuery-淡入淡出\"><a href=\"#jQuery-淡入淡出\" class=\"headerlink\" title=\"jQuery 淡入淡出\"></a>jQuery 淡入淡出</h2><p><code>fadeIn()</code> 用于淡入已隐藏的元素 , <code>fadeOut()</code> 方法用于淡出可见元素</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;button&quot;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">&quot;#div1&quot;</span>).fadeIn();</span><br><span class=\"line\">  $(<span class=\"string\">&quot;#div2&quot;</span>).fadeIn(<span class=\"string\">&quot;slow&quot;</span>);</span><br><span class=\"line\">  $(<span class=\"string\">&quot;#div3&quot;</span>).fadeOut(<span class=\"number\">3000</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><code>fadeToggle()</code> 方法可以在 <code>fadeIn()</code> 与 <code>fadeOut()</code> 方法之间进行切换</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;button&quot;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">&quot;#div2&quot;</span>).fadeToggle(<span class=\"string\">&quot;fast&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><code>fadeTo()</code> 方法允许渐变为给定的不透明度 ( 值介于 <code>0</code> 与 <code>1</code> 之间 )</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;button&quot;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">&quot;#div1&quot;</span>).fadeTo(<span class=\"string\">&quot;slow&quot;</span>, <span class=\"number\">0.15</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"jQuery-滑动\"><a href=\"#jQuery-滑动\" class=\"headerlink\" title=\"jQuery 滑动\"></a>jQuery 滑动</h2><p><code>slideDown()</code> 方法用于向下滑动元素 , <code>slideUp()</code> 方法用于向上滑动元素</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;#flip&quot;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">&quot;#div1&quot;</span>).slideDown();</span><br><span class=\"line\">  $(<span class=\"string\">&quot;#div1&quot;</span>).slideUp();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><code>slideToggle()</code> 方法可以在 <code>slideDown()</code> 与 <code>slideUp()</code> 方法之间进行切换</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;#flip&quot;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">&quot;#panel&quot;</span>).slideToggle();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"jQuery-自定义动画\"><a href=\"#jQuery-自定义动画\" class=\"headerlink\" title=\"jQuery 自定义动画\"></a>jQuery 自定义动画</h2><p><code>animate()</code> 方法用于创建自定义动画 , 可选的 <code>speed</code> 参数规定效果的时长 , 它可以取以下值 : <code>&quot;slow&quot;</code>,<code>&quot;fast&quot;</code> 或<code>毫秒</code> , 可选的 <code>callback</code> 参数是动画完成后所执行的函数名称</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;button&quot;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">&quot;div&quot;</span>).animate(&#123;</span><br><span class=\"line\">    <span class=\"attr\">left</span>: <span class=\"string\">&quot;250px&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">opacity</span>: <span class=\"string\">&quot;0.5&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">width</span>: <span class=\"string\">&quot;150px&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">height</span>: <span class=\"string\">&quot;150px&quot;</span>,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"stop\"><a href=\"#stop\" class=\"headerlink\" title=\"stop( )\"></a>stop( )</h2><p><code>jQuery</code> 的 <code>stop()</code> 方法用于停止动画或效果 , 在它们完成之前 , 适用于所有 <code>jQuery</code> 效果函数 , 包括滑动 , 淡入淡出和自定义动画</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;#stop&quot;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">&quot;#panel&quot;</span>).stop();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"回调函数\"><a href=\"#回调函数\" class=\"headerlink\" title=\"回调函数\"></a>回调函数</h2><p>在当前动画 <code>100%</code> 完成之后执行</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;button&quot;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">&quot;p&quot;</span>).hide(<span class=\"string\">&quot;slow&quot;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(<span class=\"string\">&quot;段落现在被隐藏了&quot;</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"案例\"><a href=\"#案例\" class=\"headerlink\" title=\"案例\"></a>案例</h1><h2 id=\"简单的-tab-切换\"><a href=\"#简单的-tab-切换\" class=\"headerlink\" title=\"简单的 tab 切换\"></a>简单的 tab 切换</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">box-sizing</span>: border-box;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.tab</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">100px</span> auto;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">800px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">400px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#abaeb6</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.tab-title</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">align-items</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">justify-content</span>: space-between;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.tab-title-item</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">25%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-right</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#171829</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-bottom</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#171829</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.tab-title-item</span><span class=\"selector-pseudo\">:nth-last-of-type</span>(<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border-right</span>: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.tab-title-item</span><span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#82858f</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.tab-content-item</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">360px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;tab&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;tab-title&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;tab-title-item&quot;</span>&gt;</span>A<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;tab-title-item&quot;</span>&gt;</span>B<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;tab-title-item&quot;</span>&gt;</span>C<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;tab-title-item&quot;</span>&gt;</span>D<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;tab-content&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;tab-content-item&quot;</span>&gt;</span>A<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;tab-content-item&quot;</span>&gt;</span>B<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;tab-content-item&quot;</span>&gt;</span>C<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;tab-content-item&quot;</span>&gt;</span>D<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">&quot;.tab-content-item&quot;</span>).hide();</span><br><span class=\"line\">  $(<span class=\"string\">&quot;.tab-content-item:eq(0)&quot;</span>).show();</span><br><span class=\"line\"></span><br><span class=\"line\">  $(<span class=\"string\">&quot;.tab-title-item&quot;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    $(<span class=\"string\">&quot;.tab-content-item&quot;</span>).hide();</span><br><span class=\"line\">    $(<span class=\"string\">&quot;.tab-content-item&quot;</span>).eq($(<span class=\"built_in\">this</span>).index()).show();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"手风琴\"><a href=\"#手风琴\" class=\"headerlink\" title=\"手风琴\"></a>手风琴</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">box-sizing</span>: border-box;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.main</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">100px</span> auto;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">600px</span>;</span><br><span class=\"line\">  <span class=\"comment\">/* height: 200px; */</span></span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#9298a5</span>;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">flex-direction</span>: column;</span><br><span class=\"line\">  <span class=\"attribute\">align-items</span>: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.item</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: inherit;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.title</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: inherit;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">cursor</span>: pointer;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.title</span><span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#c1d5e2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.content</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">48px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-weight</span>: <span class=\"number\">800</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#ffffff</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#696d77</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;main&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;item&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;title&quot;</span>&gt;</span>首 页<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;content&quot;</span>&gt;</span>666<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;item&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;title&quot;</span>&gt;</span>归 档<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;content&quot;</span>&gt;</span>666<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;item&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;title&quot;</span>&gt;</span>标签<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;content&quot;</span>&gt;</span>666<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;item&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;title&quot;</span>&gt;</span>分类<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;content&quot;</span>&gt;</span>666<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">&quot;.content&quot;</span>).hide();</span><br><span class=\"line\">  $(<span class=\"string\">&quot;.title&quot;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    $(<span class=\"string\">&quot;.content&quot;</span>).slideUp();</span><br><span class=\"line\">    $(<span class=\"built_in\">this</span>).next().stop().slideDown();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n","site":{"data":{"link":{"class1":{"class_name":"舍友","link_list":{"1":{"name":"codeAntg","link":"https://blog.csdn.net/weixin_44745147","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/fjh.jpg","descr":"那家刀削面不错","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class2":{"class_name":"致谢","link_list":{"1":{"name":"JerrC","link":"https://immyw.com","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/immyw.png","descr":"今日事,今日毕","width":"1px","style":"solid","color":"#60d0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/hexo.svg","descr":"A fast, simple & powerful blog framework","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class3":{"class_name":"友人","link_list":{"1":{"name":"Chester","link":"http://chesterlds.cn","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/chester.jpg","descr":null,"width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Wangs","link":"https://wangsss.cn/","avatar":"https://wangsss.cn/img/avatar.png","descr":"不疯魔，不成活 ~","width":"1px","style":"solid","color":"#9d9d9d","custom":"link_custom1","time":"4s","namecolor":"0094ff","descolor":"#ff9191"}}}}}},"excerpt":"","more":"<h1 id=\"jQuery-整体结构图\"><a href=\"#jQuery-整体结构图\" class=\"headerlink\" title=\"jQuery 整体结构图\"></a>jQuery 整体结构图</h1><p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/js/jquery.png\" alt=\"jQuery\"></p>\n<h1 id=\"jQuery-语法\"><a href=\"#jQuery-语法\" class=\"headerlink\" title=\"jQuery 语法\"></a>jQuery 语法</h1><h2 id=\"基础语法\"><a href=\"#基础语法\" class=\"headerlink\" title=\"基础语法\"></a>基础语法</h2><p>美元符号定义 <code>jQuery</code> , <code>jQuery</code> 简化了 <code>DOM</code> 操作<br><code>jQuery</code> 使用 <code>$(selector).action()</code> 的格式给一个 ( 或多个 ) 元素绑定事件 , 具体来说 , <code>$(selector)</code> 让 <code>jQuery</code> 选择匹配 <code>CSS</code> 选择器 <code>selector</code> 的元素 , 并将它/它们传递给叫做 <code>.action()</code> 的事件 <code>API</code></p>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><p><code>jQuery</code> 入口函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// jQuery 入口函数</span></span><br><span class=\"line\">$(<span class=\"built_in\">document</span>).ready(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  alert(<span class=\"string\">&quot;Hello World!&quot;</span>);</span><br><span class=\"line\">  $(<span class=\"string\">&quot;#blackBox&quot;</span>).hide();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>上述代码和以下原生 <code>js</code> 代码功能相同 :</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  alert(<span class=\"string\">&quot;Hello World!&quot;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;blackBox&quot;</span>).style.display = <span class=\"string\">&quot;none&quot;</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"jQuery-入口函数与-JavaScript-入口函数的区别\"><a href=\"#jQuery-入口函数与-JavaScript-入口函数的区别\" class=\"headerlink\" title=\"jQuery 入口函数与 JavaScript 入口函数的区别\"></a>jQuery 入口函数与 JavaScript 入口函数的区别</h2><p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/js/loadandready.png\" alt=\"load and ready\"></p>\n<h1 id=\"JQuery-选择器\"><a href=\"#JQuery-选择器\" class=\"headerlink\" title=\"JQuery 选择器\"></a>JQuery 选择器</h1><h2 id=\"基本选择器\"><a href=\"#基本选择器\" class=\"headerlink\" title=\"基本选择器\"></a>基本选择器</h2><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>用法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ID 选择器</td>\n<td><code>$(&quot;#id&quot;)</code></td>\n<td>获取指定 ID 的元素</td>\n</tr>\n<tr>\n<td>类选择器</td>\n<td><code>$(&quot;.class&quot;)</code></td>\n<td>获取同一类 <code>class</code> 的元素</td>\n</tr>\n<tr>\n<td>标签选择器</td>\n<td><code>$(&quot;div&quot;)</code></td>\n<td>获取同一类标签的所有元素</td>\n</tr>\n<tr>\n<td>并集选择器</td>\n<td><code>$(&quot;div,p,li&quot;)</code></td>\n<td>使用逗号分隔,只要符合条件之一就可,获取所有的 <code>div</code>,<code>p</code>,<code>li</code> 元素</td>\n</tr>\n<tr>\n<td>交集选择器</td>\n<td><code>$(&quot;div.redClass&quot;)</code></td>\n<td>此选择器 <code>div</code> 和 <code>.redClass</code> 之间没有空格,是指 <code>class</code> 为 <code>redClass</code> 的 <code>div</code> 元素</td>\n</tr>\n</tbody></table>\n<h2 id=\"层级选择器\"><a href=\"#层级选择器\" class=\"headerlink\" title=\"层级选择器\"></a>层级选择器</h2><table>\n<thead>\n<tr>\n<th>名称</th>\n<th>用法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>子代选择器</td>\n<td><code>$(&quot;ul&gt;li&quot;)</code></td>\n<td>使用 <code>&gt;</code>号,获取儿子层级的元素,注意,并不会获取孙子层级的元素</td>\n</tr>\n<tr>\n<td>后代选择器</td>\n<td><code>$&quot;ul li&quot;)</code></td>\n<td>使用空格,代表后代选择器,获取 <code>ul</code> 下的所有 <code>li</code> 元素,包括孙子等</td>\n</tr>\n</tbody></table>\n<h2 id=\"过滤选择器\"><a href=\"#过滤选择器\" class=\"headerlink\" title=\"过滤选择器\"></a>过滤选择器</h2><table>\n<thead>\n<tr>\n<th></th>\n<th>用法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>:eq(index)</code></td>\n<td><code>$(&quot;li:eq(2)&quot;).css(&quot;color&quot;,&quot;red&quot;)</code></td>\n<td>获取到的 <code>li</code> 元素中,选择索引号为 <code>2</code> 的元素,索引号 <code>index</code> 从 <code>0</code> 开始</td>\n</tr>\n<tr>\n<td><code>:odd</code></td>\n<td><code>$(&quot;li:odd&quot;).css(&quot;color&quot;,&quot;red&quot;)</code></td>\n<td>获取到的 <code>li</code> 元素中,选择索引号为 奇数 的元素</td>\n</tr>\n<tr>\n<td><code>:even</code></td>\n<td><code>$(&quot;li:even&quot;).css(&quot;color&quot;,&quot;red&quot;)</code></td>\n<td>获取到的 <code>li</code> 元素中,选择索引号为 偶数 的元素</td>\n</tr>\n</tbody></table>\n<h2 id=\"筛选选择器-方法\"><a href=\"#筛选选择器-方法\" class=\"headerlink\" title=\"筛选选择器 (方法)\"></a>筛选选择器 (方法)</h2><table>\n<thead>\n<tr>\n<th></th>\n<th>用法</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>children(selector)</code></td>\n<td><code>$(&quot;ul&quot;).children(&quot;li&quot;)</code></td>\n<td>相当于 <code>$(&quot;ul&gt;li&quot;)</code> , 子类选择器</td>\n</tr>\n<tr>\n<td><code>find(selector)</code></td>\n<td><code>$(&quot;ul&quot;).find(&quot;li&quot;)</code></td>\n<td>相当于 <code>$(&quot;ul li&quot;)</code> , 后代选择器</td>\n</tr>\n<tr>\n<td><code>siblings(selector)</code></td>\n<td><code>$(&quot;#first&quot;).siblings(&quot;li&quot;)</code></td>\n<td>查找兄弟节点 , 不包括自己本身</td>\n</tr>\n<tr>\n<td><code>parent()</code></td>\n<td><code>$(&quot;#first&quot;).parent()</code></td>\n<td>查找父亲</td>\n</tr>\n<tr>\n<td><code>eq(index)</code></td>\n<td><code>$(&quot;li&quot;).eq(2)</code></td>\n<td>相当于 <code>$(&quot;li:eq(2)&quot;)</code> , <code>index</code> 从 <code>0</code> 开始</td>\n</tr>\n<tr>\n<td><code>next()</code></td>\n<td><code>$(&quot;li&quot;).next()</code></td>\n<td>找下一个兄弟</td>\n</tr>\n<tr>\n<td><code>prev()</code></td>\n<td><code>$(&quot;li&quot;).prev()</code></td>\n<td>找上一次兄弟</td>\n</tr>\n<tr>\n<td><code>Index()</code></td>\n<td><code>$(&quot;li&quot;).index()</code></td>\n<td>获取当前的位置 (索引)</td>\n</tr>\n<tr>\n<td><code>not()</code></td>\n<td><code>$(&quot;p&quot;).not(&quot;.intro&quot;)</code></td>\n<td>返回不带有类名 <code>intro</code> 的所有 <code>p</code> 元素</td>\n</tr>\n</tbody></table>\n<h2 id=\"DOM-对象和-jQuery-对象的转换\"><a href=\"#DOM-对象和-jQuery-对象的转换\" class=\"headerlink\" title=\"DOM 对象和 jQuery 对象的转换\"></a>DOM 对象和 jQuery 对象的转换</h2><h3 id=\"DOM-对象转-JQuery-对象\"><a href=\"#DOM-对象转-JQuery-对象\" class=\"headerlink\" title=\"DOM 对象转 JQuery 对象\"></a>DOM 对象转 JQuery 对象</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(DOM);</span><br></pre></td></tr></table></figure>\n\n<p><strong>比如 :</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;div&quot;</span>);</span><br><span class=\"line\">$(<span class=\"string\">&quot;.class&quot;</span>);</span><br><span class=\"line\">$(<span class=\"built_in\">this</span>);</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"JQuery-对象转-DOM-对象\"><a href=\"#JQuery-对象转-DOM-对象\" class=\"headerlink\" title=\"JQuery 对象转 DOM 对象\"></a>JQuery 对象转 DOM 对象</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(DOM)[<span class=\"number\">0</span>];</span><br></pre></td></tr></table></figure>\n\n<p><strong>比如 :</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;div&quot;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">$(<span class=\"string\">&quot;.class&quot;</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\">$(<span class=\"built_in\">this</span>)[<span class=\"number\">0</span>];</span><br><span class=\"line\"><span class=\"comment\">// ...</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"jQuery-事件\"><a href=\"#jQuery-事件\" class=\"headerlink\" title=\"jQuery 事件\"></a>jQuery 事件</h1><h2 id=\"事件语法\"><a href=\"#事件语法\" class=\"headerlink\" title=\"事件语法\"></a>事件语法</h2><h3 id=\"单击事件\"><a href=\"#单击事件\" class=\"headerlink\" title=\"单击事件\"></a>单击事件</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;button&quot;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 动作触发后执行的代码 !</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"双击事件\"><a href=\"#双击事件\" class=\"headerlink\" title=\"双击事件\"></a>双击事件</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;button&quot;</span>).dblclick(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 动作触发后执行的代码 !</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"鼠标进入\"><a href=\"#鼠标进入\" class=\"headerlink\" title=\"鼠标进入\"></a>鼠标进入</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;#div&quot;</span>).mouseenter(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 动作触发后执行的代码 !</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"鼠标移出\"><a href=\"#鼠标移出\" class=\"headerlink\" title=\"鼠标移出\"></a>鼠标移出</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;#div&quot;</span>).mouseleave(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 动作触发后执行的代码 !</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"获取焦点\"><a href=\"#获取焦点\" class=\"headerlink\" title=\"获取焦点\"></a>获取焦点</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;input&quot;</span>).focus(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 动作触发后执行的代码 !</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"失去焦点\"><a href=\"#失去焦点\" class=\"headerlink\" title=\"失去焦点\"></a>失去焦点</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;input&quot;</span>).blur(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 动作触发后执行的代码 !</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"jQuery-的-css-方法\"><a href=\"#jQuery-的-css-方法\" class=\"headerlink\" title=\"jQuery 的 css() 方法\"></a>jQuery 的 css() 方法</h1><p><code>jQuery</code> 的 <code>css()</code> 方法设置或返回被选元素的一个或多个样式属性</p>\n<h2 id=\"返回-CSS-属性\"><a href=\"#返回-CSS-属性\" class=\"headerlink\" title=\"返回 CSS 属性\"></a>返回 CSS 属性</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;p&quot;</span>).css(<span class=\"string\">&quot;background-color&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"设置-CSS-属性\"><a href=\"#设置-CSS-属性\" class=\"headerlink\" title=\"设置 CSS 属性\"></a>设置 CSS 属性</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;p&quot;</span>).css(<span class=\"string\">&quot;background-color&quot;</span>, <span class=\"string\">&quot;yellow&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"设置多个-CSS-属性\"><a href=\"#设置多个-CSS-属性\" class=\"headerlink\" title=\"设置多个 CSS 属性\"></a>设置多个 CSS 属性</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;p&quot;</span>).css(&#123;</span><br><span class=\"line\">  <span class=\"string\">&quot;background-color&quot;</span>: <span class=\"string\">&quot;yellow&quot;</span>,</span><br><span class=\"line\">  <span class=\"string\">&quot;font-size&quot;</span>: <span class=\"string\">&quot;20px&quot;</span>,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"jQuery-css-类\"><a href=\"#jQuery-css-类\" class=\"headerlink\" title=\"jQuery css 类\"></a>jQuery css 类</h1><h2 id=\"addClass\"><a href=\"#addClass\" class=\"headerlink\" title=\"addClass( )\"></a>addClass( )</h2><p>向被选元素添加一个或多个类</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.important</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-weight</span>: bold;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: xx-large;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.blue</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#0000ff</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;button&quot;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">&quot;h1,p&quot;</span>).addClass(<span class=\"string\">&quot;blue&quot;</span>);</span><br><span class=\"line\">  $(<span class=\"string\">&quot;div&quot;</span>).addClass(<span class=\"string\">&quot;important&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"removeClass\"><a href=\"#removeClass\" class=\"headerlink\" title=\"removeClass( )\"></a>removeClass( )</h2><p>从被选元素删除一个或多个类</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;button&quot;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">&quot;h1,h2,p&quot;</span>).removeClass(<span class=\"string\">&quot;blue&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"toggleClass\"><a href=\"#toggleClass\" class=\"headerlink\" title=\"toggleClass( )\"></a>toggleClass( )</h2><p>对被选元素进行添加或删除类的切换操作</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;button&quot;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">&quot;h1,h2,p&quot;</span>).toggleClass(<span class=\"string\">&quot;blue&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"eq\"><a href=\"#eq\" class=\"headerlink\" title=\"eq( )\"></a>eq( )</h2><p>方法返回带有被选元素的指定索引号的元素 , 索引号从 <code>0</code> 开头 , 所以第一个元素的索引号是 <code>0</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(selector).eq(index);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"index\"><a href=\"#index\" class=\"headerlink\" title=\"index( )\"></a>index( )</h2><p><code>index()</code> 方法返回指定元素相对于其他 <span id=\"green-block\">同级</span> 元素的 <code>index</code> 位置</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;li&quot;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log($(<span class=\"built_in\">this</span>).index());</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"not\"><a href=\"#not\" class=\"headerlink\" title=\"not()\"></a>not()</h2><p><code>Not()</code> 方法返回指定元素之外的元素</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;input&quot;</span>).not(<span class=\"string\">&quot;.inputA&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"jQuery-动画\"><a href=\"#jQuery-动画\" class=\"headerlink\" title=\"jQuery 动画\"></a>jQuery 动画</h1><h2 id=\"jQuery-隐藏显示\"><a href=\"#jQuery-隐藏显示\" class=\"headerlink\" title=\"jQuery 隐藏显示\"></a>jQuery 隐藏显示</h2><p>可以使用 <code>hide()</code> 和 <code>show()</code> 方法来隐藏和显示 <code>HTML</code> 元素</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;#hide&quot;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">&quot;p&quot;</span>).hide();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">$(<span class=\"string\">&quot;#show&quot;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">&quot;p&quot;</span>).show();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>可以使用 <code>toggle()</code> 方法来切换 <code>hide()</code> 和 <code>show()</code> 方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;button&quot;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">&quot;p&quot;</span>).toggle();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"jQuery-淡入淡出\"><a href=\"#jQuery-淡入淡出\" class=\"headerlink\" title=\"jQuery 淡入淡出\"></a>jQuery 淡入淡出</h2><p><code>fadeIn()</code> 用于淡入已隐藏的元素 , <code>fadeOut()</code> 方法用于淡出可见元素</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;button&quot;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">&quot;#div1&quot;</span>).fadeIn();</span><br><span class=\"line\">  $(<span class=\"string\">&quot;#div2&quot;</span>).fadeIn(<span class=\"string\">&quot;slow&quot;</span>);</span><br><span class=\"line\">  $(<span class=\"string\">&quot;#div3&quot;</span>).fadeOut(<span class=\"number\">3000</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><code>fadeToggle()</code> 方法可以在 <code>fadeIn()</code> 与 <code>fadeOut()</code> 方法之间进行切换</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;button&quot;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">&quot;#div2&quot;</span>).fadeToggle(<span class=\"string\">&quot;fast&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><code>fadeTo()</code> 方法允许渐变为给定的不透明度 ( 值介于 <code>0</code> 与 <code>1</code> 之间 )</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;button&quot;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">&quot;#div1&quot;</span>).fadeTo(<span class=\"string\">&quot;slow&quot;</span>, <span class=\"number\">0.15</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"jQuery-滑动\"><a href=\"#jQuery-滑动\" class=\"headerlink\" title=\"jQuery 滑动\"></a>jQuery 滑动</h2><p><code>slideDown()</code> 方法用于向下滑动元素 , <code>slideUp()</code> 方法用于向上滑动元素</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;#flip&quot;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">&quot;#div1&quot;</span>).slideDown();</span><br><span class=\"line\">  $(<span class=\"string\">&quot;#div1&quot;</span>).slideUp();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><code>slideToggle()</code> 方法可以在 <code>slideDown()</code> 与 <code>slideUp()</code> 方法之间进行切换</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;#flip&quot;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">&quot;#panel&quot;</span>).slideToggle();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"jQuery-自定义动画\"><a href=\"#jQuery-自定义动画\" class=\"headerlink\" title=\"jQuery 自定义动画\"></a>jQuery 自定义动画</h2><p><code>animate()</code> 方法用于创建自定义动画 , 可选的 <code>speed</code> 参数规定效果的时长 , 它可以取以下值 : <code>&quot;slow&quot;</code>,<code>&quot;fast&quot;</code> 或<code>毫秒</code> , 可选的 <code>callback</code> 参数是动画完成后所执行的函数名称</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;button&quot;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">&quot;div&quot;</span>).animate(&#123;</span><br><span class=\"line\">    <span class=\"attr\">left</span>: <span class=\"string\">&quot;250px&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">opacity</span>: <span class=\"string\">&quot;0.5&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">width</span>: <span class=\"string\">&quot;150px&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">height</span>: <span class=\"string\">&quot;150px&quot;</span>,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"stop\"><a href=\"#stop\" class=\"headerlink\" title=\"stop( )\"></a>stop( )</h2><p><code>jQuery</code> 的 <code>stop()</code> 方法用于停止动画或效果 , 在它们完成之前 , 适用于所有 <code>jQuery</code> 效果函数 , 包括滑动 , 淡入淡出和自定义动画</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;#stop&quot;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">&quot;#panel&quot;</span>).stop();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"回调函数\"><a href=\"#回调函数\" class=\"headerlink\" title=\"回调函数\"></a>回调函数</h2><p>在当前动画 <code>100%</code> 完成之后执行</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;button&quot;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">&quot;p&quot;</span>).hide(<span class=\"string\">&quot;slow&quot;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(<span class=\"string\">&quot;段落现在被隐藏了&quot;</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"案例\"><a href=\"#案例\" class=\"headerlink\" title=\"案例\"></a>案例</h1><h2 id=\"简单的-tab-切换\"><a href=\"#简单的-tab-切换\" class=\"headerlink\" title=\"简单的 tab 切换\"></a>简单的 tab 切换</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">box-sizing</span>: border-box;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.tab</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">100px</span> auto;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">800px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">400px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#abaeb6</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.tab-title</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">align-items</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">justify-content</span>: space-between;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.tab-title-item</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">25%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-right</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#171829</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-bottom</span>: <span class=\"number\">1px</span> solid <span class=\"number\">#171829</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.tab-title-item</span><span class=\"selector-pseudo\">:nth-last-of-type</span>(<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border-right</span>: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.tab-title-item</span><span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#82858f</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.tab-content-item</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">360px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;tab&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;tab-title&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;tab-title-item&quot;</span>&gt;</span>A<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;tab-title-item&quot;</span>&gt;</span>B<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;tab-title-item&quot;</span>&gt;</span>C<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;tab-title-item&quot;</span>&gt;</span>D<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;tab-content&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;tab-content-item&quot;</span>&gt;</span>A<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;tab-content-item&quot;</span>&gt;</span>B<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;tab-content-item&quot;</span>&gt;</span>C<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;tab-content-item&quot;</span>&gt;</span>D<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">&quot;.tab-content-item&quot;</span>).hide();</span><br><span class=\"line\">  $(<span class=\"string\">&quot;.tab-content-item:eq(0)&quot;</span>).show();</span><br><span class=\"line\"></span><br><span class=\"line\">  $(<span class=\"string\">&quot;.tab-title-item&quot;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    $(<span class=\"string\">&quot;.tab-content-item&quot;</span>).hide();</span><br><span class=\"line\">    $(<span class=\"string\">&quot;.tab-content-item&quot;</span>).eq($(<span class=\"built_in\">this</span>).index()).show();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"手风琴\"><a href=\"#手风琴\" class=\"headerlink\" title=\"手风琴\"></a>手风琴</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">box-sizing</span>: border-box;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.main</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">100px</span> auto;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">600px</span>;</span><br><span class=\"line\">  <span class=\"comment\">/* height: 200px; */</span></span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#9298a5</span>;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">flex-direction</span>: column;</span><br><span class=\"line\">  <span class=\"attribute\">align-items</span>: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.item</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: inherit;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.title</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: inherit;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">50px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">cursor</span>: pointer;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.title</span><span class=\"selector-pseudo\">:hover</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#c1d5e2</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.content</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">48px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-weight</span>: <span class=\"number\">800</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#ffffff</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#696d77</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;main&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;item&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;title&quot;</span>&gt;</span>首 页<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;content&quot;</span>&gt;</span>666<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;item&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;title&quot;</span>&gt;</span>归 档<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;content&quot;</span>&gt;</span>666<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;item&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;title&quot;</span>&gt;</span>标签<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;content&quot;</span>&gt;</span>666<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;item&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;title&quot;</span>&gt;</span>分类<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;content&quot;</span>&gt;</span>666<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">&quot;.content&quot;</span>).hide();</span><br><span class=\"line\">  $(<span class=\"string\">&quot;.title&quot;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    $(<span class=\"string\">&quot;.content&quot;</span>).slideUp();</span><br><span class=\"line\">    $(<span class=\"built_in\">this</span>).next().stop().slideDown();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n"},{"title":"jQuery ( 二 )","date":"2021-06-30T08:50:51.000Z","top_img":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg","cover":"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/desktop.png","comments":1,"_content":"\n# jQuery 事件机制\n\n## 注册事件\n\n`bind()` , `on()` 方法向被选元素添加一个或多个事件处理程序 , 以及当事件发生时运行的函数\n\n```js\n$(\"#div\").bind({\n  mouseover() {\n    $(this).css(\"background-color\", \"blue\");\n  },\n  mouseout() {\n    $(this).css(\"background-color\", \"black\");\n  },\n});\n```\n\n```js\n$(\"p\").on(\"click\", function () {\n  alert(\"该段落被点击了。\");\n});\n```\n\n## 事件对象 event\n\n`event` 对象有以下属性:\n\n- `type` : 事件类型 , 比如 `click`\n- `which` : 触发该事件的鼠标按钮或键盘的键\n- `target` : 事件发生的初始对象\n- `data` : 传入事件对象的数据\n- `pageX` : 事件发生时 , 鼠标位置的水平坐标 ( 以页面左上角为基准 )\n- `pageY` : 事件发生时 , 鼠标位置的垂直坐标 ( 以页面左上角为基准 )\n\n```js\n$(\"button\").click(function (event) {\n  console.log(evet);\n});\n```\n\n## each( )\n\n`each()` 方法为每个匹配元素规定要运行的函数\n\n```js\n$(\"button\").click(function () {\n  $(\"li\").each(function () {\n    console.log($(this).text());\n  });\n});\n```\n\n## jQuery.each( )  函数用于遍历指定的对象和数组\n\n```js\nlet arr = [10, 20, 30, 40];\n\n$.each(arr, (index, value) => {\n  console.log(`我是第${index + 1}元素 , 值是${value}`);\n});\n\nlet obj = {\n  name: \"张三\",\n  age: 20,\n  eat() {\n    return \"Good\";\n  },\n};\n\n$.each(obj, (key, value) => {\n  console.log(`${key}:${value}`);\n});\n```\n\n## jQuery 对 HTML 的设置与捕获\n\n### html( )\n\n`html()` 设置或返回所选元素的内容 ( 包括 `HTML` 标记 )\n\n```js\n$(\"button\").click(function () {\n  alert(\"HTML: \" + $(\"#test\").html());\n});\n\n$(\"button\").click(function () {\n  $(\"#test2\").html(\"<b>Hello world!</b>\");\n});\n```\n\n### text( )\n\n`text()` 设置或返回所选元素的文本内容\n\n```js\n$(\"button\").click(function () {\n  alert(\"Text: \" + $(\"#test\").text());\n});\n$(\"button\").click(function () {\n  $(\"#test1\").text(\"Hello world!\");\n});\n```\n\n### val( )\n\n`val()` 设置或返回表单字段的值\n\n```js\n$(\"button\").click(function () {\n  alert(\"值为: \" + $(\"input\").val());\n});\n$(\"button\").click(function () {\n  $(\"input\").val(\"666\");\n});\n```\n\n### text( ) html( ) 以及 val( ) 的回调函数\n\n`text()` , `html()` 以及 `val()` , 同样拥有回调函数 , 回调函数有两个参数 : 被选元素列表中当前元素的下标 , 以及原始 ( 旧的 ) 值然后以函数新值返回您希望使用的字符串\n\n```js\n$(\"button\").click(function () {\n  $(\"div\").text(function (index, originText) {\n    return `旧文本 :${originText},新文本 :HelloWorld (${index})`;\n  });\n});\n```\n\n### attr( ) 和 prop( )\n\n`attr()` , `prop()` 方法用于获取和返回属性值\n`attr()` 不仅可以返回元素的原生属性 , 还可以返回元素的自定义属性\n具有 `true` 和 `false` 两个属性值的属性 , 如 `checked`, `selected` 或者 `disabled` 使用 `prop()`\n\n```js\n$(\"button\").click(function () {\n  console.log($(\"a\").attr(\"href\"));\n});\n$(\"button\").click(function () {\n  $(\"a\").attr(\"href\", \"https://codehhr.cn\");\n});\n```\n\n```js\n$(\"button\").click(function () {\n  console.log($(\"a\").prop(\"href\"));\n});\n$(\"button\").click(function () {\n  $(\"a\").prop(\"href\", \"https://codehhr.cn\");\n});\n```\n\n# jQuery 对 HTML 的页面尺寸操作\n\n![jQueryBox](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/js/jquerybox.png)\n\n## width( ) 和 height( )\n\n`height()` 方法设置或返回元素的高度 ( 不包括内边距 , 边框或外边距 )\n`width()` 方法设置或返回元素的宽度 ( 不包括内边距 , 边框或外边距 )\n\n```js\n$(\"button\").click(function () {\n  console.log(`div 的宽度是: ${$(\"#div1\").width()}`);\n  console.log(`div 的高度是: ${$(\"#div1\").height(20)}`);\n});\n```\n\n## innerWidth( ) 和 innerHeight( )\n\n`innerWidth()` 方法返回元素的宽度 ( 包括内边距 )\n`innerHeight()` 方法返回元素的高度 ( 包括内边距 )\n\n```js\n$(\"button\").click(function () {\n  console.log(`div 宽度 , 包含内边距: ${$(\"#div1\").innerWidth()}`);\n  console.log(`div 高度 , 包含内边距: ${$(\"#div1\").innerHeight()}`);\n});\n```\n\n## outerWidth() 和 outerHeight() 方法\n\n`outerWidth()` 方法返回元素的宽度 ( 包括内边距和边框 )\n`outerHeight()` 方法返回元素的高度 ( 包括内边距和边框 )\n\n```js\n$(\"button\").click(function () {\n  console.log(`div 宽度 , 包含内边距和边框: ${$(\"#div1\").outerWidth()}`);\n  console.log(`div 高度 , 包含内边距和边框: ${$(\"#div1\").outerHeight()}`);\n});\n```\n\n## scrollTop() 和 scrollLeft() 方法\n\n`scrollTop()` 方法设置或者返回滚动条被卷去的元素的高度\n`scrollLeft()` 方法设置或者返回滚动条被卷去的元素的宽度\n\n```js\n$(\"button\").click(function () {\n  console.log($(document).scrollTop());\n  console.log($(document).scrollLeft());\n});\n```\n\n# jQuery 添加元素和删除元素\n\n## append( )\n\n`append()` 方法在被选元素的结尾插入内容 ( 仍然在该元素的内部 )\n\n```js\n$(\"ul\").append(\"<li>append here</li>\");\n```\n\n🢃\n\n```html\n<ul>\n  <li></li>\n  <li></li>\n  <li>append here</li>\n</ul>\n```\n\n## prepend( )\n\n`prepend()` 方法在被选元素的开头插入内容\n\n```js\n$(\"ul\").prepend(\"<li>prepend here</li>\");\n```\n\n🢃\n\n```html\n<ul>\n  <li>prepend here</li>\n  <li></li>\n  <li></li>\n</ul>\n```\n\n## after( )\n\njQuery 的 `after()` 方法在被选元素之后插入内容\n\n```js\n$(\"div\").after(\"<p>after</p>\");\n```\n\n🢃\n\n```html\n<div></div>\n<p>after</p>\n```\n\n## before( )\n\njQuery 的 `before()` 方法在被选元素之前插入内容\n\n```js\n$(\"div\").before(\"<p>before</p>\");\n```\n\n🢃\n\n```html\n<p>before</p>\n<div></div>\n```\n\n## remove( ) 和 empty( )\n\n`remove()` 删除被选元素 ( 及其子元素 )\n`empty()` 从被选元素中删除子元素\n\n`empty()`把子元素删除掉了 , 本身没有删除掉 , 所以本身占位置\n`remove()`把自己和子元素都删除掉了 , 本身已删除掉 , 所以不占位置\n\n**比如** 原 `DOM` 结构 🢃\n\n```html\n<ul>\n  <li>1</li>\n  <li>2</li>\n  <li>3</li>\n</ul>\n```\n\n### empty( )\n\n```js\n$(\"ul\").empty();\n```\n\n结果 : 🢃\n\n```html\n<ul>\n  <!-- 子元素都被删掉了 -->\n</ul>\n```\n\n### remove( )\n\n```js\n$(\"ul\").remove();\n```\n\n结果 : 🢃\n\n```html\n<!-- 把自己和子元素都删掉了,本身已删除掉  -->\n```\n\n# jquery 插件的认识\n\n`jquery` 不可能包含所有的功能 , 我们可以通过插件扩展 `jquery` 的功能\n`jquery` 有着丰富的插件 , 使用这些插件能给 `jquery` 提供一些额外的功能\n\n# jquery.color.js 的使用\n\n## 引入 js 文件\n\n`jquery` 中的 `animate` 动画本身不支持变色 m 但是 `jquery.color.js` 弥补了这一缺陷\n`jquery.color.js` 依赖于 `jQuery` , 所以需要先引用 `jquery.js`\n\n```html\n<script src=\"jquery.js\"></script>\n<script src=\"jquery.color.js\"></script>\n```\n\n## 示例\n\n```js\n$(\"button\").on(\"click\", function () {\n  $(\"div\").animate(\n    {\n      width: \"200px\",\n      \"background-color\": \"red\",\n    },\n    2000,\n    function () {\n      console.log(\"动画结束\");\n    }\n  );\n});\n```\n\n# jquery.lazyload.js 的使用\n\n## 引入 js 文件\n\n```html\n<script src=\"jquery.js\"></script>\n<script src=\"jquery.lazyload.js\"></script>\n```\n\n## 示例\n\n```html\n<img width=\"640\" height=\"480\" data-original=\"./img/test.jpg\" alt=\"\" />\n<button>按钮</button>\n```\n\n```js\n$(function () {\n  $(\"button\").click(function () {\n    $(\"img\").lazyload();\n  });\n});\n```\n\n# jquery.ui.js 的使用\n\n`jQuery` `UI` 是建立在 `jQuery` `JavaScript` 库上的一组用户界面交互 , 特效 , 小部件及主题\n\n## 引入\n\n```html\n<link rel=\"stylesheet\" href=\"./css/jquery-ui.css\" />\n<script src=\"./js/jquery.js\"></script>\n<script src=\"./js/jquery-ui.min.js\"></script>\n```\n\n## 示例\n\n### 操作日期选择器\n\n```html\n<input type=\"text\" id=\"date\" />\n```\n\n```js\n$(\"#date\").datepicker();\n```\n\n### 拖动\n\n允许鼠标拖动元素 , 在任意的 `DOM` 元素上启用 `draggable` 功能 , 通过鼠标点击并在视区中拖动来移动 `draggable` 对象\n\n```html\n<div id=\"draggable\"></div>\n```\n\n```js\n$(function () {\n  $(\"#draggable\").draggable();\n});\n```\n","source":"_posts/js/jquery-day02.md","raw":"---\ntitle: jQuery ( 二 )\ndate: 2021-06-30 16:50:51\ntop_img: https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg\ncover:\ntags:\n  - js\n  - javascript\n  - jQuery\ncategories:\n  - js\n  - jQuery\ncomments:\n---\n\n# jQuery 事件机制\n\n## 注册事件\n\n`bind()` , `on()` 方法向被选元素添加一个或多个事件处理程序 , 以及当事件发生时运行的函数\n\n```js\n$(\"#div\").bind({\n  mouseover() {\n    $(this).css(\"background-color\", \"blue\");\n  },\n  mouseout() {\n    $(this).css(\"background-color\", \"black\");\n  },\n});\n```\n\n```js\n$(\"p\").on(\"click\", function () {\n  alert(\"该段落被点击了。\");\n});\n```\n\n## 事件对象 event\n\n`event` 对象有以下属性:\n\n- `type` : 事件类型 , 比如 `click`\n- `which` : 触发该事件的鼠标按钮或键盘的键\n- `target` : 事件发生的初始对象\n- `data` : 传入事件对象的数据\n- `pageX` : 事件发生时 , 鼠标位置的水平坐标 ( 以页面左上角为基准 )\n- `pageY` : 事件发生时 , 鼠标位置的垂直坐标 ( 以页面左上角为基准 )\n\n```js\n$(\"button\").click(function (event) {\n  console.log(evet);\n});\n```\n\n## each( )\n\n`each()` 方法为每个匹配元素规定要运行的函数\n\n```js\n$(\"button\").click(function () {\n  $(\"li\").each(function () {\n    console.log($(this).text());\n  });\n});\n```\n\n## jQuery.each( )  函数用于遍历指定的对象和数组\n\n```js\nlet arr = [10, 20, 30, 40];\n\n$.each(arr, (index, value) => {\n  console.log(`我是第${index + 1}元素 , 值是${value}`);\n});\n\nlet obj = {\n  name: \"张三\",\n  age: 20,\n  eat() {\n    return \"Good\";\n  },\n};\n\n$.each(obj, (key, value) => {\n  console.log(`${key}:${value}`);\n});\n```\n\n## jQuery 对 HTML 的设置与捕获\n\n### html( )\n\n`html()` 设置或返回所选元素的内容 ( 包括 `HTML` 标记 )\n\n```js\n$(\"button\").click(function () {\n  alert(\"HTML: \" + $(\"#test\").html());\n});\n\n$(\"button\").click(function () {\n  $(\"#test2\").html(\"<b>Hello world!</b>\");\n});\n```\n\n### text( )\n\n`text()` 设置或返回所选元素的文本内容\n\n```js\n$(\"button\").click(function () {\n  alert(\"Text: \" + $(\"#test\").text());\n});\n$(\"button\").click(function () {\n  $(\"#test1\").text(\"Hello world!\");\n});\n```\n\n### val( )\n\n`val()` 设置或返回表单字段的值\n\n```js\n$(\"button\").click(function () {\n  alert(\"值为: \" + $(\"input\").val());\n});\n$(\"button\").click(function () {\n  $(\"input\").val(\"666\");\n});\n```\n\n### text( ) html( ) 以及 val( ) 的回调函数\n\n`text()` , `html()` 以及 `val()` , 同样拥有回调函数 , 回调函数有两个参数 : 被选元素列表中当前元素的下标 , 以及原始 ( 旧的 ) 值然后以函数新值返回您希望使用的字符串\n\n```js\n$(\"button\").click(function () {\n  $(\"div\").text(function (index, originText) {\n    return `旧文本 :${originText},新文本 :HelloWorld (${index})`;\n  });\n});\n```\n\n### attr( ) 和 prop( )\n\n`attr()` , `prop()` 方法用于获取和返回属性值\n`attr()` 不仅可以返回元素的原生属性 , 还可以返回元素的自定义属性\n具有 `true` 和 `false` 两个属性值的属性 , 如 `checked`, `selected` 或者 `disabled` 使用 `prop()`\n\n```js\n$(\"button\").click(function () {\n  console.log($(\"a\").attr(\"href\"));\n});\n$(\"button\").click(function () {\n  $(\"a\").attr(\"href\", \"https://codehhr.cn\");\n});\n```\n\n```js\n$(\"button\").click(function () {\n  console.log($(\"a\").prop(\"href\"));\n});\n$(\"button\").click(function () {\n  $(\"a\").prop(\"href\", \"https://codehhr.cn\");\n});\n```\n\n# jQuery 对 HTML 的页面尺寸操作\n\n![jQueryBox](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/js/jquerybox.png)\n\n## width( ) 和 height( )\n\n`height()` 方法设置或返回元素的高度 ( 不包括内边距 , 边框或外边距 )\n`width()` 方法设置或返回元素的宽度 ( 不包括内边距 , 边框或外边距 )\n\n```js\n$(\"button\").click(function () {\n  console.log(`div 的宽度是: ${$(\"#div1\").width()}`);\n  console.log(`div 的高度是: ${$(\"#div1\").height(20)}`);\n});\n```\n\n## innerWidth( ) 和 innerHeight( )\n\n`innerWidth()` 方法返回元素的宽度 ( 包括内边距 )\n`innerHeight()` 方法返回元素的高度 ( 包括内边距 )\n\n```js\n$(\"button\").click(function () {\n  console.log(`div 宽度 , 包含内边距: ${$(\"#div1\").innerWidth()}`);\n  console.log(`div 高度 , 包含内边距: ${$(\"#div1\").innerHeight()}`);\n});\n```\n\n## outerWidth() 和 outerHeight() 方法\n\n`outerWidth()` 方法返回元素的宽度 ( 包括内边距和边框 )\n`outerHeight()` 方法返回元素的高度 ( 包括内边距和边框 )\n\n```js\n$(\"button\").click(function () {\n  console.log(`div 宽度 , 包含内边距和边框: ${$(\"#div1\").outerWidth()}`);\n  console.log(`div 高度 , 包含内边距和边框: ${$(\"#div1\").outerHeight()}`);\n});\n```\n\n## scrollTop() 和 scrollLeft() 方法\n\n`scrollTop()` 方法设置或者返回滚动条被卷去的元素的高度\n`scrollLeft()` 方法设置或者返回滚动条被卷去的元素的宽度\n\n```js\n$(\"button\").click(function () {\n  console.log($(document).scrollTop());\n  console.log($(document).scrollLeft());\n});\n```\n\n# jQuery 添加元素和删除元素\n\n## append( )\n\n`append()` 方法在被选元素的结尾插入内容 ( 仍然在该元素的内部 )\n\n```js\n$(\"ul\").append(\"<li>append here</li>\");\n```\n\n🢃\n\n```html\n<ul>\n  <li></li>\n  <li></li>\n  <li>append here</li>\n</ul>\n```\n\n## prepend( )\n\n`prepend()` 方法在被选元素的开头插入内容\n\n```js\n$(\"ul\").prepend(\"<li>prepend here</li>\");\n```\n\n🢃\n\n```html\n<ul>\n  <li>prepend here</li>\n  <li></li>\n  <li></li>\n</ul>\n```\n\n## after( )\n\njQuery 的 `after()` 方法在被选元素之后插入内容\n\n```js\n$(\"div\").after(\"<p>after</p>\");\n```\n\n🢃\n\n```html\n<div></div>\n<p>after</p>\n```\n\n## before( )\n\njQuery 的 `before()` 方法在被选元素之前插入内容\n\n```js\n$(\"div\").before(\"<p>before</p>\");\n```\n\n🢃\n\n```html\n<p>before</p>\n<div></div>\n```\n\n## remove( ) 和 empty( )\n\n`remove()` 删除被选元素 ( 及其子元素 )\n`empty()` 从被选元素中删除子元素\n\n`empty()`把子元素删除掉了 , 本身没有删除掉 , 所以本身占位置\n`remove()`把自己和子元素都删除掉了 , 本身已删除掉 , 所以不占位置\n\n**比如** 原 `DOM` 结构 🢃\n\n```html\n<ul>\n  <li>1</li>\n  <li>2</li>\n  <li>3</li>\n</ul>\n```\n\n### empty( )\n\n```js\n$(\"ul\").empty();\n```\n\n结果 : 🢃\n\n```html\n<ul>\n  <!-- 子元素都被删掉了 -->\n</ul>\n```\n\n### remove( )\n\n```js\n$(\"ul\").remove();\n```\n\n结果 : 🢃\n\n```html\n<!-- 把自己和子元素都删掉了,本身已删除掉  -->\n```\n\n# jquery 插件的认识\n\n`jquery` 不可能包含所有的功能 , 我们可以通过插件扩展 `jquery` 的功能\n`jquery` 有着丰富的插件 , 使用这些插件能给 `jquery` 提供一些额外的功能\n\n# jquery.color.js 的使用\n\n## 引入 js 文件\n\n`jquery` 中的 `animate` 动画本身不支持变色 m 但是 `jquery.color.js` 弥补了这一缺陷\n`jquery.color.js` 依赖于 `jQuery` , 所以需要先引用 `jquery.js`\n\n```html\n<script src=\"jquery.js\"></script>\n<script src=\"jquery.color.js\"></script>\n```\n\n## 示例\n\n```js\n$(\"button\").on(\"click\", function () {\n  $(\"div\").animate(\n    {\n      width: \"200px\",\n      \"background-color\": \"red\",\n    },\n    2000,\n    function () {\n      console.log(\"动画结束\");\n    }\n  );\n});\n```\n\n# jquery.lazyload.js 的使用\n\n## 引入 js 文件\n\n```html\n<script src=\"jquery.js\"></script>\n<script src=\"jquery.lazyload.js\"></script>\n```\n\n## 示例\n\n```html\n<img width=\"640\" height=\"480\" data-original=\"./img/test.jpg\" alt=\"\" />\n<button>按钮</button>\n```\n\n```js\n$(function () {\n  $(\"button\").click(function () {\n    $(\"img\").lazyload();\n  });\n});\n```\n\n# jquery.ui.js 的使用\n\n`jQuery` `UI` 是建立在 `jQuery` `JavaScript` 库上的一组用户界面交互 , 特效 , 小部件及主题\n\n## 引入\n\n```html\n<link rel=\"stylesheet\" href=\"./css/jquery-ui.css\" />\n<script src=\"./js/jquery.js\"></script>\n<script src=\"./js/jquery-ui.min.js\"></script>\n```\n\n## 示例\n\n### 操作日期选择器\n\n```html\n<input type=\"text\" id=\"date\" />\n```\n\n```js\n$(\"#date\").datepicker();\n```\n\n### 拖动\n\n允许鼠标拖动元素 , 在任意的 `DOM` 元素上启用 `draggable` 功能 , 通过鼠标点击并在视区中拖动来移动 `draggable` 对象\n\n```html\n<div id=\"draggable\"></div>\n```\n\n```js\n$(function () {\n  $(\"#draggable\").draggable();\n});\n```\n","slug":"js/jquery-day02","published":1,"updated":"2021-07-06T03:32:34.951Z","layout":"post","photos":[],"link":"","_id":"cksvxwnnq001vgubq3odr9msh","content":"<h1 id=\"jQuery-事件机制\"><a href=\"#jQuery-事件机制\" class=\"headerlink\" title=\"jQuery 事件机制\"></a>jQuery 事件机制</h1><h2 id=\"注册事件\"><a href=\"#注册事件\" class=\"headerlink\" title=\"注册事件\"></a>注册事件</h2><p><code>bind()</code> , <code>on()</code> 方法向被选元素添加一个或多个事件处理程序 , 以及当事件发生时运行的函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;#div&quot;</span>).bind(&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">mouseover</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    $(<span class=\"built_in\">this</span>).css(<span class=\"string\">&quot;background-color&quot;</span>, <span class=\"string\">&quot;blue&quot;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">mouseout</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    $(<span class=\"built_in\">this</span>).css(<span class=\"string\">&quot;background-color&quot;</span>, <span class=\"string\">&quot;black&quot;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;p&quot;</span>).on(<span class=\"string\">&quot;click&quot;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  alert(<span class=\"string\">&quot;该段落被点击了。&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"事件对象-event\"><a href=\"#事件对象-event\" class=\"headerlink\" title=\"事件对象 event\"></a>事件对象 event</h2><p><code>event</code> 对象有以下属性:</p>\n<ul>\n<li><code>type</code> : 事件类型 , 比如 <code>click</code></li>\n<li><code>which</code> : 触发该事件的鼠标按钮或键盘的键</li>\n<li><code>target</code> : 事件发生的初始对象</li>\n<li><code>data</code> : 传入事件对象的数据</li>\n<li><code>pageX</code> : 事件发生时 , 鼠标位置的水平坐标 ( 以页面左上角为基准 )</li>\n<li><code>pageY</code> : 事件发生时 , 鼠标位置的垂直坐标 ( 以页面左上角为基准 )</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;button&quot;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(evet);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"each\"><a href=\"#each\" class=\"headerlink\" title=\"each( )\"></a>each( )</h2><p><code>each()</code> 方法为每个匹配元素规定要运行的函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;button&quot;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">&quot;li&quot;</span>).each(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log($(<span class=\"built_in\">this</span>).text());</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"jQuery-each-函数用于遍历指定的对象和数组\"><a href=\"#jQuery-each-函数用于遍历指定的对象和数组\" class=\"headerlink\" title=\"jQuery.each( )  函数用于遍历指定的对象和数组\"></a>jQuery.each( )  函数用于遍历指定的对象和数组</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">40</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">$.each(arr, <span class=\"function\">(<span class=\"params\">index, value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`我是第<span class=\"subst\">$&#123;index + <span class=\"number\">1</span>&#125;</span>元素 , 值是<span class=\"subst\">$&#123;value&#125;</span>`</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;张三&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">20</span>,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">eat</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;Good&quot;</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">$.each(obj, <span class=\"function\">(<span class=\"params\">key, value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;key&#125;</span>:<span class=\"subst\">$&#123;value&#125;</span>`</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"jQuery-对-HTML-的设置与捕获\"><a href=\"#jQuery-对-HTML-的设置与捕获\" class=\"headerlink\" title=\"jQuery 对 HTML 的设置与捕获\"></a>jQuery 对 HTML 的设置与捕获</h2><h3 id=\"html\"><a href=\"#html\" class=\"headerlink\" title=\"html( )\"></a>html( )</h3><p><code>html()</code> 设置或返回所选元素的内容 ( 包括 <code>HTML</code> 标记 )</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;button&quot;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  alert(<span class=\"string\">&quot;HTML: &quot;</span> + $(<span class=\"string\">&quot;#test&quot;</span>).html());</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">$(<span class=\"string\">&quot;button&quot;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">&quot;#test2&quot;</span>).html(<span class=\"string\">&quot;&lt;b&gt;Hello world!&lt;/b&gt;&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"text\"><a href=\"#text\" class=\"headerlink\" title=\"text( )\"></a>text( )</h3><p><code>text()</code> 设置或返回所选元素的文本内容</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;button&quot;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  alert(<span class=\"string\">&quot;Text: &quot;</span> + $(<span class=\"string\">&quot;#test&quot;</span>).text());</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">$(<span class=\"string\">&quot;button&quot;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">&quot;#test1&quot;</span>).text(<span class=\"string\">&quot;Hello world!&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"val\"><a href=\"#val\" class=\"headerlink\" title=\"val( )\"></a>val( )</h3><p><code>val()</code> 设置或返回表单字段的值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;button&quot;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  alert(<span class=\"string\">&quot;值为: &quot;</span> + $(<span class=\"string\">&quot;input&quot;</span>).val());</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">$(<span class=\"string\">&quot;button&quot;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">&quot;input&quot;</span>).val(<span class=\"string\">&quot;666&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"text-html-以及-val-的回调函数\"><a href=\"#text-html-以及-val-的回调函数\" class=\"headerlink\" title=\"text( ) html( ) 以及 val( ) 的回调函数\"></a>text( ) html( ) 以及 val( ) 的回调函数</h3><p><code>text()</code> , <code>html()</code> 以及 <code>val()</code> , 同样拥有回调函数 , 回调函数有两个参数 : 被选元素列表中当前元素的下标 , 以及原始 ( 旧的 ) 值然后以函数新值返回您希望使用的字符串</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;button&quot;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">&quot;div&quot;</span>).text(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">index, originText</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`旧文本 :<span class=\"subst\">$&#123;originText&#125;</span>,新文本 :HelloWorld (<span class=\"subst\">$&#123;index&#125;</span>)`</span>;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"attr-和-prop\"><a href=\"#attr-和-prop\" class=\"headerlink\" title=\"attr( ) 和 prop( )\"></a>attr( ) 和 prop( )</h3><p><code>attr()</code> , <code>prop()</code> 方法用于获取和返回属性值<br><code>attr()</code> 不仅可以返回元素的原生属性 , 还可以返回元素的自定义属性<br>具有 <code>true</code> 和 <code>false</code> 两个属性值的属性 , 如 <code>checked</code>, <code>selected</code> 或者 <code>disabled</code> 使用 <code>prop()</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;button&quot;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log($(<span class=\"string\">&quot;a&quot;</span>).attr(<span class=\"string\">&quot;href&quot;</span>));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">$(<span class=\"string\">&quot;button&quot;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">&quot;a&quot;</span>).attr(<span class=\"string\">&quot;href&quot;</span>, <span class=\"string\">&quot;https://codehhr.cn&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;button&quot;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log($(<span class=\"string\">&quot;a&quot;</span>).prop(<span class=\"string\">&quot;href&quot;</span>));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">$(<span class=\"string\">&quot;button&quot;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">&quot;a&quot;</span>).prop(<span class=\"string\">&quot;href&quot;</span>, <span class=\"string\">&quot;https://codehhr.cn&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"jQuery-对-HTML-的页面尺寸操作\"><a href=\"#jQuery-对-HTML-的页面尺寸操作\" class=\"headerlink\" title=\"jQuery 对 HTML 的页面尺寸操作\"></a>jQuery 对 HTML 的页面尺寸操作</h1><p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/js/jquerybox.png\" alt=\"jQueryBox\"></p>\n<h2 id=\"width-和-height\"><a href=\"#width-和-height\" class=\"headerlink\" title=\"width( ) 和 height( )\"></a>width( ) 和 height( )</h2><p><code>height()</code> 方法设置或返回元素的高度 ( 不包括内边距 , 边框或外边距 )<br><code>width()</code> 方法设置或返回元素的宽度 ( 不包括内边距 , 边框或外边距 )</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;button&quot;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`div 的宽度是: <span class=\"subst\">$&#123;$(<span class=\"string\">&quot;#div1&quot;</span>).width()&#125;</span>`</span>);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`div 的高度是: <span class=\"subst\">$&#123;$(<span class=\"string\">&quot;#div1&quot;</span>).height(<span class=\"number\">20</span>)&#125;</span>`</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"innerWidth-和-innerHeight\"><a href=\"#innerWidth-和-innerHeight\" class=\"headerlink\" title=\"innerWidth( ) 和 innerHeight( )\"></a>innerWidth( ) 和 innerHeight( )</h2><p><code>innerWidth()</code> 方法返回元素的宽度 ( 包括内边距 )<br><code>innerHeight()</code> 方法返回元素的高度 ( 包括内边距 )</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;button&quot;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`div 宽度 , 包含内边距: <span class=\"subst\">$&#123;$(<span class=\"string\">&quot;#div1&quot;</span>).innerWidth()&#125;</span>`</span>);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`div 高度 , 包含内边距: <span class=\"subst\">$&#123;$(<span class=\"string\">&quot;#div1&quot;</span>).innerHeight()&#125;</span>`</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"outerWidth-和-outerHeight-方法\"><a href=\"#outerWidth-和-outerHeight-方法\" class=\"headerlink\" title=\"outerWidth() 和 outerHeight() 方法\"></a>outerWidth() 和 outerHeight() 方法</h2><p><code>outerWidth()</code> 方法返回元素的宽度 ( 包括内边距和边框 )<br><code>outerHeight()</code> 方法返回元素的高度 ( 包括内边距和边框 )</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;button&quot;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`div 宽度 , 包含内边距和边框: <span class=\"subst\">$&#123;$(<span class=\"string\">&quot;#div1&quot;</span>).outerWidth()&#125;</span>`</span>);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`div 高度 , 包含内边距和边框: <span class=\"subst\">$&#123;$(<span class=\"string\">&quot;#div1&quot;</span>).outerHeight()&#125;</span>`</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"scrollTop-和-scrollLeft-方法\"><a href=\"#scrollTop-和-scrollLeft-方法\" class=\"headerlink\" title=\"scrollTop() 和 scrollLeft() 方法\"></a>scrollTop() 和 scrollLeft() 方法</h2><p><code>scrollTop()</code> 方法设置或者返回滚动条被卷去的元素的高度<br><code>scrollLeft()</code> 方法设置或者返回滚动条被卷去的元素的宽度</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;button&quot;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log($(<span class=\"built_in\">document</span>).scrollTop());</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log($(<span class=\"built_in\">document</span>).scrollLeft());</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"jQuery-添加元素和删除元素\"><a href=\"#jQuery-添加元素和删除元素\" class=\"headerlink\" title=\"jQuery 添加元素和删除元素\"></a>jQuery 添加元素和删除元素</h1><h2 id=\"append\"><a href=\"#append\" class=\"headerlink\" title=\"append( )\"></a>append( )</h2><p><code>append()</code> 方法在被选元素的结尾插入内容 ( 仍然在该元素的内部 )</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;ul&quot;</span>).append(<span class=\"string\">&quot;&lt;li&gt;append here&lt;/li&gt;&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>🢃</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>append here<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"prepend\"><a href=\"#prepend\" class=\"headerlink\" title=\"prepend( )\"></a>prepend( )</h2><p><code>prepend()</code> 方法在被选元素的开头插入内容</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;ul&quot;</span>).prepend(<span class=\"string\">&quot;&lt;li&gt;prepend here&lt;/li&gt;&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>🢃</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>prepend here<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"after\"><a href=\"#after\" class=\"headerlink\" title=\"after( )\"></a>after( )</h2><p>jQuery 的 <code>after()</code> 方法在被选元素之后插入内容</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;div&quot;</span>).after(<span class=\"string\">&quot;&lt;p&gt;after&lt;/p&gt;&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>🢃</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>after<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"before\"><a href=\"#before\" class=\"headerlink\" title=\"before( )\"></a>before( )</h2><p>jQuery 的 <code>before()</code> 方法在被选元素之前插入内容</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;div&quot;</span>).before(<span class=\"string\">&quot;&lt;p&gt;before&lt;/p&gt;&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>🢃</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>before<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"remove-和-empty\"><a href=\"#remove-和-empty\" class=\"headerlink\" title=\"remove( ) 和 empty( )\"></a>remove( ) 和 empty( )</h2><p><code>remove()</code> 删除被选元素 ( 及其子元素 )<br><code>empty()</code> 从被选元素中删除子元素</p>\n<p><code>empty()</code>把子元素删除掉了 , 本身没有删除掉 , 所以本身占位置<br><code>remove()</code>把自己和子元素都删除掉了 , 本身已删除掉 , 所以不占位置</p>\n<p><strong>比如</strong> 原 <code>DOM</code> 结构 🢃</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"empty\"><a href=\"#empty\" class=\"headerlink\" title=\"empty( )\"></a>empty( )</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;ul&quot;</span>).empty();</span><br></pre></td></tr></table></figure>\n\n<p>结果 : 🢃</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 子元素都被删掉了 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"remove\"><a href=\"#remove\" class=\"headerlink\" title=\"remove( )\"></a>remove( )</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;ul&quot;</span>).remove();</span><br></pre></td></tr></table></figure>\n\n<p>结果 : 🢃</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 把自己和子元素都删掉了,本身已删除掉  --&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"jquery-插件的认识\"><a href=\"#jquery-插件的认识\" class=\"headerlink\" title=\"jquery 插件的认识\"></a>jquery 插件的认识</h1><p><code>jquery</code> 不可能包含所有的功能 , 我们可以通过插件扩展 <code>jquery</code> 的功能<br><code>jquery</code> 有着丰富的插件 , 使用这些插件能给 <code>jquery</code> 提供一些额外的功能</p>\n<h1 id=\"jquery-color-js-的使用\"><a href=\"#jquery-color-js-的使用\" class=\"headerlink\" title=\"jquery.color.js 的使用\"></a>jquery.color.js 的使用</h1><h2 id=\"引入-js-文件\"><a href=\"#引入-js-文件\" class=\"headerlink\" title=\"引入 js 文件\"></a>引入 js 文件</h2><p><code>jquery</code> 中的 <code>animate</code> 动画本身不支持变色 m 但是 <code>jquery.color.js</code> 弥补了这一缺陷<br><code>jquery.color.js</code> 依赖于 <code>jQuery</code> , 所以需要先引用 <code>jquery.js</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;jquery.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;jquery.color.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;button&quot;</span>).on(<span class=\"string\">&quot;click&quot;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">&quot;div&quot;</span>).animate(</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">width</span>: <span class=\"string\">&quot;200px&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;background-color&quot;</span>: <span class=\"string\">&quot;red&quot;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"number\">2000</span>,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;动画结束&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"jquery-lazyload-js-的使用\"><a href=\"#jquery-lazyload-js-的使用\" class=\"headerlink\" title=\"jquery.lazyload.js 的使用\"></a>jquery.lazyload.js 的使用</h1><h2 id=\"引入-js-文件-1\"><a href=\"#引入-js-文件-1\" class=\"headerlink\" title=\"引入 js 文件\"></a>引入 js 文件</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;jquery.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;jquery.lazyload.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"示例-1\"><a href=\"#示例-1\" class=\"headerlink\" title=\"示例\"></a>示例</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;640&quot;</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;480&quot;</span> <span class=\"attr\">data-original</span>=<span class=\"string\">&quot;./img/test.jpg&quot;</span> <span class=\"attr\">alt</span>=<span class=\"string\">&quot;&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>按钮<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">&quot;button&quot;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    $(<span class=\"string\">&quot;img&quot;</span>).lazyload();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"jquery-ui-js-的使用\"><a href=\"#jquery-ui-js-的使用\" class=\"headerlink\" title=\"jquery.ui.js 的使用\"></a>jquery.ui.js 的使用</h1><p><code>jQuery</code> <code>UI</code> 是建立在 <code>jQuery</code> <code>JavaScript</code> 库上的一组用户界面交互 , 特效 , 小部件及主题</p>\n<h2 id=\"引入\"><a href=\"#引入\" class=\"headerlink\" title=\"引入\"></a>引入</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;./css/jquery-ui.css&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;./js/jquery.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;./js/jquery-ui.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"示例-2\"><a href=\"#示例-2\" class=\"headerlink\" title=\"示例\"></a>示例</h2><h3 id=\"操作日期选择器\"><a href=\"#操作日期选择器\" class=\"headerlink\" title=\"操作日期选择器\"></a>操作日期选择器</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;date&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;#date&quot;</span>).datepicker();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"拖动\"><a href=\"#拖动\" class=\"headerlink\" title=\"拖动\"></a>拖动</h3><p>允许鼠标拖动元素 , 在任意的 <code>DOM</code> 元素上启用 <code>draggable</code> 功能 , 通过鼠标点击并在视区中拖动来移动 <code>draggable</code> 对象</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;draggable&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">&quot;#draggable&quot;</span>).draggable();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n","site":{"data":{"link":{"class1":{"class_name":"舍友","link_list":{"1":{"name":"codeAntg","link":"https://blog.csdn.net/weixin_44745147","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/fjh.jpg","descr":"那家刀削面不错","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class2":{"class_name":"致谢","link_list":{"1":{"name":"JerrC","link":"https://immyw.com","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/immyw.png","descr":"今日事,今日毕","width":"1px","style":"solid","color":"#60d0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/hexo.svg","descr":"A fast, simple & powerful blog framework","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class3":{"class_name":"友人","link_list":{"1":{"name":"Chester","link":"http://chesterlds.cn","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/chester.jpg","descr":null,"width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Wangs","link":"https://wangsss.cn/","avatar":"https://wangsss.cn/img/avatar.png","descr":"不疯魔，不成活 ~","width":"1px","style":"solid","color":"#9d9d9d","custom":"link_custom1","time":"4s","namecolor":"0094ff","descolor":"#ff9191"}}}}}},"excerpt":"","more":"<h1 id=\"jQuery-事件机制\"><a href=\"#jQuery-事件机制\" class=\"headerlink\" title=\"jQuery 事件机制\"></a>jQuery 事件机制</h1><h2 id=\"注册事件\"><a href=\"#注册事件\" class=\"headerlink\" title=\"注册事件\"></a>注册事件</h2><p><code>bind()</code> , <code>on()</code> 方法向被选元素添加一个或多个事件处理程序 , 以及当事件发生时运行的函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;#div&quot;</span>).bind(&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">mouseover</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    $(<span class=\"built_in\">this</span>).css(<span class=\"string\">&quot;background-color&quot;</span>, <span class=\"string\">&quot;blue&quot;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">mouseout</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    $(<span class=\"built_in\">this</span>).css(<span class=\"string\">&quot;background-color&quot;</span>, <span class=\"string\">&quot;black&quot;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;p&quot;</span>).on(<span class=\"string\">&quot;click&quot;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  alert(<span class=\"string\">&quot;该段落被点击了。&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"事件对象-event\"><a href=\"#事件对象-event\" class=\"headerlink\" title=\"事件对象 event\"></a>事件对象 event</h2><p><code>event</code> 对象有以下属性:</p>\n<ul>\n<li><code>type</code> : 事件类型 , 比如 <code>click</code></li>\n<li><code>which</code> : 触发该事件的鼠标按钮或键盘的键</li>\n<li><code>target</code> : 事件发生的初始对象</li>\n<li><code>data</code> : 传入事件对象的数据</li>\n<li><code>pageX</code> : 事件发生时 , 鼠标位置的水平坐标 ( 以页面左上角为基准 )</li>\n<li><code>pageY</code> : 事件发生时 , 鼠标位置的垂直坐标 ( 以页面左上角为基准 )</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;button&quot;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(evet);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"each\"><a href=\"#each\" class=\"headerlink\" title=\"each( )\"></a>each( )</h2><p><code>each()</code> 方法为每个匹配元素规定要运行的函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;button&quot;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">&quot;li&quot;</span>).each(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log($(<span class=\"built_in\">this</span>).text());</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"jQuery-each-函数用于遍历指定的对象和数组\"><a href=\"#jQuery-each-函数用于遍历指定的对象和数组\" class=\"headerlink\" title=\"jQuery.each( )  函数用于遍历指定的对象和数组\"></a>jQuery.each( )  函数用于遍历指定的对象和数组</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">10</span>, <span class=\"number\">20</span>, <span class=\"number\">30</span>, <span class=\"number\">40</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">$.each(arr, <span class=\"function\">(<span class=\"params\">index, value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`我是第<span class=\"subst\">$&#123;index + <span class=\"number\">1</span>&#125;</span>元素 , 值是<span class=\"subst\">$&#123;value&#125;</span>`</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;张三&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">20</span>,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">eat</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&quot;Good&quot;</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">$.each(obj, <span class=\"function\">(<span class=\"params\">key, value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`<span class=\"subst\">$&#123;key&#125;</span>:<span class=\"subst\">$&#123;value&#125;</span>`</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"jQuery-对-HTML-的设置与捕获\"><a href=\"#jQuery-对-HTML-的设置与捕获\" class=\"headerlink\" title=\"jQuery 对 HTML 的设置与捕获\"></a>jQuery 对 HTML 的设置与捕获</h2><h3 id=\"html\"><a href=\"#html\" class=\"headerlink\" title=\"html( )\"></a>html( )</h3><p><code>html()</code> 设置或返回所选元素的内容 ( 包括 <code>HTML</code> 标记 )</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;button&quot;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  alert(<span class=\"string\">&quot;HTML: &quot;</span> + $(<span class=\"string\">&quot;#test&quot;</span>).html());</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">$(<span class=\"string\">&quot;button&quot;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">&quot;#test2&quot;</span>).html(<span class=\"string\">&quot;&lt;b&gt;Hello world!&lt;/b&gt;&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"text\"><a href=\"#text\" class=\"headerlink\" title=\"text( )\"></a>text( )</h3><p><code>text()</code> 设置或返回所选元素的文本内容</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;button&quot;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  alert(<span class=\"string\">&quot;Text: &quot;</span> + $(<span class=\"string\">&quot;#test&quot;</span>).text());</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">$(<span class=\"string\">&quot;button&quot;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">&quot;#test1&quot;</span>).text(<span class=\"string\">&quot;Hello world!&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"val\"><a href=\"#val\" class=\"headerlink\" title=\"val( )\"></a>val( )</h3><p><code>val()</code> 设置或返回表单字段的值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;button&quot;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  alert(<span class=\"string\">&quot;值为: &quot;</span> + $(<span class=\"string\">&quot;input&quot;</span>).val());</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">$(<span class=\"string\">&quot;button&quot;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">&quot;input&quot;</span>).val(<span class=\"string\">&quot;666&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"text-html-以及-val-的回调函数\"><a href=\"#text-html-以及-val-的回调函数\" class=\"headerlink\" title=\"text( ) html( ) 以及 val( ) 的回调函数\"></a>text( ) html( ) 以及 val( ) 的回调函数</h3><p><code>text()</code> , <code>html()</code> 以及 <code>val()</code> , 同样拥有回调函数 , 回调函数有两个参数 : 被选元素列表中当前元素的下标 , 以及原始 ( 旧的 ) 值然后以函数新值返回您希望使用的字符串</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;button&quot;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">&quot;div&quot;</span>).text(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">index, originText</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">`旧文本 :<span class=\"subst\">$&#123;originText&#125;</span>,新文本 :HelloWorld (<span class=\"subst\">$&#123;index&#125;</span>)`</span>;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"attr-和-prop\"><a href=\"#attr-和-prop\" class=\"headerlink\" title=\"attr( ) 和 prop( )\"></a>attr( ) 和 prop( )</h3><p><code>attr()</code> , <code>prop()</code> 方法用于获取和返回属性值<br><code>attr()</code> 不仅可以返回元素的原生属性 , 还可以返回元素的自定义属性<br>具有 <code>true</code> 和 <code>false</code> 两个属性值的属性 , 如 <code>checked</code>, <code>selected</code> 或者 <code>disabled</code> 使用 <code>prop()</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;button&quot;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log($(<span class=\"string\">&quot;a&quot;</span>).attr(<span class=\"string\">&quot;href&quot;</span>));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">$(<span class=\"string\">&quot;button&quot;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">&quot;a&quot;</span>).attr(<span class=\"string\">&quot;href&quot;</span>, <span class=\"string\">&quot;https://codehhr.cn&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;button&quot;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log($(<span class=\"string\">&quot;a&quot;</span>).prop(<span class=\"string\">&quot;href&quot;</span>));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">$(<span class=\"string\">&quot;button&quot;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">&quot;a&quot;</span>).prop(<span class=\"string\">&quot;href&quot;</span>, <span class=\"string\">&quot;https://codehhr.cn&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"jQuery-对-HTML-的页面尺寸操作\"><a href=\"#jQuery-对-HTML-的页面尺寸操作\" class=\"headerlink\" title=\"jQuery 对 HTML 的页面尺寸操作\"></a>jQuery 对 HTML 的页面尺寸操作</h1><p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/js/jquerybox.png\" alt=\"jQueryBox\"></p>\n<h2 id=\"width-和-height\"><a href=\"#width-和-height\" class=\"headerlink\" title=\"width( ) 和 height( )\"></a>width( ) 和 height( )</h2><p><code>height()</code> 方法设置或返回元素的高度 ( 不包括内边距 , 边框或外边距 )<br><code>width()</code> 方法设置或返回元素的宽度 ( 不包括内边距 , 边框或外边距 )</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;button&quot;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`div 的宽度是: <span class=\"subst\">$&#123;$(<span class=\"string\">&quot;#div1&quot;</span>).width()&#125;</span>`</span>);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`div 的高度是: <span class=\"subst\">$&#123;$(<span class=\"string\">&quot;#div1&quot;</span>).height(<span class=\"number\">20</span>)&#125;</span>`</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"innerWidth-和-innerHeight\"><a href=\"#innerWidth-和-innerHeight\" class=\"headerlink\" title=\"innerWidth( ) 和 innerHeight( )\"></a>innerWidth( ) 和 innerHeight( )</h2><p><code>innerWidth()</code> 方法返回元素的宽度 ( 包括内边距 )<br><code>innerHeight()</code> 方法返回元素的高度 ( 包括内边距 )</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;button&quot;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`div 宽度 , 包含内边距: <span class=\"subst\">$&#123;$(<span class=\"string\">&quot;#div1&quot;</span>).innerWidth()&#125;</span>`</span>);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`div 高度 , 包含内边距: <span class=\"subst\">$&#123;$(<span class=\"string\">&quot;#div1&quot;</span>).innerHeight()&#125;</span>`</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"outerWidth-和-outerHeight-方法\"><a href=\"#outerWidth-和-outerHeight-方法\" class=\"headerlink\" title=\"outerWidth() 和 outerHeight() 方法\"></a>outerWidth() 和 outerHeight() 方法</h2><p><code>outerWidth()</code> 方法返回元素的宽度 ( 包括内边距和边框 )<br><code>outerHeight()</code> 方法返回元素的高度 ( 包括内边距和边框 )</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;button&quot;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`div 宽度 , 包含内边距和边框: <span class=\"subst\">$&#123;$(<span class=\"string\">&quot;#div1&quot;</span>).outerWidth()&#125;</span>`</span>);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`div 高度 , 包含内边距和边框: <span class=\"subst\">$&#123;$(<span class=\"string\">&quot;#div1&quot;</span>).outerHeight()&#125;</span>`</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"scrollTop-和-scrollLeft-方法\"><a href=\"#scrollTop-和-scrollLeft-方法\" class=\"headerlink\" title=\"scrollTop() 和 scrollLeft() 方法\"></a>scrollTop() 和 scrollLeft() 方法</h2><p><code>scrollTop()</code> 方法设置或者返回滚动条被卷去的元素的高度<br><code>scrollLeft()</code> 方法设置或者返回滚动条被卷去的元素的宽度</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;button&quot;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log($(<span class=\"built_in\">document</span>).scrollTop());</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log($(<span class=\"built_in\">document</span>).scrollLeft());</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"jQuery-添加元素和删除元素\"><a href=\"#jQuery-添加元素和删除元素\" class=\"headerlink\" title=\"jQuery 添加元素和删除元素\"></a>jQuery 添加元素和删除元素</h1><h2 id=\"append\"><a href=\"#append\" class=\"headerlink\" title=\"append( )\"></a>append( )</h2><p><code>append()</code> 方法在被选元素的结尾插入内容 ( 仍然在该元素的内部 )</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;ul&quot;</span>).append(<span class=\"string\">&quot;&lt;li&gt;append here&lt;/li&gt;&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>🢃</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>append here<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"prepend\"><a href=\"#prepend\" class=\"headerlink\" title=\"prepend( )\"></a>prepend( )</h2><p><code>prepend()</code> 方法在被选元素的开头插入内容</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;ul&quot;</span>).prepend(<span class=\"string\">&quot;&lt;li&gt;prepend here&lt;/li&gt;&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>🢃</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>prepend here<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"after\"><a href=\"#after\" class=\"headerlink\" title=\"after( )\"></a>after( )</h2><p>jQuery 的 <code>after()</code> 方法在被选元素之后插入内容</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;div&quot;</span>).after(<span class=\"string\">&quot;&lt;p&gt;after&lt;/p&gt;&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>🢃</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>after<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"before\"><a href=\"#before\" class=\"headerlink\" title=\"before( )\"></a>before( )</h2><p>jQuery 的 <code>before()</code> 方法在被选元素之前插入内容</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;div&quot;</span>).before(<span class=\"string\">&quot;&lt;p&gt;before&lt;/p&gt;&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>🢃</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>before<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"remove-和-empty\"><a href=\"#remove-和-empty\" class=\"headerlink\" title=\"remove( ) 和 empty( )\"></a>remove( ) 和 empty( )</h2><p><code>remove()</code> 删除被选元素 ( 及其子元素 )<br><code>empty()</code> 从被选元素中删除子元素</p>\n<p><code>empty()</code>把子元素删除掉了 , 本身没有删除掉 , 所以本身占位置<br><code>remove()</code>把自己和子元素都删除掉了 , 本身已删除掉 , 所以不占位置</p>\n<p><strong>比如</strong> 原 <code>DOM</code> 结构 🢃</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"empty\"><a href=\"#empty\" class=\"headerlink\" title=\"empty( )\"></a>empty( )</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;ul&quot;</span>).empty();</span><br></pre></td></tr></table></figure>\n\n<p>结果 : 🢃</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 子元素都被删掉了 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"remove\"><a href=\"#remove\" class=\"headerlink\" title=\"remove( )\"></a>remove( )</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;ul&quot;</span>).remove();</span><br></pre></td></tr></table></figure>\n\n<p>结果 : 🢃</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 把自己和子元素都删掉了,本身已删除掉  --&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"jquery-插件的认识\"><a href=\"#jquery-插件的认识\" class=\"headerlink\" title=\"jquery 插件的认识\"></a>jquery 插件的认识</h1><p><code>jquery</code> 不可能包含所有的功能 , 我们可以通过插件扩展 <code>jquery</code> 的功能<br><code>jquery</code> 有着丰富的插件 , 使用这些插件能给 <code>jquery</code> 提供一些额外的功能</p>\n<h1 id=\"jquery-color-js-的使用\"><a href=\"#jquery-color-js-的使用\" class=\"headerlink\" title=\"jquery.color.js 的使用\"></a>jquery.color.js 的使用</h1><h2 id=\"引入-js-文件\"><a href=\"#引入-js-文件\" class=\"headerlink\" title=\"引入 js 文件\"></a>引入 js 文件</h2><p><code>jquery</code> 中的 <code>animate</code> 动画本身不支持变色 m 但是 <code>jquery.color.js</code> 弥补了这一缺陷<br><code>jquery.color.js</code> 依赖于 <code>jQuery</code> , 所以需要先引用 <code>jquery.js</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;jquery.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;jquery.color.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;button&quot;</span>).on(<span class=\"string\">&quot;click&quot;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">&quot;div&quot;</span>).animate(</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">width</span>: <span class=\"string\">&quot;200px&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;background-color&quot;</span>: <span class=\"string\">&quot;red&quot;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"number\">2000</span>,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;动画结束&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"jquery-lazyload-js-的使用\"><a href=\"#jquery-lazyload-js-的使用\" class=\"headerlink\" title=\"jquery.lazyload.js 的使用\"></a>jquery.lazyload.js 的使用</h1><h2 id=\"引入-js-文件-1\"><a href=\"#引入-js-文件-1\" class=\"headerlink\" title=\"引入 js 文件\"></a>引入 js 文件</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;jquery.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;jquery.lazyload.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"示例-1\"><a href=\"#示例-1\" class=\"headerlink\" title=\"示例\"></a>示例</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">width</span>=<span class=\"string\">&quot;640&quot;</span> <span class=\"attr\">height</span>=<span class=\"string\">&quot;480&quot;</span> <span class=\"attr\">data-original</span>=<span class=\"string\">&quot;./img/test.jpg&quot;</span> <span class=\"attr\">alt</span>=<span class=\"string\">&quot;&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>按钮<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">&quot;button&quot;</span>).click(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    $(<span class=\"string\">&quot;img&quot;</span>).lazyload();</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"jquery-ui-js-的使用\"><a href=\"#jquery-ui-js-的使用\" class=\"headerlink\" title=\"jquery.ui.js 的使用\"></a>jquery.ui.js 的使用</h1><p><code>jQuery</code> <code>UI</code> 是建立在 <code>jQuery</code> <code>JavaScript</code> 库上的一组用户界面交互 , 特效 , 小部件及主题</p>\n<h2 id=\"引入\"><a href=\"#引入\" class=\"headerlink\" title=\"引入\"></a>引入</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;./css/jquery-ui.css&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;./js/jquery.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;./js/jquery-ui.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"示例-2\"><a href=\"#示例-2\" class=\"headerlink\" title=\"示例\"></a>示例</h2><h3 id=\"操作日期选择器\"><a href=\"#操作日期选择器\" class=\"headerlink\" title=\"操作日期选择器\"></a>操作日期选择器</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;date&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">&quot;#date&quot;</span>).datepicker();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"拖动\"><a href=\"#拖动\" class=\"headerlink\" title=\"拖动\"></a>拖动</h3><p>允许鼠标拖动元素 , 在任意的 <code>DOM</code> 元素上启用 <code>draggable</code> 功能 , 通过鼠标点击并在视区中拖动来移动 <code>draggable</code> 对象</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;draggable&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  $(<span class=\"string\">&quot;#draggable&quot;</span>).draggable();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n"},{"title":"jQuery ECharts 的使用","date":"2021-07-06T03:30:16.000Z","top_img":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg","cover":"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/desktop.png","comments":1,"_content":"\n# ECharts 的使用\n\n## ECharts 是什么\n\nECharts 是一个使用 `JavaScript` 实现的开源可视化库 , 涵盖各行业图表 , 满足各种需求\nECharts 遵循 `Apache-2.0` 开源协议 , 免费商用\nECharts 兼容当前绝大部分浏览器 ( IE8/9/10/11 , Chrome , Firefox , Safari 等 ) 及兼容多种设备 , 可随时随地任性展示\n\n> ## [echarts.apache.org/](https://echarts.apache.org/)\n\n## 使用实例\n\n### 引入 `jQuery.js` 和 `echarts.js`\n\n```html\n<script src=\"/js/jquery.min.js\"></script>\n<script src=\"/js/echarts.min.js\"></script>\n```\n\n<script src=\"/js/jquery.min.js\"></script>\n<script src=\"/js/echarts.min.js\"></script>\n\n<img class=\"tom-img\" src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/tom/tom.jpg\"></img>\n\n### 创建一个容器\n\n```html\n<div class=\"pie1\"></div>\n```\n\n### 给定容器具体大小\n\n```css\n.pie1 {\n  margin: 0 auto;\n  width: 800px;\n  height: 600px;\n}\n```\n\n## 完整的数据配置\n\n<style>\n.pie1,\n.pie2,\n.bar,\n.kline,\n.radar,\n.draggable {\n  box-sizing: border-box;\n  margin: 0 auto;\n  width: 100%;\n  height: 600px;\n  overflow: auto;\n}\n@media screen and (max-width: 768px){\n.pie1,\n.pie2,\n.bar,\n.kline,\n.radar,\n.draggable {\n  box-sizing: border-box;\n  margin: 0 auto;\n  width: 100%;\n  height: 500px;\n  overflow: auto;\n  }\n}\n</style>\n\n### 饼状图\n\n<div class=\"pie1\"></div>\n\n{% hideToggle 饼状图配置 %}\n\n```html\n<div class=\"pie1\"></div>\n```\n\n```css\n.pie1 {\n  margin: 0 auto;\n  width: 800px;\n  height: 600px;\n}\n```\n\n```js\n// 饼图\nfunction echartsPie1() {\n  let chart = echarts.init($(\".pie1\")[0]);\n  let option = {\n    title: {\n      text: \"Text\",\n      subtext: \"Subtext\",\n      left: \"center\",\n    },\n    tooltip: {\n      trigger: \"item\",\n    },\n    legend: {\n      orient: \"vertical\",\n      left: \"left\",\n    },\n    series: [\n      {\n        name: \"NAME\",\n        type: \"pie\",\n        radius: \"50%\",\n        data: [\n          { value: 148, name: \"A\" },\n          { value: 735, name: \"B\" },\n          { value: 580, name: \"C\" },\n          { value: 484, name: \"D\" },\n          { value: 300, name: \"E\" },\n        ],\n        emphasis: {\n          itemStyle: {\n            shadowBlur: 10,\n            shadowOffsetX: 0,\n            shadowColor: \"rgba(0, 0, 0, 0.5)\",\n          },\n        },\n      },\n    ],\n  };\n  chart.setOption(option);\n}\nechartsPie1();\n```\n\n<script>\n// 饼图\nfunction echartsPie1() {\n  let chart = echarts.init($(\".pie1\")[0]);\n  let option = {\n    title: {\n      text: \"Text\",\n      subtext: \"Subtext\",\n      left: \"center\",\n    },\n    tooltip: {\n      trigger: \"item\",\n    },\n    legend: {\n      orient: \"vertical\",\n      left: \"left\",\n    },\n    series: [\n      {\n        name: \"NAME\",\n        type: \"pie\",\n        radius: \"50%\",\n        data: [\n          { value: 148, name: \"A\" },\n          { value: 735, name: \"B\" },\n          { value: 580, name: \"C\" },\n          { value: 484, name: \"D\" },\n          { value: 300, name: \"E\" },\n        ],\n        emphasis: {\n          itemStyle: {\n            shadowBlur: 10,\n            shadowOffsetX: 0,\n            shadowColor: \"rgba(0, 0, 0, 0.5)\",\n          },\n        },\n      },\n    ],\n  };\n  chart.setOption(option);\n}\nechartsPie1();\n</script>\n\n{% endhideToggle %}\n\n### 带背景的柱状图\n\n<div class=\"bar\"></div>\n\n{% hideToggle 带背景的柱状图配置 %}\n\n```html\n<div class=\"bar\"></div>\n```\n\n```css\n.bar {\n  margin: 0 auto;\n  width: 800px;\n  height: 600px;\n}\n```\n\n```js\n// 带背景的柱状图\nfunction echartsBar() {\n  let echart = echarts.init($(\".bar\")[0]);\n  let option = {\n    xAxis: {\n      type: \"category\",\n      data: [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"],\n    },\n    yAxis: {\n      type: \"value\",\n    },\n    series: [\n      {\n        name: \"NAME\",\n        data: [120, 200, 150, 80, 70, 110, 130],\n        type: \"bar\",\n        showBackground: true,\n        backgroundStyle: {\n          color: \"rgba(180, 180, 180, 0.2)\",\n        },\n      },\n    ],\n  };\n  echart.setOption(option);\n}\nechartsBar();\n```\n\n<script>\n// 带背景的柱状图\nfunction echartsBar() {\n  let echart = echarts.init($(\".bar\")[0]);\n  let option = {\n    xAxis: {\n      type: \"category\",\n      data: [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"],\n    },\n    yAxis: {\n      type: \"value\",\n    },\n    series: [\n      {\n        name: \"NAME\",\n        data: [120, 200, 150, 80, 70, 110, 130],\n        type: \"bar\",\n        showBackground: true,\n        backgroundStyle: {\n          color: \"rgba(180, 180, 180, 0.2)\",\n        },\n      },\n    ],\n  };\n  echart.setOption(option);\n}\nechartsBar();\n</script>\n\n{% endhideToggle %}\n\n### 另一种饼图\n\n<div class=\"pie2\"></div>\n\n{% hideToggle 另一种饼图配置 %}\n\n```html\n<div class=\"pie2\"></div>\n```\n\n```css\n.pie2 {\n  margin: 0 auto;\n  width: 800px;\n  height: 600px;\n}\n```\n\n```js\nfunction echartsPie2() {\n  let echart = echarts.init($(\".pie2\")[0]);\n  let option = {\n    legend: {\n      top: \"bottom\",\n    },\n    toolbox: {\n      show: true,\n      // feature: {\n      //   mark: { show: true },\n      //   dataView: { show: true, readOnly: false },\n      //   restore: { show: true },\n      //   saveAsImage: { show: true },\n      // },\n    },\n    series: [\n      {\n        name: \"NAME\",\n        type: \"pie\",\n        radius: [50, 250],\n        center: [\"50%\", \"50%\"],\n        roseType: \"area\",\n        itemStyle: {\n          borderRadius: 8,\n        },\n        data: [\n          { value: 40, name: \"rose 1\" },\n          { value: 38, name: \"rose 2\" },\n          { value: 32, name: \"rose 3\" },\n          { value: 30, name: \"rose 4\" },\n          { value: 28, name: \"rose 5\" },\n          { value: 26, name: \"rose 6\" },\n          { value: 22, name: \"rose 7\" },\n          { value: 18, name: \"rose 8\" },\n        ],\n      },\n    ],\n  };\n  echart.setOption(option);\n}\nechartsPie2();\n```\n\n<script>\nfunction echartsPie2() {\n  let echart = echarts.init($(\".pie2\")[0]);\n  let option = {\n    legend: {\n      top: \"bottom\",\n    },\n    toolbox: {\n      show: true,\n      // feature: {\n      //   mark: { show: true },\n      //   dataView: { show: true, readOnly: false },\n      //   restore: { show: true },\n      //   saveAsImage: { show: true },\n      // },\n    },\n    series: [\n      {\n        name: \"NAME\",\n        type: \"pie\",\n        radius: [50, 250],\n        center: [\"50%\", \"50%\"],\n        roseType: \"area\",\n        itemStyle: {\n          borderRadius: 8,\n        },\n        data: [\n          { value: 40, name: \"rose 1\" },\n          { value: 38, name: \"rose 2\" },\n          { value: 32, name: \"rose 3\" },\n          { value: 30, name: \"rose 4\" },\n          { value: 28, name: \"rose 5\" },\n          { value: 26, name: \"rose 6\" },\n          { value: 22, name: \"rose 7\" },\n          { value: 18, name: \"rose 8\" },\n        ],\n      },\n    ],\n  };\n  echart.setOption(option);\n}\nechartsPie2();\n</script>\n\n{% endhideToggle %}\n\n### K 线图\n\n<div class=\"kline\"></div>\n\n{% hideToggle K 线图配置 %}\n\n```html\n<div class=\"kline\"></div>\n```\n\n```css\n.kline {\n  margin: 0 auto;\n  width: 800px;\n  height: 600px;\n}\n```\n\n```js\nfunction echartsKline() {\n  let echart = echarts.init($(\".kline\")[0]);\n  let option = {\n    xAxis: {\n      data: [\"2017-10-24\", \"2017-10-25\", \"2017-10-26\", \"2017-10-27\"],\n    },\n    yAxis: {},\n    series: [\n      {\n        type: \"k\",\n        data: [\n          [20, 34, 10, 38],\n          [40, 35, 30, 50],\n          [31, 38, 33, 44],\n          [38, 15, 5, 42],\n        ],\n      },\n    ],\n  };\n  echart.setOption(option);\n}\nechartsKline();\n```\n\n<script>\nfunction echartsKline() {\n  let echart = echarts.init($(\".kline\")[0]);\n  let option = {\n    xAxis: {\n      data: [\"2017-10-24\", \"2017-10-25\", \"2017-10-26\", \"2017-10-27\"],\n    },\n    yAxis: {},\n    series: [\n      {\n        type: \"k\",\n        data: [\n          [20, 34, 10, 38],\n          [40, 35, 30, 50],\n          [31, 38, 33, 44],\n          [38, 15, 5, 42],\n        ],\n      },\n    ],\n  };\n  echart.setOption(option);\n}\nechartsKline();\n</script>\n\n{% endhideToggle %}\n\n### 雷达图\n\n<div class=\"radar\"></div>\n\n{% hideToggle 雷达图配置 %}\n\n```html\n<div class=\"radar\"></div>\n```\n\n```css\n.radar {\n  margin: 0 auto;\n  width: 800px;\n  height: 600px;\n}\n```\n\n```js\nfunction echartsRadar() {\n  let echart = echarts.init($(\".radar\")[0]);\n  let option = {\n    title: {\n      text: \"基础雷达图\",\n    },\n    legend: {\n      data: [\"预算分配（Allocated Budget）\", \"实际开销（Actual Spending）\"],\n    },\n    radar: {\n      // shape: 'circle',\n      indicator: [\n        { name: \"销售（Sales）\", max: 6500 },\n        { name: \"管理（Administration）\", max: 16000 },\n        { name: \"信息技术（Information Technology）\", max: 30000 },\n        { name: \"客服（Customer Support）\", max: 38000 },\n        { name: \"研发（Development）\", max: 52000 },\n        { name: \"市场（Marketing）\", max: 25000 },\n      ],\n    },\n    series: [\n      {\n        name: \"预算 vs 开销（Budget vs spending）\",\n        type: \"radar\",\n        data: [\n          {\n            value: [4200, 3000, 20000, 35000, 50000, 18000],\n            name: \"预算分配（Allocated Budget）\",\n          },\n          {\n            value: [5000, 14000, 28000, 26000, 42000, 21000],\n            name: \"实际开销（Actual Spending）\",\n          },\n        ],\n      },\n    ],\n  };\n  echart.setOption(option);\n}\nechartsRadar();\n```\n\n<script>\nfunction echartsRadar() {\n  let echart = echarts.init($(\".radar\")[0]);\n  let option = {\n    title: {\n      text: \"基础雷达图\",\n    },\n    legend: {\n      data: [\"预算分配（Allocated Budget）\", \"实际开销（Actual Spending）\"],\n    },\n    radar: {\n      // shape: 'circle',\n      indicator: [\n        { name: \"销售（Sales）\", max: 6500 },\n        { name: \"管理（Administration）\", max: 16000 },\n        { name: \"信息技术（Information Technology）\", max: 30000 },\n        { name: \"客服（Customer Support）\", max: 38000 },\n        { name: \"研发（Development）\", max: 52000 },\n        { name: \"市场（Marketing）\", max: 25000 },\n      ],\n    },\n    series: [\n      {\n        name: \"预算 vs 开销（Budget vs spending）\",\n        type: \"radar\",\n        data: [\n          {\n            value: [4200, 3000, 20000, 35000, 50000, 18000],\n            name: \"预算分配（Allocated Budget）\",\n          },\n          {\n            value: [5000, 14000, 28000, 26000, 42000, 21000],\n            name: \"实际开销（Actual Spending）\",\n          },\n        ],\n      },\n    ],\n  };\n  echart.setOption(option);\n}\nechartsRadar();\n</script>\n\n{% endhideToggle %}\n\n### 可拖拽图\n\n<div class=\"draggable\"></div>\n\n{% hideToggle 可拖拽图配置 %}\n\n```html\n<div class=\"draggable\"></div>\n```\n\n```css\n.draggable {\n  margin: 0 auto;\n  width: 800px;\n  height: 600px;\n}\n```\n\n```js\nfunction echartsDraggable() {\n  let myChart = echarts.init($(\".draggable\")[0]);\n  let symbolSize = 20;\n  let data = [\n    [40, -10],\n    [-30, -5],\n    [-76.5, 20],\n    [-63.5, 40],\n    [-22.1, 50],\n  ];\n\n  let option = {\n    title: {\n      text: \"Try Dragging these Points\",\n      left: \"center\",\n    },\n    tooltip: {\n      triggerOn: \"none\",\n      formatter: function (params) {\n        return (\n          \"X: \" +\n          params.data[0].toFixed(2) +\n          \"<br>Y: \" +\n          params.data[1].toFixed(2)\n        );\n      },\n    },\n    grid: {\n      top: \"8%\",\n      bottom: \"12%\",\n    },\n    xAxis: {\n      min: -100,\n      max: 70,\n      type: \"value\",\n      axisLine: { onZero: false },\n    },\n    yAxis: {\n      min: -30,\n      max: 60,\n      type: \"value\",\n      axisLine: { onZero: false },\n    },\n    dataZoom: [\n      {\n        type: \"slider\",\n        xAxisIndex: 0,\n        filterMode: \"none\",\n      },\n      {\n        type: \"slider\",\n        yAxisIndex: 0,\n        filterMode: \"none\",\n      },\n      {\n        type: \"inside\",\n        xAxisIndex: 0,\n        filterMode: \"none\",\n      },\n      {\n        type: \"inside\",\n        yAxisIndex: 0,\n        filterMode: \"none\",\n      },\n    ],\n    series: [\n      {\n        id: \"a\",\n        type: \"line\",\n        smooth: true,\n        symbolSize: symbolSize,\n        data: data,\n      },\n    ],\n  };\n\n  setTimeout(function () {\n    myChart.setOption({\n      graphic: data.map(function (item, dataIndex) {\n        return {\n          type: \"circle\",\n          position: myChart.convertToPixel(\"grid\", item),\n          shape: {\n            cx: 0,\n            cy: 0,\n            r: symbolSize / 2,\n          },\n          invisible: true,\n          draggable: true,\n          ondrag: function (dx, dy) {\n            onPointDragging(dataIndex, [this.x, this.y]);\n          },\n          onmousemove: function () {\n            showTooltip(dataIndex);\n          },\n          onmouseout: function () {\n            hideTooltip(dataIndex);\n          },\n          z: 100,\n        };\n      }),\n    });\n  }, 0);\n\n  window.addEventListener(\"resize\", updatePosition);\n\n  myChart.on(\"dataZoom\", updatePosition);\n\n  function updatePosition() {\n    myChart.setOption({\n      graphic: data.map(function (item, dataIndex) {\n        return {\n          position: myChart.convertToPixel(\"grid\", item),\n        };\n      }),\n    });\n  }\n\n  function showTooltip(dataIndex) {\n    myChart.dispatchAction({\n      type: \"showTip\",\n      seriesIndex: 0,\n      dataIndex: dataIndex,\n    });\n  }\n\n  function hideTooltip(dataIndex) {\n    myChart.dispatchAction({\n      type: \"hideTip\",\n    });\n  }\n\n  function onPointDragging(dataIndex, pos) {\n    data[dataIndex] = myChart.convertFromPixel(\"grid\", pos);\n\n    // Update data\n    myChart.setOption({\n      series: [\n        {\n          id: \"a\",\n          data: data,\n        },\n      ],\n    });\n  }\n  myChart.setOption(option);\n}\nechartsDraggable();\n```\n\n<script>\nfunction echartsDraggable() {\n  let myChart = echarts.init($(\".draggable\")[0]);\n  let symbolSize = 20;\n  let data = [\n    [40, -10],\n    [-30, -5],\n    [-76.5, 20],\n    [-63.5, 40],\n    [-22.1, 50],\n  ];\n\n  let option = {\n    title: {\n      text: \"Try Dragging these Points\",\n      left: \"center\",\n    },\n    tooltip: {\n      triggerOn: \"none\",\n      formatter: function (params) {\n        return (\n          \"X: \" +\n          params.data[0].toFixed(2) +\n          \"<br>Y: \" +\n          params.data[1].toFixed(2)\n        );\n      },\n    },\n    grid: {\n      top: \"8%\",\n      bottom: \"12%\",\n    },\n    xAxis: {\n      min: -100,\n      max: 70,\n      type: \"value\",\n      axisLine: { onZero: false },\n    },\n    yAxis: {\n      min: -30,\n      max: 60,\n      type: \"value\",\n      axisLine: { onZero: false },\n    },\n    dataZoom: [\n      {\n        type: \"slider\",\n        xAxisIndex: 0,\n        filterMode: \"none\",\n      },\n      {\n        type: \"slider\",\n        yAxisIndex: 0,\n        filterMode: \"none\",\n      },\n      {\n        type: \"inside\",\n        xAxisIndex: 0,\n        filterMode: \"none\",\n      },\n      {\n        type: \"inside\",\n        yAxisIndex: 0,\n        filterMode: \"none\",\n      },\n    ],\n    series: [\n      {\n        id: \"a\",\n        type: \"line\",\n        smooth: true,\n        symbolSize: symbolSize,\n        data: data,\n      },\n    ],\n  };\n\n  setTimeout(function () {\n    myChart.setOption({\n      graphic: data.map(function (item, dataIndex) {\n        return {\n          type: \"circle\",\n          position: myChart.convertToPixel(\"grid\", item),\n          shape: {\n            cx: 0,\n            cy: 0,\n            r: symbolSize / 2,\n          },\n          invisible: true,\n          draggable: true,\n          ondrag: function (dx, dy) {\n            onPointDragging(dataIndex, [this.x, this.y]);\n          },\n          onmousemove: function () {\n            showTooltip(dataIndex);\n          },\n          onmouseout: function () {\n            hideTooltip(dataIndex);\n          },\n          z: 100,\n        };\n      }),\n    });\n  }, 0);\n\n  window.addEventListener(\"resize\", updatePosition);\n\n  myChart.on(\"dataZoom\", updatePosition);\n\n  function updatePosition() {\n    myChart.setOption({\n      graphic: data.map(function (item, dataIndex) {\n        return {\n          position: myChart.convertToPixel(\"grid\", item),\n        };\n      }),\n    });\n  }\n\n  function showTooltip(dataIndex) {\n    myChart.dispatchAction({\n      type: \"showTip\",\n      seriesIndex: 0,\n      dataIndex: dataIndex,\n    });\n  }\n\n  function hideTooltip(dataIndex) {\n    myChart.dispatchAction({\n      type: \"hideTip\",\n    });\n  }\n\n  function onPointDragging(dataIndex, pos) {\n    data[dataIndex] = myChart.convertFromPixel(\"grid\", pos);\n\n    // Update data\n    myChart.setOption({\n      series: [\n        {\n          id: \"a\",\n          data: data,\n        },\n      ],\n    });\n  }\n  myChart.setOption(option);\n}\nechartsDraggable();\n</script>\n\n{% endhideToggle %}\n\n# The_End\n","source":"_posts/js/jquery-echarts.md","raw":"---\ntitle: jQuery ECharts 的使用\ndate: 2021-07-06 11:30:16\ntop_img: https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg\ncover:\ntags:\n  - js\n  - javascript\n  - jQuery\n  - echarts\ncategories:\n  - js\n  - jQuery\ncomments:\n---\n\n# ECharts 的使用\n\n## ECharts 是什么\n\nECharts 是一个使用 `JavaScript` 实现的开源可视化库 , 涵盖各行业图表 , 满足各种需求\nECharts 遵循 `Apache-2.0` 开源协议 , 免费商用\nECharts 兼容当前绝大部分浏览器 ( IE8/9/10/11 , Chrome , Firefox , Safari 等 ) 及兼容多种设备 , 可随时随地任性展示\n\n> ## [echarts.apache.org/](https://echarts.apache.org/)\n\n## 使用实例\n\n### 引入 `jQuery.js` 和 `echarts.js`\n\n```html\n<script src=\"/js/jquery.min.js\"></script>\n<script src=\"/js/echarts.min.js\"></script>\n```\n\n<script src=\"/js/jquery.min.js\"></script>\n<script src=\"/js/echarts.min.js\"></script>\n\n<img class=\"tom-img\" src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/tom/tom.jpg\"></img>\n\n### 创建一个容器\n\n```html\n<div class=\"pie1\"></div>\n```\n\n### 给定容器具体大小\n\n```css\n.pie1 {\n  margin: 0 auto;\n  width: 800px;\n  height: 600px;\n}\n```\n\n## 完整的数据配置\n\n<style>\n.pie1,\n.pie2,\n.bar,\n.kline,\n.radar,\n.draggable {\n  box-sizing: border-box;\n  margin: 0 auto;\n  width: 100%;\n  height: 600px;\n  overflow: auto;\n}\n@media screen and (max-width: 768px){\n.pie1,\n.pie2,\n.bar,\n.kline,\n.radar,\n.draggable {\n  box-sizing: border-box;\n  margin: 0 auto;\n  width: 100%;\n  height: 500px;\n  overflow: auto;\n  }\n}\n</style>\n\n### 饼状图\n\n<div class=\"pie1\"></div>\n\n{% hideToggle 饼状图配置 %}\n\n```html\n<div class=\"pie1\"></div>\n```\n\n```css\n.pie1 {\n  margin: 0 auto;\n  width: 800px;\n  height: 600px;\n}\n```\n\n```js\n// 饼图\nfunction echartsPie1() {\n  let chart = echarts.init($(\".pie1\")[0]);\n  let option = {\n    title: {\n      text: \"Text\",\n      subtext: \"Subtext\",\n      left: \"center\",\n    },\n    tooltip: {\n      trigger: \"item\",\n    },\n    legend: {\n      orient: \"vertical\",\n      left: \"left\",\n    },\n    series: [\n      {\n        name: \"NAME\",\n        type: \"pie\",\n        radius: \"50%\",\n        data: [\n          { value: 148, name: \"A\" },\n          { value: 735, name: \"B\" },\n          { value: 580, name: \"C\" },\n          { value: 484, name: \"D\" },\n          { value: 300, name: \"E\" },\n        ],\n        emphasis: {\n          itemStyle: {\n            shadowBlur: 10,\n            shadowOffsetX: 0,\n            shadowColor: \"rgba(0, 0, 0, 0.5)\",\n          },\n        },\n      },\n    ],\n  };\n  chart.setOption(option);\n}\nechartsPie1();\n```\n\n<script>\n// 饼图\nfunction echartsPie1() {\n  let chart = echarts.init($(\".pie1\")[0]);\n  let option = {\n    title: {\n      text: \"Text\",\n      subtext: \"Subtext\",\n      left: \"center\",\n    },\n    tooltip: {\n      trigger: \"item\",\n    },\n    legend: {\n      orient: \"vertical\",\n      left: \"left\",\n    },\n    series: [\n      {\n        name: \"NAME\",\n        type: \"pie\",\n        radius: \"50%\",\n        data: [\n          { value: 148, name: \"A\" },\n          { value: 735, name: \"B\" },\n          { value: 580, name: \"C\" },\n          { value: 484, name: \"D\" },\n          { value: 300, name: \"E\" },\n        ],\n        emphasis: {\n          itemStyle: {\n            shadowBlur: 10,\n            shadowOffsetX: 0,\n            shadowColor: \"rgba(0, 0, 0, 0.5)\",\n          },\n        },\n      },\n    ],\n  };\n  chart.setOption(option);\n}\nechartsPie1();\n</script>\n\n{% endhideToggle %}\n\n### 带背景的柱状图\n\n<div class=\"bar\"></div>\n\n{% hideToggle 带背景的柱状图配置 %}\n\n```html\n<div class=\"bar\"></div>\n```\n\n```css\n.bar {\n  margin: 0 auto;\n  width: 800px;\n  height: 600px;\n}\n```\n\n```js\n// 带背景的柱状图\nfunction echartsBar() {\n  let echart = echarts.init($(\".bar\")[0]);\n  let option = {\n    xAxis: {\n      type: \"category\",\n      data: [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"],\n    },\n    yAxis: {\n      type: \"value\",\n    },\n    series: [\n      {\n        name: \"NAME\",\n        data: [120, 200, 150, 80, 70, 110, 130],\n        type: \"bar\",\n        showBackground: true,\n        backgroundStyle: {\n          color: \"rgba(180, 180, 180, 0.2)\",\n        },\n      },\n    ],\n  };\n  echart.setOption(option);\n}\nechartsBar();\n```\n\n<script>\n// 带背景的柱状图\nfunction echartsBar() {\n  let echart = echarts.init($(\".bar\")[0]);\n  let option = {\n    xAxis: {\n      type: \"category\",\n      data: [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"],\n    },\n    yAxis: {\n      type: \"value\",\n    },\n    series: [\n      {\n        name: \"NAME\",\n        data: [120, 200, 150, 80, 70, 110, 130],\n        type: \"bar\",\n        showBackground: true,\n        backgroundStyle: {\n          color: \"rgba(180, 180, 180, 0.2)\",\n        },\n      },\n    ],\n  };\n  echart.setOption(option);\n}\nechartsBar();\n</script>\n\n{% endhideToggle %}\n\n### 另一种饼图\n\n<div class=\"pie2\"></div>\n\n{% hideToggle 另一种饼图配置 %}\n\n```html\n<div class=\"pie2\"></div>\n```\n\n```css\n.pie2 {\n  margin: 0 auto;\n  width: 800px;\n  height: 600px;\n}\n```\n\n```js\nfunction echartsPie2() {\n  let echart = echarts.init($(\".pie2\")[0]);\n  let option = {\n    legend: {\n      top: \"bottom\",\n    },\n    toolbox: {\n      show: true,\n      // feature: {\n      //   mark: { show: true },\n      //   dataView: { show: true, readOnly: false },\n      //   restore: { show: true },\n      //   saveAsImage: { show: true },\n      // },\n    },\n    series: [\n      {\n        name: \"NAME\",\n        type: \"pie\",\n        radius: [50, 250],\n        center: [\"50%\", \"50%\"],\n        roseType: \"area\",\n        itemStyle: {\n          borderRadius: 8,\n        },\n        data: [\n          { value: 40, name: \"rose 1\" },\n          { value: 38, name: \"rose 2\" },\n          { value: 32, name: \"rose 3\" },\n          { value: 30, name: \"rose 4\" },\n          { value: 28, name: \"rose 5\" },\n          { value: 26, name: \"rose 6\" },\n          { value: 22, name: \"rose 7\" },\n          { value: 18, name: \"rose 8\" },\n        ],\n      },\n    ],\n  };\n  echart.setOption(option);\n}\nechartsPie2();\n```\n\n<script>\nfunction echartsPie2() {\n  let echart = echarts.init($(\".pie2\")[0]);\n  let option = {\n    legend: {\n      top: \"bottom\",\n    },\n    toolbox: {\n      show: true,\n      // feature: {\n      //   mark: { show: true },\n      //   dataView: { show: true, readOnly: false },\n      //   restore: { show: true },\n      //   saveAsImage: { show: true },\n      // },\n    },\n    series: [\n      {\n        name: \"NAME\",\n        type: \"pie\",\n        radius: [50, 250],\n        center: [\"50%\", \"50%\"],\n        roseType: \"area\",\n        itemStyle: {\n          borderRadius: 8,\n        },\n        data: [\n          { value: 40, name: \"rose 1\" },\n          { value: 38, name: \"rose 2\" },\n          { value: 32, name: \"rose 3\" },\n          { value: 30, name: \"rose 4\" },\n          { value: 28, name: \"rose 5\" },\n          { value: 26, name: \"rose 6\" },\n          { value: 22, name: \"rose 7\" },\n          { value: 18, name: \"rose 8\" },\n        ],\n      },\n    ],\n  };\n  echart.setOption(option);\n}\nechartsPie2();\n</script>\n\n{% endhideToggle %}\n\n### K 线图\n\n<div class=\"kline\"></div>\n\n{% hideToggle K 线图配置 %}\n\n```html\n<div class=\"kline\"></div>\n```\n\n```css\n.kline {\n  margin: 0 auto;\n  width: 800px;\n  height: 600px;\n}\n```\n\n```js\nfunction echartsKline() {\n  let echart = echarts.init($(\".kline\")[0]);\n  let option = {\n    xAxis: {\n      data: [\"2017-10-24\", \"2017-10-25\", \"2017-10-26\", \"2017-10-27\"],\n    },\n    yAxis: {},\n    series: [\n      {\n        type: \"k\",\n        data: [\n          [20, 34, 10, 38],\n          [40, 35, 30, 50],\n          [31, 38, 33, 44],\n          [38, 15, 5, 42],\n        ],\n      },\n    ],\n  };\n  echart.setOption(option);\n}\nechartsKline();\n```\n\n<script>\nfunction echartsKline() {\n  let echart = echarts.init($(\".kline\")[0]);\n  let option = {\n    xAxis: {\n      data: [\"2017-10-24\", \"2017-10-25\", \"2017-10-26\", \"2017-10-27\"],\n    },\n    yAxis: {},\n    series: [\n      {\n        type: \"k\",\n        data: [\n          [20, 34, 10, 38],\n          [40, 35, 30, 50],\n          [31, 38, 33, 44],\n          [38, 15, 5, 42],\n        ],\n      },\n    ],\n  };\n  echart.setOption(option);\n}\nechartsKline();\n</script>\n\n{% endhideToggle %}\n\n### 雷达图\n\n<div class=\"radar\"></div>\n\n{% hideToggle 雷达图配置 %}\n\n```html\n<div class=\"radar\"></div>\n```\n\n```css\n.radar {\n  margin: 0 auto;\n  width: 800px;\n  height: 600px;\n}\n```\n\n```js\nfunction echartsRadar() {\n  let echart = echarts.init($(\".radar\")[0]);\n  let option = {\n    title: {\n      text: \"基础雷达图\",\n    },\n    legend: {\n      data: [\"预算分配（Allocated Budget）\", \"实际开销（Actual Spending）\"],\n    },\n    radar: {\n      // shape: 'circle',\n      indicator: [\n        { name: \"销售（Sales）\", max: 6500 },\n        { name: \"管理（Administration）\", max: 16000 },\n        { name: \"信息技术（Information Technology）\", max: 30000 },\n        { name: \"客服（Customer Support）\", max: 38000 },\n        { name: \"研发（Development）\", max: 52000 },\n        { name: \"市场（Marketing）\", max: 25000 },\n      ],\n    },\n    series: [\n      {\n        name: \"预算 vs 开销（Budget vs spending）\",\n        type: \"radar\",\n        data: [\n          {\n            value: [4200, 3000, 20000, 35000, 50000, 18000],\n            name: \"预算分配（Allocated Budget）\",\n          },\n          {\n            value: [5000, 14000, 28000, 26000, 42000, 21000],\n            name: \"实际开销（Actual Spending）\",\n          },\n        ],\n      },\n    ],\n  };\n  echart.setOption(option);\n}\nechartsRadar();\n```\n\n<script>\nfunction echartsRadar() {\n  let echart = echarts.init($(\".radar\")[0]);\n  let option = {\n    title: {\n      text: \"基础雷达图\",\n    },\n    legend: {\n      data: [\"预算分配（Allocated Budget）\", \"实际开销（Actual Spending）\"],\n    },\n    radar: {\n      // shape: 'circle',\n      indicator: [\n        { name: \"销售（Sales）\", max: 6500 },\n        { name: \"管理（Administration）\", max: 16000 },\n        { name: \"信息技术（Information Technology）\", max: 30000 },\n        { name: \"客服（Customer Support）\", max: 38000 },\n        { name: \"研发（Development）\", max: 52000 },\n        { name: \"市场（Marketing）\", max: 25000 },\n      ],\n    },\n    series: [\n      {\n        name: \"预算 vs 开销（Budget vs spending）\",\n        type: \"radar\",\n        data: [\n          {\n            value: [4200, 3000, 20000, 35000, 50000, 18000],\n            name: \"预算分配（Allocated Budget）\",\n          },\n          {\n            value: [5000, 14000, 28000, 26000, 42000, 21000],\n            name: \"实际开销（Actual Spending）\",\n          },\n        ],\n      },\n    ],\n  };\n  echart.setOption(option);\n}\nechartsRadar();\n</script>\n\n{% endhideToggle %}\n\n### 可拖拽图\n\n<div class=\"draggable\"></div>\n\n{% hideToggle 可拖拽图配置 %}\n\n```html\n<div class=\"draggable\"></div>\n```\n\n```css\n.draggable {\n  margin: 0 auto;\n  width: 800px;\n  height: 600px;\n}\n```\n\n```js\nfunction echartsDraggable() {\n  let myChart = echarts.init($(\".draggable\")[0]);\n  let symbolSize = 20;\n  let data = [\n    [40, -10],\n    [-30, -5],\n    [-76.5, 20],\n    [-63.5, 40],\n    [-22.1, 50],\n  ];\n\n  let option = {\n    title: {\n      text: \"Try Dragging these Points\",\n      left: \"center\",\n    },\n    tooltip: {\n      triggerOn: \"none\",\n      formatter: function (params) {\n        return (\n          \"X: \" +\n          params.data[0].toFixed(2) +\n          \"<br>Y: \" +\n          params.data[1].toFixed(2)\n        );\n      },\n    },\n    grid: {\n      top: \"8%\",\n      bottom: \"12%\",\n    },\n    xAxis: {\n      min: -100,\n      max: 70,\n      type: \"value\",\n      axisLine: { onZero: false },\n    },\n    yAxis: {\n      min: -30,\n      max: 60,\n      type: \"value\",\n      axisLine: { onZero: false },\n    },\n    dataZoom: [\n      {\n        type: \"slider\",\n        xAxisIndex: 0,\n        filterMode: \"none\",\n      },\n      {\n        type: \"slider\",\n        yAxisIndex: 0,\n        filterMode: \"none\",\n      },\n      {\n        type: \"inside\",\n        xAxisIndex: 0,\n        filterMode: \"none\",\n      },\n      {\n        type: \"inside\",\n        yAxisIndex: 0,\n        filterMode: \"none\",\n      },\n    ],\n    series: [\n      {\n        id: \"a\",\n        type: \"line\",\n        smooth: true,\n        symbolSize: symbolSize,\n        data: data,\n      },\n    ],\n  };\n\n  setTimeout(function () {\n    myChart.setOption({\n      graphic: data.map(function (item, dataIndex) {\n        return {\n          type: \"circle\",\n          position: myChart.convertToPixel(\"grid\", item),\n          shape: {\n            cx: 0,\n            cy: 0,\n            r: symbolSize / 2,\n          },\n          invisible: true,\n          draggable: true,\n          ondrag: function (dx, dy) {\n            onPointDragging(dataIndex, [this.x, this.y]);\n          },\n          onmousemove: function () {\n            showTooltip(dataIndex);\n          },\n          onmouseout: function () {\n            hideTooltip(dataIndex);\n          },\n          z: 100,\n        };\n      }),\n    });\n  }, 0);\n\n  window.addEventListener(\"resize\", updatePosition);\n\n  myChart.on(\"dataZoom\", updatePosition);\n\n  function updatePosition() {\n    myChart.setOption({\n      graphic: data.map(function (item, dataIndex) {\n        return {\n          position: myChart.convertToPixel(\"grid\", item),\n        };\n      }),\n    });\n  }\n\n  function showTooltip(dataIndex) {\n    myChart.dispatchAction({\n      type: \"showTip\",\n      seriesIndex: 0,\n      dataIndex: dataIndex,\n    });\n  }\n\n  function hideTooltip(dataIndex) {\n    myChart.dispatchAction({\n      type: \"hideTip\",\n    });\n  }\n\n  function onPointDragging(dataIndex, pos) {\n    data[dataIndex] = myChart.convertFromPixel(\"grid\", pos);\n\n    // Update data\n    myChart.setOption({\n      series: [\n        {\n          id: \"a\",\n          data: data,\n        },\n      ],\n    });\n  }\n  myChart.setOption(option);\n}\nechartsDraggable();\n```\n\n<script>\nfunction echartsDraggable() {\n  let myChart = echarts.init($(\".draggable\")[0]);\n  let symbolSize = 20;\n  let data = [\n    [40, -10],\n    [-30, -5],\n    [-76.5, 20],\n    [-63.5, 40],\n    [-22.1, 50],\n  ];\n\n  let option = {\n    title: {\n      text: \"Try Dragging these Points\",\n      left: \"center\",\n    },\n    tooltip: {\n      triggerOn: \"none\",\n      formatter: function (params) {\n        return (\n          \"X: \" +\n          params.data[0].toFixed(2) +\n          \"<br>Y: \" +\n          params.data[1].toFixed(2)\n        );\n      },\n    },\n    grid: {\n      top: \"8%\",\n      bottom: \"12%\",\n    },\n    xAxis: {\n      min: -100,\n      max: 70,\n      type: \"value\",\n      axisLine: { onZero: false },\n    },\n    yAxis: {\n      min: -30,\n      max: 60,\n      type: \"value\",\n      axisLine: { onZero: false },\n    },\n    dataZoom: [\n      {\n        type: \"slider\",\n        xAxisIndex: 0,\n        filterMode: \"none\",\n      },\n      {\n        type: \"slider\",\n        yAxisIndex: 0,\n        filterMode: \"none\",\n      },\n      {\n        type: \"inside\",\n        xAxisIndex: 0,\n        filterMode: \"none\",\n      },\n      {\n        type: \"inside\",\n        yAxisIndex: 0,\n        filterMode: \"none\",\n      },\n    ],\n    series: [\n      {\n        id: \"a\",\n        type: \"line\",\n        smooth: true,\n        symbolSize: symbolSize,\n        data: data,\n      },\n    ],\n  };\n\n  setTimeout(function () {\n    myChart.setOption({\n      graphic: data.map(function (item, dataIndex) {\n        return {\n          type: \"circle\",\n          position: myChart.convertToPixel(\"grid\", item),\n          shape: {\n            cx: 0,\n            cy: 0,\n            r: symbolSize / 2,\n          },\n          invisible: true,\n          draggable: true,\n          ondrag: function (dx, dy) {\n            onPointDragging(dataIndex, [this.x, this.y]);\n          },\n          onmousemove: function () {\n            showTooltip(dataIndex);\n          },\n          onmouseout: function () {\n            hideTooltip(dataIndex);\n          },\n          z: 100,\n        };\n      }),\n    });\n  }, 0);\n\n  window.addEventListener(\"resize\", updatePosition);\n\n  myChart.on(\"dataZoom\", updatePosition);\n\n  function updatePosition() {\n    myChart.setOption({\n      graphic: data.map(function (item, dataIndex) {\n        return {\n          position: myChart.convertToPixel(\"grid\", item),\n        };\n      }),\n    });\n  }\n\n  function showTooltip(dataIndex) {\n    myChart.dispatchAction({\n      type: \"showTip\",\n      seriesIndex: 0,\n      dataIndex: dataIndex,\n    });\n  }\n\n  function hideTooltip(dataIndex) {\n    myChart.dispatchAction({\n      type: \"hideTip\",\n    });\n  }\n\n  function onPointDragging(dataIndex, pos) {\n    data[dataIndex] = myChart.convertFromPixel(\"grid\", pos);\n\n    // Update data\n    myChart.setOption({\n      series: [\n        {\n          id: \"a\",\n          data: data,\n        },\n      ],\n    });\n  }\n  myChart.setOption(option);\n}\nechartsDraggable();\n</script>\n\n{% endhideToggle %}\n\n# The_End\n","slug":"js/jquery-echarts","published":1,"updated":"2021-07-18T10:49:19.361Z","layout":"post","photos":[],"link":"","_id":"cksvxwnns001ygubq1az34f8q","content":"<h1 id=\"ECharts-的使用\"><a href=\"#ECharts-的使用\" class=\"headerlink\" title=\"ECharts 的使用\"></a>ECharts 的使用</h1><h2 id=\"ECharts-是什么\"><a href=\"#ECharts-是什么\" class=\"headerlink\" title=\"ECharts 是什么\"></a>ECharts 是什么</h2><p>ECharts 是一个使用 <code>JavaScript</code> 实现的开源可视化库 , 涵盖各行业图表 , 满足各种需求<br>ECharts 遵循 <code>Apache-2.0</code> 开源协议 , 免费商用<br>ECharts 兼容当前绝大部分浏览器 ( IE8/9/10/11 , Chrome , Firefox , Safari 等 ) 及兼容多种设备 , 可随时随地任性展示</p>\n<blockquote>\n<h2 id=\"echarts-apache-org\"><a href=\"#echarts-apache-org\" class=\"headerlink\" title=\"echarts.apache.org/\"></a><a href=\"https://echarts.apache.org/\">echarts.apache.org/</a></h2></blockquote>\n<h2 id=\"使用实例\"><a href=\"#使用实例\" class=\"headerlink\" title=\"使用实例\"></a>使用实例</h2><h3 id=\"引入-jQuery-js-和-echarts-js\"><a href=\"#引入-jQuery-js-和-echarts-js\" class=\"headerlink\" title=\"引入 jQuery.js 和 echarts.js\"></a>引入 <code>jQuery.js</code> 和 <code>echarts.js</code></h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;/js/jquery.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;/js/echarts.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<script src=\"/js/jquery.min.js\"></script>\n<script src=\"/js/echarts.min.js\"></script>\n\n<p><img class=\"tom-img\" src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/tom/tom.jpg\"></img></p>\n<h3 id=\"创建一个容器\"><a href=\"#创建一个容器\" class=\"headerlink\" title=\"创建一个容器\"></a>创建一个容器</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;pie1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"给定容器具体大小\"><a href=\"#给定容器具体大小\" class=\"headerlink\" title=\"给定容器具体大小\"></a>给定容器具体大小</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.pie1</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">800px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">600px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"完整的数据配置\"><a href=\"#完整的数据配置\" class=\"headerlink\" title=\"完整的数据配置\"></a>完整的数据配置</h2><style>\n.pie1,\n.pie2,\n.bar,\n.kline,\n.radar,\n.draggable {\n  box-sizing: border-box;\n  margin: 0 auto;\n  width: 100%;\n  height: 600px;\n  overflow: auto;\n}\n@media screen and (max-width: 768px){\n.pie1,\n.pie2,\n.bar,\n.kline,\n.radar,\n.draggable {\n  box-sizing: border-box;\n  margin: 0 auto;\n  width: 100%;\n  height: 500px;\n  overflow: auto;\n  }\n}\n</style>\n\n<h3 id=\"饼状图\"><a href=\"#饼状图\" class=\"headerlink\" title=\"饼状图\"></a>饼状图</h3><div class=\"pie1\"></div>\n\n<div class=\"hide-toggle\" ><div class=\"hide-button toggle-title\" style=\"\"><i class=\"fas fa-caret-right fa-fw\"></i><span>饼状图配置</span></div>\n    <div class=\"hide-content\"><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;pie1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.pie1</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">800px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">600px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 饼图</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">echartsPie1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> chart = echarts.init($(<span class=\"string\">&quot;.pie1&quot;</span>)[<span class=\"number\">0</span>]);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> option = &#123;</span><br><span class=\"line\">    <span class=\"attr\">title</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">text</span>: <span class=\"string\">&quot;Text&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">subtext</span>: <span class=\"string\">&quot;Subtext&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">left</span>: <span class=\"string\">&quot;center&quot;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">tooltip</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">trigger</span>: <span class=\"string\">&quot;item&quot;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">legend</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">orient</span>: <span class=\"string\">&quot;vertical&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">left</span>: <span class=\"string\">&quot;left&quot;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">series</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">&quot;NAME&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">&quot;pie&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">radius</span>: <span class=\"string\">&quot;50%&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">data</span>: [</span><br><span class=\"line\">          &#123; <span class=\"attr\">value</span>: <span class=\"number\">148</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;A&quot;</span> &#125;,</span><br><span class=\"line\">          &#123; <span class=\"attr\">value</span>: <span class=\"number\">735</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;B&quot;</span> &#125;,</span><br><span class=\"line\">          &#123; <span class=\"attr\">value</span>: <span class=\"number\">580</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;C&quot;</span> &#125;,</span><br><span class=\"line\">          &#123; <span class=\"attr\">value</span>: <span class=\"number\">484</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;D&quot;</span> &#125;,</span><br><span class=\"line\">          &#123; <span class=\"attr\">value</span>: <span class=\"number\">300</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;E&quot;</span> &#125;,</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        <span class=\"attr\">emphasis</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">itemStyle</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">shadowBlur</span>: <span class=\"number\">10</span>,</span><br><span class=\"line\">            <span class=\"attr\">shadowOffsetX</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">            <span class=\"attr\">shadowColor</span>: <span class=\"string\">&quot;rgba(0, 0, 0, 0.5)&quot;</span>,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  chart.setOption(option);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">echartsPie1();</span><br></pre></td></tr></table></figure>\n\n<script>\n// 饼图\nfunction echartsPie1() {\n  let chart = echarts.init($(\".pie1\")[0]);\n  let option = {\n    title: {\n      text: \"Text\",\n      subtext: \"Subtext\",\n      left: \"center\",\n    },\n    tooltip: {\n      trigger: \"item\",\n    },\n    legend: {\n      orient: \"vertical\",\n      left: \"left\",\n    },\n    series: [\n      {\n        name: \"NAME\",\n        type: \"pie\",\n        radius: \"50%\",\n        data: [\n          { value: 148, name: \"A\" },\n          { value: 735, name: \"B\" },\n          { value: 580, name: \"C\" },\n          { value: 484, name: \"D\" },\n          { value: 300, name: \"E\" },\n        ],\n        emphasis: {\n          itemStyle: {\n            shadowBlur: 10,\n            shadowOffsetX: 0,\n            shadowColor: \"rgba(0, 0, 0, 0.5)\",\n          },\n        },\n      },\n    ],\n  };\n  chart.setOption(option);\n}\nechartsPie1();\n</script>\n</div></div>\n\n<h3 id=\"带背景的柱状图\"><a href=\"#带背景的柱状图\" class=\"headerlink\" title=\"带背景的柱状图\"></a>带背景的柱状图</h3><div class=\"bar\"></div>\n\n<div class=\"hide-toggle\" ><div class=\"hide-button toggle-title\" style=\"\"><i class=\"fas fa-caret-right fa-fw\"></i><span>带背景的柱状图配置</span></div>\n    <div class=\"hide-content\"><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;bar&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.bar</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">800px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">600px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 带背景的柱状图</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">echartsBar</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> echart = echarts.init($(<span class=\"string\">&quot;.bar&quot;</span>)[<span class=\"number\">0</span>]);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> option = &#123;</span><br><span class=\"line\">    <span class=\"attr\">xAxis</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">type</span>: <span class=\"string\">&quot;category&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">data</span>: [<span class=\"string\">&quot;Mon&quot;</span>, <span class=\"string\">&quot;Tue&quot;</span>, <span class=\"string\">&quot;Wed&quot;</span>, <span class=\"string\">&quot;Thu&quot;</span>, <span class=\"string\">&quot;Fri&quot;</span>, <span class=\"string\">&quot;Sat&quot;</span>, <span class=\"string\">&quot;Sun&quot;</span>],</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">yAxis</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">type</span>: <span class=\"string\">&quot;value&quot;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">series</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">&quot;NAME&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">data</span>: [<span class=\"number\">120</span>, <span class=\"number\">200</span>, <span class=\"number\">150</span>, <span class=\"number\">80</span>, <span class=\"number\">70</span>, <span class=\"number\">110</span>, <span class=\"number\">130</span>],</span><br><span class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">&quot;bar&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">showBackground</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"attr\">backgroundStyle</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">color</span>: <span class=\"string\">&quot;rgba(180, 180, 180, 0.2)&quot;</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  echart.setOption(option);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">echartsBar();</span><br></pre></td></tr></table></figure>\n\n<script>\n// 带背景的柱状图\nfunction echartsBar() {\n  let echart = echarts.init($(\".bar\")[0]);\n  let option = {\n    xAxis: {\n      type: \"category\",\n      data: [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"],\n    },\n    yAxis: {\n      type: \"value\",\n    },\n    series: [\n      {\n        name: \"NAME\",\n        data: [120, 200, 150, 80, 70, 110, 130],\n        type: \"bar\",\n        showBackground: true,\n        backgroundStyle: {\n          color: \"rgba(180, 180, 180, 0.2)\",\n        },\n      },\n    ],\n  };\n  echart.setOption(option);\n}\nechartsBar();\n</script>\n</div></div>\n\n<h3 id=\"另一种饼图\"><a href=\"#另一种饼图\" class=\"headerlink\" title=\"另一种饼图\"></a>另一种饼图</h3><div class=\"pie2\"></div>\n\n<div class=\"hide-toggle\" ><div class=\"hide-button toggle-title\" style=\"\"><i class=\"fas fa-caret-right fa-fw\"></i><span>另一种饼图配置</span></div>\n    <div class=\"hide-content\"><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;pie2&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.pie2</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">800px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">600px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">echartsPie2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> echart = echarts.init($(<span class=\"string\">&quot;.pie2&quot;</span>)[<span class=\"number\">0</span>]);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> option = &#123;</span><br><span class=\"line\">    <span class=\"attr\">legend</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">top</span>: <span class=\"string\">&quot;bottom&quot;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">toolbox</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">show</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"comment\">// feature: &#123;</span></span><br><span class=\"line\">      <span class=\"comment\">//   mark: &#123; show: true &#125;,</span></span><br><span class=\"line\">      <span class=\"comment\">//   dataView: &#123; show: true, readOnly: false &#125;,</span></span><br><span class=\"line\">      <span class=\"comment\">//   restore: &#123; show: true &#125;,</span></span><br><span class=\"line\">      <span class=\"comment\">//   saveAsImage: &#123; show: true &#125;,</span></span><br><span class=\"line\">      <span class=\"comment\">// &#125;,</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">series</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">&quot;NAME&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">&quot;pie&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">radius</span>: [<span class=\"number\">50</span>, <span class=\"number\">250</span>],</span><br><span class=\"line\">        <span class=\"attr\">center</span>: [<span class=\"string\">&quot;50%&quot;</span>, <span class=\"string\">&quot;50%&quot;</span>],</span><br><span class=\"line\">        <span class=\"attr\">roseType</span>: <span class=\"string\">&quot;area&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">itemStyle</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">borderRadius</span>: <span class=\"number\">8</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">data</span>: [</span><br><span class=\"line\">          &#123; <span class=\"attr\">value</span>: <span class=\"number\">40</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;rose 1&quot;</span> &#125;,</span><br><span class=\"line\">          &#123; <span class=\"attr\">value</span>: <span class=\"number\">38</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;rose 2&quot;</span> &#125;,</span><br><span class=\"line\">          &#123; <span class=\"attr\">value</span>: <span class=\"number\">32</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;rose 3&quot;</span> &#125;,</span><br><span class=\"line\">          &#123; <span class=\"attr\">value</span>: <span class=\"number\">30</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;rose 4&quot;</span> &#125;,</span><br><span class=\"line\">          &#123; <span class=\"attr\">value</span>: <span class=\"number\">28</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;rose 5&quot;</span> &#125;,</span><br><span class=\"line\">          &#123; <span class=\"attr\">value</span>: <span class=\"number\">26</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;rose 6&quot;</span> &#125;,</span><br><span class=\"line\">          &#123; <span class=\"attr\">value</span>: <span class=\"number\">22</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;rose 7&quot;</span> &#125;,</span><br><span class=\"line\">          &#123; <span class=\"attr\">value</span>: <span class=\"number\">18</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;rose 8&quot;</span> &#125;,</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  echart.setOption(option);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">echartsPie2();</span><br></pre></td></tr></table></figure>\n\n<script>\nfunction echartsPie2() {\n  let echart = echarts.init($(\".pie2\")[0]);\n  let option = {\n    legend: {\n      top: \"bottom\",\n    },\n    toolbox: {\n      show: true,\n      // feature: {\n      //   mark: { show: true },\n      //   dataView: { show: true, readOnly: false },\n      //   restore: { show: true },\n      //   saveAsImage: { show: true },\n      // },\n    },\n    series: [\n      {\n        name: \"NAME\",\n        type: \"pie\",\n        radius: [50, 250],\n        center: [\"50%\", \"50%\"],\n        roseType: \"area\",\n        itemStyle: {\n          borderRadius: 8,\n        },\n        data: [\n          { value: 40, name: \"rose 1\" },\n          { value: 38, name: \"rose 2\" },\n          { value: 32, name: \"rose 3\" },\n          { value: 30, name: \"rose 4\" },\n          { value: 28, name: \"rose 5\" },\n          { value: 26, name: \"rose 6\" },\n          { value: 22, name: \"rose 7\" },\n          { value: 18, name: \"rose 8\" },\n        ],\n      },\n    ],\n  };\n  echart.setOption(option);\n}\nechartsPie2();\n</script>\n</div></div>\n\n<h3 id=\"K-线图\"><a href=\"#K-线图\" class=\"headerlink\" title=\"K 线图\"></a>K 线图</h3><div class=\"kline\"></div>\n\n<div class=\"hide-toggle\" ><div class=\"hide-button toggle-title\" style=\"\"><i class=\"fas fa-caret-right fa-fw\"></i><span>K 线图配置</span></div>\n    <div class=\"hide-content\"><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;kline&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.kline</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">800px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">600px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">echartsKline</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> echart = echarts.init($(<span class=\"string\">&quot;.kline&quot;</span>)[<span class=\"number\">0</span>]);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> option = &#123;</span><br><span class=\"line\">    <span class=\"attr\">xAxis</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">data</span>: [<span class=\"string\">&quot;2017-10-24&quot;</span>, <span class=\"string\">&quot;2017-10-25&quot;</span>, <span class=\"string\">&quot;2017-10-26&quot;</span>, <span class=\"string\">&quot;2017-10-27&quot;</span>],</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">yAxis</span>: &#123;&#125;,</span><br><span class=\"line\">    <span class=\"attr\">series</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">&quot;k&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">data</span>: [</span><br><span class=\"line\">          [<span class=\"number\">20</span>, <span class=\"number\">34</span>, <span class=\"number\">10</span>, <span class=\"number\">38</span>],</span><br><span class=\"line\">          [<span class=\"number\">40</span>, <span class=\"number\">35</span>, <span class=\"number\">30</span>, <span class=\"number\">50</span>],</span><br><span class=\"line\">          [<span class=\"number\">31</span>, <span class=\"number\">38</span>, <span class=\"number\">33</span>, <span class=\"number\">44</span>],</span><br><span class=\"line\">          [<span class=\"number\">38</span>, <span class=\"number\">15</span>, <span class=\"number\">5</span>, <span class=\"number\">42</span>],</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  echart.setOption(option);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">echartsKline();</span><br></pre></td></tr></table></figure>\n\n<script>\nfunction echartsKline() {\n  let echart = echarts.init($(\".kline\")[0]);\n  let option = {\n    xAxis: {\n      data: [\"2017-10-24\", \"2017-10-25\", \"2017-10-26\", \"2017-10-27\"],\n    },\n    yAxis: {},\n    series: [\n      {\n        type: \"k\",\n        data: [\n          [20, 34, 10, 38],\n          [40, 35, 30, 50],\n          [31, 38, 33, 44],\n          [38, 15, 5, 42],\n        ],\n      },\n    ],\n  };\n  echart.setOption(option);\n}\nechartsKline();\n</script>\n</div></div>\n\n<h3 id=\"雷达图\"><a href=\"#雷达图\" class=\"headerlink\" title=\"雷达图\"></a>雷达图</h3><div class=\"radar\"></div>\n\n<div class=\"hide-toggle\" ><div class=\"hide-button toggle-title\" style=\"\"><i class=\"fas fa-caret-right fa-fw\"></i><span>雷达图配置</span></div>\n    <div class=\"hide-content\"><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;radar&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.radar</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">800px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">600px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">echartsRadar</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> echart = echarts.init($(<span class=\"string\">&quot;.radar&quot;</span>)[<span class=\"number\">0</span>]);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> option = &#123;</span><br><span class=\"line\">    <span class=\"attr\">title</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">text</span>: <span class=\"string\">&quot;基础雷达图&quot;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">legend</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">data</span>: [<span class=\"string\">&quot;预算分配（Allocated Budget）&quot;</span>, <span class=\"string\">&quot;实际开销（Actual Spending）&quot;</span>],</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">radar</span>: &#123;</span><br><span class=\"line\">      <span class=\"comment\">// shape: &#x27;circle&#x27;,</span></span><br><span class=\"line\">      <span class=\"attr\">indicator</span>: [</span><br><span class=\"line\">        &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;销售（Sales）&quot;</span>, <span class=\"attr\">max</span>: <span class=\"number\">6500</span> &#125;,</span><br><span class=\"line\">        &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;管理（Administration）&quot;</span>, <span class=\"attr\">max</span>: <span class=\"number\">16000</span> &#125;,</span><br><span class=\"line\">        &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;信息技术（Information Technology）&quot;</span>, <span class=\"attr\">max</span>: <span class=\"number\">30000</span> &#125;,</span><br><span class=\"line\">        &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;客服（Customer Support）&quot;</span>, <span class=\"attr\">max</span>: <span class=\"number\">38000</span> &#125;,</span><br><span class=\"line\">        &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;研发（Development）&quot;</span>, <span class=\"attr\">max</span>: <span class=\"number\">52000</span> &#125;,</span><br><span class=\"line\">        &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;市场（Marketing）&quot;</span>, <span class=\"attr\">max</span>: <span class=\"number\">25000</span> &#125;,</span><br><span class=\"line\">      ],</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">series</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">&quot;预算 vs 开销（Budget vs spending）&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">&quot;radar&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">data</span>: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            <span class=\"attr\">value</span>: [<span class=\"number\">4200</span>, <span class=\"number\">3000</span>, <span class=\"number\">20000</span>, <span class=\"number\">35000</span>, <span class=\"number\">50000</span>, <span class=\"number\">18000</span>],</span><br><span class=\"line\">            <span class=\"attr\">name</span>: <span class=\"string\">&quot;预算分配（Allocated Budget）&quot;</span>,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            <span class=\"attr\">value</span>: [<span class=\"number\">5000</span>, <span class=\"number\">14000</span>, <span class=\"number\">28000</span>, <span class=\"number\">26000</span>, <span class=\"number\">42000</span>, <span class=\"number\">21000</span>],</span><br><span class=\"line\">            <span class=\"attr\">name</span>: <span class=\"string\">&quot;实际开销（Actual Spending）&quot;</span>,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  echart.setOption(option);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">echartsRadar();</span><br></pre></td></tr></table></figure>\n\n<script>\nfunction echartsRadar() {\n  let echart = echarts.init($(\".radar\")[0]);\n  let option = {\n    title: {\n      text: \"基础雷达图\",\n    },\n    legend: {\n      data: [\"预算分配（Allocated Budget）\", \"实际开销（Actual Spending）\"],\n    },\n    radar: {\n      // shape: 'circle',\n      indicator: [\n        { name: \"销售（Sales）\", max: 6500 },\n        { name: \"管理（Administration）\", max: 16000 },\n        { name: \"信息技术（Information Technology）\", max: 30000 },\n        { name: \"客服（Customer Support）\", max: 38000 },\n        { name: \"研发（Development）\", max: 52000 },\n        { name: \"市场（Marketing）\", max: 25000 },\n      ],\n    },\n    series: [\n      {\n        name: \"预算 vs 开销（Budget vs spending）\",\n        type: \"radar\",\n        data: [\n          {\n            value: [4200, 3000, 20000, 35000, 50000, 18000],\n            name: \"预算分配（Allocated Budget）\",\n          },\n          {\n            value: [5000, 14000, 28000, 26000, 42000, 21000],\n            name: \"实际开销（Actual Spending）\",\n          },\n        ],\n      },\n    ],\n  };\n  echart.setOption(option);\n}\nechartsRadar();\n</script>\n</div></div>\n\n<h3 id=\"可拖拽图\"><a href=\"#可拖拽图\" class=\"headerlink\" title=\"可拖拽图\"></a>可拖拽图</h3><div class=\"draggable\"></div>\n\n<div class=\"hide-toggle\" ><div class=\"hide-button toggle-title\" style=\"\"><i class=\"fas fa-caret-right fa-fw\"></i><span>可拖拽图配置</span></div>\n    <div class=\"hide-content\"><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;draggable&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.draggable</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">800px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">600px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">echartsDraggable</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> myChart = echarts.init($(<span class=\"string\">&quot;.draggable&quot;</span>)[<span class=\"number\">0</span>]);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> symbolSize = <span class=\"number\">20</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> data = [</span><br><span class=\"line\">    [<span class=\"number\">40</span>, -<span class=\"number\">10</span>],</span><br><span class=\"line\">    [-<span class=\"number\">30</span>, -<span class=\"number\">5</span>],</span><br><span class=\"line\">    [-<span class=\"number\">76.5</span>, <span class=\"number\">20</span>],</span><br><span class=\"line\">    [-<span class=\"number\">63.5</span>, <span class=\"number\">40</span>],</span><br><span class=\"line\">    [-<span class=\"number\">22.1</span>, <span class=\"number\">50</span>],</span><br><span class=\"line\">  ];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> option = &#123;</span><br><span class=\"line\">    <span class=\"attr\">title</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">text</span>: <span class=\"string\">&quot;Try Dragging these Points&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">left</span>: <span class=\"string\">&quot;center&quot;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">tooltip</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">triggerOn</span>: <span class=\"string\">&quot;none&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">formatter</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">params</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">          <span class=\"string\">&quot;X: &quot;</span> +</span><br><span class=\"line\">          params.data[<span class=\"number\">0</span>].toFixed(<span class=\"number\">2</span>) +</span><br><span class=\"line\">          <span class=\"string\">&quot;&lt;br&gt;Y: &quot;</span> +</span><br><span class=\"line\">          params.data[<span class=\"number\">1</span>].toFixed(<span class=\"number\">2</span>)</span><br><span class=\"line\">        );</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">grid</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">top</span>: <span class=\"string\">&quot;8%&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">bottom</span>: <span class=\"string\">&quot;12%&quot;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">xAxis</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">min</span>: -<span class=\"number\">100</span>,</span><br><span class=\"line\">      <span class=\"attr\">max</span>: <span class=\"number\">70</span>,</span><br><span class=\"line\">      <span class=\"attr\">type</span>: <span class=\"string\">&quot;value&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">axisLine</span>: &#123; <span class=\"attr\">onZero</span>: <span class=\"literal\">false</span> &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">yAxis</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">min</span>: -<span class=\"number\">30</span>,</span><br><span class=\"line\">      <span class=\"attr\">max</span>: <span class=\"number\">60</span>,</span><br><span class=\"line\">      <span class=\"attr\">type</span>: <span class=\"string\">&quot;value&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">axisLine</span>: &#123; <span class=\"attr\">onZero</span>: <span class=\"literal\">false</span> &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">dataZoom</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">&quot;slider&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">xAxisIndex</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"attr\">filterMode</span>: <span class=\"string\">&quot;none&quot;</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">&quot;slider&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">yAxisIndex</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"attr\">filterMode</span>: <span class=\"string\">&quot;none&quot;</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">&quot;inside&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">xAxisIndex</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"attr\">filterMode</span>: <span class=\"string\">&quot;none&quot;</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">&quot;inside&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">yAxisIndex</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"attr\">filterMode</span>: <span class=\"string\">&quot;none&quot;</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"attr\">series</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">id</span>: <span class=\"string\">&quot;a&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">&quot;line&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">smooth</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"attr\">symbolSize</span>: symbolSize,</span><br><span class=\"line\">        <span class=\"attr\">data</span>: data,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    myChart.setOption(&#123;</span><br><span class=\"line\">      <span class=\"attr\">graphic</span>: data.map(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">item, dataIndex</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">          <span class=\"attr\">type</span>: <span class=\"string\">&quot;circle&quot;</span>,</span><br><span class=\"line\">          <span class=\"attr\">position</span>: myChart.convertToPixel(<span class=\"string\">&quot;grid&quot;</span>, item),</span><br><span class=\"line\">          <span class=\"attr\">shape</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">cx</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">            <span class=\"attr\">cy</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">            <span class=\"attr\">r</span>: symbolSize / <span class=\"number\">2</span>,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          <span class=\"attr\">invisible</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          <span class=\"attr\">draggable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          <span class=\"attr\">ondrag</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">dx, dy</span>) </span>&#123;</span><br><span class=\"line\">            onPointDragging(dataIndex, [<span class=\"built_in\">this</span>.x, <span class=\"built_in\">this</span>.y]);</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          <span class=\"attr\">onmousemove</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            showTooltip(dataIndex);</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          <span class=\"attr\">onmouseout</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            hideTooltip(dataIndex);</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          <span class=\"attr\">z</span>: <span class=\"number\">100</span>,</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">      &#125;),</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">&quot;resize&quot;</span>, updatePosition);</span><br><span class=\"line\"></span><br><span class=\"line\">  myChart.on(<span class=\"string\">&quot;dataZoom&quot;</span>, updatePosition);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">updatePosition</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    myChart.setOption(&#123;</span><br><span class=\"line\">      <span class=\"attr\">graphic</span>: data.map(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">item, dataIndex</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">          <span class=\"attr\">position</span>: myChart.convertToPixel(<span class=\"string\">&quot;grid&quot;</span>, item),</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">      &#125;),</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showTooltip</span>(<span class=\"params\">dataIndex</span>) </span>&#123;</span><br><span class=\"line\">    myChart.dispatchAction(&#123;</span><br><span class=\"line\">      <span class=\"attr\">type</span>: <span class=\"string\">&quot;showTip&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">seriesIndex</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">      <span class=\"attr\">dataIndex</span>: dataIndex,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hideTooltip</span>(<span class=\"params\">dataIndex</span>) </span>&#123;</span><br><span class=\"line\">    myChart.dispatchAction(&#123;</span><br><span class=\"line\">      <span class=\"attr\">type</span>: <span class=\"string\">&quot;hideTip&quot;</span>,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onPointDragging</span>(<span class=\"params\">dataIndex, pos</span>) </span>&#123;</span><br><span class=\"line\">    data[dataIndex] = myChart.convertFromPixel(<span class=\"string\">&quot;grid&quot;</span>, pos);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Update data</span></span><br><span class=\"line\">    myChart.setOption(&#123;</span><br><span class=\"line\">      <span class=\"attr\">series</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"attr\">id</span>: <span class=\"string\">&quot;a&quot;</span>,</span><br><span class=\"line\">          <span class=\"attr\">data</span>: data,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      ],</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  myChart.setOption(option);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">echartsDraggable();</span><br></pre></td></tr></table></figure>\n\n<script>\nfunction echartsDraggable() {\n  let myChart = echarts.init($(\".draggable\")[0]);\n  let symbolSize = 20;\n  let data = [\n    [40, -10],\n    [-30, -5],\n    [-76.5, 20],\n    [-63.5, 40],\n    [-22.1, 50],\n  ];\n\n  let option = {\n    title: {\n      text: \"Try Dragging these Points\",\n      left: \"center\",\n    },\n    tooltip: {\n      triggerOn: \"none\",\n      formatter: function (params) {\n        return (\n          \"X: \" +\n          params.data[0].toFixed(2) +\n          \"<br>Y: \" +\n          params.data[1].toFixed(2)\n        );\n      },\n    },\n    grid: {\n      top: \"8%\",\n      bottom: \"12%\",\n    },\n    xAxis: {\n      min: -100,\n      max: 70,\n      type: \"value\",\n      axisLine: { onZero: false },\n    },\n    yAxis: {\n      min: -30,\n      max: 60,\n      type: \"value\",\n      axisLine: { onZero: false },\n    },\n    dataZoom: [\n      {\n        type: \"slider\",\n        xAxisIndex: 0,\n        filterMode: \"none\",\n      },\n      {\n        type: \"slider\",\n        yAxisIndex: 0,\n        filterMode: \"none\",\n      },\n      {\n        type: \"inside\",\n        xAxisIndex: 0,\n        filterMode: \"none\",\n      },\n      {\n        type: \"inside\",\n        yAxisIndex: 0,\n        filterMode: \"none\",\n      },\n    ],\n    series: [\n      {\n        id: \"a\",\n        type: \"line\",\n        smooth: true,\n        symbolSize: symbolSize,\n        data: data,\n      },\n    ],\n  };\n\n  setTimeout(function () {\n    myChart.setOption({\n      graphic: data.map(function (item, dataIndex) {\n        return {\n          type: \"circle\",\n          position: myChart.convertToPixel(\"grid\", item),\n          shape: {\n            cx: 0,\n            cy: 0,\n            r: symbolSize / 2,\n          },\n          invisible: true,\n          draggable: true,\n          ondrag: function (dx, dy) {\n            onPointDragging(dataIndex, [this.x, this.y]);\n          },\n          onmousemove: function () {\n            showTooltip(dataIndex);\n          },\n          onmouseout: function () {\n            hideTooltip(dataIndex);\n          },\n          z: 100,\n        };\n      }),\n    });\n  }, 0);\n\n  window.addEventListener(\"resize\", updatePosition);\n\n  myChart.on(\"dataZoom\", updatePosition);\n\n  function updatePosition() {\n    myChart.setOption({\n      graphic: data.map(function (item, dataIndex) {\n        return {\n          position: myChart.convertToPixel(\"grid\", item),\n        };\n      }),\n    });\n  }\n\n  function showTooltip(dataIndex) {\n    myChart.dispatchAction({\n      type: \"showTip\",\n      seriesIndex: 0,\n      dataIndex: dataIndex,\n    });\n  }\n\n  function hideTooltip(dataIndex) {\n    myChart.dispatchAction({\n      type: \"hideTip\",\n    });\n  }\n\n  function onPointDragging(dataIndex, pos) {\n    data[dataIndex] = myChart.convertFromPixel(\"grid\", pos);\n\n    // Update data\n    myChart.setOption({\n      series: [\n        {\n          id: \"a\",\n          data: data,\n        },\n      ],\n    });\n  }\n  myChart.setOption(option);\n}\nechartsDraggable();\n</script>\n</div></div>\n\n<h1 id=\"The-End\"><a href=\"#The-End\" class=\"headerlink\" title=\"The_End\"></a>The_End</h1>","site":{"data":{"link":{"class1":{"class_name":"舍友","link_list":{"1":{"name":"codeAntg","link":"https://blog.csdn.net/weixin_44745147","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/fjh.jpg","descr":"那家刀削面不错","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class2":{"class_name":"致谢","link_list":{"1":{"name":"JerrC","link":"https://immyw.com","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/immyw.png","descr":"今日事,今日毕","width":"1px","style":"solid","color":"#60d0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/hexo.svg","descr":"A fast, simple & powerful blog framework","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class3":{"class_name":"友人","link_list":{"1":{"name":"Chester","link":"http://chesterlds.cn","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/chester.jpg","descr":null,"width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Wangs","link":"https://wangsss.cn/","avatar":"https://wangsss.cn/img/avatar.png","descr":"不疯魔，不成活 ~","width":"1px","style":"solid","color":"#9d9d9d","custom":"link_custom1","time":"4s","namecolor":"0094ff","descolor":"#ff9191"}}}}}},"excerpt":"","more":"<h1 id=\"ECharts-的使用\"><a href=\"#ECharts-的使用\" class=\"headerlink\" title=\"ECharts 的使用\"></a>ECharts 的使用</h1><h2 id=\"ECharts-是什么\"><a href=\"#ECharts-是什么\" class=\"headerlink\" title=\"ECharts 是什么\"></a>ECharts 是什么</h2><p>ECharts 是一个使用 <code>JavaScript</code> 实现的开源可视化库 , 涵盖各行业图表 , 满足各种需求<br>ECharts 遵循 <code>Apache-2.0</code> 开源协议 , 免费商用<br>ECharts 兼容当前绝大部分浏览器 ( IE8/9/10/11 , Chrome , Firefox , Safari 等 ) 及兼容多种设备 , 可随时随地任性展示</p>\n<blockquote>\n<h2 id=\"echarts-apache-org\"><a href=\"#echarts-apache-org\" class=\"headerlink\" title=\"echarts.apache.org/\"></a><a href=\"https://echarts.apache.org/\">echarts.apache.org/</a></h2></blockquote>\n<h2 id=\"使用实例\"><a href=\"#使用实例\" class=\"headerlink\" title=\"使用实例\"></a>使用实例</h2><h3 id=\"引入-jQuery-js-和-echarts-js\"><a href=\"#引入-jQuery-js-和-echarts-js\" class=\"headerlink\" title=\"引入 jQuery.js 和 echarts.js\"></a>引入 <code>jQuery.js</code> 和 <code>echarts.js</code></h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;/js/jquery.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;/js/echarts.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<script src=\"/js/jquery.min.js\"></script>\n<script src=\"/js/echarts.min.js\"></script>\n\n<p><img class=\"tom-img\" src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/tom/tom.jpg\"></img></p>\n<h3 id=\"创建一个容器\"><a href=\"#创建一个容器\" class=\"headerlink\" title=\"创建一个容器\"></a>创建一个容器</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;pie1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"给定容器具体大小\"><a href=\"#给定容器具体大小\" class=\"headerlink\" title=\"给定容器具体大小\"></a>给定容器具体大小</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.pie1</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">800px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">600px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"完整的数据配置\"><a href=\"#完整的数据配置\" class=\"headerlink\" title=\"完整的数据配置\"></a>完整的数据配置</h2><style>\n.pie1,\n.pie2,\n.bar,\n.kline,\n.radar,\n.draggable {\n  box-sizing: border-box;\n  margin: 0 auto;\n  width: 100%;\n  height: 600px;\n  overflow: auto;\n}\n@media screen and (max-width: 768px){\n.pie1,\n.pie2,\n.bar,\n.kline,\n.radar,\n.draggable {\n  box-sizing: border-box;\n  margin: 0 auto;\n  width: 100%;\n  height: 500px;\n  overflow: auto;\n  }\n}\n</style>\n\n<h3 id=\"饼状图\"><a href=\"#饼状图\" class=\"headerlink\" title=\"饼状图\"></a>饼状图</h3><div class=\"pie1\"></div>\n\n<div class=\"hide-toggle\" ><div class=\"hide-button toggle-title\" style=\"\"><i class=\"fas fa-caret-right fa-fw\"></i><span>饼状图配置</span></div>\n    <div class=\"hide-content\"><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;pie1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.pie1</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">800px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">600px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 饼图</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">echartsPie1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> chart = echarts.init($(<span class=\"string\">&quot;.pie1&quot;</span>)[<span class=\"number\">0</span>]);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> option = &#123;</span><br><span class=\"line\">    <span class=\"attr\">title</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">text</span>: <span class=\"string\">&quot;Text&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">subtext</span>: <span class=\"string\">&quot;Subtext&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">left</span>: <span class=\"string\">&quot;center&quot;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">tooltip</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">trigger</span>: <span class=\"string\">&quot;item&quot;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">legend</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">orient</span>: <span class=\"string\">&quot;vertical&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">left</span>: <span class=\"string\">&quot;left&quot;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">series</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">&quot;NAME&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">&quot;pie&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">radius</span>: <span class=\"string\">&quot;50%&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">data</span>: [</span><br><span class=\"line\">          &#123; <span class=\"attr\">value</span>: <span class=\"number\">148</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;A&quot;</span> &#125;,</span><br><span class=\"line\">          &#123; <span class=\"attr\">value</span>: <span class=\"number\">735</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;B&quot;</span> &#125;,</span><br><span class=\"line\">          &#123; <span class=\"attr\">value</span>: <span class=\"number\">580</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;C&quot;</span> &#125;,</span><br><span class=\"line\">          &#123; <span class=\"attr\">value</span>: <span class=\"number\">484</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;D&quot;</span> &#125;,</span><br><span class=\"line\">          &#123; <span class=\"attr\">value</span>: <span class=\"number\">300</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;E&quot;</span> &#125;,</span><br><span class=\"line\">        ],</span><br><span class=\"line\">        <span class=\"attr\">emphasis</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">itemStyle</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">shadowBlur</span>: <span class=\"number\">10</span>,</span><br><span class=\"line\">            <span class=\"attr\">shadowOffsetX</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">            <span class=\"attr\">shadowColor</span>: <span class=\"string\">&quot;rgba(0, 0, 0, 0.5)&quot;</span>,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  chart.setOption(option);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">echartsPie1();</span><br></pre></td></tr></table></figure>\n\n<script>\n// 饼图\nfunction echartsPie1() {\n  let chart = echarts.init($(\".pie1\")[0]);\n  let option = {\n    title: {\n      text: \"Text\",\n      subtext: \"Subtext\",\n      left: \"center\",\n    },\n    tooltip: {\n      trigger: \"item\",\n    },\n    legend: {\n      orient: \"vertical\",\n      left: \"left\",\n    },\n    series: [\n      {\n        name: \"NAME\",\n        type: \"pie\",\n        radius: \"50%\",\n        data: [\n          { value: 148, name: \"A\" },\n          { value: 735, name: \"B\" },\n          { value: 580, name: \"C\" },\n          { value: 484, name: \"D\" },\n          { value: 300, name: \"E\" },\n        ],\n        emphasis: {\n          itemStyle: {\n            shadowBlur: 10,\n            shadowOffsetX: 0,\n            shadowColor: \"rgba(0, 0, 0, 0.5)\",\n          },\n        },\n      },\n    ],\n  };\n  chart.setOption(option);\n}\nechartsPie1();\n</script>\n</div></div>\n\n<h3 id=\"带背景的柱状图\"><a href=\"#带背景的柱状图\" class=\"headerlink\" title=\"带背景的柱状图\"></a>带背景的柱状图</h3><div class=\"bar\"></div>\n\n<div class=\"hide-toggle\" ><div class=\"hide-button toggle-title\" style=\"\"><i class=\"fas fa-caret-right fa-fw\"></i><span>带背景的柱状图配置</span></div>\n    <div class=\"hide-content\"><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;bar&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.bar</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">800px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">600px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 带背景的柱状图</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">echartsBar</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> echart = echarts.init($(<span class=\"string\">&quot;.bar&quot;</span>)[<span class=\"number\">0</span>]);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> option = &#123;</span><br><span class=\"line\">    <span class=\"attr\">xAxis</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">type</span>: <span class=\"string\">&quot;category&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">data</span>: [<span class=\"string\">&quot;Mon&quot;</span>, <span class=\"string\">&quot;Tue&quot;</span>, <span class=\"string\">&quot;Wed&quot;</span>, <span class=\"string\">&quot;Thu&quot;</span>, <span class=\"string\">&quot;Fri&quot;</span>, <span class=\"string\">&quot;Sat&quot;</span>, <span class=\"string\">&quot;Sun&quot;</span>],</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">yAxis</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">type</span>: <span class=\"string\">&quot;value&quot;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">series</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">&quot;NAME&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">data</span>: [<span class=\"number\">120</span>, <span class=\"number\">200</span>, <span class=\"number\">150</span>, <span class=\"number\">80</span>, <span class=\"number\">70</span>, <span class=\"number\">110</span>, <span class=\"number\">130</span>],</span><br><span class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">&quot;bar&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">showBackground</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"attr\">backgroundStyle</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">color</span>: <span class=\"string\">&quot;rgba(180, 180, 180, 0.2)&quot;</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  echart.setOption(option);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">echartsBar();</span><br></pre></td></tr></table></figure>\n\n<script>\n// 带背景的柱状图\nfunction echartsBar() {\n  let echart = echarts.init($(\".bar\")[0]);\n  let option = {\n    xAxis: {\n      type: \"category\",\n      data: [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"],\n    },\n    yAxis: {\n      type: \"value\",\n    },\n    series: [\n      {\n        name: \"NAME\",\n        data: [120, 200, 150, 80, 70, 110, 130],\n        type: \"bar\",\n        showBackground: true,\n        backgroundStyle: {\n          color: \"rgba(180, 180, 180, 0.2)\",\n        },\n      },\n    ],\n  };\n  echart.setOption(option);\n}\nechartsBar();\n</script>\n</div></div>\n\n<h3 id=\"另一种饼图\"><a href=\"#另一种饼图\" class=\"headerlink\" title=\"另一种饼图\"></a>另一种饼图</h3><div class=\"pie2\"></div>\n\n<div class=\"hide-toggle\" ><div class=\"hide-button toggle-title\" style=\"\"><i class=\"fas fa-caret-right fa-fw\"></i><span>另一种饼图配置</span></div>\n    <div class=\"hide-content\"><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;pie2&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.pie2</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">800px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">600px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">echartsPie2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> echart = echarts.init($(<span class=\"string\">&quot;.pie2&quot;</span>)[<span class=\"number\">0</span>]);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> option = &#123;</span><br><span class=\"line\">    <span class=\"attr\">legend</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">top</span>: <span class=\"string\">&quot;bottom&quot;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">toolbox</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">show</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      <span class=\"comment\">// feature: &#123;</span></span><br><span class=\"line\">      <span class=\"comment\">//   mark: &#123; show: true &#125;,</span></span><br><span class=\"line\">      <span class=\"comment\">//   dataView: &#123; show: true, readOnly: false &#125;,</span></span><br><span class=\"line\">      <span class=\"comment\">//   restore: &#123; show: true &#125;,</span></span><br><span class=\"line\">      <span class=\"comment\">//   saveAsImage: &#123; show: true &#125;,</span></span><br><span class=\"line\">      <span class=\"comment\">// &#125;,</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">series</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">&quot;NAME&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">&quot;pie&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">radius</span>: [<span class=\"number\">50</span>, <span class=\"number\">250</span>],</span><br><span class=\"line\">        <span class=\"attr\">center</span>: [<span class=\"string\">&quot;50%&quot;</span>, <span class=\"string\">&quot;50%&quot;</span>],</span><br><span class=\"line\">        <span class=\"attr\">roseType</span>: <span class=\"string\">&quot;area&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">itemStyle</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">borderRadius</span>: <span class=\"number\">8</span>,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">data</span>: [</span><br><span class=\"line\">          &#123; <span class=\"attr\">value</span>: <span class=\"number\">40</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;rose 1&quot;</span> &#125;,</span><br><span class=\"line\">          &#123; <span class=\"attr\">value</span>: <span class=\"number\">38</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;rose 2&quot;</span> &#125;,</span><br><span class=\"line\">          &#123; <span class=\"attr\">value</span>: <span class=\"number\">32</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;rose 3&quot;</span> &#125;,</span><br><span class=\"line\">          &#123; <span class=\"attr\">value</span>: <span class=\"number\">30</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;rose 4&quot;</span> &#125;,</span><br><span class=\"line\">          &#123; <span class=\"attr\">value</span>: <span class=\"number\">28</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;rose 5&quot;</span> &#125;,</span><br><span class=\"line\">          &#123; <span class=\"attr\">value</span>: <span class=\"number\">26</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;rose 6&quot;</span> &#125;,</span><br><span class=\"line\">          &#123; <span class=\"attr\">value</span>: <span class=\"number\">22</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;rose 7&quot;</span> &#125;,</span><br><span class=\"line\">          &#123; <span class=\"attr\">value</span>: <span class=\"number\">18</span>, <span class=\"attr\">name</span>: <span class=\"string\">&quot;rose 8&quot;</span> &#125;,</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  echart.setOption(option);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">echartsPie2();</span><br></pre></td></tr></table></figure>\n\n<script>\nfunction echartsPie2() {\n  let echart = echarts.init($(\".pie2\")[0]);\n  let option = {\n    legend: {\n      top: \"bottom\",\n    },\n    toolbox: {\n      show: true,\n      // feature: {\n      //   mark: { show: true },\n      //   dataView: { show: true, readOnly: false },\n      //   restore: { show: true },\n      //   saveAsImage: { show: true },\n      // },\n    },\n    series: [\n      {\n        name: \"NAME\",\n        type: \"pie\",\n        radius: [50, 250],\n        center: [\"50%\", \"50%\"],\n        roseType: \"area\",\n        itemStyle: {\n          borderRadius: 8,\n        },\n        data: [\n          { value: 40, name: \"rose 1\" },\n          { value: 38, name: \"rose 2\" },\n          { value: 32, name: \"rose 3\" },\n          { value: 30, name: \"rose 4\" },\n          { value: 28, name: \"rose 5\" },\n          { value: 26, name: \"rose 6\" },\n          { value: 22, name: \"rose 7\" },\n          { value: 18, name: \"rose 8\" },\n        ],\n      },\n    ],\n  };\n  echart.setOption(option);\n}\nechartsPie2();\n</script>\n</div></div>\n\n<h3 id=\"K-线图\"><a href=\"#K-线图\" class=\"headerlink\" title=\"K 线图\"></a>K 线图</h3><div class=\"kline\"></div>\n\n<div class=\"hide-toggle\" ><div class=\"hide-button toggle-title\" style=\"\"><i class=\"fas fa-caret-right fa-fw\"></i><span>K 线图配置</span></div>\n    <div class=\"hide-content\"><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;kline&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.kline</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">800px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">600px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">echartsKline</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> echart = echarts.init($(<span class=\"string\">&quot;.kline&quot;</span>)[<span class=\"number\">0</span>]);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> option = &#123;</span><br><span class=\"line\">    <span class=\"attr\">xAxis</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">data</span>: [<span class=\"string\">&quot;2017-10-24&quot;</span>, <span class=\"string\">&quot;2017-10-25&quot;</span>, <span class=\"string\">&quot;2017-10-26&quot;</span>, <span class=\"string\">&quot;2017-10-27&quot;</span>],</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">yAxis</span>: &#123;&#125;,</span><br><span class=\"line\">    <span class=\"attr\">series</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">&quot;k&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">data</span>: [</span><br><span class=\"line\">          [<span class=\"number\">20</span>, <span class=\"number\">34</span>, <span class=\"number\">10</span>, <span class=\"number\">38</span>],</span><br><span class=\"line\">          [<span class=\"number\">40</span>, <span class=\"number\">35</span>, <span class=\"number\">30</span>, <span class=\"number\">50</span>],</span><br><span class=\"line\">          [<span class=\"number\">31</span>, <span class=\"number\">38</span>, <span class=\"number\">33</span>, <span class=\"number\">44</span>],</span><br><span class=\"line\">          [<span class=\"number\">38</span>, <span class=\"number\">15</span>, <span class=\"number\">5</span>, <span class=\"number\">42</span>],</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  echart.setOption(option);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">echartsKline();</span><br></pre></td></tr></table></figure>\n\n<script>\nfunction echartsKline() {\n  let echart = echarts.init($(\".kline\")[0]);\n  let option = {\n    xAxis: {\n      data: [\"2017-10-24\", \"2017-10-25\", \"2017-10-26\", \"2017-10-27\"],\n    },\n    yAxis: {},\n    series: [\n      {\n        type: \"k\",\n        data: [\n          [20, 34, 10, 38],\n          [40, 35, 30, 50],\n          [31, 38, 33, 44],\n          [38, 15, 5, 42],\n        ],\n      },\n    ],\n  };\n  echart.setOption(option);\n}\nechartsKline();\n</script>\n</div></div>\n\n<h3 id=\"雷达图\"><a href=\"#雷达图\" class=\"headerlink\" title=\"雷达图\"></a>雷达图</h3><div class=\"radar\"></div>\n\n<div class=\"hide-toggle\" ><div class=\"hide-button toggle-title\" style=\"\"><i class=\"fas fa-caret-right fa-fw\"></i><span>雷达图配置</span></div>\n    <div class=\"hide-content\"><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;radar&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.radar</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">800px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">600px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">echartsRadar</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> echart = echarts.init($(<span class=\"string\">&quot;.radar&quot;</span>)[<span class=\"number\">0</span>]);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> option = &#123;</span><br><span class=\"line\">    <span class=\"attr\">title</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">text</span>: <span class=\"string\">&quot;基础雷达图&quot;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">legend</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">data</span>: [<span class=\"string\">&quot;预算分配（Allocated Budget）&quot;</span>, <span class=\"string\">&quot;实际开销（Actual Spending）&quot;</span>],</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">radar</span>: &#123;</span><br><span class=\"line\">      <span class=\"comment\">// shape: &#x27;circle&#x27;,</span></span><br><span class=\"line\">      <span class=\"attr\">indicator</span>: [</span><br><span class=\"line\">        &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;销售（Sales）&quot;</span>, <span class=\"attr\">max</span>: <span class=\"number\">6500</span> &#125;,</span><br><span class=\"line\">        &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;管理（Administration）&quot;</span>, <span class=\"attr\">max</span>: <span class=\"number\">16000</span> &#125;,</span><br><span class=\"line\">        &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;信息技术（Information Technology）&quot;</span>, <span class=\"attr\">max</span>: <span class=\"number\">30000</span> &#125;,</span><br><span class=\"line\">        &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;客服（Customer Support）&quot;</span>, <span class=\"attr\">max</span>: <span class=\"number\">38000</span> &#125;,</span><br><span class=\"line\">        &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;研发（Development）&quot;</span>, <span class=\"attr\">max</span>: <span class=\"number\">52000</span> &#125;,</span><br><span class=\"line\">        &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;市场（Marketing）&quot;</span>, <span class=\"attr\">max</span>: <span class=\"number\">25000</span> &#125;,</span><br><span class=\"line\">      ],</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">series</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">&quot;预算 vs 开销（Budget vs spending）&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">&quot;radar&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">data</span>: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            <span class=\"attr\">value</span>: [<span class=\"number\">4200</span>, <span class=\"number\">3000</span>, <span class=\"number\">20000</span>, <span class=\"number\">35000</span>, <span class=\"number\">50000</span>, <span class=\"number\">18000</span>],</span><br><span class=\"line\">            <span class=\"attr\">name</span>: <span class=\"string\">&quot;预算分配（Allocated Budget）&quot;</span>,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            <span class=\"attr\">value</span>: [<span class=\"number\">5000</span>, <span class=\"number\">14000</span>, <span class=\"number\">28000</span>, <span class=\"number\">26000</span>, <span class=\"number\">42000</span>, <span class=\"number\">21000</span>],</span><br><span class=\"line\">            <span class=\"attr\">name</span>: <span class=\"string\">&quot;实际开销（Actual Spending）&quot;</span>,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  echart.setOption(option);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">echartsRadar();</span><br></pre></td></tr></table></figure>\n\n<script>\nfunction echartsRadar() {\n  let echart = echarts.init($(\".radar\")[0]);\n  let option = {\n    title: {\n      text: \"基础雷达图\",\n    },\n    legend: {\n      data: [\"预算分配（Allocated Budget）\", \"实际开销（Actual Spending）\"],\n    },\n    radar: {\n      // shape: 'circle',\n      indicator: [\n        { name: \"销售（Sales）\", max: 6500 },\n        { name: \"管理（Administration）\", max: 16000 },\n        { name: \"信息技术（Information Technology）\", max: 30000 },\n        { name: \"客服（Customer Support）\", max: 38000 },\n        { name: \"研发（Development）\", max: 52000 },\n        { name: \"市场（Marketing）\", max: 25000 },\n      ],\n    },\n    series: [\n      {\n        name: \"预算 vs 开销（Budget vs spending）\",\n        type: \"radar\",\n        data: [\n          {\n            value: [4200, 3000, 20000, 35000, 50000, 18000],\n            name: \"预算分配（Allocated Budget）\",\n          },\n          {\n            value: [5000, 14000, 28000, 26000, 42000, 21000],\n            name: \"实际开销（Actual Spending）\",\n          },\n        ],\n      },\n    ],\n  };\n  echart.setOption(option);\n}\nechartsRadar();\n</script>\n</div></div>\n\n<h3 id=\"可拖拽图\"><a href=\"#可拖拽图\" class=\"headerlink\" title=\"可拖拽图\"></a>可拖拽图</h3><div class=\"draggable\"></div>\n\n<div class=\"hide-toggle\" ><div class=\"hide-button toggle-title\" style=\"\"><i class=\"fas fa-caret-right fa-fw\"></i><span>可拖拽图配置</span></div>\n    <div class=\"hide-content\"><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;draggable&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.draggable</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">800px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">600px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">echartsDraggable</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> myChart = echarts.init($(<span class=\"string\">&quot;.draggable&quot;</span>)[<span class=\"number\">0</span>]);</span><br><span class=\"line\">  <span class=\"keyword\">let</span> symbolSize = <span class=\"number\">20</span>;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> data = [</span><br><span class=\"line\">    [<span class=\"number\">40</span>, -<span class=\"number\">10</span>],</span><br><span class=\"line\">    [-<span class=\"number\">30</span>, -<span class=\"number\">5</span>],</span><br><span class=\"line\">    [-<span class=\"number\">76.5</span>, <span class=\"number\">20</span>],</span><br><span class=\"line\">    [-<span class=\"number\">63.5</span>, <span class=\"number\">40</span>],</span><br><span class=\"line\">    [-<span class=\"number\">22.1</span>, <span class=\"number\">50</span>],</span><br><span class=\"line\">  ];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">let</span> option = &#123;</span><br><span class=\"line\">    <span class=\"attr\">title</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">text</span>: <span class=\"string\">&quot;Try Dragging these Points&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">left</span>: <span class=\"string\">&quot;center&quot;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">tooltip</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">triggerOn</span>: <span class=\"string\">&quot;none&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">formatter</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">params</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">          <span class=\"string\">&quot;X: &quot;</span> +</span><br><span class=\"line\">          params.data[<span class=\"number\">0</span>].toFixed(<span class=\"number\">2</span>) +</span><br><span class=\"line\">          <span class=\"string\">&quot;&lt;br&gt;Y: &quot;</span> +</span><br><span class=\"line\">          params.data[<span class=\"number\">1</span>].toFixed(<span class=\"number\">2</span>)</span><br><span class=\"line\">        );</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">grid</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">top</span>: <span class=\"string\">&quot;8%&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">bottom</span>: <span class=\"string\">&quot;12%&quot;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">xAxis</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">min</span>: -<span class=\"number\">100</span>,</span><br><span class=\"line\">      <span class=\"attr\">max</span>: <span class=\"number\">70</span>,</span><br><span class=\"line\">      <span class=\"attr\">type</span>: <span class=\"string\">&quot;value&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">axisLine</span>: &#123; <span class=\"attr\">onZero</span>: <span class=\"literal\">false</span> &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">yAxis</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">min</span>: -<span class=\"number\">30</span>,</span><br><span class=\"line\">      <span class=\"attr\">max</span>: <span class=\"number\">60</span>,</span><br><span class=\"line\">      <span class=\"attr\">type</span>: <span class=\"string\">&quot;value&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">axisLine</span>: &#123; <span class=\"attr\">onZero</span>: <span class=\"literal\">false</span> &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">dataZoom</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">&quot;slider&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">xAxisIndex</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"attr\">filterMode</span>: <span class=\"string\">&quot;none&quot;</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">&quot;slider&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">yAxisIndex</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"attr\">filterMode</span>: <span class=\"string\">&quot;none&quot;</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">&quot;inside&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">xAxisIndex</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"attr\">filterMode</span>: <span class=\"string\">&quot;none&quot;</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">&quot;inside&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">yAxisIndex</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">        <span class=\"attr\">filterMode</span>: <span class=\"string\">&quot;none&quot;</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"attr\">series</span>: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">id</span>: <span class=\"string\">&quot;a&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">type</span>: <span class=\"string\">&quot;line&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">smooth</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        <span class=\"attr\">symbolSize</span>: symbolSize,</span><br><span class=\"line\">        <span class=\"attr\">data</span>: data,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    myChart.setOption(&#123;</span><br><span class=\"line\">      <span class=\"attr\">graphic</span>: data.map(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">item, dataIndex</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">          <span class=\"attr\">type</span>: <span class=\"string\">&quot;circle&quot;</span>,</span><br><span class=\"line\">          <span class=\"attr\">position</span>: myChart.convertToPixel(<span class=\"string\">&quot;grid&quot;</span>, item),</span><br><span class=\"line\">          <span class=\"attr\">shape</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">cx</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">            <span class=\"attr\">cy</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">            <span class=\"attr\">r</span>: symbolSize / <span class=\"number\">2</span>,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          <span class=\"attr\">invisible</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          <span class=\"attr\">draggable</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          <span class=\"attr\">ondrag</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">dx, dy</span>) </span>&#123;</span><br><span class=\"line\">            onPointDragging(dataIndex, [<span class=\"built_in\">this</span>.x, <span class=\"built_in\">this</span>.y]);</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          <span class=\"attr\">onmousemove</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            showTooltip(dataIndex);</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          <span class=\"attr\">onmouseout</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            hideTooltip(dataIndex);</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          <span class=\"attr\">z</span>: <span class=\"number\">100</span>,</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">      &#125;),</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">&quot;resize&quot;</span>, updatePosition);</span><br><span class=\"line\"></span><br><span class=\"line\">  myChart.on(<span class=\"string\">&quot;dataZoom&quot;</span>, updatePosition);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">updatePosition</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    myChart.setOption(&#123;</span><br><span class=\"line\">      <span class=\"attr\">graphic</span>: data.map(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">item, dataIndex</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">          <span class=\"attr\">position</span>: myChart.convertToPixel(<span class=\"string\">&quot;grid&quot;</span>, item),</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">      &#125;),</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showTooltip</span>(<span class=\"params\">dataIndex</span>) </span>&#123;</span><br><span class=\"line\">    myChart.dispatchAction(&#123;</span><br><span class=\"line\">      <span class=\"attr\">type</span>: <span class=\"string\">&quot;showTip&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">seriesIndex</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">      <span class=\"attr\">dataIndex</span>: dataIndex,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hideTooltip</span>(<span class=\"params\">dataIndex</span>) </span>&#123;</span><br><span class=\"line\">    myChart.dispatchAction(&#123;</span><br><span class=\"line\">      <span class=\"attr\">type</span>: <span class=\"string\">&quot;hideTip&quot;</span>,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">onPointDragging</span>(<span class=\"params\">dataIndex, pos</span>) </span>&#123;</span><br><span class=\"line\">    data[dataIndex] = myChart.convertFromPixel(<span class=\"string\">&quot;grid&quot;</span>, pos);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Update data</span></span><br><span class=\"line\">    myChart.setOption(&#123;</span><br><span class=\"line\">      <span class=\"attr\">series</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          <span class=\"attr\">id</span>: <span class=\"string\">&quot;a&quot;</span>,</span><br><span class=\"line\">          <span class=\"attr\">data</span>: data,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      ],</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  myChart.setOption(option);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">echartsDraggable();</span><br></pre></td></tr></table></figure>\n\n<script>\nfunction echartsDraggable() {\n  let myChart = echarts.init($(\".draggable\")[0]);\n  let symbolSize = 20;\n  let data = [\n    [40, -10],\n    [-30, -5],\n    [-76.5, 20],\n    [-63.5, 40],\n    [-22.1, 50],\n  ];\n\n  let option = {\n    title: {\n      text: \"Try Dragging these Points\",\n      left: \"center\",\n    },\n    tooltip: {\n      triggerOn: \"none\",\n      formatter: function (params) {\n        return (\n          \"X: \" +\n          params.data[0].toFixed(2) +\n          \"<br>Y: \" +\n          params.data[1].toFixed(2)\n        );\n      },\n    },\n    grid: {\n      top: \"8%\",\n      bottom: \"12%\",\n    },\n    xAxis: {\n      min: -100,\n      max: 70,\n      type: \"value\",\n      axisLine: { onZero: false },\n    },\n    yAxis: {\n      min: -30,\n      max: 60,\n      type: \"value\",\n      axisLine: { onZero: false },\n    },\n    dataZoom: [\n      {\n        type: \"slider\",\n        xAxisIndex: 0,\n        filterMode: \"none\",\n      },\n      {\n        type: \"slider\",\n        yAxisIndex: 0,\n        filterMode: \"none\",\n      },\n      {\n        type: \"inside\",\n        xAxisIndex: 0,\n        filterMode: \"none\",\n      },\n      {\n        type: \"inside\",\n        yAxisIndex: 0,\n        filterMode: \"none\",\n      },\n    ],\n    series: [\n      {\n        id: \"a\",\n        type: \"line\",\n        smooth: true,\n        symbolSize: symbolSize,\n        data: data,\n      },\n    ],\n  };\n\n  setTimeout(function () {\n    myChart.setOption({\n      graphic: data.map(function (item, dataIndex) {\n        return {\n          type: \"circle\",\n          position: myChart.convertToPixel(\"grid\", item),\n          shape: {\n            cx: 0,\n            cy: 0,\n            r: symbolSize / 2,\n          },\n          invisible: true,\n          draggable: true,\n          ondrag: function (dx, dy) {\n            onPointDragging(dataIndex, [this.x, this.y]);\n          },\n          onmousemove: function () {\n            showTooltip(dataIndex);\n          },\n          onmouseout: function () {\n            hideTooltip(dataIndex);\n          },\n          z: 100,\n        };\n      }),\n    });\n  }, 0);\n\n  window.addEventListener(\"resize\", updatePosition);\n\n  myChart.on(\"dataZoom\", updatePosition);\n\n  function updatePosition() {\n    myChart.setOption({\n      graphic: data.map(function (item, dataIndex) {\n        return {\n          position: myChart.convertToPixel(\"grid\", item),\n        };\n      }),\n    });\n  }\n\n  function showTooltip(dataIndex) {\n    myChart.dispatchAction({\n      type: \"showTip\",\n      seriesIndex: 0,\n      dataIndex: dataIndex,\n    });\n  }\n\n  function hideTooltip(dataIndex) {\n    myChart.dispatchAction({\n      type: \"hideTip\",\n    });\n  }\n\n  function onPointDragging(dataIndex, pos) {\n    data[dataIndex] = myChart.convertFromPixel(\"grid\", pos);\n\n    // Update data\n    myChart.setOption({\n      series: [\n        {\n          id: \"a\",\n          data: data,\n        },\n      ],\n    });\n  }\n  myChart.setOption(option);\n}\nechartsDraggable();\n</script>\n</div></div>\n\n<h1 id=\"The-End\"><a href=\"#The-End\" class=\"headerlink\" title=\"The_End\"></a>The_End</h1>"},{"title":"原生 JS 实现拖放","top_img":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/js/jstop.jpeg","cover":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/js/js.jpeg","date":"2020-06-04T21:34:33.000Z","_content":"\n# 原生 JS 快速实现拖放\n\n拖放是很常见的一种交互效果，很多时候我们都会借助于第三方的控件来实现，其实用原生 js 实现起来也非常的方便。接下来我们就用原生 js 和 css 快速实现拖放效果\n\n### html\n\n```html\n<body>\n  <div class=\"droppable\">\n    <div class=\"draggable\" draggable=\"true\"></div>\n  </div>\n  <div class=\"droppable\"></div>\n  <div class=\"droppable\"></div>\n  <div class=\"droppable\"></div>\n  <div class=\"droppable\"></div>\n</body>\n```\n\n注意点： 1. 容器的的 class 为 droppable，用于接收被拖拽的元素，可被拖拽的元素 class 为 draggable，同时设置 draggable 属性为 true，表示该元素可以被拖拽。 2. 默认情况下，只有图片、链接还有被选中的文字能被拖拽，其他元素需要设置 draggable 为 true 才能被拖拽。所以为了凸显 draggable 的用法，这里使用 `<div>` 而不是 `<image>` 来作为被拖拽的元素。\n\n### css\n\n在实现样式的时候，除了实现静态的样式，一些过渡状态也需要增加样式以提升视觉体验：\n\n1.  元素被拖动的过程中增加边框等效果； 2. 当元素被拖动到容器上方时，容器也应增加样式表明容器可以接收一个被拖拽的元素。\n\n```css\nbody {\n  background-color: darksalmon;\n}\n\n.draggable {\n  background-image: url(\"http://source.unsplash.com/random/150x150\");\n  position: relative;\n  height: 150px;\n  width: 150px;\n  top: 5px;\n  left: 5px;\n  cursor: pointer;\n}\n\n.droppable {\n  display: inline-block;\n  height: 160px;\n  width: 160px;\n  margin: 10px;\n  border: 3px salmon solid;\n  background-color: white;\n}\n\n.dragging {\n  border: 4px yellow solid;\n}\n\n.drag-over {\n  background-color: #f4f4f4;\n  border-style: dashed;\n}\n\n.invisible {\n  display: none;\n}\n```\n\n注意点： 1. 图片来源于 百度; 2. .dragging 为 draggable 元素正在被拖动的状态，增加黄色 border； 3. .drag-over 为 draggable 元素被拖动到容器上方时容器的状态，增加灰色虚线 border。\n\n### js\n\n最后，我们需要通过 js 监听 draggable 和 droppable 的相关的事件。\n\n```javascript\n// 查询draggable和droppable\nconst draggable = document.querySelector(\".draggable\");\nconst droppables = document.querySelectorAll(\".droppable\");\n\n// 监听draggable的相关事件\ndraggable.addEventListener(\"dragstart\", dragStart);\ndraggable.addEventListener(\"dragend\", dragEnd);\n\nfunction dragStart() {\n  this.className += \" dragging\";\n  setTimeout(() => {\n    this.className = \"invisible\";\n  }, 0);\n}\n\nfunction dragEnd() {\n  this.className = \"draggable\";\n}\n\n// 监听droppable的相关事件\nfor (const droppable of droppables) {\n  droppable.addEventListener(\"dragover\", dragOver);\n  droppable.addEventListener(\"dragleave\", dragLeave);\n  droppable.addEventListener(\"dragenter\", dragEnter);\n  droppable.addEventListener(\"drop\", dragDrop);\n}\n\nfunction dragOver(e) {\n  e.preventDefault();\n}\n\nfunction dragEnter(e) {\n  e.preventDefault();\n  this.className += \" drag-over\";\n}\n\nfunction dragLeave(e) {\n  this.className = \"droppable\";\n}\n\nfunction dragDrop(e) {\n  this.className = \"droppable\";\n  this.append(draggable);\n}\n```\n\n注意点： 1. 当 draggable 元素被拖动时，原来容器中的 draggable 元素并不会消失，需要我们手动将其隐藏（class 设置为 invisible），如果同步操作会立马触发 dragend 事件导致拖动效果消失，所以在 setTimeout 的回调中异步设置可确保拖动操作开始后再隐藏 draggable 元素； 2. 在 dragEnter 和 dragOver 方法中我们需要通过 preventDefault 来取消事件以表明容器是一个合法的 droppable 元素，不然容器的 drop 事件将无法触发，接下来的操作也将无法进行，详细解释请参考 MDN DropTarget； 3.在 dragDrop 方法中直接使用 append 方法将 draggable 元素移动至当前容器下面。\n\n---\n\n完整示例演示：https://codehhr.gitee.io/web/jsdrag/\n\n# The_End\n","source":"_posts/js/js-Drag.md","raw":"---\ntitle: 原生 JS 实现拖放\ntop_img: https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/js/jstop.jpeg\ncover: https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/js/js.jpeg\ndate: 2020-06-05 05:34:33\ntags:\n  - javascript\n  - js\n  - 拖放\ncategories:\n  - js\n---\n\n# 原生 JS 快速实现拖放\n\n拖放是很常见的一种交互效果，很多时候我们都会借助于第三方的控件来实现，其实用原生 js 实现起来也非常的方便。接下来我们就用原生 js 和 css 快速实现拖放效果\n\n### html\n\n```html\n<body>\n  <div class=\"droppable\">\n    <div class=\"draggable\" draggable=\"true\"></div>\n  </div>\n  <div class=\"droppable\"></div>\n  <div class=\"droppable\"></div>\n  <div class=\"droppable\"></div>\n  <div class=\"droppable\"></div>\n</body>\n```\n\n注意点： 1. 容器的的 class 为 droppable，用于接收被拖拽的元素，可被拖拽的元素 class 为 draggable，同时设置 draggable 属性为 true，表示该元素可以被拖拽。 2. 默认情况下，只有图片、链接还有被选中的文字能被拖拽，其他元素需要设置 draggable 为 true 才能被拖拽。所以为了凸显 draggable 的用法，这里使用 `<div>` 而不是 `<image>` 来作为被拖拽的元素。\n\n### css\n\n在实现样式的时候，除了实现静态的样式，一些过渡状态也需要增加样式以提升视觉体验：\n\n1.  元素被拖动的过程中增加边框等效果； 2. 当元素被拖动到容器上方时，容器也应增加样式表明容器可以接收一个被拖拽的元素。\n\n```css\nbody {\n  background-color: darksalmon;\n}\n\n.draggable {\n  background-image: url(\"http://source.unsplash.com/random/150x150\");\n  position: relative;\n  height: 150px;\n  width: 150px;\n  top: 5px;\n  left: 5px;\n  cursor: pointer;\n}\n\n.droppable {\n  display: inline-block;\n  height: 160px;\n  width: 160px;\n  margin: 10px;\n  border: 3px salmon solid;\n  background-color: white;\n}\n\n.dragging {\n  border: 4px yellow solid;\n}\n\n.drag-over {\n  background-color: #f4f4f4;\n  border-style: dashed;\n}\n\n.invisible {\n  display: none;\n}\n```\n\n注意点： 1. 图片来源于 百度; 2. .dragging 为 draggable 元素正在被拖动的状态，增加黄色 border； 3. .drag-over 为 draggable 元素被拖动到容器上方时容器的状态，增加灰色虚线 border。\n\n### js\n\n最后，我们需要通过 js 监听 draggable 和 droppable 的相关的事件。\n\n```javascript\n// 查询draggable和droppable\nconst draggable = document.querySelector(\".draggable\");\nconst droppables = document.querySelectorAll(\".droppable\");\n\n// 监听draggable的相关事件\ndraggable.addEventListener(\"dragstart\", dragStart);\ndraggable.addEventListener(\"dragend\", dragEnd);\n\nfunction dragStart() {\n  this.className += \" dragging\";\n  setTimeout(() => {\n    this.className = \"invisible\";\n  }, 0);\n}\n\nfunction dragEnd() {\n  this.className = \"draggable\";\n}\n\n// 监听droppable的相关事件\nfor (const droppable of droppables) {\n  droppable.addEventListener(\"dragover\", dragOver);\n  droppable.addEventListener(\"dragleave\", dragLeave);\n  droppable.addEventListener(\"dragenter\", dragEnter);\n  droppable.addEventListener(\"drop\", dragDrop);\n}\n\nfunction dragOver(e) {\n  e.preventDefault();\n}\n\nfunction dragEnter(e) {\n  e.preventDefault();\n  this.className += \" drag-over\";\n}\n\nfunction dragLeave(e) {\n  this.className = \"droppable\";\n}\n\nfunction dragDrop(e) {\n  this.className = \"droppable\";\n  this.append(draggable);\n}\n```\n\n注意点： 1. 当 draggable 元素被拖动时，原来容器中的 draggable 元素并不会消失，需要我们手动将其隐藏（class 设置为 invisible），如果同步操作会立马触发 dragend 事件导致拖动效果消失，所以在 setTimeout 的回调中异步设置可确保拖动操作开始后再隐藏 draggable 元素； 2. 在 dragEnter 和 dragOver 方法中我们需要通过 preventDefault 来取消事件以表明容器是一个合法的 droppable 元素，不然容器的 drop 事件将无法触发，接下来的操作也将无法进行，详细解释请参考 MDN DropTarget； 3.在 dragDrop 方法中直接使用 append 方法将 draggable 元素移动至当前容器下面。\n\n---\n\n完整示例演示：https://codehhr.gitee.io/web/jsdrag/\n\n# The_End\n","slug":"js/js-Drag","published":1,"updated":"2021-06-20T08:13:52.729Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cksvxwnnt0021gubqc1h9bcy4","content":"<h1 id=\"原生-JS-快速实现拖放\"><a href=\"#原生-JS-快速实现拖放\" class=\"headerlink\" title=\"原生 JS 快速实现拖放\"></a>原生 JS 快速实现拖放</h1><p>拖放是很常见的一种交互效果，很多时候我们都会借助于第三方的控件来实现，其实用原生 js 实现起来也非常的方便。接下来我们就用原生 js 和 css 快速实现拖放效果</p>\n<h3 id=\"html\"><a href=\"#html\" class=\"headerlink\" title=\"html\"></a>html</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;droppable&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;draggable&quot;</span> <span class=\"attr\">draggable</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;droppable&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;droppable&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;droppable&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;droppable&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>注意点： 1. 容器的的 class 为 droppable，用于接收被拖拽的元素，可被拖拽的元素 class 为 draggable，同时设置 draggable 属性为 true，表示该元素可以被拖拽。 2. 默认情况下，只有图片、链接还有被选中的文字能被拖拽，其他元素需要设置 draggable 为 true 才能被拖拽。所以为了凸显 draggable 的用法，这里使用 <code>&lt;div&gt;</code> 而不是 <code>&lt;image&gt;</code> 来作为被拖拽的元素。</p>\n<h3 id=\"css\"><a href=\"#css\" class=\"headerlink\" title=\"css\"></a>css</h3><p>在实现样式的时候，除了实现静态的样式，一些过渡状态也需要增加样式以提升视觉体验：</p>\n<ol>\n<li> 元素被拖动的过程中增加边框等效果； 2. 当元素被拖动到容器上方时，容器也应增加样式表明容器可以接收一个被拖拽的元素。</li>\n</ol>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: darksalmon;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.draggable</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-image</span>: <span class=\"built_in\">url</span>(<span class=\"string\">&quot;http://source.unsplash.com/random/150x150&quot;</span>);</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">cursor</span>: pointer;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.droppable</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">160px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">160px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">3px</span> salmon solid;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: white;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.dragging</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">4px</span> yellow solid;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.drag-over</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#f4f4f4</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-style</span>: dashed;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.invisible</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: none;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意点： 1. 图片来源于 百度; 2. .dragging 为 draggable 元素正在被拖动的状态，增加黄色 border； 3. .drag-over 为 draggable 元素被拖动到容器上方时容器的状态，增加灰色虚线 border。</p>\n<h3 id=\"js\"><a href=\"#js\" class=\"headerlink\" title=\"js\"></a>js</h3><p>最后，我们需要通过 js 监听 draggable 和 droppable 的相关的事件。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 查询draggable和droppable</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> draggable = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;.draggable&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> droppables = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">&quot;.droppable&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 监听draggable的相关事件</span></span><br><span class=\"line\">draggable.addEventListener(<span class=\"string\">&quot;dragstart&quot;</span>, dragStart);</span><br><span class=\"line\">draggable.addEventListener(<span class=\"string\">&quot;dragend&quot;</span>, dragEnd);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dragStart</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.className += <span class=\"string\">&quot; dragging&quot;</span>;</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.className = <span class=\"string\">&quot;invisible&quot;</span>;</span><br><span class=\"line\">  &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dragEnd</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.className = <span class=\"string\">&quot;draggable&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 监听droppable的相关事件</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> droppable <span class=\"keyword\">of</span> droppables) &#123;</span><br><span class=\"line\">  droppable.addEventListener(<span class=\"string\">&quot;dragover&quot;</span>, dragOver);</span><br><span class=\"line\">  droppable.addEventListener(<span class=\"string\">&quot;dragleave&quot;</span>, dragLeave);</span><br><span class=\"line\">  droppable.addEventListener(<span class=\"string\">&quot;dragenter&quot;</span>, dragEnter);</span><br><span class=\"line\">  droppable.addEventListener(<span class=\"string\">&quot;drop&quot;</span>, dragDrop);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dragOver</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  e.preventDefault();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dragEnter</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  e.preventDefault();</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.className += <span class=\"string\">&quot; drag-over&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dragLeave</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.className = <span class=\"string\">&quot;droppable&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dragDrop</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.className = <span class=\"string\">&quot;droppable&quot;</span>;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.append(draggable);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意点： 1. 当 draggable 元素被拖动时，原来容器中的 draggable 元素并不会消失，需要我们手动将其隐藏（class 设置为 invisible），如果同步操作会立马触发 dragend 事件导致拖动效果消失，所以在 setTimeout 的回调中异步设置可确保拖动操作开始后再隐藏 draggable 元素； 2. 在 dragEnter 和 dragOver 方法中我们需要通过 preventDefault 来取消事件以表明容器是一个合法的 droppable 元素，不然容器的 drop 事件将无法触发，接下来的操作也将无法进行，详细解释请参考 MDN DropTarget； 3.在 dragDrop 方法中直接使用 append 方法将 draggable 元素移动至当前容器下面。</p>\n<hr>\n<p>完整示例演示：<a href=\"https://codehhr.gitee.io/web/jsdrag/\">https://codehhr.gitee.io/web/jsdrag/</a></p>\n<h1 id=\"The-End\"><a href=\"#The-End\" class=\"headerlink\" title=\"The_End\"></a>The_End</h1>","site":{"data":{"link":{"class1":{"class_name":"舍友","link_list":{"1":{"name":"codeAntg","link":"https://blog.csdn.net/weixin_44745147","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/fjh.jpg","descr":"那家刀削面不错","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class2":{"class_name":"致谢","link_list":{"1":{"name":"JerrC","link":"https://immyw.com","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/immyw.png","descr":"今日事,今日毕","width":"1px","style":"solid","color":"#60d0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/hexo.svg","descr":"A fast, simple & powerful blog framework","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class3":{"class_name":"友人","link_list":{"1":{"name":"Chester","link":"http://chesterlds.cn","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/chester.jpg","descr":null,"width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Wangs","link":"https://wangsss.cn/","avatar":"https://wangsss.cn/img/avatar.png","descr":"不疯魔，不成活 ~","width":"1px","style":"solid","color":"#9d9d9d","custom":"link_custom1","time":"4s","namecolor":"0094ff","descolor":"#ff9191"}}}}}},"excerpt":"","more":"<h1 id=\"原生-JS-快速实现拖放\"><a href=\"#原生-JS-快速实现拖放\" class=\"headerlink\" title=\"原生 JS 快速实现拖放\"></a>原生 JS 快速实现拖放</h1><p>拖放是很常见的一种交互效果，很多时候我们都会借助于第三方的控件来实现，其实用原生 js 实现起来也非常的方便。接下来我们就用原生 js 和 css 快速实现拖放效果</p>\n<h3 id=\"html\"><a href=\"#html\" class=\"headerlink\" title=\"html\"></a>html</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;droppable&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;draggable&quot;</span> <span class=\"attr\">draggable</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;droppable&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;droppable&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;droppable&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;droppable&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>注意点： 1. 容器的的 class 为 droppable，用于接收被拖拽的元素，可被拖拽的元素 class 为 draggable，同时设置 draggable 属性为 true，表示该元素可以被拖拽。 2. 默认情况下，只有图片、链接还有被选中的文字能被拖拽，其他元素需要设置 draggable 为 true 才能被拖拽。所以为了凸显 draggable 的用法，这里使用 <code>&lt;div&gt;</code> 而不是 <code>&lt;image&gt;</code> 来作为被拖拽的元素。</p>\n<h3 id=\"css\"><a href=\"#css\" class=\"headerlink\" title=\"css\"></a>css</h3><p>在实现样式的时候，除了实现静态的样式，一些过渡状态也需要增加样式以提升视觉体验：</p>\n<ol>\n<li> 元素被拖动的过程中增加边框等效果； 2. 当元素被拖动到容器上方时，容器也应增加样式表明容器可以接收一个被拖拽的元素。</li>\n</ol>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: darksalmon;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.draggable</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-image</span>: <span class=\"built_in\">url</span>(<span class=\"string\">&quot;http://source.unsplash.com/random/150x150&quot;</span>);</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">5px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">cursor</span>: pointer;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.droppable</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">160px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">160px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">3px</span> salmon solid;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: white;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.dragging</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">4px</span> yellow solid;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.drag-over</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#f4f4f4</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-style</span>: dashed;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.invisible</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: none;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意点： 1. 图片来源于 百度; 2. .dragging 为 draggable 元素正在被拖动的状态，增加黄色 border； 3. .drag-over 为 draggable 元素被拖动到容器上方时容器的状态，增加灰色虚线 border。</p>\n<h3 id=\"js\"><a href=\"#js\" class=\"headerlink\" title=\"js\"></a>js</h3><p>最后，我们需要通过 js 监听 draggable 和 droppable 的相关的事件。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 查询draggable和droppable</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> draggable = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;.draggable&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> droppables = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">&quot;.droppable&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 监听draggable的相关事件</span></span><br><span class=\"line\">draggable.addEventListener(<span class=\"string\">&quot;dragstart&quot;</span>, dragStart);</span><br><span class=\"line\">draggable.addEventListener(<span class=\"string\">&quot;dragend&quot;</span>, dragEnd);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dragStart</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.className += <span class=\"string\">&quot; dragging&quot;</span>;</span><br><span class=\"line\">  <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.className = <span class=\"string\">&quot;invisible&quot;</span>;</span><br><span class=\"line\">  &#125;, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dragEnd</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.className = <span class=\"string\">&quot;draggable&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 监听droppable的相关事件</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">const</span> droppable <span class=\"keyword\">of</span> droppables) &#123;</span><br><span class=\"line\">  droppable.addEventListener(<span class=\"string\">&quot;dragover&quot;</span>, dragOver);</span><br><span class=\"line\">  droppable.addEventListener(<span class=\"string\">&quot;dragleave&quot;</span>, dragLeave);</span><br><span class=\"line\">  droppable.addEventListener(<span class=\"string\">&quot;dragenter&quot;</span>, dragEnter);</span><br><span class=\"line\">  droppable.addEventListener(<span class=\"string\">&quot;drop&quot;</span>, dragDrop);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dragOver</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  e.preventDefault();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dragEnter</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  e.preventDefault();</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.className += <span class=\"string\">&quot; drag-over&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dragLeave</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.className = <span class=\"string\">&quot;droppable&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">dragDrop</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.className = <span class=\"string\">&quot;droppable&quot;</span>;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.append(draggable);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>注意点： 1. 当 draggable 元素被拖动时，原来容器中的 draggable 元素并不会消失，需要我们手动将其隐藏（class 设置为 invisible），如果同步操作会立马触发 dragend 事件导致拖动效果消失，所以在 setTimeout 的回调中异步设置可确保拖动操作开始后再隐藏 draggable 元素； 2. 在 dragEnter 和 dragOver 方法中我们需要通过 preventDefault 来取消事件以表明容器是一个合法的 droppable 元素，不然容器的 drop 事件将无法触发，接下来的操作也将无法进行，详细解释请参考 MDN DropTarget； 3.在 dragDrop 方法中直接使用 append 方法将 draggable 元素移动至当前容器下面。</p>\n<hr>\n<p>完整示例演示：<a href=\"https://codehhr.gitee.io/web/jsdrag/\">https://codehhr.gitee.io/web/jsdrag/</a></p>\n<h1 id=\"The-End\"><a href=\"#The-End\" class=\"headerlink\" title=\"The_End\"></a>The_End</h1>"},{"title":"Js API","top_img":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg","date":"2021-05-19T15:13:26.000Z","cover":"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/desktop.png","aside":null,"_content":"\n# DOM 操作\n\n# webapi 介绍\n\n## api 的概念\n\n`API`（ Application Programming Interface , 应用程序编程接口 ）是一些预先定义的函数，目的是提供应用程序与开发人员基于某软件或硬件得以访问一组例程的能力，而又无需访问源码，或理解内部工作机制的细节。例如：`alert()`、 `prompt()`、`log()`、`reverse()`、`getMonths()`\n任何开发语言都有自己的 `API`\n`API` 的特征输入和输出( I/O )\n`API` 的使用方法( `console.log()` )\n\n## webapi 的概念\n\n浏览器提供的一套操作浏览器功能和页面元素的 `API` ( `BOM` 和 `DOM` )\n我们可以通过 `API` 去操作 `DOM` 和 `BOM`\n此处的 web `API` 特指浏览器提供的 `API`(一组方法)，web `API` 在后面的课程中有其它含义\n\n## JavaScript 的组成\n\n![js](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/js/jscontent.png)\n\n# DOM 概念\n\n**了解**\n\n事件基础文档对象模型（Document Object Model，简称 `DOM`），是 W3C 组织推荐的处理可扩展标志语言的标准编程接口。在网页上，组织页面（或文档）的对象被组织在一个树形结构中，用来表示文档中对象的标准模型就称为 `DOM`。Document Object Model 的历史可以追溯至 1990 年代后期微软与 Netscape 的“浏览器大战”，双方为了在 `JavaScript` 与 `JScript` 一决生死，于是大规模的赋予浏览器强大的功能。微软在网页技术上加入了不少专属事物，既有 VBScript、ActiveX、以及微软自家的 DHTML 格式等，使不少网页使用非微软平台及浏览器无法正常显示。DOM 即是当时蕴酿出来的杰作。\n\n`DOM` 又称为文档树模型\n\n![DOM](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/js/dom.jpeg)\n\n文档：一个网页可以称为文档\n节点：网页中的所有内容都是节点（标签、属性、文本、注释等）\n元素：网页中的标签\n属性：标签(元素)的属性\n\n# 模拟文档树结构\n\n![simulationdom](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/js/simulationdom.jpeg)\n\n# 操作 DOM\n\n## 获取元素的方式\n\n### 根据 id 获取元素\n\n```js\nvar div1 = document.getElementById(\"box1\");\n```\n\n### 通过类名获取元素\n\n```js\nvar p1 = document.getElementsByClassName(\"p1\");\nconsole.log(Array.isArray(p1)); //false\nconsole.log(p1.length);\nconsole.log(p1[0]);\nconsole.log(p1[1]);\n```\n\n**伪数组定义**：\n\n1、拥有 `length` 属性，其它属性（索引）为非负整数(对象中的索引会被当做字符串来处理，这里你可以当做是个非负整数串来理解)  \n2、不具有数组所具有的方法\n伪数组，就是像数组一样有  `length`  属性，也有  0、1、2、3  等属性的对象，看起来就像数组一样，但不是数组\n常见的参数的参数 `arguments`，`DOM` 对象列表（比如通过 `document.getElementsByTags` 得到的列表）\n\n### 通过标签名获取元素\n\n```js\nvar tag1 = document.getElementsByTagName(\"div\");\nconsole.log(tag1);\nconsole.log(tag1[0]);\n```\n\n### 通过 name 名获取元素\n\n```js\nvar userList = document.getElementsByName(\"user\");\nconsole.log(userList);\nfor (var i = 0; i < userList.length; i++) {\n  console.log(userList[i]);\n}\n```\n\n### 通过选择器的 querySelector 获取元素\n\n```js\nquerySlector(); // 获取指定选择器的第一个元素，参数就是选择器的名称\nvar div1 = document.querySelector(\".box1\");\nconsole.log(div1);\nvar li1 = document.querySelector(\"ul>li\");\nconsole.log(li1);\nvar user1 = document.querySelector(\"#user1\");\nconsole.log(user1);\n```\n\n### 通过选择器的 querySelectorAll 获取元素\n\n```js\nquerySelectorAll(); // 获取指定选择器的所有的元素，参数就是选择器的名称\nvar boxList = document.querySelectorAll(\".box1\");\nconsole.log(boxList);\nvar listLi = document.querySelectorAll(\"ul li\");\nconsole.log(listLi);\n```\n\n## 事件初识\n\n事件 : 触发-响应机制\n`Event` 接口表示在 `DOM` 中发生的任何事件，一些是用户生成的（例如鼠标或键盘事件），而其他由 `API` 生成。\n\n### 事件三要素\n\n事件源 : 触发(被)事件的元素\n事件类型 : 事件的触发方式(例如鼠标点击或键盘点击)\n事件处理程序 : 事件触发后要执行的代码(函数形式)\n\n### 事件的基本使用\n\n```js\nvar box = document.getElementById(\"box\");\nbox.onclick = function () {\n  console.log(\"代码会在box被点击后执行\");\n};\n```\n\n鼠标单击事件：`onclick` 浏览器加载完成事件：`onload`\n\n### 事件触发的多种写法\n\n`HTML` 内部书写所有\n`HTML` 行内触发方法\n`HTML` 外部书写\n\n## 非表单元素的属性操作\n\n`href`、`title`、`id`、`src`、`className`、`width`、`height` 等等\n\n### 添加 src 属性值显示图片\n\n```js\nimgBox.src = \"images/jie.jpg\";\n```\n\n### 改变图片大小\n\n```js\nimgBox.width = 750;\nimgBox.height = 500;\n```\n\n### 通过 style 改变宽高\n\n```js\nimgBox.style.width = 750 + \"px\";\nimgBox.style.height = 500 + \"px\";\n//通过样式属性设置宽高、位置的属性类型是字符串，需要加上 px\n// 凡是 css 中这个属性是多个单词的写法,在 js 代码中 DOM 操作的时候.把-干掉,后面的单词的首字母大写即可\n```\n\n### 通过类名改变宽度\n\n```js\nimgBox.className = \"imgCl\";\n//className  会覆盖之前设置好的类名！\n```\n\n### 隐藏元素\n\n- `src = \"\"`;\n- `display = none`; 不占位置的\n- `visibility = \"hidden`\"; 占位置\n- `opacity = 0`; 占位置\n\n## 表单元素属性操作\n\n- `value` 用于大部分表单元素的内容获取( `option` 除外)\n- `type` 可以获取 `input` 标签的类型(输入框或复选框等)\n- `disabled` 禁用属性 `checked` 复选框选中属性\n- `selected` 下拉菜单选中属性\n- `checked`\n\n```js\ndocument.querySelector(\"input\").onblur = function () {\n  console.log(this.value, this.type);\n};\n```\n\n## this 的指向问题\n\n- 普通函数中，`this` 指向 `window`\n- 构造函数中，`this` 指向实例化对象\n- 对象函数中，`this` 指向当前的对象\n- 事件函数中，`this` 指向事件源\n\n```js\n// this 指向\n// 普通函数,指向 window\nfunction f1() {\n  console.log(this);\n}\nf1();\n\n// 2.构造函数,指向实例对象\nfunction Person(name = \"lisi\") {\n  this.name = name;\n  console.log(this);\n}\nvar p = new Person(\"666\");\n\n// 3. 对象函数,this\nvar pp = {\n  name: \"777\",\n  func: function () {\n    console.log(this);\n  },\n};\npp.func();\n\n// 4. 事件函数指向事件源\ndocument.getElementsByTagName(\"button\")[0].onclick = function () {\n  console.log(this);\n};\n```\n\n## InnerText\n\n能用 `switch` 语句实现的就一定可以使用 `if` 实现，但是反之不一定，如果是区间范围就采用 `if`，如果是等值判断使用 `switch`\n返回被选元素的文本内容\n\n```js\nvar p1 = document.getElementById(\"p1\");\nconsole.log(p1.innerText);\n\n//设置被选元素的文本内容;\nbtn1.onclick = function () {\n  p1.innerText = \"文本改变了哈\"; // 设置文本\n  console.log(p1.innerText);\n};\n```\n\n**案例**\n\n```html\n<script>\n  //   window.onload = function () {\n  //     document.querySelector(\"#div\").onclick = function () {\n  //       alert(\"666\");\n  //     };\n  //   };\n</script>\n<body>\n  <button id=\"div\" onclick=\"fun()\">IDdiv</button>\n  <div class=\"div\">div</div>\n  <div class=\"div\"></div>\n  <div class=\"div\"></div>\n  <div class=\"div\"></div>\n  <form action=\"\">\n    <input type=\"text\" name=\"input\" id=\"\" />\n  </form>\n  <button class=\"submit\">按钮</button>\n  <img\n    src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/tusiji.png\"\n    alt=\"\"\n    width=\"200\"\n  />\n  <script>\n    // 根据 id 获取元素\n    console.log(document.getElementById(\"div\"));\n\n    // 通过类名获取元素\n    console.log(document.getElementsByClassName(\"div\"));\n    console.log(document.getElementsByClassName(\"div\")[0]);\n    var divs = document.getElementsByClassName(\"div\");\n    for (var i = 0; i < divs.length; i++) {\n      console.log(divs[i]);\n    }\n\n    // 通过标签名获取元素\n    console.log(document.getElementsByTagName(\"div\")[0]);\n\n    // 通过name名获取元素\n    console.log(document.getElementsByName(\"input\")[0]);\n\n    // 通过选择器的querySelector获取元素\n    console.log(document.querySelector(\"#div\"));\n\n    console.log(document.querySelector(\".div\"));\n\n    // 通过选择器的querySelectorAll获取元素\n    console.log(document.querySelectorAll(\".div\")[0]);\n\n    document.querySelector(\".submit\").onclick = function () {\n      console.log(\"666\");\n    };\n    function fun() {\n      alert(\"fun\");\n    }\n    document.querySelectorAll(\"div\")[0].innerText = \"div666\";\n\n    document.querySelectorAll(\"div\")[1].innerHTML = \"<h1>h1</h1>\";\n\n    document.querySelector(\"img\").width = 240;\n  </script>\n  <script src=\"./script.js\"></script>\n</body>\n```\n\n**作业**\n\n```js\n// 作业1：利用className属性来完成开关灯效果\nvar islight = true;\ndocument.querySelector(\".toggle\").onclick = function () {\n  if (islight) {\n    document.querySelector(\"body\").className = \"dark\";\n    this.innerText = \"开灯\";\n    islight = !islight;\n  } else {\n    document.querySelector(\"body\").className = \"light\";\n    this.innerText = \"关灯\";\n    islight = !islight;\n  }\n};\n\n// 作业2：显示和隐藏元素\nvar display = true;\ndocument.querySelector(\".ctrl\").onclick = function () {\n  if (display) {\n    document.querySelector(\"div\").style.display = \"none\";\n    display = !display;\n  } else {\n    document.querySelector(\"div\").style.display = \"block\";\n    display = !display;\n  }\n};\n\n//  作业3：单击按钮利用类名设置元素隔行换色;\ndocument.querySelector(\".zebracolor\").onclick = function () {\n  var lis = document.querySelectorAll(\"li\");\n  for (var i = 0; i < lis.length; i++) {\n    if (i % 2 == 0) {\n      lis[i].className = \"dark\";\n    } else {\n      lis[i].className = \"light\";\n    }\n  }\n};\n```\n\n# 属性操作与事件\n\n## 画廊\n\n```html\n<style>\n  .preview img {\n    width: 160px;\n  }\n  .red {\n    background-color: red;\n  }\n  .blue {\n    background-color: blue;\n  }\n</style>\n<body>\n  <div class=\"preview\">\n    <img\n      src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/tusiji.png\"\n      alt=\"\"\n    />\n    <img\n      src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/tusiji2.jpeg\"\n      alt=\"\"\n    />\n  </div>\n\n  <div class=\"view\">\n    <img\n      width=\"480\"\n      src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/tusiji.png\"\n      alt=\"\"\n    />\n  </div>\n</body>\n<script>\n  // 画廊\n  var imgList = document.querySelectorAll(\".preview img\");\n  var bigImg = document.querySelector(\".view img\");\n  for (var i = 0; i < imgList.length; i++) {\n    imgList[i].onclick = function () {\n      bigImg.src = this.src;\n    };\n  }\n</script>\n```\n\n## 阻止 a 链接跳转\n\n**三种写法**\n\n### 第一种 ( 缺点: 代码不分离,不符合低耦合,高内聚的规范 )\n\n```html\n<a href=\"https://codehhr.cn\" onclick=\"console.log('666');return false\"> HHR </a>\n```\n\n### 第二种\n\n```html\n<a href=\"https://codehhr.cn\" onclick=\"return func2()\">HHR</a>\n```\n\n```js\nfunction func2() {\n  return false;\n}\n```\n\n### 第三种\n\n直接 `ODM` 操作\n\n```js\ndocument.getElementById(\"link\").onclick = function () {\n  return false;\n};\n```\n\n## 新事件\n\n### 鼠标事件\n\n`onmouseover` 鼠标移入事件：当鼠标指针在元素上方时触发。\n`onmouseout` 鼠标移出事件：在鼠标指针移出元素后触发\n二者搭配使用\n\n```js\nvar dtList = document.querySelectorAll(\"dt\");\nfor (var i = 0; i < dtList.length; i++) {\n  dtList[i].onmouseover = function () {\n    this.style.fontSize = \"20px\";\n  };\n  dtList[i].onmouseout = function () {\n    this.style.fontSize = \"16px\";\n  };\n}\n```\n\n`onmouseenter` 鼠标进入事件：在鼠标指针进入到元素上时触发。\n`onmouseleave` 鼠标离开事件：在鼠标指针离开元素后触发\n\n**`onmouseover` 会冒泡**\n**`onmouseenter` 不会冒泡**\n\n```js\nvar dtList = document.querySelectorAll(\"dt\");\nfor (var i = 0; i < dtList.length; i++) {\n  dtList[i].onmouseenter = function () {\n    this.style.fontSize = \"20px\";\n  };\n  dtList[i].onmouseleave = function () {\n    this.style.fontSize = \"16px\";\n  };\n}\n```\n\n`onfocus` 获取焦点事件：在鼠标光标获取输入框焦点时触发\n`onblur` 失去焦点事件：在鼠标光标失去焦点时触发。\n\n```js\n//获取焦点事件\nuser.onfocus = function () {\n  this.style.border = \"1px solid red\";\n};\n// 失去焦点事件\nuser.onblur = function () {\n  console.log(this.value);\n};\n```\n\n`onclick` 单击事件：在鼠标指针单击时触发\n`ondblclick` 双击事件：在鼠标光标双击时触发。\n\n```js\nbox.ondblclick = function () {\n  this.style.backgroundColor = \"blue\";\n};\n```\n\n### 键盘事件\n\n`onkeydown` : 键盘按下\n`onkeyup` : 键盘抬起\n\n```js\ndocument.getElementById(\"input2\").onkeydown = function () {\n  console.log(\"按下了！！1\");\n};\ndocument.getElementById(\"input2\").onkeyup = function () {\n  console.log(this.value);\n  if (this.value.length != 11) {\n    console.log(\"请输入11位\");\n  }\n};\n```\n\n### 浏览器事件\n\n`onload` : 浏览器加载完成执行\n`onscroll` : 滚动浏览器滚动条时触发\n\n```js\n// 滚动\nwindow.onscroll = function () {\n  console.log(\"滚动 ing\");\n};\n```\n\n## 文本内容属性\n\n### innerText 和 textContent\n\n`textContent` 属性,谷歌,火狐支持,IE8 及以下不支持\n设置标签中的文本内容,应该使用 `innerText` 属性,谷歌,火狐,IE8 都支持\n\n### innerText 和 innerHTML 的区别\n\n`innerText` 设置文本内容\n`innerHTML` 设置富文本\n\n## 元素的属性操作\n\n### 自定义属性\n\n元素除了本身的属性之外可以设置自定义属性\n\n```html\n<div id=\"box1\" class=\"box\" name1=\"div1\">盒子</div>\n```\n\n### 获取属性\n\n`getAttribute(\"属性\")` : 不仅可以获取元素本身的属性的属性值，还可以获取元素自定义的属性的属性值\n\n```js\nconsole.log(document.getElementsByTagName(\"div\")[0].getAttribute(\"name1\"));\n```\n\n### 设置属性\n\n`setAttribute(\"属性的名字\",\"属性的值\")` : 元素的属性的设置:不仅可以设置元素本身的属性，还可以设置元素自定义的属性\n\n```js\ndocument.getElementsByTagName(\"div\")[0].setAttribute(\"name1\", \"newName\");\nconsole.log(document.getElementsByTagName(\"div\")[0].getAttribute(\"name1\"));\n```\n\n**当然也可以添加`class`**\n\n```js\ndocument.getElementById(\"setA\").onclick = function () {\n  document.getElementsByTagName(\"h1\")[0].setAttribute(\"class\", \"blue\");\n};\n```\n\n### 移除属性\n\n`removeAttribute(\"属性\")` : 不仅可以移除元素本身的属性，还可以移除元素自定义的属性\n\n```js\ndocument.getElementById(\"remA\").onclick = function () {\n  document.getElementsByTagName(\"h1\")[0].removeAttribute(\"class\");\n};\n```\n\n## 元素样式设置的几种方式\n\n- `对象.style`\n- `对象.className`\n- `对象.setAttribute(\"style\")`\n- `对象.setAttribute(\"class\")`\n- `对象.style.setProperty(\"CSS 属性\", \"CSS 属性值\")`\n- `对象.style.cssText`\n\n**示例**\n\n```js\n// setAttribute(\"style\",\"\")\ndocument.getElementsByTagName(\"h1\")[1].setAttribute(\"style\", \"color:red\");\n\n// style.setProperty()\ndocument.getElementsByTagName(\"h1\")[1].style.setProperty(\"color\", \"blue\");\n\n// style.cssText=\"\"\ndocument.getElementsByTagName(\"h1\")[1].style.cssText = \"color:red\";\n```\n\n# 节点操作\n\n## 节点类型\n\n**通过 `noteType` 属性可以获取节点的类型**\n\n```js\nconsole.log(document.getElementById(\"nodeDIV\").nodeType); // 标签的节点类型为 1\n\nconsole.log(document.nodeType); // document的节点类型为 9\n\nconsole.log(document.getElementById(\"nodeDIV\").getAttributeNode(\"id\").nodeType); // 属性的节点类型为 2\n\nconsole.log(box1.firstChild.nodeType); // 文本的节点类型为 3,元素的第一个子节点就是文本节点\n```\n\n## 节点名称\n\n**通过 `nodeName` 可以获取元素的节点名称**\n\n```js\nconsole.log(document.getElementById(\"nodeDIV\").nodeName); // 标签的节点名称:大写的标签名\nconsole.log(document.nodeName); // document的节点名称:#document\nconsole.log(document.getElementById(\"nodeDIV\").getAttributeNode(\"id\").nodeName); // 属性的节点名称:属性名\nconsole.log(box1.firstChild.nodeName); // 文本的节点名称:#text\n```\n\n## 节点值\n\n**通过 `nodeValue` 可以获取元素的节点的值**\n\n```js\nconsole.log(document.getElementById(\"nodeDIV\").nodeValue); // 标签的节点值:null\nconsole.log(document.nodeValue); // document的节点值:null\nconsole.log(\n  document.getElementById(\"nodeDIV\").getAttributeNode(\"id\").nodeValue\n); // 属性的节点值:属性值\nconsole.log(document.getElementById(\"nodeDIV\").firstChild.nodeValue); // 文本的节点值:文本的内容\n```\n\n## 节点之间的关系\n\n```js\n// 节点之间的关系\n// 父节点\nconsole.log(document.getElementById(\"d1\").parentNode);\n// 父元素节点\nconsole.log(document.getElementById(\"d1\").parentElement);\n// 子节点--childNode\nconsole.log(document.getElementById(\"dl\").childNodes);\n// 子元素节点--children\nconsole.log(document.getElementById(\"dl\").children);\n// 第一个子节点--firstChild\nconsole.log(document.getElementById(\"d1\").firstChild);\n// firstElementChild\nconsole.log(document.getElementById(\"dl\").firstElementChild);\n// lastChild:\nconsole.log(document.getElementById(\"dl\").lastChild);\n// lastElementChild\nconsole.log(document.getElementById(\"dl\").lastElementChild);\n// 上一个子节点--previousSibling:\nconsole.log(document.getElementById(\"dl\").previousSibling);\n// previousElementSibling\nconsole.log(document.getElementById(\"dl\").previousElementSibling);\n// 下一个子节点 --nextSibling\nconsole.log(document.getElementById(\"dl\").nextSibling);\n// nextElementSibling\nconsole.log(document.getElementById(\"dl\").nextElementSibling);\n```\n\n**总结 :**\n`firstChild`、`lastChild`、`previousSibling`、`nextSibling` 获取到的都是文本，如果没有就是文本节点名称`#text`， `firstElementChild`、`lastElementChild`、`previousElementSibling`、`nextElementSibling` 获取到的都是标签，如果没有就是空\n\n## 插入节点\n\n`insertBefore()` 方法可在已有的子节点前插入一个新的子节点\n\n```html\n<dl id=\"dl\">\n  <dt id=\"d1\">1</dt>\n  <dt id=\"d2\">2</dt>\n  <dt id=\"d3\">3</dt>\n  <dt id=\"d4\">4</dt>\n  <dt id=\"d5\">5</dt>\n</dl>\n```\n\n```js\n// 插入节点\nvar d3 = document.getElementById(\"d3\");\nvar d5 = document.getElementById(\"d5\");\nconsole.log(d3);\nconsole.log(d5);\ndocument.getElementById(\"dl\").insertBefore(d3, d5);\n```\n\n## 创建元素的三种方式\n\n### document.write()\n\n```js\ndocument.write(\"<div>div</div>\");\n```\n\n**弊端** : 只能往 `body` 中添加元素\n\n### innerHTML\n\n```js\ndocument.querySelector(\".box\").innerHTML = \"<h1>666</h1>\";\n```\n\n**弊端** : 在同级下只能添加一种元素，多个会覆盖\n\n### document.createElement()\n\n```js\ndocument.createElement(\"h1\");\nh1.innerHTML = \"666\";\ndocument.querySelector(\".box\").appendChild(h1);\n```\n\n**示例** : 动态创建列表\n\n```html\n<button>按钮</button>\n<div class=\"box\"></div>\n```\n\n```js\n// 点击创建列表\nvar list = [\"A\", \"B\", \"C\", \"D\"];\ndocument.querySelector(\"button\").onclick = function () {\n  var ul = document.createElement(\"ul\");\n  for (var i = 0; i < list.length; i++) {\n    var li = document.createElement(\"li\");\n    li.innerHTML = list[i];\n    ul.appendChild(li);\n    li.onmouseover = function () {\n      this.style.background = \"red\";\n    };\n    li.onmouseout = function () {\n      this.style.background = \"none\";\n    };\n    document.getElementsByClassName(\"box\")[0].appendChild(ul);\n  }\n};\n```\n\n# 事件进阶\n\n## 事件三要素\n\n事件源 : 是指那个元素引发的事件。\n事件类型 : 例如，点击，鼠标划过，按下键盘，获得焦点。\n事件处理程序\n\n## 监听事件\n\n绑定监听事件 `对象.addEventListener( \"事件的类型\" , 事件的处理程序 )`\n\n```js\ndocument\n  .getElementsByClassName(\"box\")[0]\n  .addEventListener(\"click\", function () {\n    console.log(\"666\");\n  });\n```\n\n## 事件对象\n\n任何事件都有内置对象 `event`,事件对象的兼容性写法为\n\n```js\nvar event = event || window.event;\n```\n\n**示例**\n\n```js\ndocument\n  .getElementsByClassName(\"box\")[0]\n  .addEventListener(\"click\", function () {\n    console.log(event);\n  });\n```\n\n## 事件冒泡\n\n```html\n<div>\n  <p></p>\n</div>\n<!-- 这两个元素都绑定了click事件，如果用户点击了p，它在div和p上都触发了click事件 -->\n```\n\n**如何阻止冒泡 ( 存在兼容性 )**\n\n```js\ne.stopPropagation(); // 谷歌和火狐支持;\nwindow.event.cancelBubble = true; // IE特有的, 谷歌支持, 火狐不支持;\n```\n\n# BOM\n\n## BOM 的概念\n\n`BOM` ( Browser Object Model ) 是指浏览器对象模型\n浏览器中的一些操作都可以使用 BOM 的方式进行处理\n\n## BOM 的顶级对象\n\n`window` 是浏览器的顶级对象，当调用 `window` 下的属性和方法时，可以省略 `window`\n\n## 对话框\n\n```js\nalert(); // 消息提示框\nprompt(); // 输入框\nconfirm(); // 确认框\n```\n\n```js\nalert(\"A\");\nconsole.log(prompt(\"请输入\"));\nconsole.log(typeof prompt(\"请输入\")); // String\nconsole.log(confirm(\"Are you sure ?\")); // 确认 返回 true;取消 返回 false\n```\n\n## 加载事件\n\n`onload` 事件会在页面或图像加载完成后立即发生\n\n```js\nwindow.onload = function () {\n  console.log(\"666\");\n};\n```\n\n## Location 对象\n\n```js\n// 跳转\ndocument.querySelector(\"btn1\").onclick = function () {\n  window.location.href = \"https://www.baidu.com\";\n};\n//地址栏上#及后面的内容\nconsole.log(window.location.hash);\n//主机名及端口号\nconsole.log(window.location.host);\n//主机名\nconsole.log(window.location.hostname);\n//文件的路径---相对路径\nconsole.log(window.location.pathname);\n//端口号\nconsole.log(window.location.port);\n//协议\nconsole.log(window.location.protocol);\n//搜索的内容\nconsole.log(window.location.search);\n```\n\n## History 对象\n\n```js\n//前进\ndocument.querySelector(\"btn2\").onclick = function () {\n  window.history.forward();\n};\n//后退\ndocument.querySelector(\"btn\").onclick = function () {\n  window.history.back();\n};\n```\n\n## Navigator 对象\n\n```js\nconsole.log(window.navigator);\nconsole.log(window.navigator.userAgent); // 可以判断用户浏览器的类型;\n```\n\n# 定时器\n\n## setInteval()\n\n`setInterval()` 方法会不停地调用函数,返回定时器 `ID`\n`clearInterval()` 方法可取消由 `setInterval()` 函数设定的定时执行操作。\n`clearInterval()` 方法的参数必须是由 `setInterval()` 返回的 ID 值。\n参数 1 : 函数\n参数 2 : 时间为毫秒 , 1000 毫秒 = 1 秒\n\n**示例**\n\n```js\nvar i = 1;\nvar IntervalId = setInterval(function () {\n  console.log(i);\n  i++;\n  if (i == 10) {\n    clearInterval(IntervalId);\n  }\n}, 1000);\n```\n\n## setTimeout()\n\n用于在指定一段时间后执行一次动作的方法\n参数 1 : 函数\n参数 2 : 时间为毫秒 , 1000 毫秒 = 1 秒\n\n**示例**\n\n```js\nvar timeOutId = setTimeout(function () {\n  console.log(\"666\");\n  clearInterval(timeOutId);\n}, 5000);\n```\n\n# 1 动画\n\n## 定时器案例\n\n### 协议禁止按钮\n\n```html\n<textarea name=\"\" id=\"\" cols=\"30\" rows=\"10\">666</textarea>\n<button class=\"agree\" disabled>同意该协议 (5)</button>\n```\n\n```js\nvar time = 5;\nwindow.onload = function () {\n  var t = setInterval(function () {\n    time--;\n    document.querySelector(\".agree\").innerText = \"同意该协议(\" + time + \")\";\n    if (time == 0) {\n      clearInterval(t);\n      document.querySelector(\".agree\").removeAttribute(\"disabled\");\n      document.querySelector(\".agree\").innerText = \"同意\";\n    }\n  }, 1000);\n};\n```\n\n### 获取验证码按钮倒计时\n\n```html\n<button class=\"code\">点击获取验证码</button>\n```\n\n```js\nvar time2 = 60;\ndocument.querySelector(\".code\").addEventListener(\"click\", function () {\n  var that = this;\n  that.setAttribute(\"disabled\", \"true\");\n  var t2 = setInterval(function () {\n    time2--;\n    that.innerText = time2;\n    if (time2 == 0) {\n      that.removeAttribute(\"disabled\");\n      that.innerText = \"点击获取验证码\";\n      clearInterval(t2);\n    }\n  }, 10);\n});\n```\n\n## js 的动画\n\n### 案例 1： 物体渐变\n\n```html\n<button class=\"opacity\">透明度</button>\n<div class=\"opacityBox\"></div>\n```\n\n```js\n// 改变透明度\nvar opacity = 1;\ndocument.querySelector(\".opacity\").addEventListener(\"click\", function () {\n  var tt = setInterval(function () {\n    opacity -= 0.1;\n    document.querySelector(\".opacityBox\").style.opacity = opacity;\n    if (opacity < 0) {\n      clearInterval(tt);\n    }\n  }, 100);\n});\n```\n\n### 案例 2： 按钮控制 div 宽度的变化\n\n```js\nvar width = 1;\ndocument.querySelector(\".changeWidth\").addEventListener(\"click\", function () {\n  var t3 = setInterval(function () {\n    width += 10;\n    document.querySelector(\".changeWidthBox\").style.width = width;\n    if ((width = 800)) {\n      clearInterval(t3);\n    }\n  }, 100);\n});\n```\n\n### 案例 3： 物体的移动\n\n```js\n// 利用 margin\nvar margin_left = 100;\ndocument.querySelector(\".move\").addEventListener(\"click\", function () {\n  var t4 = setInterval(function () {\n    margin_left += 10;\n    document.querySelector(\".movableBox\").style.marginLeft = margin_left + \"px\";\n    if (margin_left > 800) {\n      clearInterval(t4);\n    }\n  }, 10);\n});\n```\n\n```js\n// 利用 position\n// 父相子绝\nvar left = 0;\ndocument.querySelector(\".toRightButton\").addEventListener(\"click\", function () {\n  var t5 = setInterval(function () {\n    left += 10;\n    document.querySelector(\".toRight\").style.left = left + \"px\";\n    if (left > 800) {\n      clearInterval(t5);\n    }\n  }, 10);\n});\n```\n\n## js 动画的封装\n\n```js\n// 封装\nfunction moveToRight(dom, limit) {\n  var t6 = setInterval(function () {\n    left += 10;\n    dom.style.left = left + \"px\";\n    if (left > limit) {\n      clearInterval(t6);\n    }\n  }, 10);\n}\n```\n\n## offset client scroll\n\n### offset\n\n`offsetLeft`: 获取元素距离最左边的距离：\n\n(1) 如果父元素没有定位，就是距离浏览器最左侧的距离\n(2) 如果父元素有定位，就是距离父元素最左侧的距离\n\n`offsetTop` : 获取元素距离最上边的距离:\n\n(1) 如果父元素没有定位，就是距离浏览器最上侧的距离\n(2) 如果父元素有定位，就是距离父元素最上侧的距离\n\n`offsetWidth` : 获取元素的宽度，包括 `border` 及以内，不包括 `margin`\n`offsetHeight` : 获取元素的高度，包括 `border` 及以内，不包括 `margin`\n`offsetParent` : 获取元素的定位父级元素：\n\n如果元素是 `fixed` 定位，得到 `null`\n没有 `fixed`,也没有定位,得到 `body`\n如果父级元素有定位，得到离他最近的有定位的父级元素\n\n### scroll 系列\n\n`scrollTop` 和 `scrollLeft` : 获得的是内容卷曲的高度和宽度\n\n`scrollWidth` 和 `scrollHeight` : 获得元素的实际宽度和高度，在内容没有超出盒子时，获得的是盒子的内部高度和宽度。内容超出盒子时获得的是内容实际应有的高度和宽度。当盒子内部存在滚动条时，获得的高度和宽度不包括滚动条。\n\n### client 系列\n\n`clientTop` 和 `clientLeft` : 获取上边框和左边框的宽度。\n\n`clientWidth` 和 `clientHeight` : 获取可视范围的宽度高度，即边框内部的，不包括 `border`,包括 `padding` .当盒子内部存在滚动条时，获得的高度和宽度不包括滚动条。\n\n# 未完待续 ...\n","source":"_posts/js/js-api.md","raw":"---\ntitle: Js API\ntop_img: https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg\ndate: 2021-05-19 23:13:26\ncover:\naside:\ntags:\n  - js\n  - javascript\n  - api\ncategories:\n  - js\n---\n\n# DOM 操作\n\n# webapi 介绍\n\n## api 的概念\n\n`API`（ Application Programming Interface , 应用程序编程接口 ）是一些预先定义的函数，目的是提供应用程序与开发人员基于某软件或硬件得以访问一组例程的能力，而又无需访问源码，或理解内部工作机制的细节。例如：`alert()`、 `prompt()`、`log()`、`reverse()`、`getMonths()`\n任何开发语言都有自己的 `API`\n`API` 的特征输入和输出( I/O )\n`API` 的使用方法( `console.log()` )\n\n## webapi 的概念\n\n浏览器提供的一套操作浏览器功能和页面元素的 `API` ( `BOM` 和 `DOM` )\n我们可以通过 `API` 去操作 `DOM` 和 `BOM`\n此处的 web `API` 特指浏览器提供的 `API`(一组方法)，web `API` 在后面的课程中有其它含义\n\n## JavaScript 的组成\n\n![js](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/js/jscontent.png)\n\n# DOM 概念\n\n**了解**\n\n事件基础文档对象模型（Document Object Model，简称 `DOM`），是 W3C 组织推荐的处理可扩展标志语言的标准编程接口。在网页上，组织页面（或文档）的对象被组织在一个树形结构中，用来表示文档中对象的标准模型就称为 `DOM`。Document Object Model 的历史可以追溯至 1990 年代后期微软与 Netscape 的“浏览器大战”，双方为了在 `JavaScript` 与 `JScript` 一决生死，于是大规模的赋予浏览器强大的功能。微软在网页技术上加入了不少专属事物，既有 VBScript、ActiveX、以及微软自家的 DHTML 格式等，使不少网页使用非微软平台及浏览器无法正常显示。DOM 即是当时蕴酿出来的杰作。\n\n`DOM` 又称为文档树模型\n\n![DOM](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/js/dom.jpeg)\n\n文档：一个网页可以称为文档\n节点：网页中的所有内容都是节点（标签、属性、文本、注释等）\n元素：网页中的标签\n属性：标签(元素)的属性\n\n# 模拟文档树结构\n\n![simulationdom](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/js/simulationdom.jpeg)\n\n# 操作 DOM\n\n## 获取元素的方式\n\n### 根据 id 获取元素\n\n```js\nvar div1 = document.getElementById(\"box1\");\n```\n\n### 通过类名获取元素\n\n```js\nvar p1 = document.getElementsByClassName(\"p1\");\nconsole.log(Array.isArray(p1)); //false\nconsole.log(p1.length);\nconsole.log(p1[0]);\nconsole.log(p1[1]);\n```\n\n**伪数组定义**：\n\n1、拥有 `length` 属性，其它属性（索引）为非负整数(对象中的索引会被当做字符串来处理，这里你可以当做是个非负整数串来理解)  \n2、不具有数组所具有的方法\n伪数组，就是像数组一样有  `length`  属性，也有  0、1、2、3  等属性的对象，看起来就像数组一样，但不是数组\n常见的参数的参数 `arguments`，`DOM` 对象列表（比如通过 `document.getElementsByTags` 得到的列表）\n\n### 通过标签名获取元素\n\n```js\nvar tag1 = document.getElementsByTagName(\"div\");\nconsole.log(tag1);\nconsole.log(tag1[0]);\n```\n\n### 通过 name 名获取元素\n\n```js\nvar userList = document.getElementsByName(\"user\");\nconsole.log(userList);\nfor (var i = 0; i < userList.length; i++) {\n  console.log(userList[i]);\n}\n```\n\n### 通过选择器的 querySelector 获取元素\n\n```js\nquerySlector(); // 获取指定选择器的第一个元素，参数就是选择器的名称\nvar div1 = document.querySelector(\".box1\");\nconsole.log(div1);\nvar li1 = document.querySelector(\"ul>li\");\nconsole.log(li1);\nvar user1 = document.querySelector(\"#user1\");\nconsole.log(user1);\n```\n\n### 通过选择器的 querySelectorAll 获取元素\n\n```js\nquerySelectorAll(); // 获取指定选择器的所有的元素，参数就是选择器的名称\nvar boxList = document.querySelectorAll(\".box1\");\nconsole.log(boxList);\nvar listLi = document.querySelectorAll(\"ul li\");\nconsole.log(listLi);\n```\n\n## 事件初识\n\n事件 : 触发-响应机制\n`Event` 接口表示在 `DOM` 中发生的任何事件，一些是用户生成的（例如鼠标或键盘事件），而其他由 `API` 生成。\n\n### 事件三要素\n\n事件源 : 触发(被)事件的元素\n事件类型 : 事件的触发方式(例如鼠标点击或键盘点击)\n事件处理程序 : 事件触发后要执行的代码(函数形式)\n\n### 事件的基本使用\n\n```js\nvar box = document.getElementById(\"box\");\nbox.onclick = function () {\n  console.log(\"代码会在box被点击后执行\");\n};\n```\n\n鼠标单击事件：`onclick` 浏览器加载完成事件：`onload`\n\n### 事件触发的多种写法\n\n`HTML` 内部书写所有\n`HTML` 行内触发方法\n`HTML` 外部书写\n\n## 非表单元素的属性操作\n\n`href`、`title`、`id`、`src`、`className`、`width`、`height` 等等\n\n### 添加 src 属性值显示图片\n\n```js\nimgBox.src = \"images/jie.jpg\";\n```\n\n### 改变图片大小\n\n```js\nimgBox.width = 750;\nimgBox.height = 500;\n```\n\n### 通过 style 改变宽高\n\n```js\nimgBox.style.width = 750 + \"px\";\nimgBox.style.height = 500 + \"px\";\n//通过样式属性设置宽高、位置的属性类型是字符串，需要加上 px\n// 凡是 css 中这个属性是多个单词的写法,在 js 代码中 DOM 操作的时候.把-干掉,后面的单词的首字母大写即可\n```\n\n### 通过类名改变宽度\n\n```js\nimgBox.className = \"imgCl\";\n//className  会覆盖之前设置好的类名！\n```\n\n### 隐藏元素\n\n- `src = \"\"`;\n- `display = none`; 不占位置的\n- `visibility = \"hidden`\"; 占位置\n- `opacity = 0`; 占位置\n\n## 表单元素属性操作\n\n- `value` 用于大部分表单元素的内容获取( `option` 除外)\n- `type` 可以获取 `input` 标签的类型(输入框或复选框等)\n- `disabled` 禁用属性 `checked` 复选框选中属性\n- `selected` 下拉菜单选中属性\n- `checked`\n\n```js\ndocument.querySelector(\"input\").onblur = function () {\n  console.log(this.value, this.type);\n};\n```\n\n## this 的指向问题\n\n- 普通函数中，`this` 指向 `window`\n- 构造函数中，`this` 指向实例化对象\n- 对象函数中，`this` 指向当前的对象\n- 事件函数中，`this` 指向事件源\n\n```js\n// this 指向\n// 普通函数,指向 window\nfunction f1() {\n  console.log(this);\n}\nf1();\n\n// 2.构造函数,指向实例对象\nfunction Person(name = \"lisi\") {\n  this.name = name;\n  console.log(this);\n}\nvar p = new Person(\"666\");\n\n// 3. 对象函数,this\nvar pp = {\n  name: \"777\",\n  func: function () {\n    console.log(this);\n  },\n};\npp.func();\n\n// 4. 事件函数指向事件源\ndocument.getElementsByTagName(\"button\")[0].onclick = function () {\n  console.log(this);\n};\n```\n\n## InnerText\n\n能用 `switch` 语句实现的就一定可以使用 `if` 实现，但是反之不一定，如果是区间范围就采用 `if`，如果是等值判断使用 `switch`\n返回被选元素的文本内容\n\n```js\nvar p1 = document.getElementById(\"p1\");\nconsole.log(p1.innerText);\n\n//设置被选元素的文本内容;\nbtn1.onclick = function () {\n  p1.innerText = \"文本改变了哈\"; // 设置文本\n  console.log(p1.innerText);\n};\n```\n\n**案例**\n\n```html\n<script>\n  //   window.onload = function () {\n  //     document.querySelector(\"#div\").onclick = function () {\n  //       alert(\"666\");\n  //     };\n  //   };\n</script>\n<body>\n  <button id=\"div\" onclick=\"fun()\">IDdiv</button>\n  <div class=\"div\">div</div>\n  <div class=\"div\"></div>\n  <div class=\"div\"></div>\n  <div class=\"div\"></div>\n  <form action=\"\">\n    <input type=\"text\" name=\"input\" id=\"\" />\n  </form>\n  <button class=\"submit\">按钮</button>\n  <img\n    src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/tusiji.png\"\n    alt=\"\"\n    width=\"200\"\n  />\n  <script>\n    // 根据 id 获取元素\n    console.log(document.getElementById(\"div\"));\n\n    // 通过类名获取元素\n    console.log(document.getElementsByClassName(\"div\"));\n    console.log(document.getElementsByClassName(\"div\")[0]);\n    var divs = document.getElementsByClassName(\"div\");\n    for (var i = 0; i < divs.length; i++) {\n      console.log(divs[i]);\n    }\n\n    // 通过标签名获取元素\n    console.log(document.getElementsByTagName(\"div\")[0]);\n\n    // 通过name名获取元素\n    console.log(document.getElementsByName(\"input\")[0]);\n\n    // 通过选择器的querySelector获取元素\n    console.log(document.querySelector(\"#div\"));\n\n    console.log(document.querySelector(\".div\"));\n\n    // 通过选择器的querySelectorAll获取元素\n    console.log(document.querySelectorAll(\".div\")[0]);\n\n    document.querySelector(\".submit\").onclick = function () {\n      console.log(\"666\");\n    };\n    function fun() {\n      alert(\"fun\");\n    }\n    document.querySelectorAll(\"div\")[0].innerText = \"div666\";\n\n    document.querySelectorAll(\"div\")[1].innerHTML = \"<h1>h1</h1>\";\n\n    document.querySelector(\"img\").width = 240;\n  </script>\n  <script src=\"./script.js\"></script>\n</body>\n```\n\n**作业**\n\n```js\n// 作业1：利用className属性来完成开关灯效果\nvar islight = true;\ndocument.querySelector(\".toggle\").onclick = function () {\n  if (islight) {\n    document.querySelector(\"body\").className = \"dark\";\n    this.innerText = \"开灯\";\n    islight = !islight;\n  } else {\n    document.querySelector(\"body\").className = \"light\";\n    this.innerText = \"关灯\";\n    islight = !islight;\n  }\n};\n\n// 作业2：显示和隐藏元素\nvar display = true;\ndocument.querySelector(\".ctrl\").onclick = function () {\n  if (display) {\n    document.querySelector(\"div\").style.display = \"none\";\n    display = !display;\n  } else {\n    document.querySelector(\"div\").style.display = \"block\";\n    display = !display;\n  }\n};\n\n//  作业3：单击按钮利用类名设置元素隔行换色;\ndocument.querySelector(\".zebracolor\").onclick = function () {\n  var lis = document.querySelectorAll(\"li\");\n  for (var i = 0; i < lis.length; i++) {\n    if (i % 2 == 0) {\n      lis[i].className = \"dark\";\n    } else {\n      lis[i].className = \"light\";\n    }\n  }\n};\n```\n\n# 属性操作与事件\n\n## 画廊\n\n```html\n<style>\n  .preview img {\n    width: 160px;\n  }\n  .red {\n    background-color: red;\n  }\n  .blue {\n    background-color: blue;\n  }\n</style>\n<body>\n  <div class=\"preview\">\n    <img\n      src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/tusiji.png\"\n      alt=\"\"\n    />\n    <img\n      src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/tusiji2.jpeg\"\n      alt=\"\"\n    />\n  </div>\n\n  <div class=\"view\">\n    <img\n      width=\"480\"\n      src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/tusiji.png\"\n      alt=\"\"\n    />\n  </div>\n</body>\n<script>\n  // 画廊\n  var imgList = document.querySelectorAll(\".preview img\");\n  var bigImg = document.querySelector(\".view img\");\n  for (var i = 0; i < imgList.length; i++) {\n    imgList[i].onclick = function () {\n      bigImg.src = this.src;\n    };\n  }\n</script>\n```\n\n## 阻止 a 链接跳转\n\n**三种写法**\n\n### 第一种 ( 缺点: 代码不分离,不符合低耦合,高内聚的规范 )\n\n```html\n<a href=\"https://codehhr.cn\" onclick=\"console.log('666');return false\"> HHR </a>\n```\n\n### 第二种\n\n```html\n<a href=\"https://codehhr.cn\" onclick=\"return func2()\">HHR</a>\n```\n\n```js\nfunction func2() {\n  return false;\n}\n```\n\n### 第三种\n\n直接 `ODM` 操作\n\n```js\ndocument.getElementById(\"link\").onclick = function () {\n  return false;\n};\n```\n\n## 新事件\n\n### 鼠标事件\n\n`onmouseover` 鼠标移入事件：当鼠标指针在元素上方时触发。\n`onmouseout` 鼠标移出事件：在鼠标指针移出元素后触发\n二者搭配使用\n\n```js\nvar dtList = document.querySelectorAll(\"dt\");\nfor (var i = 0; i < dtList.length; i++) {\n  dtList[i].onmouseover = function () {\n    this.style.fontSize = \"20px\";\n  };\n  dtList[i].onmouseout = function () {\n    this.style.fontSize = \"16px\";\n  };\n}\n```\n\n`onmouseenter` 鼠标进入事件：在鼠标指针进入到元素上时触发。\n`onmouseleave` 鼠标离开事件：在鼠标指针离开元素后触发\n\n**`onmouseover` 会冒泡**\n**`onmouseenter` 不会冒泡**\n\n```js\nvar dtList = document.querySelectorAll(\"dt\");\nfor (var i = 0; i < dtList.length; i++) {\n  dtList[i].onmouseenter = function () {\n    this.style.fontSize = \"20px\";\n  };\n  dtList[i].onmouseleave = function () {\n    this.style.fontSize = \"16px\";\n  };\n}\n```\n\n`onfocus` 获取焦点事件：在鼠标光标获取输入框焦点时触发\n`onblur` 失去焦点事件：在鼠标光标失去焦点时触发。\n\n```js\n//获取焦点事件\nuser.onfocus = function () {\n  this.style.border = \"1px solid red\";\n};\n// 失去焦点事件\nuser.onblur = function () {\n  console.log(this.value);\n};\n```\n\n`onclick` 单击事件：在鼠标指针单击时触发\n`ondblclick` 双击事件：在鼠标光标双击时触发。\n\n```js\nbox.ondblclick = function () {\n  this.style.backgroundColor = \"blue\";\n};\n```\n\n### 键盘事件\n\n`onkeydown` : 键盘按下\n`onkeyup` : 键盘抬起\n\n```js\ndocument.getElementById(\"input2\").onkeydown = function () {\n  console.log(\"按下了！！1\");\n};\ndocument.getElementById(\"input2\").onkeyup = function () {\n  console.log(this.value);\n  if (this.value.length != 11) {\n    console.log(\"请输入11位\");\n  }\n};\n```\n\n### 浏览器事件\n\n`onload` : 浏览器加载完成执行\n`onscroll` : 滚动浏览器滚动条时触发\n\n```js\n// 滚动\nwindow.onscroll = function () {\n  console.log(\"滚动 ing\");\n};\n```\n\n## 文本内容属性\n\n### innerText 和 textContent\n\n`textContent` 属性,谷歌,火狐支持,IE8 及以下不支持\n设置标签中的文本内容,应该使用 `innerText` 属性,谷歌,火狐,IE8 都支持\n\n### innerText 和 innerHTML 的区别\n\n`innerText` 设置文本内容\n`innerHTML` 设置富文本\n\n## 元素的属性操作\n\n### 自定义属性\n\n元素除了本身的属性之外可以设置自定义属性\n\n```html\n<div id=\"box1\" class=\"box\" name1=\"div1\">盒子</div>\n```\n\n### 获取属性\n\n`getAttribute(\"属性\")` : 不仅可以获取元素本身的属性的属性值，还可以获取元素自定义的属性的属性值\n\n```js\nconsole.log(document.getElementsByTagName(\"div\")[0].getAttribute(\"name1\"));\n```\n\n### 设置属性\n\n`setAttribute(\"属性的名字\",\"属性的值\")` : 元素的属性的设置:不仅可以设置元素本身的属性，还可以设置元素自定义的属性\n\n```js\ndocument.getElementsByTagName(\"div\")[0].setAttribute(\"name1\", \"newName\");\nconsole.log(document.getElementsByTagName(\"div\")[0].getAttribute(\"name1\"));\n```\n\n**当然也可以添加`class`**\n\n```js\ndocument.getElementById(\"setA\").onclick = function () {\n  document.getElementsByTagName(\"h1\")[0].setAttribute(\"class\", \"blue\");\n};\n```\n\n### 移除属性\n\n`removeAttribute(\"属性\")` : 不仅可以移除元素本身的属性，还可以移除元素自定义的属性\n\n```js\ndocument.getElementById(\"remA\").onclick = function () {\n  document.getElementsByTagName(\"h1\")[0].removeAttribute(\"class\");\n};\n```\n\n## 元素样式设置的几种方式\n\n- `对象.style`\n- `对象.className`\n- `对象.setAttribute(\"style\")`\n- `对象.setAttribute(\"class\")`\n- `对象.style.setProperty(\"CSS 属性\", \"CSS 属性值\")`\n- `对象.style.cssText`\n\n**示例**\n\n```js\n// setAttribute(\"style\",\"\")\ndocument.getElementsByTagName(\"h1\")[1].setAttribute(\"style\", \"color:red\");\n\n// style.setProperty()\ndocument.getElementsByTagName(\"h1\")[1].style.setProperty(\"color\", \"blue\");\n\n// style.cssText=\"\"\ndocument.getElementsByTagName(\"h1\")[1].style.cssText = \"color:red\";\n```\n\n# 节点操作\n\n## 节点类型\n\n**通过 `noteType` 属性可以获取节点的类型**\n\n```js\nconsole.log(document.getElementById(\"nodeDIV\").nodeType); // 标签的节点类型为 1\n\nconsole.log(document.nodeType); // document的节点类型为 9\n\nconsole.log(document.getElementById(\"nodeDIV\").getAttributeNode(\"id\").nodeType); // 属性的节点类型为 2\n\nconsole.log(box1.firstChild.nodeType); // 文本的节点类型为 3,元素的第一个子节点就是文本节点\n```\n\n## 节点名称\n\n**通过 `nodeName` 可以获取元素的节点名称**\n\n```js\nconsole.log(document.getElementById(\"nodeDIV\").nodeName); // 标签的节点名称:大写的标签名\nconsole.log(document.nodeName); // document的节点名称:#document\nconsole.log(document.getElementById(\"nodeDIV\").getAttributeNode(\"id\").nodeName); // 属性的节点名称:属性名\nconsole.log(box1.firstChild.nodeName); // 文本的节点名称:#text\n```\n\n## 节点值\n\n**通过 `nodeValue` 可以获取元素的节点的值**\n\n```js\nconsole.log(document.getElementById(\"nodeDIV\").nodeValue); // 标签的节点值:null\nconsole.log(document.nodeValue); // document的节点值:null\nconsole.log(\n  document.getElementById(\"nodeDIV\").getAttributeNode(\"id\").nodeValue\n); // 属性的节点值:属性值\nconsole.log(document.getElementById(\"nodeDIV\").firstChild.nodeValue); // 文本的节点值:文本的内容\n```\n\n## 节点之间的关系\n\n```js\n// 节点之间的关系\n// 父节点\nconsole.log(document.getElementById(\"d1\").parentNode);\n// 父元素节点\nconsole.log(document.getElementById(\"d1\").parentElement);\n// 子节点--childNode\nconsole.log(document.getElementById(\"dl\").childNodes);\n// 子元素节点--children\nconsole.log(document.getElementById(\"dl\").children);\n// 第一个子节点--firstChild\nconsole.log(document.getElementById(\"d1\").firstChild);\n// firstElementChild\nconsole.log(document.getElementById(\"dl\").firstElementChild);\n// lastChild:\nconsole.log(document.getElementById(\"dl\").lastChild);\n// lastElementChild\nconsole.log(document.getElementById(\"dl\").lastElementChild);\n// 上一个子节点--previousSibling:\nconsole.log(document.getElementById(\"dl\").previousSibling);\n// previousElementSibling\nconsole.log(document.getElementById(\"dl\").previousElementSibling);\n// 下一个子节点 --nextSibling\nconsole.log(document.getElementById(\"dl\").nextSibling);\n// nextElementSibling\nconsole.log(document.getElementById(\"dl\").nextElementSibling);\n```\n\n**总结 :**\n`firstChild`、`lastChild`、`previousSibling`、`nextSibling` 获取到的都是文本，如果没有就是文本节点名称`#text`， `firstElementChild`、`lastElementChild`、`previousElementSibling`、`nextElementSibling` 获取到的都是标签，如果没有就是空\n\n## 插入节点\n\n`insertBefore()` 方法可在已有的子节点前插入一个新的子节点\n\n```html\n<dl id=\"dl\">\n  <dt id=\"d1\">1</dt>\n  <dt id=\"d2\">2</dt>\n  <dt id=\"d3\">3</dt>\n  <dt id=\"d4\">4</dt>\n  <dt id=\"d5\">5</dt>\n</dl>\n```\n\n```js\n// 插入节点\nvar d3 = document.getElementById(\"d3\");\nvar d5 = document.getElementById(\"d5\");\nconsole.log(d3);\nconsole.log(d5);\ndocument.getElementById(\"dl\").insertBefore(d3, d5);\n```\n\n## 创建元素的三种方式\n\n### document.write()\n\n```js\ndocument.write(\"<div>div</div>\");\n```\n\n**弊端** : 只能往 `body` 中添加元素\n\n### innerHTML\n\n```js\ndocument.querySelector(\".box\").innerHTML = \"<h1>666</h1>\";\n```\n\n**弊端** : 在同级下只能添加一种元素，多个会覆盖\n\n### document.createElement()\n\n```js\ndocument.createElement(\"h1\");\nh1.innerHTML = \"666\";\ndocument.querySelector(\".box\").appendChild(h1);\n```\n\n**示例** : 动态创建列表\n\n```html\n<button>按钮</button>\n<div class=\"box\"></div>\n```\n\n```js\n// 点击创建列表\nvar list = [\"A\", \"B\", \"C\", \"D\"];\ndocument.querySelector(\"button\").onclick = function () {\n  var ul = document.createElement(\"ul\");\n  for (var i = 0; i < list.length; i++) {\n    var li = document.createElement(\"li\");\n    li.innerHTML = list[i];\n    ul.appendChild(li);\n    li.onmouseover = function () {\n      this.style.background = \"red\";\n    };\n    li.onmouseout = function () {\n      this.style.background = \"none\";\n    };\n    document.getElementsByClassName(\"box\")[0].appendChild(ul);\n  }\n};\n```\n\n# 事件进阶\n\n## 事件三要素\n\n事件源 : 是指那个元素引发的事件。\n事件类型 : 例如，点击，鼠标划过，按下键盘，获得焦点。\n事件处理程序\n\n## 监听事件\n\n绑定监听事件 `对象.addEventListener( \"事件的类型\" , 事件的处理程序 )`\n\n```js\ndocument\n  .getElementsByClassName(\"box\")[0]\n  .addEventListener(\"click\", function () {\n    console.log(\"666\");\n  });\n```\n\n## 事件对象\n\n任何事件都有内置对象 `event`,事件对象的兼容性写法为\n\n```js\nvar event = event || window.event;\n```\n\n**示例**\n\n```js\ndocument\n  .getElementsByClassName(\"box\")[0]\n  .addEventListener(\"click\", function () {\n    console.log(event);\n  });\n```\n\n## 事件冒泡\n\n```html\n<div>\n  <p></p>\n</div>\n<!-- 这两个元素都绑定了click事件，如果用户点击了p，它在div和p上都触发了click事件 -->\n```\n\n**如何阻止冒泡 ( 存在兼容性 )**\n\n```js\ne.stopPropagation(); // 谷歌和火狐支持;\nwindow.event.cancelBubble = true; // IE特有的, 谷歌支持, 火狐不支持;\n```\n\n# BOM\n\n## BOM 的概念\n\n`BOM` ( Browser Object Model ) 是指浏览器对象模型\n浏览器中的一些操作都可以使用 BOM 的方式进行处理\n\n## BOM 的顶级对象\n\n`window` 是浏览器的顶级对象，当调用 `window` 下的属性和方法时，可以省略 `window`\n\n## 对话框\n\n```js\nalert(); // 消息提示框\nprompt(); // 输入框\nconfirm(); // 确认框\n```\n\n```js\nalert(\"A\");\nconsole.log(prompt(\"请输入\"));\nconsole.log(typeof prompt(\"请输入\")); // String\nconsole.log(confirm(\"Are you sure ?\")); // 确认 返回 true;取消 返回 false\n```\n\n## 加载事件\n\n`onload` 事件会在页面或图像加载完成后立即发生\n\n```js\nwindow.onload = function () {\n  console.log(\"666\");\n};\n```\n\n## Location 对象\n\n```js\n// 跳转\ndocument.querySelector(\"btn1\").onclick = function () {\n  window.location.href = \"https://www.baidu.com\";\n};\n//地址栏上#及后面的内容\nconsole.log(window.location.hash);\n//主机名及端口号\nconsole.log(window.location.host);\n//主机名\nconsole.log(window.location.hostname);\n//文件的路径---相对路径\nconsole.log(window.location.pathname);\n//端口号\nconsole.log(window.location.port);\n//协议\nconsole.log(window.location.protocol);\n//搜索的内容\nconsole.log(window.location.search);\n```\n\n## History 对象\n\n```js\n//前进\ndocument.querySelector(\"btn2\").onclick = function () {\n  window.history.forward();\n};\n//后退\ndocument.querySelector(\"btn\").onclick = function () {\n  window.history.back();\n};\n```\n\n## Navigator 对象\n\n```js\nconsole.log(window.navigator);\nconsole.log(window.navigator.userAgent); // 可以判断用户浏览器的类型;\n```\n\n# 定时器\n\n## setInteval()\n\n`setInterval()` 方法会不停地调用函数,返回定时器 `ID`\n`clearInterval()` 方法可取消由 `setInterval()` 函数设定的定时执行操作。\n`clearInterval()` 方法的参数必须是由 `setInterval()` 返回的 ID 值。\n参数 1 : 函数\n参数 2 : 时间为毫秒 , 1000 毫秒 = 1 秒\n\n**示例**\n\n```js\nvar i = 1;\nvar IntervalId = setInterval(function () {\n  console.log(i);\n  i++;\n  if (i == 10) {\n    clearInterval(IntervalId);\n  }\n}, 1000);\n```\n\n## setTimeout()\n\n用于在指定一段时间后执行一次动作的方法\n参数 1 : 函数\n参数 2 : 时间为毫秒 , 1000 毫秒 = 1 秒\n\n**示例**\n\n```js\nvar timeOutId = setTimeout(function () {\n  console.log(\"666\");\n  clearInterval(timeOutId);\n}, 5000);\n```\n\n# 1 动画\n\n## 定时器案例\n\n### 协议禁止按钮\n\n```html\n<textarea name=\"\" id=\"\" cols=\"30\" rows=\"10\">666</textarea>\n<button class=\"agree\" disabled>同意该协议 (5)</button>\n```\n\n```js\nvar time = 5;\nwindow.onload = function () {\n  var t = setInterval(function () {\n    time--;\n    document.querySelector(\".agree\").innerText = \"同意该协议(\" + time + \")\";\n    if (time == 0) {\n      clearInterval(t);\n      document.querySelector(\".agree\").removeAttribute(\"disabled\");\n      document.querySelector(\".agree\").innerText = \"同意\";\n    }\n  }, 1000);\n};\n```\n\n### 获取验证码按钮倒计时\n\n```html\n<button class=\"code\">点击获取验证码</button>\n```\n\n```js\nvar time2 = 60;\ndocument.querySelector(\".code\").addEventListener(\"click\", function () {\n  var that = this;\n  that.setAttribute(\"disabled\", \"true\");\n  var t2 = setInterval(function () {\n    time2--;\n    that.innerText = time2;\n    if (time2 == 0) {\n      that.removeAttribute(\"disabled\");\n      that.innerText = \"点击获取验证码\";\n      clearInterval(t2);\n    }\n  }, 10);\n});\n```\n\n## js 的动画\n\n### 案例 1： 物体渐变\n\n```html\n<button class=\"opacity\">透明度</button>\n<div class=\"opacityBox\"></div>\n```\n\n```js\n// 改变透明度\nvar opacity = 1;\ndocument.querySelector(\".opacity\").addEventListener(\"click\", function () {\n  var tt = setInterval(function () {\n    opacity -= 0.1;\n    document.querySelector(\".opacityBox\").style.opacity = opacity;\n    if (opacity < 0) {\n      clearInterval(tt);\n    }\n  }, 100);\n});\n```\n\n### 案例 2： 按钮控制 div 宽度的变化\n\n```js\nvar width = 1;\ndocument.querySelector(\".changeWidth\").addEventListener(\"click\", function () {\n  var t3 = setInterval(function () {\n    width += 10;\n    document.querySelector(\".changeWidthBox\").style.width = width;\n    if ((width = 800)) {\n      clearInterval(t3);\n    }\n  }, 100);\n});\n```\n\n### 案例 3： 物体的移动\n\n```js\n// 利用 margin\nvar margin_left = 100;\ndocument.querySelector(\".move\").addEventListener(\"click\", function () {\n  var t4 = setInterval(function () {\n    margin_left += 10;\n    document.querySelector(\".movableBox\").style.marginLeft = margin_left + \"px\";\n    if (margin_left > 800) {\n      clearInterval(t4);\n    }\n  }, 10);\n});\n```\n\n```js\n// 利用 position\n// 父相子绝\nvar left = 0;\ndocument.querySelector(\".toRightButton\").addEventListener(\"click\", function () {\n  var t5 = setInterval(function () {\n    left += 10;\n    document.querySelector(\".toRight\").style.left = left + \"px\";\n    if (left > 800) {\n      clearInterval(t5);\n    }\n  }, 10);\n});\n```\n\n## js 动画的封装\n\n```js\n// 封装\nfunction moveToRight(dom, limit) {\n  var t6 = setInterval(function () {\n    left += 10;\n    dom.style.left = left + \"px\";\n    if (left > limit) {\n      clearInterval(t6);\n    }\n  }, 10);\n}\n```\n\n## offset client scroll\n\n### offset\n\n`offsetLeft`: 获取元素距离最左边的距离：\n\n(1) 如果父元素没有定位，就是距离浏览器最左侧的距离\n(2) 如果父元素有定位，就是距离父元素最左侧的距离\n\n`offsetTop` : 获取元素距离最上边的距离:\n\n(1) 如果父元素没有定位，就是距离浏览器最上侧的距离\n(2) 如果父元素有定位，就是距离父元素最上侧的距离\n\n`offsetWidth` : 获取元素的宽度，包括 `border` 及以内，不包括 `margin`\n`offsetHeight` : 获取元素的高度，包括 `border` 及以内，不包括 `margin`\n`offsetParent` : 获取元素的定位父级元素：\n\n如果元素是 `fixed` 定位，得到 `null`\n没有 `fixed`,也没有定位,得到 `body`\n如果父级元素有定位，得到离他最近的有定位的父级元素\n\n### scroll 系列\n\n`scrollTop` 和 `scrollLeft` : 获得的是内容卷曲的高度和宽度\n\n`scrollWidth` 和 `scrollHeight` : 获得元素的实际宽度和高度，在内容没有超出盒子时，获得的是盒子的内部高度和宽度。内容超出盒子时获得的是内容实际应有的高度和宽度。当盒子内部存在滚动条时，获得的高度和宽度不包括滚动条。\n\n### client 系列\n\n`clientTop` 和 `clientLeft` : 获取上边框和左边框的宽度。\n\n`clientWidth` 和 `clientHeight` : 获取可视范围的宽度高度，即边框内部的，不包括 `border`,包括 `padding` .当盒子内部存在滚动条时，获得的高度和宽度不包括滚动条。\n\n# 未完待续 ...\n","slug":"js/js-api","published":1,"updated":"2021-07-03T03:30:56.544Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cksvxwnnu0024gubq5zsh3jsa","content":"<h1 id=\"DOM-操作\"><a href=\"#DOM-操作\" class=\"headerlink\" title=\"DOM 操作\"></a>DOM 操作</h1><h1 id=\"webapi-介绍\"><a href=\"#webapi-介绍\" class=\"headerlink\" title=\"webapi 介绍\"></a>webapi 介绍</h1><h2 id=\"api-的概念\"><a href=\"#api-的概念\" class=\"headerlink\" title=\"api 的概念\"></a>api 的概念</h2><p><code>API</code>（ Application Programming Interface , 应用程序编程接口 ）是一些预先定义的函数，目的是提供应用程序与开发人员基于某软件或硬件得以访问一组例程的能力，而又无需访问源码，或理解内部工作机制的细节。例如：<code>alert()</code>、 <code>prompt()</code>、<code>log()</code>、<code>reverse()</code>、<code>getMonths()</code><br>任何开发语言都有自己的 <code>API</code><br><code>API</code> 的特征输入和输出( I/O )<br><code>API</code> 的使用方法( <code>console.log()</code> )</p>\n<h2 id=\"webapi-的概念\"><a href=\"#webapi-的概念\" class=\"headerlink\" title=\"webapi 的概念\"></a>webapi 的概念</h2><p>浏览器提供的一套操作浏览器功能和页面元素的 <code>API</code> ( <code>BOM</code> 和 <code>DOM</code> )<br>我们可以通过 <code>API</code> 去操作 <code>DOM</code> 和 <code>BOM</code><br>此处的 web <code>API</code> 特指浏览器提供的 <code>API</code>(一组方法)，web <code>API</code> 在后面的课程中有其它含义</p>\n<h2 id=\"JavaScript-的组成\"><a href=\"#JavaScript-的组成\" class=\"headerlink\" title=\"JavaScript 的组成\"></a>JavaScript 的组成</h2><p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/js/jscontent.png\" alt=\"js\"></p>\n<h1 id=\"DOM-概念\"><a href=\"#DOM-概念\" class=\"headerlink\" title=\"DOM 概念\"></a>DOM 概念</h1><p><strong>了解</strong></p>\n<p>事件基础文档对象模型（Document Object Model，简称 <code>DOM</code>），是 W3C 组织推荐的处理可扩展标志语言的标准编程接口。在网页上，组织页面（或文档）的对象被组织在一个树形结构中，用来表示文档中对象的标准模型就称为 <code>DOM</code>。Document Object Model 的历史可以追溯至 1990 年代后期微软与 Netscape 的“浏览器大战”，双方为了在 <code>JavaScript</code> 与 <code>JScript</code> 一决生死，于是大规模的赋予浏览器强大的功能。微软在网页技术上加入了不少专属事物，既有 VBScript、ActiveX、以及微软自家的 DHTML 格式等，使不少网页使用非微软平台及浏览器无法正常显示。DOM 即是当时蕴酿出来的杰作。</p>\n<p><code>DOM</code> 又称为文档树模型</p>\n<p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/js/dom.jpeg\" alt=\"DOM\"></p>\n<p>文档：一个网页可以称为文档<br>节点：网页中的所有内容都是节点（标签、属性、文本、注释等）<br>元素：网页中的标签<br>属性：标签(元素)的属性</p>\n<h1 id=\"模拟文档树结构\"><a href=\"#模拟文档树结构\" class=\"headerlink\" title=\"模拟文档树结构\"></a>模拟文档树结构</h1><p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/js/simulationdom.jpeg\" alt=\"simulationdom\"></p>\n<h1 id=\"操作-DOM\"><a href=\"#操作-DOM\" class=\"headerlink\" title=\"操作 DOM\"></a>操作 DOM</h1><h2 id=\"获取元素的方式\"><a href=\"#获取元素的方式\" class=\"headerlink\" title=\"获取元素的方式\"></a>获取元素的方式</h2><h3 id=\"根据-id-获取元素\"><a href=\"#根据-id-获取元素\" class=\"headerlink\" title=\"根据 id 获取元素\"></a>根据 id 获取元素</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> div1 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;box1&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"通过类名获取元素\"><a href=\"#通过类名获取元素\" class=\"headerlink\" title=\"通过类名获取元素\"></a>通过类名获取元素</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"built_in\">document</span>.getElementsByClassName(<span class=\"string\">&quot;p1&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Array</span>.isArray(p1)); <span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(p1.length);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(p1[<span class=\"number\">0</span>]);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(p1[<span class=\"number\">1</span>]);</span><br></pre></td></tr></table></figure>\n\n<p><strong>伪数组定义</strong>：</p>\n<p>1、拥有 <code>length</code> 属性，其它属性（索引）为非负整数(对象中的索引会被当做字符串来处理，这里你可以当做是个非负整数串来理解)<br>2、不具有数组所具有的方法<br>伪数组，就是像数组一样有  <code>length</code>  属性，也有  0、1、2、3  等属性的对象，看起来就像数组一样，但不是数组<br>常见的参数的参数 <code>arguments</code>，<code>DOM</code> 对象列表（比如通过 <code>document.getElementsByTags</code> 得到的列表）</p>\n<h3 id=\"通过标签名获取元素\"><a href=\"#通过标签名获取元素\" class=\"headerlink\" title=\"通过标签名获取元素\"></a>通过标签名获取元素</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> tag1 = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&quot;div&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(tag1);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(tag1[<span class=\"number\">0</span>]);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"通过-name-名获取元素\"><a href=\"#通过-name-名获取元素\" class=\"headerlink\" title=\"通过 name 名获取元素\"></a>通过 name 名获取元素</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> userList = <span class=\"built_in\">document</span>.getElementsByName(<span class=\"string\">&quot;user&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(userList);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; userList.length; i++) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(userList[i]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"通过选择器的-querySelector-获取元素\"><a href=\"#通过选择器的-querySelector-获取元素\" class=\"headerlink\" title=\"通过选择器的 querySelector 获取元素\"></a>通过选择器的 querySelector 获取元素</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">querySlector(); <span class=\"comment\">// 获取指定选择器的第一个元素，参数就是选择器的名称</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> div1 = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;.box1&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(div1);</span><br><span class=\"line\"><span class=\"keyword\">var</span> li1 = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;ul&gt;li&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(li1);</span><br><span class=\"line\"><span class=\"keyword\">var</span> user1 = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;#user1&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(user1);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"通过选择器的-querySelectorAll-获取元素\"><a href=\"#通过选择器的-querySelectorAll-获取元素\" class=\"headerlink\" title=\"通过选择器的 querySelectorAll 获取元素\"></a>通过选择器的 querySelectorAll 获取元素</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">querySelectorAll(); <span class=\"comment\">// 获取指定选择器的所有的元素，参数就是选择器的名称</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> boxList = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">&quot;.box1&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(boxList);</span><br><span class=\"line\"><span class=\"keyword\">var</span> listLi = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">&quot;ul li&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(listLi);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"事件初识\"><a href=\"#事件初识\" class=\"headerlink\" title=\"事件初识\"></a>事件初识</h2><p>事件 : 触发-响应机制<br><code>Event</code> 接口表示在 <code>DOM</code> 中发生的任何事件，一些是用户生成的（例如鼠标或键盘事件），而其他由 <code>API</code> 生成。</p>\n<h3 id=\"事件三要素\"><a href=\"#事件三要素\" class=\"headerlink\" title=\"事件三要素\"></a>事件三要素</h3><p>事件源 : 触发(被)事件的元素<br>事件类型 : 事件的触发方式(例如鼠标点击或键盘点击)<br>事件处理程序 : 事件触发后要执行的代码(函数形式)</p>\n<h3 id=\"事件的基本使用\"><a href=\"#事件的基本使用\" class=\"headerlink\" title=\"事件的基本使用\"></a>事件的基本使用</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> box = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;box&quot;</span>);</span><br><span class=\"line\">box.onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;代码会在box被点击后执行&quot;</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>鼠标单击事件：<code>onclick</code> 浏览器加载完成事件：<code>onload</code></p>\n<h3 id=\"事件触发的多种写法\"><a href=\"#事件触发的多种写法\" class=\"headerlink\" title=\"事件触发的多种写法\"></a>事件触发的多种写法</h3><p><code>HTML</code> 内部书写所有<br><code>HTML</code> 行内触发方法<br><code>HTML</code> 外部书写</p>\n<h2 id=\"非表单元素的属性操作\"><a href=\"#非表单元素的属性操作\" class=\"headerlink\" title=\"非表单元素的属性操作\"></a>非表单元素的属性操作</h2><p><code>href</code>、<code>title</code>、<code>id</code>、<code>src</code>、<code>className</code>、<code>width</code>、<code>height</code> 等等</p>\n<h3 id=\"添加-src-属性值显示图片\"><a href=\"#添加-src-属性值显示图片\" class=\"headerlink\" title=\"添加 src 属性值显示图片\"></a>添加 src 属性值显示图片</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">imgBox.src = <span class=\"string\">&quot;images/jie.jpg&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"改变图片大小\"><a href=\"#改变图片大小\" class=\"headerlink\" title=\"改变图片大小\"></a>改变图片大小</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">imgBox.width = <span class=\"number\">750</span>;</span><br><span class=\"line\">imgBox.height = <span class=\"number\">500</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"通过-style-改变宽高\"><a href=\"#通过-style-改变宽高\" class=\"headerlink\" title=\"通过 style 改变宽高\"></a>通过 style 改变宽高</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">imgBox.style.width = <span class=\"number\">750</span> + <span class=\"string\">&quot;px&quot;</span>;</span><br><span class=\"line\">imgBox.style.height = <span class=\"number\">500</span> + <span class=\"string\">&quot;px&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">//通过样式属性设置宽高、位置的属性类型是字符串，需要加上 px</span></span><br><span class=\"line\"><span class=\"comment\">// 凡是 css 中这个属性是多个单词的写法,在 js 代码中 DOM 操作的时候.把-干掉,后面的单词的首字母大写即可</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"通过类名改变宽度\"><a href=\"#通过类名改变宽度\" class=\"headerlink\" title=\"通过类名改变宽度\"></a>通过类名改变宽度</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">imgBox.className = <span class=\"string\">&quot;imgCl&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">//className  会覆盖之前设置好的类名！</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"隐藏元素\"><a href=\"#隐藏元素\" class=\"headerlink\" title=\"隐藏元素\"></a>隐藏元素</h3><ul>\n<li><code>src = &quot;&quot;</code>;</li>\n<li><code>display = none</code>; 不占位置的</li>\n<li><code>visibility = &quot;hidden</code>“; 占位置</li>\n<li><code>opacity = 0</code>; 占位置</li>\n</ul>\n<h2 id=\"表单元素属性操作\"><a href=\"#表单元素属性操作\" class=\"headerlink\" title=\"表单元素属性操作\"></a>表单元素属性操作</h2><ul>\n<li><code>value</code> 用于大部分表单元素的内容获取( <code>option</code> 除外)</li>\n<li><code>type</code> 可以获取 <code>input</code> 标签的类型(输入框或复选框等)</li>\n<li><code>disabled</code> 禁用属性 <code>checked</code> 复选框选中属性</li>\n<li><code>selected</code> 下拉菜单选中属性</li>\n<li><code>checked</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;input&quot;</span>).onblur = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.value, <span class=\"built_in\">this</span>.type);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"this-的指向问题\"><a href=\"#this-的指向问题\" class=\"headerlink\" title=\"this 的指向问题\"></a>this 的指向问题</h2><ul>\n<li>普通函数中，<code>this</code> 指向 <code>window</code></li>\n<li>构造函数中，<code>this</code> 指向实例化对象</li>\n<li>对象函数中，<code>this</code> 指向当前的对象</li>\n<li>事件函数中，<code>this</code> 指向事件源</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// this 指向</span></span><br><span class=\"line\"><span class=\"comment\">// 普通函数,指向 window</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">f1();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2.构造函数,指向实例对象</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name = <span class=\"string\">&quot;lisi&quot;</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Person(<span class=\"string\">&quot;666&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3. 对象函数,this</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> pp = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;777&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">func</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">pp.func();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 4. 事件函数指向事件源</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&quot;button&quot;</span>)[<span class=\"number\">0</span>].onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"InnerText\"><a href=\"#InnerText\" class=\"headerlink\" title=\"InnerText\"></a>InnerText</h2><p>能用 <code>switch</code> 语句实现的就一定可以使用 <code>if</code> 实现，但是反之不一定，如果是区间范围就采用 <code>if</code>，如果是等值判断使用 <code>switch</code><br>返回被选元素的文本内容</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;p1&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(p1.innerText);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//设置被选元素的文本内容;</span></span><br><span class=\"line\">btn1.onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  p1.innerText = <span class=\"string\">&quot;文本改变了哈&quot;</span>; <span class=\"comment\">// 设置文本</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(p1.innerText);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>案例</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"comment\">//   window.onload = function () &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"comment\">//     document.querySelector(&quot;#div&quot;).onclick = function () &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"comment\">//       alert(&quot;666&quot;);</span></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"comment\">//     &#125;;</span></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"comment\">//   &#125;;</span></span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;div&quot;</span> <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;fun()&quot;</span>&gt;</span>IDdiv<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;div&quot;</span>&gt;</span>div<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;div&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;div&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;div&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;input&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;submit&quot;</span>&gt;</span>按钮<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">img</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/tusiji.png&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">alt</span>=<span class=\"string\">&quot;&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">width</span>=<span class=\"string\">&quot;200&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 根据 id 获取元素</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;div&quot;</span>));</span></span><br><span class=\"line\"><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 通过类名获取元素</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>.getElementsByClassName(<span class=\"string\">&quot;div&quot;</span>));</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>.getElementsByClassName(<span class=\"string\">&quot;div&quot;</span>)[<span class=\"number\">0</span>]);</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> divs = <span class=\"built_in\">document</span>.getElementsByClassName(<span class=\"string\">&quot;div&quot;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; divs.length; i++) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">console</span>.log(divs[i]);</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 通过标签名获取元素</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&quot;div&quot;</span>)[<span class=\"number\">0</span>]);</span></span><br><span class=\"line\"><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 通过name名获取元素</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>.getElementsByName(<span class=\"string\">&quot;input&quot;</span>)[<span class=\"number\">0</span>]);</span></span><br><span class=\"line\"><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 通过选择器的querySelector获取元素</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;#div&quot;</span>));</span></span><br><span class=\"line\"><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;.div&quot;</span>));</span></span><br><span class=\"line\"><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 通过选择器的querySelectorAll获取元素</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">&quot;.div&quot;</span>)[<span class=\"number\">0</span>]);</span></span><br><span class=\"line\"><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;.submit&quot;</span>).onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;666&quot;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      alert(<span class=\"string\">&quot;fun&quot;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">&quot;div&quot;</span>)[<span class=\"number\">0</span>].innerText = <span class=\"string\">&quot;div666&quot;</span>;</span></span><br><span class=\"line\"><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">&quot;div&quot;</span>)[<span class=\"number\">1</span>].innerHTML = <span class=\"string\">&quot;&lt;h1&gt;h1&lt;/h1&gt;&quot;</span>;</span></span><br><span class=\"line\"><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;img&quot;</span>).width = <span class=\"number\">240</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">  </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;./script.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>作业</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 作业1：利用className属性来完成开关灯效果</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> islight = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;.toggle&quot;</span>).onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (islight) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;body&quot;</span>).className = <span class=\"string\">&quot;dark&quot;</span>;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.innerText = <span class=\"string\">&quot;开灯&quot;</span>;</span><br><span class=\"line\">    islight = !islight;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;body&quot;</span>).className = <span class=\"string\">&quot;light&quot;</span>;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.innerText = <span class=\"string\">&quot;关灯&quot;</span>;</span><br><span class=\"line\">    islight = !islight;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 作业2：显示和隐藏元素</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> display = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;.ctrl&quot;</span>).onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (display) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;div&quot;</span>).style.display = <span class=\"string\">&quot;none&quot;</span>;</span><br><span class=\"line\">    display = !display;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;div&quot;</span>).style.display = <span class=\"string\">&quot;block&quot;</span>;</span><br><span class=\"line\">    display = !display;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//  作业3：单击按钮利用类名设置元素隔行换色;</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;.zebracolor&quot;</span>).onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> lis = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">&quot;li&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; lis.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i % <span class=\"number\">2</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      lis[i].className = <span class=\"string\">&quot;dark&quot;</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      lis[i].className = <span class=\"string\">&quot;light&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"属性操作与事件\"><a href=\"#属性操作与事件\" class=\"headerlink\" title=\"属性操作与事件\"></a>属性操作与事件</h1><h2 id=\"画廊\"><a href=\"#画廊\" class=\"headerlink\" title=\"画廊\"></a>画廊</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"css\"></span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.preview</span> <span class=\"selector-tag\">img</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"attribute\">width</span>: <span class=\"number\">160px</span>;</span></span><br><span class=\"line\"><span class=\"css\">  &#125;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.red</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"attribute\">background-color</span>: red;</span></span><br><span class=\"line\"><span class=\"css\">  &#125;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.blue</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"attribute\">background-color</span>: blue;</span></span><br><span class=\"line\"><span class=\"css\">  &#125;</span></span><br><span class=\"line\"><span class=\"css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;preview&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/tusiji.png&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">alt</span>=<span class=\"string\">&quot;&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/tusiji2.jpeg&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">alt</span>=<span class=\"string\">&quot;&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;view&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">width</span>=<span class=\"string\">&quot;480&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/tusiji.png&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">alt</span>=<span class=\"string\">&quot;&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"comment\">// 画廊</span></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">var</span> imgList = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">&quot;.preview img&quot;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">var</span> bigImg = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;.view img&quot;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; imgList.length; i++) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    imgList[i].onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      bigImg.src = <span class=\"built_in\">this</span>.src;</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;;</span></span><br><span class=\"line\"><span class=\"javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"阻止-a-链接跳转\"><a href=\"#阻止-a-链接跳转\" class=\"headerlink\" title=\"阻止 a 链接跳转\"></a>阻止 a 链接跳转</h2><p><strong>三种写法</strong></p>\n<h3 id=\"第一种-缺点-代码不分离-不符合低耦合-高内聚的规范\"><a href=\"#第一种-缺点-代码不分离-不符合低耦合-高内聚的规范\" class=\"headerlink\" title=\"第一种 ( 缺点: 代码不分离,不符合低耦合,高内聚的规范 )\"></a>第一种 ( 缺点: 代码不分离,不符合低耦合,高内聚的规范 )</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://codehhr.cn&quot;</span> <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;console.log(&#x27;666&#x27;);return false&quot;</span>&gt;</span> HHR <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"第二种\"><a href=\"#第二种\" class=\"headerlink\" title=\"第二种\"></a>第二种</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://codehhr.cn&quot;</span> <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;return func2()&quot;</span>&gt;</span>HHR<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"第三种\"><a href=\"#第三种\" class=\"headerlink\" title=\"第三种\"></a>第三种</h3><p>直接 <code>ODM</code> 操作</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;link&quot;</span>).onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"新事件\"><a href=\"#新事件\" class=\"headerlink\" title=\"新事件\"></a>新事件</h2><h3 id=\"鼠标事件\"><a href=\"#鼠标事件\" class=\"headerlink\" title=\"鼠标事件\"></a>鼠标事件</h3><p><code>onmouseover</code> 鼠标移入事件：当鼠标指针在元素上方时触发。<br><code>onmouseout</code> 鼠标移出事件：在鼠标指针移出元素后触发<br>二者搭配使用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> dtList = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">&quot;dt&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; dtList.length; i++) &#123;</span><br><span class=\"line\">  dtList[i].onmouseover = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.style.fontSize = <span class=\"string\">&quot;20px&quot;</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  dtList[i].onmouseout = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.style.fontSize = <span class=\"string\">&quot;16px&quot;</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>onmouseenter</code> 鼠标进入事件：在鼠标指针进入到元素上时触发。<br><code>onmouseleave</code> 鼠标离开事件：在鼠标指针离开元素后触发</p>\n<p><strong><code>onmouseover</code> 会冒泡</strong><br><strong><code>onmouseenter</code> 不会冒泡</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> dtList = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">&quot;dt&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; dtList.length; i++) &#123;</span><br><span class=\"line\">  dtList[i].onmouseenter = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.style.fontSize = <span class=\"string\">&quot;20px&quot;</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  dtList[i].onmouseleave = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.style.fontSize = <span class=\"string\">&quot;16px&quot;</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>onfocus</code> 获取焦点事件：在鼠标光标获取输入框焦点时触发<br><code>onblur</code> 失去焦点事件：在鼠标光标失去焦点时触发。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取焦点事件</span></span><br><span class=\"line\">user.onfocus = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.style.border = <span class=\"string\">&quot;1px solid red&quot;</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 失去焦点事件</span></span><br><span class=\"line\">user.onblur = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.value);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><code>onclick</code> 单击事件：在鼠标指针单击时触发<br><code>ondblclick</code> 双击事件：在鼠标光标双击时触发。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">box.ondblclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.style.backgroundColor = <span class=\"string\">&quot;blue&quot;</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"键盘事件\"><a href=\"#键盘事件\" class=\"headerlink\" title=\"键盘事件\"></a>键盘事件</h3><p><code>onkeydown</code> : 键盘按下<br><code>onkeyup</code> : 键盘抬起</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;input2&quot;</span>).onkeydown = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;按下了！！1&quot;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;input2&quot;</span>).onkeyup = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.value);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.value.length != <span class=\"number\">11</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;请输入11位&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"浏览器事件\"><a href=\"#浏览器事件\" class=\"headerlink\" title=\"浏览器事件\"></a>浏览器事件</h3><p><code>onload</code> : 浏览器加载完成执行<br><code>onscroll</code> : 滚动浏览器滚动条时触发</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 滚动</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.onscroll = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;滚动 ing&quot;</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"文本内容属性\"><a href=\"#文本内容属性\" class=\"headerlink\" title=\"文本内容属性\"></a>文本内容属性</h2><h3 id=\"innerText-和-textContent\"><a href=\"#innerText-和-textContent\" class=\"headerlink\" title=\"innerText 和 textContent\"></a>innerText 和 textContent</h3><p><code>textContent</code> 属性,谷歌,火狐支持,IE8 及以下不支持<br>设置标签中的文本内容,应该使用 <code>innerText</code> 属性,谷歌,火狐,IE8 都支持</p>\n<h3 id=\"innerText-和-innerHTML-的区别\"><a href=\"#innerText-和-innerHTML-的区别\" class=\"headerlink\" title=\"innerText 和 innerHTML 的区别\"></a>innerText 和 innerHTML 的区别</h3><p><code>innerText</code> 设置文本内容<br><code>innerHTML</code> 设置富文本</p>\n<h2 id=\"元素的属性操作\"><a href=\"#元素的属性操作\" class=\"headerlink\" title=\"元素的属性操作\"></a>元素的属性操作</h2><h3 id=\"自定义属性\"><a href=\"#自定义属性\" class=\"headerlink\" title=\"自定义属性\"></a>自定义属性</h3><p>元素除了本身的属性之外可以设置自定义属性</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;box1&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span> <span class=\"attr\">name1</span>=<span class=\"string\">&quot;div1&quot;</span>&gt;</span>盒子<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"获取属性\"><a href=\"#获取属性\" class=\"headerlink\" title=\"获取属性\"></a>获取属性</h3><p><code>getAttribute(&quot;属性&quot;)</code> : 不仅可以获取元素本身的属性的属性值，还可以获取元素自定义的属性的属性值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&quot;div&quot;</span>)[<span class=\"number\">0</span>].getAttribute(<span class=\"string\">&quot;name1&quot;</span>));</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"设置属性\"><a href=\"#设置属性\" class=\"headerlink\" title=\"设置属性\"></a>设置属性</h3><p><code>setAttribute(&quot;属性的名字&quot;,&quot;属性的值&quot;)</code> : 元素的属性的设置:不仅可以设置元素本身的属性，还可以设置元素自定义的属性</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&quot;div&quot;</span>)[<span class=\"number\">0</span>].setAttribute(<span class=\"string\">&quot;name1&quot;</span>, <span class=\"string\">&quot;newName&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&quot;div&quot;</span>)[<span class=\"number\">0</span>].getAttribute(<span class=\"string\">&quot;name1&quot;</span>));</span><br></pre></td></tr></table></figure>\n\n<p><strong>当然也可以添加<code>class</code></strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;setA&quot;</span>).onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&quot;h1&quot;</span>)[<span class=\"number\">0</span>].setAttribute(<span class=\"string\">&quot;class&quot;</span>, <span class=\"string\">&quot;blue&quot;</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"移除属性\"><a href=\"#移除属性\" class=\"headerlink\" title=\"移除属性\"></a>移除属性</h3><p><code>removeAttribute(&quot;属性&quot;)</code> : 不仅可以移除元素本身的属性，还可以移除元素自定义的属性</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;remA&quot;</span>).onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&quot;h1&quot;</span>)[<span class=\"number\">0</span>].removeAttribute(<span class=\"string\">&quot;class&quot;</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"元素样式设置的几种方式\"><a href=\"#元素样式设置的几种方式\" class=\"headerlink\" title=\"元素样式设置的几种方式\"></a>元素样式设置的几种方式</h2><ul>\n<li><code>对象.style</code></li>\n<li><code>对象.className</code></li>\n<li><code>对象.setAttribute(&quot;style&quot;)</code></li>\n<li><code>对象.setAttribute(&quot;class&quot;)</code></li>\n<li><code>对象.style.setProperty(&quot;CSS 属性&quot;, &quot;CSS 属性值&quot;)</code></li>\n<li><code>对象.style.cssText</code></li>\n</ul>\n<p><strong>示例</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// setAttribute(&quot;style&quot;,&quot;&quot;)</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&quot;h1&quot;</span>)[<span class=\"number\">1</span>].setAttribute(<span class=\"string\">&quot;style&quot;</span>, <span class=\"string\">&quot;color:red&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// style.setProperty()</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&quot;h1&quot;</span>)[<span class=\"number\">1</span>].style.setProperty(<span class=\"string\">&quot;color&quot;</span>, <span class=\"string\">&quot;blue&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// style.cssText=&quot;&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&quot;h1&quot;</span>)[<span class=\"number\">1</span>].style.cssText = <span class=\"string\">&quot;color:red&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"节点操作\"><a href=\"#节点操作\" class=\"headerlink\" title=\"节点操作\"></a>节点操作</h1><h2 id=\"节点类型\"><a href=\"#节点类型\" class=\"headerlink\" title=\"节点类型\"></a>节点类型</h2><p><strong>通过 <code>noteType</code> 属性可以获取节点的类型</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;nodeDIV&quot;</span>).nodeType); <span class=\"comment\">// 标签的节点类型为 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>.nodeType); <span class=\"comment\">// document的节点类型为 9</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;nodeDIV&quot;</span>).getAttributeNode(<span class=\"string\">&quot;id&quot;</span>).nodeType); <span class=\"comment\">// 属性的节点类型为 2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(box1.firstChild.nodeType); <span class=\"comment\">// 文本的节点类型为 3,元素的第一个子节点就是文本节点</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"节点名称\"><a href=\"#节点名称\" class=\"headerlink\" title=\"节点名称\"></a>节点名称</h2><p><strong>通过 <code>nodeName</code> 可以获取元素的节点名称</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;nodeDIV&quot;</span>).nodeName); <span class=\"comment\">// 标签的节点名称:大写的标签名</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>.nodeName); <span class=\"comment\">// document的节点名称:#document</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;nodeDIV&quot;</span>).getAttributeNode(<span class=\"string\">&quot;id&quot;</span>).nodeName); <span class=\"comment\">// 属性的节点名称:属性名</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(box1.firstChild.nodeName); <span class=\"comment\">// 文本的节点名称:#text</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"节点值\"><a href=\"#节点值\" class=\"headerlink\" title=\"节点值\"></a>节点值</h2><p><strong>通过 <code>nodeValue</code> 可以获取元素的节点的值</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;nodeDIV&quot;</span>).nodeValue); <span class=\"comment\">// 标签的节点值:null</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>.nodeValue); <span class=\"comment\">// document的节点值:null</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;nodeDIV&quot;</span>).getAttributeNode(<span class=\"string\">&quot;id&quot;</span>).nodeValue</span><br><span class=\"line\">); <span class=\"comment\">// 属性的节点值:属性值</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;nodeDIV&quot;</span>).firstChild.nodeValue); <span class=\"comment\">// 文本的节点值:文本的内容</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"节点之间的关系\"><a href=\"#节点之间的关系\" class=\"headerlink\" title=\"节点之间的关系\"></a>节点之间的关系</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 节点之间的关系</span></span><br><span class=\"line\"><span class=\"comment\">// 父节点</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;d1&quot;</span>).parentNode);</span><br><span class=\"line\"><span class=\"comment\">// 父元素节点</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;d1&quot;</span>).parentElement);</span><br><span class=\"line\"><span class=\"comment\">// 子节点--childNode</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;dl&quot;</span>).childNodes);</span><br><span class=\"line\"><span class=\"comment\">// 子元素节点--children</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;dl&quot;</span>).children);</span><br><span class=\"line\"><span class=\"comment\">// 第一个子节点--firstChild</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;d1&quot;</span>).firstChild);</span><br><span class=\"line\"><span class=\"comment\">// firstElementChild</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;dl&quot;</span>).firstElementChild);</span><br><span class=\"line\"><span class=\"comment\">// lastChild:</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;dl&quot;</span>).lastChild);</span><br><span class=\"line\"><span class=\"comment\">// lastElementChild</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;dl&quot;</span>).lastElementChild);</span><br><span class=\"line\"><span class=\"comment\">// 上一个子节点--previousSibling:</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;dl&quot;</span>).previousSibling);</span><br><span class=\"line\"><span class=\"comment\">// previousElementSibling</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;dl&quot;</span>).previousElementSibling);</span><br><span class=\"line\"><span class=\"comment\">// 下一个子节点 --nextSibling</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;dl&quot;</span>).nextSibling);</span><br><span class=\"line\"><span class=\"comment\">// nextElementSibling</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;dl&quot;</span>).nextElementSibling);</span><br></pre></td></tr></table></figure>\n\n<p><strong>总结 :</strong><br><code>firstChild</code>、<code>lastChild</code>、<code>previousSibling</code>、<code>nextSibling</code> 获取到的都是文本，如果没有就是文本节点名称<code>#text</code>， <code>firstElementChild</code>、<code>lastElementChild</code>、<code>previousElementSibling</code>、<code>nextElementSibling</code> 获取到的都是标签，如果没有就是空</p>\n<h2 id=\"插入节点\"><a href=\"#插入节点\" class=\"headerlink\" title=\"插入节点\"></a>插入节点</h2><p><code>insertBefore()</code> 方法可在已有的子节点前插入一个新的子节点</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dl</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;dl&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dt</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;d1&quot;</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">dt</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dt</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;d2&quot;</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">dt</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dt</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;d3&quot;</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">dt</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dt</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;d4&quot;</span>&gt;</span>4<span class=\"tag\">&lt;/<span class=\"name\">dt</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dt</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;d5&quot;</span>&gt;</span>5<span class=\"tag\">&lt;/<span class=\"name\">dt</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dl</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 插入节点</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> d3 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;d3&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> d5 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;d5&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(d3);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(d5);</span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;dl&quot;</span>).insertBefore(d3, d5);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"创建元素的三种方式\"><a href=\"#创建元素的三种方式\" class=\"headerlink\" title=\"创建元素的三种方式\"></a>创建元素的三种方式</h2><h3 id=\"document-write\"><a href=\"#document-write\" class=\"headerlink\" title=\"document.write()\"></a>document.write()</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.write(<span class=\"string\">&quot;&lt;div&gt;div&lt;/div&gt;&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p><strong>弊端</strong> : 只能往 <code>body</code> 中添加元素</p>\n<h3 id=\"innerHTML\"><a href=\"#innerHTML\" class=\"headerlink\" title=\"innerHTML\"></a>innerHTML</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;.box&quot;</span>).innerHTML = <span class=\"string\">&quot;&lt;h1&gt;666&lt;/h1&gt;&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p><strong>弊端</strong> : 在同级下只能添加一种元素，多个会覆盖</p>\n<h3 id=\"document-createElement\"><a href=\"#document-createElement\" class=\"headerlink\" title=\"document.createElement()\"></a>document.createElement()</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.createElement(<span class=\"string\">&quot;h1&quot;</span>);</span><br><span class=\"line\">h1.innerHTML = <span class=\"string\">&quot;666&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;.box&quot;</span>).appendChild(h1);</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例</strong> : 动态创建列表</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>按钮<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 点击创建列表</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> list = [<span class=\"string\">&quot;A&quot;</span>, <span class=\"string\">&quot;B&quot;</span>, <span class=\"string\">&quot;C&quot;</span>, <span class=\"string\">&quot;D&quot;</span>];</span><br><span class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;button&quot;</span>).onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> ul = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&quot;ul&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; list.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> li = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&quot;li&quot;</span>);</span><br><span class=\"line\">    li.innerHTML = list[i];</span><br><span class=\"line\">    ul.appendChild(li);</span><br><span class=\"line\">    li.onmouseover = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.style.background = <span class=\"string\">&quot;red&quot;</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    li.onmouseout = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.style.background = <span class=\"string\">&quot;none&quot;</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.getElementsByClassName(<span class=\"string\">&quot;box&quot;</span>)[<span class=\"number\">0</span>].appendChild(ul);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"事件进阶\"><a href=\"#事件进阶\" class=\"headerlink\" title=\"事件进阶\"></a>事件进阶</h1><h2 id=\"事件三要素-1\"><a href=\"#事件三要素-1\" class=\"headerlink\" title=\"事件三要素\"></a>事件三要素</h2><p>事件源 : 是指那个元素引发的事件。<br>事件类型 : 例如，点击，鼠标划过，按下键盘，获得焦点。<br>事件处理程序</p>\n<h2 id=\"监听事件\"><a href=\"#监听事件\" class=\"headerlink\" title=\"监听事件\"></a>监听事件</h2><p>绑定监听事件 <code>对象.addEventListener( &quot;事件的类型&quot; , 事件的处理程序 )</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span></span><br><span class=\"line\">  .getElementsByClassName(<span class=\"string\">&quot;box&quot;</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">  .addEventListener(<span class=\"string\">&quot;click&quot;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;666&quot;</span>);</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"事件对象\"><a href=\"#事件对象\" class=\"headerlink\" title=\"事件对象\"></a>事件对象</h2><p>任何事件都有内置对象 <code>event</code>,事件对象的兼容性写法为</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> event = event || <span class=\"built_in\">window</span>.event;</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span></span><br><span class=\"line\">  .getElementsByClassName(<span class=\"string\">&quot;box&quot;</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">  .addEventListener(<span class=\"string\">&quot;click&quot;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(event);</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"事件冒泡\"><a href=\"#事件冒泡\" class=\"headerlink\" title=\"事件冒泡\"></a>事件冒泡</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 这两个元素都绑定了click事件，如果用户点击了p，它在div和p上都触发了click事件 --&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>如何阻止冒泡 ( 存在兼容性 )</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">e.stopPropagation(); <span class=\"comment\">// 谷歌和火狐支持;</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.event.cancelBubble = <span class=\"literal\">true</span>; <span class=\"comment\">// IE特有的, 谷歌支持, 火狐不支持;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"BOM\"><a href=\"#BOM\" class=\"headerlink\" title=\"BOM\"></a>BOM</h1><h2 id=\"BOM-的概念\"><a href=\"#BOM-的概念\" class=\"headerlink\" title=\"BOM 的概念\"></a>BOM 的概念</h2><p><code>BOM</code> ( Browser Object Model ) 是指浏览器对象模型<br>浏览器中的一些操作都可以使用 BOM 的方式进行处理</p>\n<h2 id=\"BOM-的顶级对象\"><a href=\"#BOM-的顶级对象\" class=\"headerlink\" title=\"BOM 的顶级对象\"></a>BOM 的顶级对象</h2><p><code>window</code> 是浏览器的顶级对象，当调用 <code>window</code> 下的属性和方法时，可以省略 <code>window</code></p>\n<h2 id=\"对话框\"><a href=\"#对话框\" class=\"headerlink\" title=\"对话框\"></a>对话框</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alert(); <span class=\"comment\">// 消息提示框</span></span><br><span class=\"line\">prompt(); <span class=\"comment\">// 输入框</span></span><br><span class=\"line\">confirm(); <span class=\"comment\">// 确认框</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alert(<span class=\"string\">&quot;A&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(prompt(<span class=\"string\">&quot;请输入&quot;</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> prompt(<span class=\"string\">&quot;请输入&quot;</span>)); <span class=\"comment\">// String</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(confirm(<span class=\"string\">&quot;Are you sure ?&quot;</span>)); <span class=\"comment\">// 确认 返回 true;取消 返回 false</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"加载事件\"><a href=\"#加载事件\" class=\"headerlink\" title=\"加载事件\"></a>加载事件</h2><p><code>onload</code> 事件会在页面或图像加载完成后立即发生</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;666&quot;</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Location-对象\"><a href=\"#Location-对象\" class=\"headerlink\" title=\"Location 对象\"></a>Location 对象</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 跳转</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;btn1&quot;</span>).onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">window</span>.location.href = <span class=\"string\">&quot;https://www.baidu.com&quot;</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//地址栏上#及后面的内容</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">window</span>.location.hash);</span><br><span class=\"line\"><span class=\"comment\">//主机名及端口号</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">window</span>.location.host);</span><br><span class=\"line\"><span class=\"comment\">//主机名</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">window</span>.location.hostname);</span><br><span class=\"line\"><span class=\"comment\">//文件的路径---相对路径</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">window</span>.location.pathname);</span><br><span class=\"line\"><span class=\"comment\">//端口号</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">window</span>.location.port);</span><br><span class=\"line\"><span class=\"comment\">//协议</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">window</span>.location.protocol);</span><br><span class=\"line\"><span class=\"comment\">//搜索的内容</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">window</span>.location.search);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"History-对象\"><a href=\"#History-对象\" class=\"headerlink\" title=\"History 对象\"></a>History 对象</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//前进</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;btn2&quot;</span>).onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">window</span>.history.forward();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//后退</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;btn&quot;</span>).onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">window</span>.history.back();</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Navigator-对象\"><a href=\"#Navigator-对象\" class=\"headerlink\" title=\"Navigator 对象\"></a>Navigator 对象</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">window</span>.navigator);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">window</span>.navigator.userAgent); <span class=\"comment\">// 可以判断用户浏览器的类型;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"定时器\"><a href=\"#定时器\" class=\"headerlink\" title=\"定时器\"></a>定时器</h1><h2 id=\"setInteval\"><a href=\"#setInteval\" class=\"headerlink\" title=\"setInteval()\"></a>setInteval()</h2><p><code>setInterval()</code> 方法会不停地调用函数,返回定时器 <code>ID</code><br><code>clearInterval()</code> 方法可取消由 <code>setInterval()</code> 函数设定的定时执行操作。<br><code>clearInterval()</code> 方法的参数必须是由 <code>setInterval()</code> 返回的 ID 值。<br>参数 1 : 函数<br>参数 2 : 时间为毫秒 , 1000 毫秒 = 1 秒</p>\n<p><strong>示例</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> IntervalId = <span class=\"built_in\">setInterval</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">  i++;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (i == <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">clearInterval</span>(IntervalId);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"setTimeout\"><a href=\"#setTimeout\" class=\"headerlink\" title=\"setTimeout()\"></a>setTimeout()</h2><p>用于在指定一段时间后执行一次动作的方法<br>参数 1 : 函数<br>参数 2 : 时间为毫秒 , 1000 毫秒 = 1 秒</p>\n<p><strong>示例</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> timeOutId = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;666&quot;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">clearInterval</span>(timeOutId);</span><br><span class=\"line\">&#125;, <span class=\"number\">5000</span>);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"1-动画\"><a href=\"#1-动画\" class=\"headerlink\" title=\"1 动画\"></a>1 动画</h1><h2 id=\"定时器案例\"><a href=\"#定时器案例\" class=\"headerlink\" title=\"定时器案例\"></a>定时器案例</h2><h3 id=\"协议禁止按钮\"><a href=\"#协议禁止按钮\" class=\"headerlink\" title=\"协议禁止按钮\"></a>协议禁止按钮</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">textarea</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">cols</span>=<span class=\"string\">&quot;30&quot;</span> <span class=\"attr\">rows</span>=<span class=\"string\">&quot;10&quot;</span>&gt;</span>666<span class=\"tag\">&lt;/<span class=\"name\">textarea</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;agree&quot;</span> <span class=\"attr\">disabled</span>&gt;</span>同意该协议 (5)<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> time = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> t = <span class=\"built_in\">setInterval</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    time--;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;.agree&quot;</span>).innerText = <span class=\"string\">&quot;同意该协议(&quot;</span> + time + <span class=\"string\">&quot;)&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (time == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">clearInterval</span>(t);</span><br><span class=\"line\">      <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;.agree&quot;</span>).removeAttribute(<span class=\"string\">&quot;disabled&quot;</span>);</span><br><span class=\"line\">      <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;.agree&quot;</span>).innerText = <span class=\"string\">&quot;同意&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"获取验证码按钮倒计时\"><a href=\"#获取验证码按钮倒计时\" class=\"headerlink\" title=\"获取验证码按钮倒计时\"></a>获取验证码按钮倒计时</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;code&quot;</span>&gt;</span>点击获取验证码<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> time2 = <span class=\"number\">60</span>;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;.code&quot;</span>).addEventListener(<span class=\"string\">&quot;click&quot;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> that = <span class=\"built_in\">this</span>;</span><br><span class=\"line\">  that.setAttribute(<span class=\"string\">&quot;disabled&quot;</span>, <span class=\"string\">&quot;true&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> t2 = <span class=\"built_in\">setInterval</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    time2--;</span><br><span class=\"line\">    that.innerText = time2;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (time2 == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      that.removeAttribute(<span class=\"string\">&quot;disabled&quot;</span>);</span><br><span class=\"line\">      that.innerText = <span class=\"string\">&quot;点击获取验证码&quot;</span>;</span><br><span class=\"line\">      <span class=\"built_in\">clearInterval</span>(t2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, <span class=\"number\">10</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"js-的动画\"><a href=\"#js-的动画\" class=\"headerlink\" title=\"js 的动画\"></a>js 的动画</h2><h3 id=\"案例-1：-物体渐变\"><a href=\"#案例-1：-物体渐变\" class=\"headerlink\" title=\"案例 1： 物体渐变\"></a>案例 1： 物体渐变</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;opacity&quot;</span>&gt;</span>透明度<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;opacityBox&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 改变透明度</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> opacity = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;.opacity&quot;</span>).addEventListener(<span class=\"string\">&quot;click&quot;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> tt = <span class=\"built_in\">setInterval</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    opacity -= <span class=\"number\">0.1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;.opacityBox&quot;</span>).style.opacity = opacity;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (opacity &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">clearInterval</span>(tt);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, <span class=\"number\">100</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"案例-2：-按钮控制-div-宽度的变化\"><a href=\"#案例-2：-按钮控制-div-宽度的变化\" class=\"headerlink\" title=\"案例 2： 按钮控制 div 宽度的变化\"></a>案例 2： 按钮控制 div 宽度的变化</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> width = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;.changeWidth&quot;</span>).addEventListener(<span class=\"string\">&quot;click&quot;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> t3 = <span class=\"built_in\">setInterval</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    width += <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;.changeWidthBox&quot;</span>).style.width = width;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((width = <span class=\"number\">800</span>)) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">clearInterval</span>(t3);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, <span class=\"number\">100</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"案例-3：-物体的移动\"><a href=\"#案例-3：-物体的移动\" class=\"headerlink\" title=\"案例 3： 物体的移动\"></a>案例 3： 物体的移动</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 利用 margin</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> margin_left = <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;.move&quot;</span>).addEventListener(<span class=\"string\">&quot;click&quot;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> t4 = <span class=\"built_in\">setInterval</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    margin_left += <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;.movableBox&quot;</span>).style.marginLeft = margin_left + <span class=\"string\">&quot;px&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (margin_left &gt; <span class=\"number\">800</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">clearInterval</span>(t4);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, <span class=\"number\">10</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 利用 position</span></span><br><span class=\"line\"><span class=\"comment\">// 父相子绝</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;.toRightButton&quot;</span>).addEventListener(<span class=\"string\">&quot;click&quot;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> t5 = <span class=\"built_in\">setInterval</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    left += <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;.toRight&quot;</span>).style.left = left + <span class=\"string\">&quot;px&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (left &gt; <span class=\"number\">800</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">clearInterval</span>(t5);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, <span class=\"number\">10</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"js-动画的封装\"><a href=\"#js-动画的封装\" class=\"headerlink\" title=\"js 动画的封装\"></a>js 动画的封装</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 封装</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">moveToRight</span>(<span class=\"params\">dom, limit</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> t6 = <span class=\"built_in\">setInterval</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    left += <span class=\"number\">10</span>;</span><br><span class=\"line\">    dom.style.left = left + <span class=\"string\">&quot;px&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (left &gt; limit) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">clearInterval</span>(t6);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, <span class=\"number\">10</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"offset-client-scroll\"><a href=\"#offset-client-scroll\" class=\"headerlink\" title=\"offset client scroll\"></a>offset client scroll</h2><h3 id=\"offset\"><a href=\"#offset\" class=\"headerlink\" title=\"offset\"></a>offset</h3><p><code>offsetLeft</code>: 获取元素距离最左边的距离：</p>\n<p>(1) 如果父元素没有定位，就是距离浏览器最左侧的距离<br>(2) 如果父元素有定位，就是距离父元素最左侧的距离</p>\n<p><code>offsetTop</code> : 获取元素距离最上边的距离:</p>\n<p>(1) 如果父元素没有定位，就是距离浏览器最上侧的距离<br>(2) 如果父元素有定位，就是距离父元素最上侧的距离</p>\n<p><code>offsetWidth</code> : 获取元素的宽度，包括 <code>border</code> 及以内，不包括 <code>margin</code><br><code>offsetHeight</code> : 获取元素的高度，包括 <code>border</code> 及以内，不包括 <code>margin</code><br><code>offsetParent</code> : 获取元素的定位父级元素：</p>\n<p>如果元素是 <code>fixed</code> 定位，得到 <code>null</code><br>没有 <code>fixed</code>,也没有定位,得到 <code>body</code><br>如果父级元素有定位，得到离他最近的有定位的父级元素</p>\n<h3 id=\"scroll-系列\"><a href=\"#scroll-系列\" class=\"headerlink\" title=\"scroll 系列\"></a>scroll 系列</h3><p><code>scrollTop</code> 和 <code>scrollLeft</code> : 获得的是内容卷曲的高度和宽度</p>\n<p><code>scrollWidth</code> 和 <code>scrollHeight</code> : 获得元素的实际宽度和高度，在内容没有超出盒子时，获得的是盒子的内部高度和宽度。内容超出盒子时获得的是内容实际应有的高度和宽度。当盒子内部存在滚动条时，获得的高度和宽度不包括滚动条。</p>\n<h3 id=\"client-系列\"><a href=\"#client-系列\" class=\"headerlink\" title=\"client 系列\"></a>client 系列</h3><p><code>clientTop</code> 和 <code>clientLeft</code> : 获取上边框和左边框的宽度。</p>\n<p><code>clientWidth</code> 和 <code>clientHeight</code> : 获取可视范围的宽度高度，即边框内部的，不包括 <code>border</code>,包括 <code>padding</code> .当盒子内部存在滚动条时，获得的高度和宽度不包括滚动条。</p>\n<h1 id=\"未完待续-…\"><a href=\"#未完待续-…\" class=\"headerlink\" title=\"未完待续 …\"></a>未完待续 …</h1>","site":{"data":{"link":{"class1":{"class_name":"舍友","link_list":{"1":{"name":"codeAntg","link":"https://blog.csdn.net/weixin_44745147","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/fjh.jpg","descr":"那家刀削面不错","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class2":{"class_name":"致谢","link_list":{"1":{"name":"JerrC","link":"https://immyw.com","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/immyw.png","descr":"今日事,今日毕","width":"1px","style":"solid","color":"#60d0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/hexo.svg","descr":"A fast, simple & powerful blog framework","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class3":{"class_name":"友人","link_list":{"1":{"name":"Chester","link":"http://chesterlds.cn","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/chester.jpg","descr":null,"width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Wangs","link":"https://wangsss.cn/","avatar":"https://wangsss.cn/img/avatar.png","descr":"不疯魔，不成活 ~","width":"1px","style":"solid","color":"#9d9d9d","custom":"link_custom1","time":"4s","namecolor":"0094ff","descolor":"#ff9191"}}}}}},"excerpt":"","more":"<h1 id=\"DOM-操作\"><a href=\"#DOM-操作\" class=\"headerlink\" title=\"DOM 操作\"></a>DOM 操作</h1><h1 id=\"webapi-介绍\"><a href=\"#webapi-介绍\" class=\"headerlink\" title=\"webapi 介绍\"></a>webapi 介绍</h1><h2 id=\"api-的概念\"><a href=\"#api-的概念\" class=\"headerlink\" title=\"api 的概念\"></a>api 的概念</h2><p><code>API</code>（ Application Programming Interface , 应用程序编程接口 ）是一些预先定义的函数，目的是提供应用程序与开发人员基于某软件或硬件得以访问一组例程的能力，而又无需访问源码，或理解内部工作机制的细节。例如：<code>alert()</code>、 <code>prompt()</code>、<code>log()</code>、<code>reverse()</code>、<code>getMonths()</code><br>任何开发语言都有自己的 <code>API</code><br><code>API</code> 的特征输入和输出( I/O )<br><code>API</code> 的使用方法( <code>console.log()</code> )</p>\n<h2 id=\"webapi-的概念\"><a href=\"#webapi-的概念\" class=\"headerlink\" title=\"webapi 的概念\"></a>webapi 的概念</h2><p>浏览器提供的一套操作浏览器功能和页面元素的 <code>API</code> ( <code>BOM</code> 和 <code>DOM</code> )<br>我们可以通过 <code>API</code> 去操作 <code>DOM</code> 和 <code>BOM</code><br>此处的 web <code>API</code> 特指浏览器提供的 <code>API</code>(一组方法)，web <code>API</code> 在后面的课程中有其它含义</p>\n<h2 id=\"JavaScript-的组成\"><a href=\"#JavaScript-的组成\" class=\"headerlink\" title=\"JavaScript 的组成\"></a>JavaScript 的组成</h2><p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/js/jscontent.png\" alt=\"js\"></p>\n<h1 id=\"DOM-概念\"><a href=\"#DOM-概念\" class=\"headerlink\" title=\"DOM 概念\"></a>DOM 概念</h1><p><strong>了解</strong></p>\n<p>事件基础文档对象模型（Document Object Model，简称 <code>DOM</code>），是 W3C 组织推荐的处理可扩展标志语言的标准编程接口。在网页上，组织页面（或文档）的对象被组织在一个树形结构中，用来表示文档中对象的标准模型就称为 <code>DOM</code>。Document Object Model 的历史可以追溯至 1990 年代后期微软与 Netscape 的“浏览器大战”，双方为了在 <code>JavaScript</code> 与 <code>JScript</code> 一决生死，于是大规模的赋予浏览器强大的功能。微软在网页技术上加入了不少专属事物，既有 VBScript、ActiveX、以及微软自家的 DHTML 格式等，使不少网页使用非微软平台及浏览器无法正常显示。DOM 即是当时蕴酿出来的杰作。</p>\n<p><code>DOM</code> 又称为文档树模型</p>\n<p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/js/dom.jpeg\" alt=\"DOM\"></p>\n<p>文档：一个网页可以称为文档<br>节点：网页中的所有内容都是节点（标签、属性、文本、注释等）<br>元素：网页中的标签<br>属性：标签(元素)的属性</p>\n<h1 id=\"模拟文档树结构\"><a href=\"#模拟文档树结构\" class=\"headerlink\" title=\"模拟文档树结构\"></a>模拟文档树结构</h1><p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/js/simulationdom.jpeg\" alt=\"simulationdom\"></p>\n<h1 id=\"操作-DOM\"><a href=\"#操作-DOM\" class=\"headerlink\" title=\"操作 DOM\"></a>操作 DOM</h1><h2 id=\"获取元素的方式\"><a href=\"#获取元素的方式\" class=\"headerlink\" title=\"获取元素的方式\"></a>获取元素的方式</h2><h3 id=\"根据-id-获取元素\"><a href=\"#根据-id-获取元素\" class=\"headerlink\" title=\"根据 id 获取元素\"></a>根据 id 获取元素</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> div1 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;box1&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"通过类名获取元素\"><a href=\"#通过类名获取元素\" class=\"headerlink\" title=\"通过类名获取元素\"></a>通过类名获取元素</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"built_in\">document</span>.getElementsByClassName(<span class=\"string\">&quot;p1&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">Array</span>.isArray(p1)); <span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(p1.length);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(p1[<span class=\"number\">0</span>]);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(p1[<span class=\"number\">1</span>]);</span><br></pre></td></tr></table></figure>\n\n<p><strong>伪数组定义</strong>：</p>\n<p>1、拥有 <code>length</code> 属性，其它属性（索引）为非负整数(对象中的索引会被当做字符串来处理，这里你可以当做是个非负整数串来理解)<br>2、不具有数组所具有的方法<br>伪数组，就是像数组一样有  <code>length</code>  属性，也有  0、1、2、3  等属性的对象，看起来就像数组一样，但不是数组<br>常见的参数的参数 <code>arguments</code>，<code>DOM</code> 对象列表（比如通过 <code>document.getElementsByTags</code> 得到的列表）</p>\n<h3 id=\"通过标签名获取元素\"><a href=\"#通过标签名获取元素\" class=\"headerlink\" title=\"通过标签名获取元素\"></a>通过标签名获取元素</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> tag1 = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&quot;div&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(tag1);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(tag1[<span class=\"number\">0</span>]);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"通过-name-名获取元素\"><a href=\"#通过-name-名获取元素\" class=\"headerlink\" title=\"通过 name 名获取元素\"></a>通过 name 名获取元素</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> userList = <span class=\"built_in\">document</span>.getElementsByName(<span class=\"string\">&quot;user&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(userList);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; userList.length; i++) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(userList[i]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"通过选择器的-querySelector-获取元素\"><a href=\"#通过选择器的-querySelector-获取元素\" class=\"headerlink\" title=\"通过选择器的 querySelector 获取元素\"></a>通过选择器的 querySelector 获取元素</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">querySlector(); <span class=\"comment\">// 获取指定选择器的第一个元素，参数就是选择器的名称</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> div1 = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;.box1&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(div1);</span><br><span class=\"line\"><span class=\"keyword\">var</span> li1 = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;ul&gt;li&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(li1);</span><br><span class=\"line\"><span class=\"keyword\">var</span> user1 = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;#user1&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(user1);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"通过选择器的-querySelectorAll-获取元素\"><a href=\"#通过选择器的-querySelectorAll-获取元素\" class=\"headerlink\" title=\"通过选择器的 querySelectorAll 获取元素\"></a>通过选择器的 querySelectorAll 获取元素</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">querySelectorAll(); <span class=\"comment\">// 获取指定选择器的所有的元素，参数就是选择器的名称</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> boxList = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">&quot;.box1&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(boxList);</span><br><span class=\"line\"><span class=\"keyword\">var</span> listLi = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">&quot;ul li&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(listLi);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"事件初识\"><a href=\"#事件初识\" class=\"headerlink\" title=\"事件初识\"></a>事件初识</h2><p>事件 : 触发-响应机制<br><code>Event</code> 接口表示在 <code>DOM</code> 中发生的任何事件，一些是用户生成的（例如鼠标或键盘事件），而其他由 <code>API</code> 生成。</p>\n<h3 id=\"事件三要素\"><a href=\"#事件三要素\" class=\"headerlink\" title=\"事件三要素\"></a>事件三要素</h3><p>事件源 : 触发(被)事件的元素<br>事件类型 : 事件的触发方式(例如鼠标点击或键盘点击)<br>事件处理程序 : 事件触发后要执行的代码(函数形式)</p>\n<h3 id=\"事件的基本使用\"><a href=\"#事件的基本使用\" class=\"headerlink\" title=\"事件的基本使用\"></a>事件的基本使用</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> box = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;box&quot;</span>);</span><br><span class=\"line\">box.onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;代码会在box被点击后执行&quot;</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>鼠标单击事件：<code>onclick</code> 浏览器加载完成事件：<code>onload</code></p>\n<h3 id=\"事件触发的多种写法\"><a href=\"#事件触发的多种写法\" class=\"headerlink\" title=\"事件触发的多种写法\"></a>事件触发的多种写法</h3><p><code>HTML</code> 内部书写所有<br><code>HTML</code> 行内触发方法<br><code>HTML</code> 外部书写</p>\n<h2 id=\"非表单元素的属性操作\"><a href=\"#非表单元素的属性操作\" class=\"headerlink\" title=\"非表单元素的属性操作\"></a>非表单元素的属性操作</h2><p><code>href</code>、<code>title</code>、<code>id</code>、<code>src</code>、<code>className</code>、<code>width</code>、<code>height</code> 等等</p>\n<h3 id=\"添加-src-属性值显示图片\"><a href=\"#添加-src-属性值显示图片\" class=\"headerlink\" title=\"添加 src 属性值显示图片\"></a>添加 src 属性值显示图片</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">imgBox.src = <span class=\"string\">&quot;images/jie.jpg&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"改变图片大小\"><a href=\"#改变图片大小\" class=\"headerlink\" title=\"改变图片大小\"></a>改变图片大小</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">imgBox.width = <span class=\"number\">750</span>;</span><br><span class=\"line\">imgBox.height = <span class=\"number\">500</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"通过-style-改变宽高\"><a href=\"#通过-style-改变宽高\" class=\"headerlink\" title=\"通过 style 改变宽高\"></a>通过 style 改变宽高</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">imgBox.style.width = <span class=\"number\">750</span> + <span class=\"string\">&quot;px&quot;</span>;</span><br><span class=\"line\">imgBox.style.height = <span class=\"number\">500</span> + <span class=\"string\">&quot;px&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">//通过样式属性设置宽高、位置的属性类型是字符串，需要加上 px</span></span><br><span class=\"line\"><span class=\"comment\">// 凡是 css 中这个属性是多个单词的写法,在 js 代码中 DOM 操作的时候.把-干掉,后面的单词的首字母大写即可</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"通过类名改变宽度\"><a href=\"#通过类名改变宽度\" class=\"headerlink\" title=\"通过类名改变宽度\"></a>通过类名改变宽度</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">imgBox.className = <span class=\"string\">&quot;imgCl&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">//className  会覆盖之前设置好的类名！</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"隐藏元素\"><a href=\"#隐藏元素\" class=\"headerlink\" title=\"隐藏元素\"></a>隐藏元素</h3><ul>\n<li><code>src = &quot;&quot;</code>;</li>\n<li><code>display = none</code>; 不占位置的</li>\n<li><code>visibility = &quot;hidden</code>“; 占位置</li>\n<li><code>opacity = 0</code>; 占位置</li>\n</ul>\n<h2 id=\"表单元素属性操作\"><a href=\"#表单元素属性操作\" class=\"headerlink\" title=\"表单元素属性操作\"></a>表单元素属性操作</h2><ul>\n<li><code>value</code> 用于大部分表单元素的内容获取( <code>option</code> 除外)</li>\n<li><code>type</code> 可以获取 <code>input</code> 标签的类型(输入框或复选框等)</li>\n<li><code>disabled</code> 禁用属性 <code>checked</code> 复选框选中属性</li>\n<li><code>selected</code> 下拉菜单选中属性</li>\n<li><code>checked</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;input&quot;</span>).onblur = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.value, <span class=\"built_in\">this</span>.type);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"this-的指向问题\"><a href=\"#this-的指向问题\" class=\"headerlink\" title=\"this 的指向问题\"></a>this 的指向问题</h2><ul>\n<li>普通函数中，<code>this</code> 指向 <code>window</code></li>\n<li>构造函数中，<code>this</code> 指向实例化对象</li>\n<li>对象函数中，<code>this</code> 指向当前的对象</li>\n<li>事件函数中，<code>this</code> 指向事件源</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// this 指向</span></span><br><span class=\"line\"><span class=\"comment\">// 普通函数,指向 window</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">f1();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2.构造函数,指向实例对象</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name = <span class=\"string\">&quot;lisi&quot;</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> p = <span class=\"keyword\">new</span> Person(<span class=\"string\">&quot;666&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3. 对象函数,this</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> pp = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;777&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">func</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">pp.func();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 4. 事件函数指向事件源</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&quot;button&quot;</span>)[<span class=\"number\">0</span>].onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"InnerText\"><a href=\"#InnerText\" class=\"headerlink\" title=\"InnerText\"></a>InnerText</h2><p>能用 <code>switch</code> 语句实现的就一定可以使用 <code>if</code> 实现，但是反之不一定，如果是区间范围就采用 <code>if</code>，如果是等值判断使用 <code>switch</code><br>返回被选元素的文本内容</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;p1&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(p1.innerText);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//设置被选元素的文本内容;</span></span><br><span class=\"line\">btn1.onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  p1.innerText = <span class=\"string\">&quot;文本改变了哈&quot;</span>; <span class=\"comment\">// 设置文本</span></span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(p1.innerText);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><strong>案例</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"comment\">//   window.onload = function () &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"comment\">//     document.querySelector(&quot;#div&quot;).onclick = function () &#123;</span></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"comment\">//       alert(&quot;666&quot;);</span></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"comment\">//     &#125;;</span></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"comment\">//   &#125;;</span></span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;div&quot;</span> <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;fun()&quot;</span>&gt;</span>IDdiv<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;div&quot;</span>&gt;</span>div<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;div&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;div&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;div&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;input&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;submit&quot;</span>&gt;</span>按钮<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">img</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/tusiji.png&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">alt</span>=<span class=\"string\">&quot;&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">width</span>=<span class=\"string\">&quot;200&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 根据 id 获取元素</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;div&quot;</span>));</span></span><br><span class=\"line\"><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 通过类名获取元素</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>.getElementsByClassName(<span class=\"string\">&quot;div&quot;</span>));</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>.getElementsByClassName(<span class=\"string\">&quot;div&quot;</span>)[<span class=\"number\">0</span>]);</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> divs = <span class=\"built_in\">document</span>.getElementsByClassName(<span class=\"string\">&quot;div&quot;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; divs.length; i++) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">console</span>.log(divs[i]);</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 通过标签名获取元素</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&quot;div&quot;</span>)[<span class=\"number\">0</span>]);</span></span><br><span class=\"line\"><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 通过name名获取元素</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>.getElementsByName(<span class=\"string\">&quot;input&quot;</span>)[<span class=\"number\">0</span>]);</span></span><br><span class=\"line\"><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 通过选择器的querySelector获取元素</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;#div&quot;</span>));</span></span><br><span class=\"line\"><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;.div&quot;</span>));</span></span><br><span class=\"line\"><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 通过选择器的querySelectorAll获取元素</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">&quot;.div&quot;</span>)[<span class=\"number\">0</span>]);</span></span><br><span class=\"line\"><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;.submit&quot;</span>).onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;666&quot;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      alert(<span class=\"string\">&quot;fun&quot;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">&quot;div&quot;</span>)[<span class=\"number\">0</span>].innerText = <span class=\"string\">&quot;div666&quot;</span>;</span></span><br><span class=\"line\"><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">&quot;div&quot;</span>)[<span class=\"number\">1</span>].innerHTML = <span class=\"string\">&quot;&lt;h1&gt;h1&lt;/h1&gt;&quot;</span>;</span></span><br><span class=\"line\"><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;img&quot;</span>).width = <span class=\"number\">240</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">  </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;./script.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>作业</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 作业1：利用className属性来完成开关灯效果</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> islight = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;.toggle&quot;</span>).onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (islight) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;body&quot;</span>).className = <span class=\"string\">&quot;dark&quot;</span>;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.innerText = <span class=\"string\">&quot;开灯&quot;</span>;</span><br><span class=\"line\">    islight = !islight;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;body&quot;</span>).className = <span class=\"string\">&quot;light&quot;</span>;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.innerText = <span class=\"string\">&quot;关灯&quot;</span>;</span><br><span class=\"line\">    islight = !islight;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 作业2：显示和隐藏元素</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> display = <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;.ctrl&quot;</span>).onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (display) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;div&quot;</span>).style.display = <span class=\"string\">&quot;none&quot;</span>;</span><br><span class=\"line\">    display = !display;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;div&quot;</span>).style.display = <span class=\"string\">&quot;block&quot;</span>;</span><br><span class=\"line\">    display = !display;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//  作业3：单击按钮利用类名设置元素隔行换色;</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;.zebracolor&quot;</span>).onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> lis = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">&quot;li&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; lis.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (i % <span class=\"number\">2</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      lis[i].className = <span class=\"string\">&quot;dark&quot;</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      lis[i].className = <span class=\"string\">&quot;light&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"属性操作与事件\"><a href=\"#属性操作与事件\" class=\"headerlink\" title=\"属性操作与事件\"></a>属性操作与事件</h1><h2 id=\"画廊\"><a href=\"#画廊\" class=\"headerlink\" title=\"画廊\"></a>画廊</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"css\"></span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.preview</span> <span class=\"selector-tag\">img</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"attribute\">width</span>: <span class=\"number\">160px</span>;</span></span><br><span class=\"line\"><span class=\"css\">  &#125;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.red</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"attribute\">background-color</span>: red;</span></span><br><span class=\"line\"><span class=\"css\">  &#125;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.blue</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"attribute\">background-color</span>: blue;</span></span><br><span class=\"line\"><span class=\"css\">  &#125;</span></span><br><span class=\"line\"><span class=\"css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;preview&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/tusiji.png&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">alt</span>=<span class=\"string\">&quot;&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/tusiji2.jpeg&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">alt</span>=<span class=\"string\">&quot;&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;view&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">img</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">width</span>=<span class=\"string\">&quot;480&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/tusiji.png&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">alt</span>=<span class=\"string\">&quot;&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"comment\">// 画廊</span></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">var</span> imgList = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">&quot;.preview img&quot;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">var</span> bigImg = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;.view img&quot;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; imgList.length; i++) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    imgList[i].onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      bigImg.src = <span class=\"built_in\">this</span>.src;</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;;</span></span><br><span class=\"line\"><span class=\"javascript\">  &#125;</span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"阻止-a-链接跳转\"><a href=\"#阻止-a-链接跳转\" class=\"headerlink\" title=\"阻止 a 链接跳转\"></a>阻止 a 链接跳转</h2><p><strong>三种写法</strong></p>\n<h3 id=\"第一种-缺点-代码不分离-不符合低耦合-高内聚的规范\"><a href=\"#第一种-缺点-代码不分离-不符合低耦合-高内聚的规范\" class=\"headerlink\" title=\"第一种 ( 缺点: 代码不分离,不符合低耦合,高内聚的规范 )\"></a>第一种 ( 缺点: 代码不分离,不符合低耦合,高内聚的规范 )</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://codehhr.cn&quot;</span> <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;console.log(&#x27;666&#x27;);return false&quot;</span>&gt;</span> HHR <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"第二种\"><a href=\"#第二种\" class=\"headerlink\" title=\"第二种\"></a>第二种</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://codehhr.cn&quot;</span> <span class=\"attr\">onclick</span>=<span class=\"string\">&quot;return func2()&quot;</span>&gt;</span>HHR<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"第三种\"><a href=\"#第三种\" class=\"headerlink\" title=\"第三种\"></a>第三种</h3><p>直接 <code>ODM</code> 操作</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;link&quot;</span>).onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"新事件\"><a href=\"#新事件\" class=\"headerlink\" title=\"新事件\"></a>新事件</h2><h3 id=\"鼠标事件\"><a href=\"#鼠标事件\" class=\"headerlink\" title=\"鼠标事件\"></a>鼠标事件</h3><p><code>onmouseover</code> 鼠标移入事件：当鼠标指针在元素上方时触发。<br><code>onmouseout</code> 鼠标移出事件：在鼠标指针移出元素后触发<br>二者搭配使用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> dtList = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">&quot;dt&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; dtList.length; i++) &#123;</span><br><span class=\"line\">  dtList[i].onmouseover = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.style.fontSize = <span class=\"string\">&quot;20px&quot;</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  dtList[i].onmouseout = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.style.fontSize = <span class=\"string\">&quot;16px&quot;</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>onmouseenter</code> 鼠标进入事件：在鼠标指针进入到元素上时触发。<br><code>onmouseleave</code> 鼠标离开事件：在鼠标指针离开元素后触发</p>\n<p><strong><code>onmouseover</code> 会冒泡</strong><br><strong><code>onmouseenter</code> 不会冒泡</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> dtList = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">&quot;dt&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; dtList.length; i++) &#123;</span><br><span class=\"line\">  dtList[i].onmouseenter = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.style.fontSize = <span class=\"string\">&quot;20px&quot;</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  dtList[i].onmouseleave = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.style.fontSize = <span class=\"string\">&quot;16px&quot;</span>;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>onfocus</code> 获取焦点事件：在鼠标光标获取输入框焦点时触发<br><code>onblur</code> 失去焦点事件：在鼠标光标失去焦点时触发。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取焦点事件</span></span><br><span class=\"line\">user.onfocus = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.style.border = <span class=\"string\">&quot;1px solid red&quot;</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 失去焦点事件</span></span><br><span class=\"line\">user.onblur = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.value);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><code>onclick</code> 单击事件：在鼠标指针单击时触发<br><code>ondblclick</code> 双击事件：在鼠标光标双击时触发。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">box.ondblclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.style.backgroundColor = <span class=\"string\">&quot;blue&quot;</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"键盘事件\"><a href=\"#键盘事件\" class=\"headerlink\" title=\"键盘事件\"></a>键盘事件</h3><p><code>onkeydown</code> : 键盘按下<br><code>onkeyup</code> : 键盘抬起</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;input2&quot;</span>).onkeydown = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;按下了！！1&quot;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;input2&quot;</span>).onkeyup = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.value);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.value.length != <span class=\"number\">11</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;请输入11位&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"浏览器事件\"><a href=\"#浏览器事件\" class=\"headerlink\" title=\"浏览器事件\"></a>浏览器事件</h3><p><code>onload</code> : 浏览器加载完成执行<br><code>onscroll</code> : 滚动浏览器滚动条时触发</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 滚动</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.onscroll = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;滚动 ing&quot;</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"文本内容属性\"><a href=\"#文本内容属性\" class=\"headerlink\" title=\"文本内容属性\"></a>文本内容属性</h2><h3 id=\"innerText-和-textContent\"><a href=\"#innerText-和-textContent\" class=\"headerlink\" title=\"innerText 和 textContent\"></a>innerText 和 textContent</h3><p><code>textContent</code> 属性,谷歌,火狐支持,IE8 及以下不支持<br>设置标签中的文本内容,应该使用 <code>innerText</code> 属性,谷歌,火狐,IE8 都支持</p>\n<h3 id=\"innerText-和-innerHTML-的区别\"><a href=\"#innerText-和-innerHTML-的区别\" class=\"headerlink\" title=\"innerText 和 innerHTML 的区别\"></a>innerText 和 innerHTML 的区别</h3><p><code>innerText</code> 设置文本内容<br><code>innerHTML</code> 设置富文本</p>\n<h2 id=\"元素的属性操作\"><a href=\"#元素的属性操作\" class=\"headerlink\" title=\"元素的属性操作\"></a>元素的属性操作</h2><h3 id=\"自定义属性\"><a href=\"#自定义属性\" class=\"headerlink\" title=\"自定义属性\"></a>自定义属性</h3><p>元素除了本身的属性之外可以设置自定义属性</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;box1&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span> <span class=\"attr\">name1</span>=<span class=\"string\">&quot;div1&quot;</span>&gt;</span>盒子<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"获取属性\"><a href=\"#获取属性\" class=\"headerlink\" title=\"获取属性\"></a>获取属性</h3><p><code>getAttribute(&quot;属性&quot;)</code> : 不仅可以获取元素本身的属性的属性值，还可以获取元素自定义的属性的属性值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&quot;div&quot;</span>)[<span class=\"number\">0</span>].getAttribute(<span class=\"string\">&quot;name1&quot;</span>));</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"设置属性\"><a href=\"#设置属性\" class=\"headerlink\" title=\"设置属性\"></a>设置属性</h3><p><code>setAttribute(&quot;属性的名字&quot;,&quot;属性的值&quot;)</code> : 元素的属性的设置:不仅可以设置元素本身的属性，还可以设置元素自定义的属性</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&quot;div&quot;</span>)[<span class=\"number\">0</span>].setAttribute(<span class=\"string\">&quot;name1&quot;</span>, <span class=\"string\">&quot;newName&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&quot;div&quot;</span>)[<span class=\"number\">0</span>].getAttribute(<span class=\"string\">&quot;name1&quot;</span>));</span><br></pre></td></tr></table></figure>\n\n<p><strong>当然也可以添加<code>class</code></strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;setA&quot;</span>).onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&quot;h1&quot;</span>)[<span class=\"number\">0</span>].setAttribute(<span class=\"string\">&quot;class&quot;</span>, <span class=\"string\">&quot;blue&quot;</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"移除属性\"><a href=\"#移除属性\" class=\"headerlink\" title=\"移除属性\"></a>移除属性</h3><p><code>removeAttribute(&quot;属性&quot;)</code> : 不仅可以移除元素本身的属性，还可以移除元素自定义的属性</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;remA&quot;</span>).onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&quot;h1&quot;</span>)[<span class=\"number\">0</span>].removeAttribute(<span class=\"string\">&quot;class&quot;</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"元素样式设置的几种方式\"><a href=\"#元素样式设置的几种方式\" class=\"headerlink\" title=\"元素样式设置的几种方式\"></a>元素样式设置的几种方式</h2><ul>\n<li><code>对象.style</code></li>\n<li><code>对象.className</code></li>\n<li><code>对象.setAttribute(&quot;style&quot;)</code></li>\n<li><code>对象.setAttribute(&quot;class&quot;)</code></li>\n<li><code>对象.style.setProperty(&quot;CSS 属性&quot;, &quot;CSS 属性值&quot;)</code></li>\n<li><code>对象.style.cssText</code></li>\n</ul>\n<p><strong>示例</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// setAttribute(&quot;style&quot;,&quot;&quot;)</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&quot;h1&quot;</span>)[<span class=\"number\">1</span>].setAttribute(<span class=\"string\">&quot;style&quot;</span>, <span class=\"string\">&quot;color:red&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// style.setProperty()</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&quot;h1&quot;</span>)[<span class=\"number\">1</span>].style.setProperty(<span class=\"string\">&quot;color&quot;</span>, <span class=\"string\">&quot;blue&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// style.cssText=&quot;&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&quot;h1&quot;</span>)[<span class=\"number\">1</span>].style.cssText = <span class=\"string\">&quot;color:red&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"节点操作\"><a href=\"#节点操作\" class=\"headerlink\" title=\"节点操作\"></a>节点操作</h1><h2 id=\"节点类型\"><a href=\"#节点类型\" class=\"headerlink\" title=\"节点类型\"></a>节点类型</h2><p><strong>通过 <code>noteType</code> 属性可以获取节点的类型</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;nodeDIV&quot;</span>).nodeType); <span class=\"comment\">// 标签的节点类型为 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>.nodeType); <span class=\"comment\">// document的节点类型为 9</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;nodeDIV&quot;</span>).getAttributeNode(<span class=\"string\">&quot;id&quot;</span>).nodeType); <span class=\"comment\">// 属性的节点类型为 2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(box1.firstChild.nodeType); <span class=\"comment\">// 文本的节点类型为 3,元素的第一个子节点就是文本节点</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"节点名称\"><a href=\"#节点名称\" class=\"headerlink\" title=\"节点名称\"></a>节点名称</h2><p><strong>通过 <code>nodeName</code> 可以获取元素的节点名称</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;nodeDIV&quot;</span>).nodeName); <span class=\"comment\">// 标签的节点名称:大写的标签名</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>.nodeName); <span class=\"comment\">// document的节点名称:#document</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;nodeDIV&quot;</span>).getAttributeNode(<span class=\"string\">&quot;id&quot;</span>).nodeName); <span class=\"comment\">// 属性的节点名称:属性名</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(box1.firstChild.nodeName); <span class=\"comment\">// 文本的节点名称:#text</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"节点值\"><a href=\"#节点值\" class=\"headerlink\" title=\"节点值\"></a>节点值</h2><p><strong>通过 <code>nodeValue</code> 可以获取元素的节点的值</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;nodeDIV&quot;</span>).nodeValue); <span class=\"comment\">// 标签的节点值:null</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>.nodeValue); <span class=\"comment\">// document的节点值:null</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;nodeDIV&quot;</span>).getAttributeNode(<span class=\"string\">&quot;id&quot;</span>).nodeValue</span><br><span class=\"line\">); <span class=\"comment\">// 属性的节点值:属性值</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;nodeDIV&quot;</span>).firstChild.nodeValue); <span class=\"comment\">// 文本的节点值:文本的内容</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"节点之间的关系\"><a href=\"#节点之间的关系\" class=\"headerlink\" title=\"节点之间的关系\"></a>节点之间的关系</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 节点之间的关系</span></span><br><span class=\"line\"><span class=\"comment\">// 父节点</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;d1&quot;</span>).parentNode);</span><br><span class=\"line\"><span class=\"comment\">// 父元素节点</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;d1&quot;</span>).parentElement);</span><br><span class=\"line\"><span class=\"comment\">// 子节点--childNode</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;dl&quot;</span>).childNodes);</span><br><span class=\"line\"><span class=\"comment\">// 子元素节点--children</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;dl&quot;</span>).children);</span><br><span class=\"line\"><span class=\"comment\">// 第一个子节点--firstChild</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;d1&quot;</span>).firstChild);</span><br><span class=\"line\"><span class=\"comment\">// firstElementChild</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;dl&quot;</span>).firstElementChild);</span><br><span class=\"line\"><span class=\"comment\">// lastChild:</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;dl&quot;</span>).lastChild);</span><br><span class=\"line\"><span class=\"comment\">// lastElementChild</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;dl&quot;</span>).lastElementChild);</span><br><span class=\"line\"><span class=\"comment\">// 上一个子节点--previousSibling:</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;dl&quot;</span>).previousSibling);</span><br><span class=\"line\"><span class=\"comment\">// previousElementSibling</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;dl&quot;</span>).previousElementSibling);</span><br><span class=\"line\"><span class=\"comment\">// 下一个子节点 --nextSibling</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;dl&quot;</span>).nextSibling);</span><br><span class=\"line\"><span class=\"comment\">// nextElementSibling</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;dl&quot;</span>).nextElementSibling);</span><br></pre></td></tr></table></figure>\n\n<p><strong>总结 :</strong><br><code>firstChild</code>、<code>lastChild</code>、<code>previousSibling</code>、<code>nextSibling</code> 获取到的都是文本，如果没有就是文本节点名称<code>#text</code>， <code>firstElementChild</code>、<code>lastElementChild</code>、<code>previousElementSibling</code>、<code>nextElementSibling</code> 获取到的都是标签，如果没有就是空</p>\n<h2 id=\"插入节点\"><a href=\"#插入节点\" class=\"headerlink\" title=\"插入节点\"></a>插入节点</h2><p><code>insertBefore()</code> 方法可在已有的子节点前插入一个新的子节点</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dl</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;dl&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dt</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;d1&quot;</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">dt</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dt</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;d2&quot;</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">dt</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dt</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;d3&quot;</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">dt</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dt</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;d4&quot;</span>&gt;</span>4<span class=\"tag\">&lt;/<span class=\"name\">dt</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">dt</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;d5&quot;</span>&gt;</span>5<span class=\"tag\">&lt;/<span class=\"name\">dt</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dl</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 插入节点</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> d3 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;d3&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> d5 = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;d5&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(d3);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(d5);</span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;dl&quot;</span>).insertBefore(d3, d5);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"创建元素的三种方式\"><a href=\"#创建元素的三种方式\" class=\"headerlink\" title=\"创建元素的三种方式\"></a>创建元素的三种方式</h2><h3 id=\"document-write\"><a href=\"#document-write\" class=\"headerlink\" title=\"document.write()\"></a>document.write()</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.write(<span class=\"string\">&quot;&lt;div&gt;div&lt;/div&gt;&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<p><strong>弊端</strong> : 只能往 <code>body</code> 中添加元素</p>\n<h3 id=\"innerHTML\"><a href=\"#innerHTML\" class=\"headerlink\" title=\"innerHTML\"></a>innerHTML</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;.box&quot;</span>).innerHTML = <span class=\"string\">&quot;&lt;h1&gt;666&lt;/h1&gt;&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p><strong>弊端</strong> : 在同级下只能添加一种元素，多个会覆盖</p>\n<h3 id=\"document-createElement\"><a href=\"#document-createElement\" class=\"headerlink\" title=\"document.createElement()\"></a>document.createElement()</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span>.createElement(<span class=\"string\">&quot;h1&quot;</span>);</span><br><span class=\"line\">h1.innerHTML = <span class=\"string\">&quot;666&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;.box&quot;</span>).appendChild(h1);</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例</strong> : 动态创建列表</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>按钮<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 点击创建列表</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> list = [<span class=\"string\">&quot;A&quot;</span>, <span class=\"string\">&quot;B&quot;</span>, <span class=\"string\">&quot;C&quot;</span>, <span class=\"string\">&quot;D&quot;</span>];</span><br><span class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;button&quot;</span>).onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> ul = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&quot;ul&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; list.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> li = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&quot;li&quot;</span>);</span><br><span class=\"line\">    li.innerHTML = list[i];</span><br><span class=\"line\">    ul.appendChild(li);</span><br><span class=\"line\">    li.onmouseover = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.style.background = <span class=\"string\">&quot;red&quot;</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    li.onmouseout = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.style.background = <span class=\"string\">&quot;none&quot;</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.getElementsByClassName(<span class=\"string\">&quot;box&quot;</span>)[<span class=\"number\">0</span>].appendChild(ul);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"事件进阶\"><a href=\"#事件进阶\" class=\"headerlink\" title=\"事件进阶\"></a>事件进阶</h1><h2 id=\"事件三要素-1\"><a href=\"#事件三要素-1\" class=\"headerlink\" title=\"事件三要素\"></a>事件三要素</h2><p>事件源 : 是指那个元素引发的事件。<br>事件类型 : 例如，点击，鼠标划过，按下键盘，获得焦点。<br>事件处理程序</p>\n<h2 id=\"监听事件\"><a href=\"#监听事件\" class=\"headerlink\" title=\"监听事件\"></a>监听事件</h2><p>绑定监听事件 <code>对象.addEventListener( &quot;事件的类型&quot; , 事件的处理程序 )</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span></span><br><span class=\"line\">  .getElementsByClassName(<span class=\"string\">&quot;box&quot;</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">  .addEventListener(<span class=\"string\">&quot;click&quot;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;666&quot;</span>);</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"事件对象\"><a href=\"#事件对象\" class=\"headerlink\" title=\"事件对象\"></a>事件对象</h2><p>任何事件都有内置对象 <code>event</code>,事件对象的兼容性写法为</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> event = event || <span class=\"built_in\">window</span>.event;</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">document</span></span><br><span class=\"line\">  .getElementsByClassName(<span class=\"string\">&quot;box&quot;</span>)[<span class=\"number\">0</span>]</span><br><span class=\"line\">  .addEventListener(<span class=\"string\">&quot;click&quot;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(event);</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"事件冒泡\"><a href=\"#事件冒泡\" class=\"headerlink\" title=\"事件冒泡\"></a>事件冒泡</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 这两个元素都绑定了click事件，如果用户点击了p，它在div和p上都触发了click事件 --&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>如何阻止冒泡 ( 存在兼容性 )</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">e.stopPropagation(); <span class=\"comment\">// 谷歌和火狐支持;</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.event.cancelBubble = <span class=\"literal\">true</span>; <span class=\"comment\">// IE特有的, 谷歌支持, 火狐不支持;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"BOM\"><a href=\"#BOM\" class=\"headerlink\" title=\"BOM\"></a>BOM</h1><h2 id=\"BOM-的概念\"><a href=\"#BOM-的概念\" class=\"headerlink\" title=\"BOM 的概念\"></a>BOM 的概念</h2><p><code>BOM</code> ( Browser Object Model ) 是指浏览器对象模型<br>浏览器中的一些操作都可以使用 BOM 的方式进行处理</p>\n<h2 id=\"BOM-的顶级对象\"><a href=\"#BOM-的顶级对象\" class=\"headerlink\" title=\"BOM 的顶级对象\"></a>BOM 的顶级对象</h2><p><code>window</code> 是浏览器的顶级对象，当调用 <code>window</code> 下的属性和方法时，可以省略 <code>window</code></p>\n<h2 id=\"对话框\"><a href=\"#对话框\" class=\"headerlink\" title=\"对话框\"></a>对话框</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alert(); <span class=\"comment\">// 消息提示框</span></span><br><span class=\"line\">prompt(); <span class=\"comment\">// 输入框</span></span><br><span class=\"line\">confirm(); <span class=\"comment\">// 确认框</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alert(<span class=\"string\">&quot;A&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(prompt(<span class=\"string\">&quot;请输入&quot;</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> prompt(<span class=\"string\">&quot;请输入&quot;</span>)); <span class=\"comment\">// String</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(confirm(<span class=\"string\">&quot;Are you sure ?&quot;</span>)); <span class=\"comment\">// 确认 返回 true;取消 返回 false</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"加载事件\"><a href=\"#加载事件\" class=\"headerlink\" title=\"加载事件\"></a>加载事件</h2><p><code>onload</code> 事件会在页面或图像加载完成后立即发生</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;666&quot;</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Location-对象\"><a href=\"#Location-对象\" class=\"headerlink\" title=\"Location 对象\"></a>Location 对象</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 跳转</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;btn1&quot;</span>).onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">window</span>.location.href = <span class=\"string\">&quot;https://www.baidu.com&quot;</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//地址栏上#及后面的内容</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">window</span>.location.hash);</span><br><span class=\"line\"><span class=\"comment\">//主机名及端口号</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">window</span>.location.host);</span><br><span class=\"line\"><span class=\"comment\">//主机名</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">window</span>.location.hostname);</span><br><span class=\"line\"><span class=\"comment\">//文件的路径---相对路径</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">window</span>.location.pathname);</span><br><span class=\"line\"><span class=\"comment\">//端口号</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">window</span>.location.port);</span><br><span class=\"line\"><span class=\"comment\">//协议</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">window</span>.location.protocol);</span><br><span class=\"line\"><span class=\"comment\">//搜索的内容</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">window</span>.location.search);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"History-对象\"><a href=\"#History-对象\" class=\"headerlink\" title=\"History 对象\"></a>History 对象</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//前进</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;btn2&quot;</span>).onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">window</span>.history.forward();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//后退</span></span><br><span class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;btn&quot;</span>).onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">window</span>.history.back();</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Navigator-对象\"><a href=\"#Navigator-对象\" class=\"headerlink\" title=\"Navigator 对象\"></a>Navigator 对象</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">window</span>.navigator);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">window</span>.navigator.userAgent); <span class=\"comment\">// 可以判断用户浏览器的类型;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"定时器\"><a href=\"#定时器\" class=\"headerlink\" title=\"定时器\"></a>定时器</h1><h2 id=\"setInteval\"><a href=\"#setInteval\" class=\"headerlink\" title=\"setInteval()\"></a>setInteval()</h2><p><code>setInterval()</code> 方法会不停地调用函数,返回定时器 <code>ID</code><br><code>clearInterval()</code> 方法可取消由 <code>setInterval()</code> 函数设定的定时执行操作。<br><code>clearInterval()</code> 方法的参数必须是由 <code>setInterval()</code> 返回的 ID 值。<br>参数 1 : 函数<br>参数 2 : 时间为毫秒 , 1000 毫秒 = 1 秒</p>\n<p><strong>示例</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> IntervalId = <span class=\"built_in\">setInterval</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">  i++;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (i == <span class=\"number\">10</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">clearInterval</span>(IntervalId);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;, <span class=\"number\">1000</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"setTimeout\"><a href=\"#setTimeout\" class=\"headerlink\" title=\"setTimeout()\"></a>setTimeout()</h2><p>用于在指定一段时间后执行一次动作的方法<br>参数 1 : 函数<br>参数 2 : 时间为毫秒 , 1000 毫秒 = 1 秒</p>\n<p><strong>示例</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> timeOutId = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;666&quot;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">clearInterval</span>(timeOutId);</span><br><span class=\"line\">&#125;, <span class=\"number\">5000</span>);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"1-动画\"><a href=\"#1-动画\" class=\"headerlink\" title=\"1 动画\"></a>1 动画</h1><h2 id=\"定时器案例\"><a href=\"#定时器案例\" class=\"headerlink\" title=\"定时器案例\"></a>定时器案例</h2><h3 id=\"协议禁止按钮\"><a href=\"#协议禁止按钮\" class=\"headerlink\" title=\"协议禁止按钮\"></a>协议禁止按钮</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">textarea</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">cols</span>=<span class=\"string\">&quot;30&quot;</span> <span class=\"attr\">rows</span>=<span class=\"string\">&quot;10&quot;</span>&gt;</span>666<span class=\"tag\">&lt;/<span class=\"name\">textarea</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;agree&quot;</span> <span class=\"attr\">disabled</span>&gt;</span>同意该协议 (5)<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> time = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> t = <span class=\"built_in\">setInterval</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    time--;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;.agree&quot;</span>).innerText = <span class=\"string\">&quot;同意该协议(&quot;</span> + time + <span class=\"string\">&quot;)&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (time == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">clearInterval</span>(t);</span><br><span class=\"line\">      <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;.agree&quot;</span>).removeAttribute(<span class=\"string\">&quot;disabled&quot;</span>);</span><br><span class=\"line\">      <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;.agree&quot;</span>).innerText = <span class=\"string\">&quot;同意&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"获取验证码按钮倒计时\"><a href=\"#获取验证码按钮倒计时\" class=\"headerlink\" title=\"获取验证码按钮倒计时\"></a>获取验证码按钮倒计时</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;code&quot;</span>&gt;</span>点击获取验证码<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> time2 = <span class=\"number\">60</span>;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;.code&quot;</span>).addEventListener(<span class=\"string\">&quot;click&quot;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> that = <span class=\"built_in\">this</span>;</span><br><span class=\"line\">  that.setAttribute(<span class=\"string\">&quot;disabled&quot;</span>, <span class=\"string\">&quot;true&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> t2 = <span class=\"built_in\">setInterval</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    time2--;</span><br><span class=\"line\">    that.innerText = time2;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (time2 == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      that.removeAttribute(<span class=\"string\">&quot;disabled&quot;</span>);</span><br><span class=\"line\">      that.innerText = <span class=\"string\">&quot;点击获取验证码&quot;</span>;</span><br><span class=\"line\">      <span class=\"built_in\">clearInterval</span>(t2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, <span class=\"number\">10</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"js-的动画\"><a href=\"#js-的动画\" class=\"headerlink\" title=\"js 的动画\"></a>js 的动画</h2><h3 id=\"案例-1：-物体渐变\"><a href=\"#案例-1：-物体渐变\" class=\"headerlink\" title=\"案例 1： 物体渐变\"></a>案例 1： 物体渐变</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;opacity&quot;</span>&gt;</span>透明度<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;opacityBox&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 改变透明度</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> opacity = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;.opacity&quot;</span>).addEventListener(<span class=\"string\">&quot;click&quot;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> tt = <span class=\"built_in\">setInterval</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    opacity -= <span class=\"number\">0.1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;.opacityBox&quot;</span>).style.opacity = opacity;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (opacity &lt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">clearInterval</span>(tt);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, <span class=\"number\">100</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"案例-2：-按钮控制-div-宽度的变化\"><a href=\"#案例-2：-按钮控制-div-宽度的变化\" class=\"headerlink\" title=\"案例 2： 按钮控制 div 宽度的变化\"></a>案例 2： 按钮控制 div 宽度的变化</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> width = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;.changeWidth&quot;</span>).addEventListener(<span class=\"string\">&quot;click&quot;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> t3 = <span class=\"built_in\">setInterval</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    width += <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;.changeWidthBox&quot;</span>).style.width = width;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ((width = <span class=\"number\">800</span>)) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">clearInterval</span>(t3);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, <span class=\"number\">100</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"案例-3：-物体的移动\"><a href=\"#案例-3：-物体的移动\" class=\"headerlink\" title=\"案例 3： 物体的移动\"></a>案例 3： 物体的移动</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 利用 margin</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> margin_left = <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;.move&quot;</span>).addEventListener(<span class=\"string\">&quot;click&quot;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> t4 = <span class=\"built_in\">setInterval</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    margin_left += <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;.movableBox&quot;</span>).style.marginLeft = margin_left + <span class=\"string\">&quot;px&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (margin_left &gt; <span class=\"number\">800</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">clearInterval</span>(t4);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, <span class=\"number\">10</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 利用 position</span></span><br><span class=\"line\"><span class=\"comment\">// 父相子绝</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> left = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;.toRightButton&quot;</span>).addEventListener(<span class=\"string\">&quot;click&quot;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> t5 = <span class=\"built_in\">setInterval</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    left += <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;.toRight&quot;</span>).style.left = left + <span class=\"string\">&quot;px&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (left &gt; <span class=\"number\">800</span>) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">clearInterval</span>(t5);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, <span class=\"number\">10</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"js-动画的封装\"><a href=\"#js-动画的封装\" class=\"headerlink\" title=\"js 动画的封装\"></a>js 动画的封装</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 封装</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">moveToRight</span>(<span class=\"params\">dom, limit</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> t6 = <span class=\"built_in\">setInterval</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    left += <span class=\"number\">10</span>;</span><br><span class=\"line\">    dom.style.left = left + <span class=\"string\">&quot;px&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (left &gt; limit) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">clearInterval</span>(t6);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;, <span class=\"number\">10</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"offset-client-scroll\"><a href=\"#offset-client-scroll\" class=\"headerlink\" title=\"offset client scroll\"></a>offset client scroll</h2><h3 id=\"offset\"><a href=\"#offset\" class=\"headerlink\" title=\"offset\"></a>offset</h3><p><code>offsetLeft</code>: 获取元素距离最左边的距离：</p>\n<p>(1) 如果父元素没有定位，就是距离浏览器最左侧的距离<br>(2) 如果父元素有定位，就是距离父元素最左侧的距离</p>\n<p><code>offsetTop</code> : 获取元素距离最上边的距离:</p>\n<p>(1) 如果父元素没有定位，就是距离浏览器最上侧的距离<br>(2) 如果父元素有定位，就是距离父元素最上侧的距离</p>\n<p><code>offsetWidth</code> : 获取元素的宽度，包括 <code>border</code> 及以内，不包括 <code>margin</code><br><code>offsetHeight</code> : 获取元素的高度，包括 <code>border</code> 及以内，不包括 <code>margin</code><br><code>offsetParent</code> : 获取元素的定位父级元素：</p>\n<p>如果元素是 <code>fixed</code> 定位，得到 <code>null</code><br>没有 <code>fixed</code>,也没有定位,得到 <code>body</code><br>如果父级元素有定位，得到离他最近的有定位的父级元素</p>\n<h3 id=\"scroll-系列\"><a href=\"#scroll-系列\" class=\"headerlink\" title=\"scroll 系列\"></a>scroll 系列</h3><p><code>scrollTop</code> 和 <code>scrollLeft</code> : 获得的是内容卷曲的高度和宽度</p>\n<p><code>scrollWidth</code> 和 <code>scrollHeight</code> : 获得元素的实际宽度和高度，在内容没有超出盒子时，获得的是盒子的内部高度和宽度。内容超出盒子时获得的是内容实际应有的高度和宽度。当盒子内部存在滚动条时，获得的高度和宽度不包括滚动条。</p>\n<h3 id=\"client-系列\"><a href=\"#client-系列\" class=\"headerlink\" title=\"client 系列\"></a>client 系列</h3><p><code>clientTop</code> 和 <code>clientLeft</code> : 获取上边框和左边框的宽度。</p>\n<p><code>clientWidth</code> 和 <code>clientHeight</code> : 获取可视范围的宽度高度，即边框内部的，不包括 <code>border</code>,包括 <code>padding</code> .当盒子内部存在滚动条时，获得的高度和宽度不包括滚动条。</p>\n<h1 id=\"未完待续-…\"><a href=\"#未完待续-…\" class=\"headerlink\" title=\"未完待续 …\"></a>未完待续 …</h1>"},{"title":"Js 函数内置对象 arguments","date":"2021-06-18T00:53:59.000Z","top_img":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg","cover":"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/desktop.png","comments":1,"_content":"\n# js 函数中有个内置的对象 arguments\n\n任何一个函数都有内置对象 `arguments` , `arguments` 前几个元素都是实参。\n`length` : 实参的个数\n`callee.length` : 形参的个数\n`callee.name` : 函数名\n`函数名.caller` : 函数的调用者\n\n**案例 :**\n\n```js\n// 既然是伪数组,就可以遍历,利用这一点\nfunction num() {\n  let sum = 0;\n  for (let i = 0; i < arguments.length; i++) {\n    sum += arguments[i];\n  }\n  return sum;\n}\nconsole.log(num(1, 2, 3, 4));\n```\n\n# The_End\n","source":"_posts/js/js-arguments.md","raw":"---\ntitle: Js 函数内置对象 arguments\ndate: 2021-06-18 08:53:59\ntop_img: https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg\ncover:\ntags:\n  - js\n  - javascript\n  - arguments\ncategories:\n  - js\ncomments:\n---\n\n# js 函数中有个内置的对象 arguments\n\n任何一个函数都有内置对象 `arguments` , `arguments` 前几个元素都是实参。\n`length` : 实参的个数\n`callee.length` : 形参的个数\n`callee.name` : 函数名\n`函数名.caller` : 函数的调用者\n\n**案例 :**\n\n```js\n// 既然是伪数组,就可以遍历,利用这一点\nfunction num() {\n  let sum = 0;\n  for (let i = 0; i < arguments.length; i++) {\n    sum += arguments[i];\n  }\n  return sum;\n}\nconsole.log(num(1, 2, 3, 4));\n```\n\n# The_End\n","slug":"js/js-arguments","published":1,"updated":"2021-06-19T07:09:24.744Z","layout":"post","photos":[],"link":"","_id":"cksvxwnnv0028gubqb920bgkv","content":"<h1 id=\"js-函数中有个内置的对象-arguments\"><a href=\"#js-函数中有个内置的对象-arguments\" class=\"headerlink\" title=\"js 函数中有个内置的对象 arguments\"></a>js 函数中有个内置的对象 arguments</h1><p>任何一个函数都有内置对象 <code>arguments</code> , <code>arguments</code> 前几个元素都是实参。<br><code>length</code> : 实参的个数<br><code>callee.length</code> : 形参的个数<br><code>callee.name</code> : 函数名<br><code>函数名.caller</code> : 函数的调用者</p>\n<p><strong>案例 :</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 既然是伪数组,就可以遍历,利用这一点</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">num</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">arguments</span>.length; i++) &#123;</span><br><span class=\"line\">    sum += <span class=\"built_in\">arguments</span>[i];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(num(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>));</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"The-End\"><a href=\"#The-End\" class=\"headerlink\" title=\"The_End\"></a>The_End</h1>","site":{"data":{"link":{"class1":{"class_name":"舍友","link_list":{"1":{"name":"codeAntg","link":"https://blog.csdn.net/weixin_44745147","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/fjh.jpg","descr":"那家刀削面不错","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class2":{"class_name":"致谢","link_list":{"1":{"name":"JerrC","link":"https://immyw.com","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/immyw.png","descr":"今日事,今日毕","width":"1px","style":"solid","color":"#60d0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/hexo.svg","descr":"A fast, simple & powerful blog framework","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class3":{"class_name":"友人","link_list":{"1":{"name":"Chester","link":"http://chesterlds.cn","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/chester.jpg","descr":null,"width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Wangs","link":"https://wangsss.cn/","avatar":"https://wangsss.cn/img/avatar.png","descr":"不疯魔，不成活 ~","width":"1px","style":"solid","color":"#9d9d9d","custom":"link_custom1","time":"4s","namecolor":"0094ff","descolor":"#ff9191"}}}}}},"excerpt":"","more":"<h1 id=\"js-函数中有个内置的对象-arguments\"><a href=\"#js-函数中有个内置的对象-arguments\" class=\"headerlink\" title=\"js 函数中有个内置的对象 arguments\"></a>js 函数中有个内置的对象 arguments</h1><p>任何一个函数都有内置对象 <code>arguments</code> , <code>arguments</code> 前几个元素都是实参。<br><code>length</code> : 实参的个数<br><code>callee.length</code> : 形参的个数<br><code>callee.name</code> : 函数名<br><code>函数名.caller</code> : 函数的调用者</p>\n<p><strong>案例 :</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 既然是伪数组,就可以遍历,利用这一点</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">num</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">arguments</span>.length; i++) &#123;</span><br><span class=\"line\">    sum += <span class=\"built_in\">arguments</span>[i];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(num(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>));</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"The-End\"><a href=\"#The-End\" class=\"headerlink\" title=\"The_End\"></a>The_End</h1>"},{"title":"Js 数组去重并排序","date":"2021-06-15T03:19:50.000Z","top_img":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg","cover":"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/desktop.png","aside":null,"comments":1,"_content":"\n```js\n// 数组去重并从大到小排序\n\nvar arr = [7, 8, 8, 1, 6, 10, 1, 2, 2, 3, 9, 2, 4, 1, 5, 7, 7, 2, 2];\n\nfunction getNewArr(arr) {\n  let newArr = [];\n  // 去重\n  arr.forEach(function (value) {\n    if (newArr.indexOf(value) == -1) {\n      newArr.push(value);\n    }\n  });\n\n  // 从大到小排序\n\n  // 遍历 n-1 次\n  for (let i = 0; i < newArr.length - 1; i++) {\n    // 每次排序次数从 n-1 开始递减 (下标 n-2)\n    for (let j = newArr.length - 2; j >= 0; j--) {\n      if (j + 1 <= newArr.length - 1) {\n        if (newArr[j] < newArr[j + 1]) {\n          // 两者交换\n          let temp = newArr[j];\n          newArr[j] = newArr[j + 1];\n          newArr[j + 1] = temp;\n        }\n      }\n    }\n  }\n  return newArr;\n}\n\nconsole.log(getNewArr(arr));\n```\n\n# The_End\n","source":"_posts/js/js-array-sort.md","raw":"---\ntitle: Js 数组去重并排序\ndate: 2021-06-15 11:19:50\ntop_img: https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg\ncover:\ntags:\n  - js\n  - javascript\n  - 数组排序\n  - sort\n  - 数组去重\ncategories:\n  - js\naside:\ncomments:\n---\n\n```js\n// 数组去重并从大到小排序\n\nvar arr = [7, 8, 8, 1, 6, 10, 1, 2, 2, 3, 9, 2, 4, 1, 5, 7, 7, 2, 2];\n\nfunction getNewArr(arr) {\n  let newArr = [];\n  // 去重\n  arr.forEach(function (value) {\n    if (newArr.indexOf(value) == -1) {\n      newArr.push(value);\n    }\n  });\n\n  // 从大到小排序\n\n  // 遍历 n-1 次\n  for (let i = 0; i < newArr.length - 1; i++) {\n    // 每次排序次数从 n-1 开始递减 (下标 n-2)\n    for (let j = newArr.length - 2; j >= 0; j--) {\n      if (j + 1 <= newArr.length - 1) {\n        if (newArr[j] < newArr[j + 1]) {\n          // 两者交换\n          let temp = newArr[j];\n          newArr[j] = newArr[j + 1];\n          newArr[j + 1] = temp;\n        }\n      }\n    }\n  }\n  return newArr;\n}\n\nconsole.log(getNewArr(arr));\n```\n\n# The_End\n","slug":"js/js-array-sort","published":1,"updated":"2021-06-25T09:06:12.419Z","layout":"post","photos":[],"link":"","_id":"cksvxwnnw0029gubqc6uvgt0i","content":"<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 数组去重并从大到小排序</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">8</span>, <span class=\"number\">1</span>, <span class=\"number\">6</span>, <span class=\"number\">10</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">9</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">7</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getNewArr</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> newArr = [];</span><br><span class=\"line\">  <span class=\"comment\">// 去重</span></span><br><span class=\"line\">  arr.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newArr.indexOf(value) == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      newArr.push(value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 从大到小排序</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 遍历 n-1 次</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; newArr.length - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 每次排序次数从 n-1 开始递减 (下标 n-2)</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = newArr.length - <span class=\"number\">2</span>; j &gt;= <span class=\"number\">0</span>; j--) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (j + <span class=\"number\">1</span> &lt;= newArr.length - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (newArr[j] &lt; newArr[j + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 两者交换</span></span><br><span class=\"line\">          <span class=\"keyword\">let</span> temp = newArr[j];</span><br><span class=\"line\">          newArr[j] = newArr[j + <span class=\"number\">1</span>];</span><br><span class=\"line\">          newArr[j + <span class=\"number\">1</span>] = temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> newArr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(getNewArr(arr));</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"The-End\"><a href=\"#The-End\" class=\"headerlink\" title=\"The_End\"></a>The_End</h1>","site":{"data":{"link":{"class1":{"class_name":"舍友","link_list":{"1":{"name":"codeAntg","link":"https://blog.csdn.net/weixin_44745147","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/fjh.jpg","descr":"那家刀削面不错","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class2":{"class_name":"致谢","link_list":{"1":{"name":"JerrC","link":"https://immyw.com","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/immyw.png","descr":"今日事,今日毕","width":"1px","style":"solid","color":"#60d0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/hexo.svg","descr":"A fast, simple & powerful blog framework","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class3":{"class_name":"友人","link_list":{"1":{"name":"Chester","link":"http://chesterlds.cn","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/chester.jpg","descr":null,"width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Wangs","link":"https://wangsss.cn/","avatar":"https://wangsss.cn/img/avatar.png","descr":"不疯魔，不成活 ~","width":"1px","style":"solid","color":"#9d9d9d","custom":"link_custom1","time":"4s","namecolor":"0094ff","descolor":"#ff9191"}}}}}},"excerpt":"","more":"<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 数组去重并从大到小排序</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">8</span>, <span class=\"number\">1</span>, <span class=\"number\">6</span>, <span class=\"number\">10</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">9</span>, <span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">7</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getNewArr</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> newArr = [];</span><br><span class=\"line\">  <span class=\"comment\">// 去重</span></span><br><span class=\"line\">  arr.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newArr.indexOf(value) == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      newArr.push(value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 从大到小排序</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 遍历 n-1 次</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; newArr.length - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 每次排序次数从 n-1 开始递减 (下标 n-2)</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = newArr.length - <span class=\"number\">2</span>; j &gt;= <span class=\"number\">0</span>; j--) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (j + <span class=\"number\">1</span> &lt;= newArr.length - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (newArr[j] &lt; newArr[j + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">          <span class=\"comment\">// 两者交换</span></span><br><span class=\"line\">          <span class=\"keyword\">let</span> temp = newArr[j];</span><br><span class=\"line\">          newArr[j] = newArr[j + <span class=\"number\">1</span>];</span><br><span class=\"line\">          newArr[j + <span class=\"number\">1</span>] = temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> newArr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(getNewArr(arr));</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"The-End\"><a href=\"#The-End\" class=\"headerlink\" title=\"The_End\"></a>The_End</h1>"},{"title":"用 Js 实现小球触壁反弹","date":"2021-06-15T03:22:23.000Z","top_img":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg","cover":"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/desktop.png","aside":null,"comments":1,"_content":"\n# 效果图\n\n![The-wall-rebound](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/js/ball.gif)\n\n### html\n\n```html\n<div class=\"box\">\n  <div class=\"ball\"></div>\n</div>\n\n<button class=\"start\">开始</button>\n<button class=\"stop\" disabled=\"true\">暂停</button>\n```\n\n### css\n\n```css\n.box {\n  position: relative;\n  width: 500px;\n  height: 400px;\n  border: 2px solid #66555d;\n}\n.ball {\n  position: absolute;\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n  background-color: #56c6d4;\n}\nbutton {\n  padding: 8px 20px;\n}\n```\n\n### js\n\n```js\nvar goUp = false,\n  goLeft = false,\n  step = 10,\n  ballLeft = 0,\n  ballTop = 0,\n  timer = null;\nvar ballMaxLeft = $(\".box\").clientWidth - $(\".ball\").offsetWidth;\nvar ballMaxTop = $(\".box\").clientHeight - $(\".ball\").offsetHeight;\n\n$(\".start\").onclick = function () {\n  this.setAttribute(\"disabled\", true);\n  $(\".stop\").disabled = false;\n  timer = setInterval(function () {\n    // 垂直方向\n    if (goUp) {\n      if (ballTop <= 0) {\n        goUp = false;\n      } else {\n        ballTop -= step;\n        goUp = true;\n      }\n    } else {\n      if (ballTop >= ballMaxTop) {\n        goUp = true;\n      } else {\n        ballTop += step;\n      }\n    }\n\n    // 水平方向\n    if (goLeft) {\n      if (ballLeft <= 0) {\n        goLeft = false;\n      } else {\n        ballLeft -= step;\n        goLeft = true;\n      }\n    } else {\n      if (ballLeft >= ballMaxLeft) {\n        goLeft = true;\n      } else {\n        ballLeft += step;\n      }\n    }\n    $(\".ball\").style.top = ballTop + \"px\";\n    $(\".ball\").style.left = ballLeft + \"px\";\n  }, 20);\n};\n\n$(\".stop\").onclick = function () {\n  clearInterval(timer);\n  this.disabled = true;\n  $(\".start\").disabled = false;\n};\n```\n","source":"_posts/js/js-ball-wall-rebound.md","raw":"---\ntitle: 用 Js 实现小球触壁反弹\ndate: 2021-06-15 11:22:23\ntop_img: https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg\ncover:\ntags:\n  - js\n  - javascript\n  - 触壁反弹\ncategories:\n  - js\naside:\ncomments:\n---\n\n# 效果图\n\n![The-wall-rebound](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/js/ball.gif)\n\n### html\n\n```html\n<div class=\"box\">\n  <div class=\"ball\"></div>\n</div>\n\n<button class=\"start\">开始</button>\n<button class=\"stop\" disabled=\"true\">暂停</button>\n```\n\n### css\n\n```css\n.box {\n  position: relative;\n  width: 500px;\n  height: 400px;\n  border: 2px solid #66555d;\n}\n.ball {\n  position: absolute;\n  width: 40px;\n  height: 40px;\n  border-radius: 50%;\n  background-color: #56c6d4;\n}\nbutton {\n  padding: 8px 20px;\n}\n```\n\n### js\n\n```js\nvar goUp = false,\n  goLeft = false,\n  step = 10,\n  ballLeft = 0,\n  ballTop = 0,\n  timer = null;\nvar ballMaxLeft = $(\".box\").clientWidth - $(\".ball\").offsetWidth;\nvar ballMaxTop = $(\".box\").clientHeight - $(\".ball\").offsetHeight;\n\n$(\".start\").onclick = function () {\n  this.setAttribute(\"disabled\", true);\n  $(\".stop\").disabled = false;\n  timer = setInterval(function () {\n    // 垂直方向\n    if (goUp) {\n      if (ballTop <= 0) {\n        goUp = false;\n      } else {\n        ballTop -= step;\n        goUp = true;\n      }\n    } else {\n      if (ballTop >= ballMaxTop) {\n        goUp = true;\n      } else {\n        ballTop += step;\n      }\n    }\n\n    // 水平方向\n    if (goLeft) {\n      if (ballLeft <= 0) {\n        goLeft = false;\n      } else {\n        ballLeft -= step;\n        goLeft = true;\n      }\n    } else {\n      if (ballLeft >= ballMaxLeft) {\n        goLeft = true;\n      } else {\n        ballLeft += step;\n      }\n    }\n    $(\".ball\").style.top = ballTop + \"px\";\n    $(\".ball\").style.left = ballLeft + \"px\";\n  }, 20);\n};\n\n$(\".stop\").onclick = function () {\n  clearInterval(timer);\n  this.disabled = true;\n  $(\".start\").disabled = false;\n};\n```\n","slug":"js/js-ball-wall-rebound","published":1,"updated":"2021-06-20T08:13:35.239Z","layout":"post","photos":[],"link":"","_id":"cksvxwnnx002dgubqc7d53wzu","content":"<h1 id=\"效果图\"><a href=\"#效果图\" class=\"headerlink\" title=\"效果图\"></a>效果图</h1><p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/js/ball.gif\" alt=\"The-wall-rebound\"></p>\n<h3 id=\"html\"><a href=\"#html\" class=\"headerlink\" title=\"html\"></a>html</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;ball&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;start&quot;</span>&gt;</span>开始<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;stop&quot;</span> <span class=\"attr\">disabled</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span>暂停<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"css\"><a href=\"#css\" class=\"headerlink\" title=\"css\"></a>css</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">500px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">400px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">2px</span> solid <span class=\"number\">#66555d</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.ball</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#56c6d4</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">button</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">8px</span> <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"js\"><a href=\"#js\" class=\"headerlink\" title=\"js\"></a>js</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> goUp = <span class=\"literal\">false</span>,</span><br><span class=\"line\">  goLeft = <span class=\"literal\">false</span>,</span><br><span class=\"line\">  step = <span class=\"number\">10</span>,</span><br><span class=\"line\">  ballLeft = <span class=\"number\">0</span>,</span><br><span class=\"line\">  ballTop = <span class=\"number\">0</span>,</span><br><span class=\"line\">  timer = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> ballMaxLeft = $(<span class=\"string\">&quot;.box&quot;</span>).clientWidth - $(<span class=\"string\">&quot;.ball&quot;</span>).offsetWidth;</span><br><span class=\"line\"><span class=\"keyword\">var</span> ballMaxTop = $(<span class=\"string\">&quot;.box&quot;</span>).clientHeight - $(<span class=\"string\">&quot;.ball&quot;</span>).offsetHeight;</span><br><span class=\"line\"></span><br><span class=\"line\">$(<span class=\"string\">&quot;.start&quot;</span>).onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.setAttribute(<span class=\"string\">&quot;disabled&quot;</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">  $(<span class=\"string\">&quot;.stop&quot;</span>).disabled = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  timer = <span class=\"built_in\">setInterval</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 垂直方向</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (goUp) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (ballTop &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        goUp = <span class=\"literal\">false</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        ballTop -= step;</span><br><span class=\"line\">        goUp = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (ballTop &gt;= ballMaxTop) &#123;</span><br><span class=\"line\">        goUp = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        ballTop += step;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 水平方向</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (goLeft) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (ballLeft &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        goLeft = <span class=\"literal\">false</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        ballLeft -= step;</span><br><span class=\"line\">        goLeft = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (ballLeft &gt;= ballMaxLeft) &#123;</span><br><span class=\"line\">        goLeft = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        ballLeft += step;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    $(<span class=\"string\">&quot;.ball&quot;</span>).style.top = ballTop + <span class=\"string\">&quot;px&quot;</span>;</span><br><span class=\"line\">    $(<span class=\"string\">&quot;.ball&quot;</span>).style.left = ballLeft + <span class=\"string\">&quot;px&quot;</span>;</span><br><span class=\"line\">  &#125;, <span class=\"number\">20</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">$(<span class=\"string\">&quot;.stop&quot;</span>).onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">clearInterval</span>(timer);</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.disabled = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  $(<span class=\"string\">&quot;.start&quot;</span>).disabled = <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","site":{"data":{"link":{"class1":{"class_name":"舍友","link_list":{"1":{"name":"codeAntg","link":"https://blog.csdn.net/weixin_44745147","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/fjh.jpg","descr":"那家刀削面不错","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class2":{"class_name":"致谢","link_list":{"1":{"name":"JerrC","link":"https://immyw.com","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/immyw.png","descr":"今日事,今日毕","width":"1px","style":"solid","color":"#60d0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/hexo.svg","descr":"A fast, simple & powerful blog framework","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class3":{"class_name":"友人","link_list":{"1":{"name":"Chester","link":"http://chesterlds.cn","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/chester.jpg","descr":null,"width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Wangs","link":"https://wangsss.cn/","avatar":"https://wangsss.cn/img/avatar.png","descr":"不疯魔，不成活 ~","width":"1px","style":"solid","color":"#9d9d9d","custom":"link_custom1","time":"4s","namecolor":"0094ff","descolor":"#ff9191"}}}}}},"excerpt":"","more":"<h1 id=\"效果图\"><a href=\"#效果图\" class=\"headerlink\" title=\"效果图\"></a>效果图</h1><p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/js/ball.gif\" alt=\"The-wall-rebound\"></p>\n<h3 id=\"html\"><a href=\"#html\" class=\"headerlink\" title=\"html\"></a>html</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;box&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;ball&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;start&quot;</span>&gt;</span>开始<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;stop&quot;</span> <span class=\"attr\">disabled</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span>暂停<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"css\"><a href=\"#css\" class=\"headerlink\" title=\"css\"></a>css</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">500px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">400px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">2px</span> solid <span class=\"number\">#66555d</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.ball</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">40px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#56c6d4</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">button</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">8px</span> <span class=\"number\">20px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"js\"><a href=\"#js\" class=\"headerlink\" title=\"js\"></a>js</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> goUp = <span class=\"literal\">false</span>,</span><br><span class=\"line\">  goLeft = <span class=\"literal\">false</span>,</span><br><span class=\"line\">  step = <span class=\"number\">10</span>,</span><br><span class=\"line\">  ballLeft = <span class=\"number\">0</span>,</span><br><span class=\"line\">  ballTop = <span class=\"number\">0</span>,</span><br><span class=\"line\">  timer = <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> ballMaxLeft = $(<span class=\"string\">&quot;.box&quot;</span>).clientWidth - $(<span class=\"string\">&quot;.ball&quot;</span>).offsetWidth;</span><br><span class=\"line\"><span class=\"keyword\">var</span> ballMaxTop = $(<span class=\"string\">&quot;.box&quot;</span>).clientHeight - $(<span class=\"string\">&quot;.ball&quot;</span>).offsetHeight;</span><br><span class=\"line\"></span><br><span class=\"line\">$(<span class=\"string\">&quot;.start&quot;</span>).onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.setAttribute(<span class=\"string\">&quot;disabled&quot;</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">  $(<span class=\"string\">&quot;.stop&quot;</span>).disabled = <span class=\"literal\">false</span>;</span><br><span class=\"line\">  timer = <span class=\"built_in\">setInterval</span>(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 垂直方向</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (goUp) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (ballTop &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        goUp = <span class=\"literal\">false</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        ballTop -= step;</span><br><span class=\"line\">        goUp = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (ballTop &gt;= ballMaxTop) &#123;</span><br><span class=\"line\">        goUp = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        ballTop += step;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 水平方向</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (goLeft) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (ballLeft &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        goLeft = <span class=\"literal\">false</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        ballLeft -= step;</span><br><span class=\"line\">        goLeft = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (ballLeft &gt;= ballMaxLeft) &#123;</span><br><span class=\"line\">        goLeft = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        ballLeft += step;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    $(<span class=\"string\">&quot;.ball&quot;</span>).style.top = ballTop + <span class=\"string\">&quot;px&quot;</span>;</span><br><span class=\"line\">    $(<span class=\"string\">&quot;.ball&quot;</span>).style.left = ballLeft + <span class=\"string\">&quot;px&quot;</span>;</span><br><span class=\"line\">  &#125;, <span class=\"number\">20</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">$(<span class=\"string\">&quot;.stop&quot;</span>).onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">clearInterval</span>(timer);</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.disabled = <span class=\"literal\">true</span>;</span><br><span class=\"line\">  $(<span class=\"string\">&quot;.start&quot;</span>).disabled = <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n"},{"title":"Js 中 call apply bind 的用法","date":"2021-06-18T00:53:17.000Z","top_img":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg","cover":"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/desktop.png","comments":1,"_content":"\n# 改变 this 指向的方法\n\n## (1) call 方法\n\n**1. `call()`方法可以进行普通函数的调用**\n\n**例如**\n\n```js\nfunction fn() {\n  console.log(\"666\");\n}\nfn.call();\n```\n\n**2. `call()`方法可以改变 `this` 的指向 , 如果没有参数 , `this` 指向 `window`**\n**3. `call()`方法可以改变 `this` 的指向 , 如果有一个参数 , `this`指向该参数**\n**4. `call()`方法可以改变 `this` 的指向 , 如果有多个参数 , `this` 指向第一个参数，剩下的是参数列表**\n\n## (2) apply 方法\n\n1. `apply()`方法可以进行普通函数的调用\n2. `apply()`方法可以改变 `this` 的指向，如果没有参数 , `this` 指向 window\n3. `apply()`方法可以改变 `this` 的指向，如果有一个参数 , `this` 指向该参数\n4. `apply()`方法可以改变 `this` 的指向，如果有多个参数，第一个参数是 `null` 或者 `window` , 第二个参数是数组\n\n## (3) bind 方法\n\nbind() 除了返回是函数以外，它的参数和用法跟 `call()` 一样。\n\n**案例**\n\n```js\nfunction Person(name, age) {\n  this.name = name;\n  this.age = age;\n}\n\n// call()\nvar name = \"woman\";\nvar age = 40;\nvar obj1 = {\n  name: \"man\",\n  age: 10,\n  say: function () {\n    console.log(this.name + \" : \" + this.age);\n  },\n};\n// obj1.say();\n// call() 无参数默认指向 windows\n// obj1.say.call();\nvar obj2 = {\n  name: \"tom\",\n  age: 12,\n};\n// call() 有参数指向第一个参数，后面的是参数列表\nobj1.say.call(obj2);\n\nfunction boy(score, name, age) {\n  this.score = score;\n  // Person.call(this, name, age);\n  Person.apply(this, [name, age]); // apply\n  this.study = function () {\n    console.log(score, this.name, this.age);\n  };\n}\n\nvar boyA = new boy(100, \"www\", 10);\nboyA.study();\n\n// bind\nboyA.study.bind()();\n```\n\n## 总结\n\n三者微妙的差距！\n\n`call` 、`bind` 、 `apply` 这三个函数的第一个参数都是 `this` 的指向对象，第二个参数差别就来了：\n\n`call` 的参数是直接放进去的，第二第三第 n 个参数全都用逗号分隔，直接放到后面 `obj.myFun.call(db,'city', ... ,'string'...` )。\n\n`apply` 的所有参数都必须放在一个数组里面传进去 `obj.myFun.apply(db,['成都', ..., 'string' ])`。\n\n`bind` 除了返回是函数以外，它 的参数和 `call` 一样。\n\n当然，三者的参数不限定是 `string` 类型，允许是各种类型，包括函数 、 `object` 等等！\n\n# The_End\n","source":"_posts/js/js-call-apply-bind.md","raw":"---\ntitle: Js 中 call apply bind 的用法\ndate: 2021-06-18 08:53:17\ntop_img: https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg\ncover:\ntags:\n  - js\n  - javascript\n  - call\n  - apply\n  - bind\n  - this指向\ncategories:\n  - js\ncomments:\n---\n\n# 改变 this 指向的方法\n\n## (1) call 方法\n\n**1. `call()`方法可以进行普通函数的调用**\n\n**例如**\n\n```js\nfunction fn() {\n  console.log(\"666\");\n}\nfn.call();\n```\n\n**2. `call()`方法可以改变 `this` 的指向 , 如果没有参数 , `this` 指向 `window`**\n**3. `call()`方法可以改变 `this` 的指向 , 如果有一个参数 , `this`指向该参数**\n**4. `call()`方法可以改变 `this` 的指向 , 如果有多个参数 , `this` 指向第一个参数，剩下的是参数列表**\n\n## (2) apply 方法\n\n1. `apply()`方法可以进行普通函数的调用\n2. `apply()`方法可以改变 `this` 的指向，如果没有参数 , `this` 指向 window\n3. `apply()`方法可以改变 `this` 的指向，如果有一个参数 , `this` 指向该参数\n4. `apply()`方法可以改变 `this` 的指向，如果有多个参数，第一个参数是 `null` 或者 `window` , 第二个参数是数组\n\n## (3) bind 方法\n\nbind() 除了返回是函数以外，它的参数和用法跟 `call()` 一样。\n\n**案例**\n\n```js\nfunction Person(name, age) {\n  this.name = name;\n  this.age = age;\n}\n\n// call()\nvar name = \"woman\";\nvar age = 40;\nvar obj1 = {\n  name: \"man\",\n  age: 10,\n  say: function () {\n    console.log(this.name + \" : \" + this.age);\n  },\n};\n// obj1.say();\n// call() 无参数默认指向 windows\n// obj1.say.call();\nvar obj2 = {\n  name: \"tom\",\n  age: 12,\n};\n// call() 有参数指向第一个参数，后面的是参数列表\nobj1.say.call(obj2);\n\nfunction boy(score, name, age) {\n  this.score = score;\n  // Person.call(this, name, age);\n  Person.apply(this, [name, age]); // apply\n  this.study = function () {\n    console.log(score, this.name, this.age);\n  };\n}\n\nvar boyA = new boy(100, \"www\", 10);\nboyA.study();\n\n// bind\nboyA.study.bind()();\n```\n\n## 总结\n\n三者微妙的差距！\n\n`call` 、`bind` 、 `apply` 这三个函数的第一个参数都是 `this` 的指向对象，第二个参数差别就来了：\n\n`call` 的参数是直接放进去的，第二第三第 n 个参数全都用逗号分隔，直接放到后面 `obj.myFun.call(db,'city', ... ,'string'...` )。\n\n`apply` 的所有参数都必须放在一个数组里面传进去 `obj.myFun.apply(db,['成都', ..., 'string' ])`。\n\n`bind` 除了返回是函数以外，它 的参数和 `call` 一样。\n\n当然，三者的参数不限定是 `string` 类型，允许是各种类型，包括函数 、 `object` 等等！\n\n# The_End\n","slug":"js/js-call-apply-bind","published":1,"updated":"2021-06-28T08:38:35.671Z","layout":"post","photos":[],"link":"","_id":"cksvxwnnx002fgubq1fth5kau","content":"<h1 id=\"改变-this-指向的方法\"><a href=\"#改变-this-指向的方法\" class=\"headerlink\" title=\"改变 this 指向的方法\"></a>改变 this 指向的方法</h1><h2 id=\"1-call-方法\"><a href=\"#1-call-方法\" class=\"headerlink\" title=\"(1) call 方法\"></a>(1) call 方法</h2><p><strong>1. <code>call()</code>方法可以进行普通函数的调用</strong></p>\n<p><strong>例如</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;666&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn.call();</span><br></pre></td></tr></table></figure>\n\n<p><strong>2. <code>call()</code>方法可以改变 <code>this</code> 的指向 , 如果没有参数 , <code>this</code> 指向 <code>window</code></strong><br><strong>3. <code>call()</code>方法可以改变 <code>this</code> 的指向 , 如果有一个参数 , <code>this</code>指向该参数</strong><br><strong>4. <code>call()</code>方法可以改变 <code>this</code> 的指向 , 如果有多个参数 , <code>this</code> 指向第一个参数，剩下的是参数列表</strong></p>\n<h2 id=\"2-apply-方法\"><a href=\"#2-apply-方法\" class=\"headerlink\" title=\"(2) apply 方法\"></a>(2) apply 方法</h2><ol>\n<li><code>apply()</code>方法可以进行普通函数的调用</li>\n<li><code>apply()</code>方法可以改变 <code>this</code> 的指向，如果没有参数 , <code>this</code> 指向 window</li>\n<li><code>apply()</code>方法可以改变 <code>this</code> 的指向，如果有一个参数 , <code>this</code> 指向该参数</li>\n<li><code>apply()</code>方法可以改变 <code>this</code> 的指向，如果有多个参数，第一个参数是 <code>null</code> 或者 <code>window</code> , 第二个参数是数组</li>\n</ol>\n<h2 id=\"3-bind-方法\"><a href=\"#3-bind-方法\" class=\"headerlink\" title=\"(3) bind 方法\"></a>(3) bind 方法</h2><p>bind() 除了返回是函数以外，它的参数和用法跟 <code>call()</code> 一样。</p>\n<p><strong>案例</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// call()</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&quot;woman&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> age = <span class=\"number\">40</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;man&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">10</span>,</span><br><span class=\"line\">  <span class=\"attr\">say</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name + <span class=\"string\">&quot; : &quot;</span> + <span class=\"built_in\">this</span>.age);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// obj1.say();</span></span><br><span class=\"line\"><span class=\"comment\">// call() 无参数默认指向 windows</span></span><br><span class=\"line\"><span class=\"comment\">// obj1.say.call();</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;tom&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">12</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// call() 有参数指向第一个参数，后面的是参数列表</span></span><br><span class=\"line\">obj1.say.call(obj2);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">boy</span>(<span class=\"params\">score, name, age</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.score = score;</span><br><span class=\"line\">  <span class=\"comment\">// Person.call(this, name, age);</span></span><br><span class=\"line\">  Person.apply(<span class=\"built_in\">this</span>, [name, age]); <span class=\"comment\">// apply</span></span><br><span class=\"line\">  <span class=\"built_in\">this</span>.study = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(score, <span class=\"built_in\">this</span>.name, <span class=\"built_in\">this</span>.age);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> boyA = <span class=\"keyword\">new</span> boy(<span class=\"number\">100</span>, <span class=\"string\">&quot;www&quot;</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">boyA.study();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bind</span></span><br><span class=\"line\">boyA.study.bind()();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>三者微妙的差距！</p>\n<p><code>call</code> 、<code>bind</code> 、 <code>apply</code> 这三个函数的第一个参数都是 <code>this</code> 的指向对象，第二个参数差别就来了：</p>\n<p><code>call</code> 的参数是直接放进去的，第二第三第 n 个参数全都用逗号分隔，直接放到后面 <code>obj.myFun.call(db,&#39;city&#39;, ... ,&#39;string&#39;...</code> )。</p>\n<p><code>apply</code> 的所有参数都必须放在一个数组里面传进去 <code>obj.myFun.apply(db,[&#39;成都&#39;, ..., &#39;string&#39; ])</code>。</p>\n<p><code>bind</code> 除了返回是函数以外，它 的参数和 <code>call</code> 一样。</p>\n<p>当然，三者的参数不限定是 <code>string</code> 类型，允许是各种类型，包括函数 、 <code>object</code> 等等！</p>\n<h1 id=\"The-End\"><a href=\"#The-End\" class=\"headerlink\" title=\"The_End\"></a>The_End</h1>","site":{"data":{"link":{"class1":{"class_name":"舍友","link_list":{"1":{"name":"codeAntg","link":"https://blog.csdn.net/weixin_44745147","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/fjh.jpg","descr":"那家刀削面不错","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class2":{"class_name":"致谢","link_list":{"1":{"name":"JerrC","link":"https://immyw.com","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/immyw.png","descr":"今日事,今日毕","width":"1px","style":"solid","color":"#60d0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/hexo.svg","descr":"A fast, simple & powerful blog framework","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class3":{"class_name":"友人","link_list":{"1":{"name":"Chester","link":"http://chesterlds.cn","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/chester.jpg","descr":null,"width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Wangs","link":"https://wangsss.cn/","avatar":"https://wangsss.cn/img/avatar.png","descr":"不疯魔，不成活 ~","width":"1px","style":"solid","color":"#9d9d9d","custom":"link_custom1","time":"4s","namecolor":"0094ff","descolor":"#ff9191"}}}}}},"excerpt":"","more":"<h1 id=\"改变-this-指向的方法\"><a href=\"#改变-this-指向的方法\" class=\"headerlink\" title=\"改变 this 指向的方法\"></a>改变 this 指向的方法</h1><h2 id=\"1-call-方法\"><a href=\"#1-call-方法\" class=\"headerlink\" title=\"(1) call 方法\"></a>(1) call 方法</h2><p><strong>1. <code>call()</code>方法可以进行普通函数的调用</strong></p>\n<p><strong>例如</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;666&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn.call();</span><br></pre></td></tr></table></figure>\n\n<p><strong>2. <code>call()</code>方法可以改变 <code>this</code> 的指向 , 如果没有参数 , <code>this</code> 指向 <code>window</code></strong><br><strong>3. <code>call()</code>方法可以改变 <code>this</code> 的指向 , 如果有一个参数 , <code>this</code>指向该参数</strong><br><strong>4. <code>call()</code>方法可以改变 <code>this</code> 的指向 , 如果有多个参数 , <code>this</code> 指向第一个参数，剩下的是参数列表</strong></p>\n<h2 id=\"2-apply-方法\"><a href=\"#2-apply-方法\" class=\"headerlink\" title=\"(2) apply 方法\"></a>(2) apply 方法</h2><ol>\n<li><code>apply()</code>方法可以进行普通函数的调用</li>\n<li><code>apply()</code>方法可以改变 <code>this</code> 的指向，如果没有参数 , <code>this</code> 指向 window</li>\n<li><code>apply()</code>方法可以改变 <code>this</code> 的指向，如果有一个参数 , <code>this</code> 指向该参数</li>\n<li><code>apply()</code>方法可以改变 <code>this</code> 的指向，如果有多个参数，第一个参数是 <code>null</code> 或者 <code>window</code> , 第二个参数是数组</li>\n</ol>\n<h2 id=\"3-bind-方法\"><a href=\"#3-bind-方法\" class=\"headerlink\" title=\"(3) bind 方法\"></a>(3) bind 方法</h2><p>bind() 除了返回是函数以外，它的参数和用法跟 <code>call()</code> 一样。</p>\n<p><strong>案例</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// call()</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&quot;woman&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> age = <span class=\"number\">40</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;man&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">10</span>,</span><br><span class=\"line\">  <span class=\"attr\">say</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name + <span class=\"string\">&quot; : &quot;</span> + <span class=\"built_in\">this</span>.age);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// obj1.say();</span></span><br><span class=\"line\"><span class=\"comment\">// call() 无参数默认指向 windows</span></span><br><span class=\"line\"><span class=\"comment\">// obj1.say.call();</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;tom&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">12</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// call() 有参数指向第一个参数，后面的是参数列表</span></span><br><span class=\"line\">obj1.say.call(obj2);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">boy</span>(<span class=\"params\">score, name, age</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.score = score;</span><br><span class=\"line\">  <span class=\"comment\">// Person.call(this, name, age);</span></span><br><span class=\"line\">  Person.apply(<span class=\"built_in\">this</span>, [name, age]); <span class=\"comment\">// apply</span></span><br><span class=\"line\">  <span class=\"built_in\">this</span>.study = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(score, <span class=\"built_in\">this</span>.name, <span class=\"built_in\">this</span>.age);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> boyA = <span class=\"keyword\">new</span> boy(<span class=\"number\">100</span>, <span class=\"string\">&quot;www&quot;</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">boyA.study();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// bind</span></span><br><span class=\"line\">boyA.study.bind()();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>三者微妙的差距！</p>\n<p><code>call</code> 、<code>bind</code> 、 <code>apply</code> 这三个函数的第一个参数都是 <code>this</code> 的指向对象，第二个参数差别就来了：</p>\n<p><code>call</code> 的参数是直接放进去的，第二第三第 n 个参数全都用逗号分隔，直接放到后面 <code>obj.myFun.call(db,&#39;city&#39;, ... ,&#39;string&#39;...</code> )。</p>\n<p><code>apply</code> 的所有参数都必须放在一个数组里面传进去 <code>obj.myFun.apply(db,[&#39;成都&#39;, ..., &#39;string&#39; ])</code>。</p>\n<p><code>bind</code> 除了返回是函数以外，它 的参数和 <code>call</code> 一样。</p>\n<p>当然，三者的参数不限定是 <code>string</code> 类型，允许是各种类型，包括函数 、 <code>object</code> 等等！</p>\n<h1 id=\"The-End\"><a href=\"#The-End\" class=\"headerlink\" title=\"The_End\"></a>The_End</h1>"},{"title":"Js 闭包","date":"2021-06-19T00:41:03.000Z","top_img":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg","cover":"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/desktop.png","comments":1,"_content":"\n# 1. 定义\n\n闭包就是能够读取其他函数内部变量的函数，由于在 `Javascript` 语言中，只有函数内部的子函数才能读取局部变量，因此可以把闭包简单理解成 \" 定义在一个函数内部的函数 \"。所以，在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。\n\n`JavaScript` 变量可以是局部变量或全局变量。\n私有变量可以用到闭包。\n\n**闭包的用途 :**\n\n可以在函数外部读取函数内部成员\n让函数内成员始终存活在内存中\n\n**案例 1**\n\n```html\n<button>按钮</button>\n\n<script>\n  document.querySelector(\"button\").onclick = (function () {\n    var num = 0;\n    return function () {\n      console.log(++num);\n    };\n  })();\n</script>\n```\n\n**案例 2**\n\n```js\nvar name = \"this window\";\nvar obj1 = {\n  name: \"this object\",\n  getName: function () {\n    var name = \"this func1\";\n    console.log(this.name); // this object (obj1调用它，this 指向 obj1)\n    console.log(name); // this func1 ( 作用域由内指向外 )\n    return function () {\n      // 闭包函数\n      console.log(name); //this func1 ( 作用域由内指向外 )\n      console.log(this.name); // this window ( this 指向 windows )\n    };\n    console.log(this.name); // retuen 后面的语句不会再执行\n    console.log(name); // 同上\n  },\n};\nobj1.getName()();\n```\n\n**案例 3**\n\n```js\nfunction getRandom(min, max) {\n  var num = Math.floor(Math.random() * (max - min + 1)) + min;\n  console.log(\"num:\" + num); // 19行 getRandom 被调用,打印随机数\n  // 闭包\n  return function () {\n    console.log(num);\n  };\n}\nvar result = getRandom(1, 10); // getRandom 被调用, 执行13行打印随机数,返回 function(){} 赋给 result\nresult(); // 相当于 ( function(){console.log(num)} )() , 打印 num , 作用域由内指向外, 打印 12行的生成的随机数\nresult(); // result 没变 , 同上\n```\n\n# The_End\n","source":"_posts/js/js-closure.md","raw":"---\ntitle: Js 闭包\ndate: 2021-06-19 08:41:03\ntop_img: https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg\ncover:\ntags:\n  - javascript\n  - js\n  - closure\n  - 闭包\ncategories:\n  - js\ncomments:\n---\n\n# 1. 定义\n\n闭包就是能够读取其他函数内部变量的函数，由于在 `Javascript` 语言中，只有函数内部的子函数才能读取局部变量，因此可以把闭包简单理解成 \" 定义在一个函数内部的函数 \"。所以，在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。\n\n`JavaScript` 变量可以是局部变量或全局变量。\n私有变量可以用到闭包。\n\n**闭包的用途 :**\n\n可以在函数外部读取函数内部成员\n让函数内成员始终存活在内存中\n\n**案例 1**\n\n```html\n<button>按钮</button>\n\n<script>\n  document.querySelector(\"button\").onclick = (function () {\n    var num = 0;\n    return function () {\n      console.log(++num);\n    };\n  })();\n</script>\n```\n\n**案例 2**\n\n```js\nvar name = \"this window\";\nvar obj1 = {\n  name: \"this object\",\n  getName: function () {\n    var name = \"this func1\";\n    console.log(this.name); // this object (obj1调用它，this 指向 obj1)\n    console.log(name); // this func1 ( 作用域由内指向外 )\n    return function () {\n      // 闭包函数\n      console.log(name); //this func1 ( 作用域由内指向外 )\n      console.log(this.name); // this window ( this 指向 windows )\n    };\n    console.log(this.name); // retuen 后面的语句不会再执行\n    console.log(name); // 同上\n  },\n};\nobj1.getName()();\n```\n\n**案例 3**\n\n```js\nfunction getRandom(min, max) {\n  var num = Math.floor(Math.random() * (max - min + 1)) + min;\n  console.log(\"num:\" + num); // 19行 getRandom 被调用,打印随机数\n  // 闭包\n  return function () {\n    console.log(num);\n  };\n}\nvar result = getRandom(1, 10); // getRandom 被调用, 执行13行打印随机数,返回 function(){} 赋给 result\nresult(); // 相当于 ( function(){console.log(num)} )() , 打印 num , 作用域由内指向外, 打印 12行的生成的随机数\nresult(); // result 没变 , 同上\n```\n\n# The_End\n","slug":"js/js-closure","published":1,"updated":"2021-06-28T08:47:56.254Z","layout":"post","photos":[],"link":"","_id":"cksvxwnnz002jgubqdnw11kpv","content":"<h1 id=\"1-定义\"><a href=\"#1-定义\" class=\"headerlink\" title=\"1. 定义\"></a>1. 定义</h1><p>闭包就是能够读取其他函数内部变量的函数，由于在 <code>Javascript</code> 语言中，只有函数内部的子函数才能读取局部变量，因此可以把闭包简单理解成 “ 定义在一个函数内部的函数 “。所以，在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。</p>\n<p><code>JavaScript</code> 变量可以是局部变量或全局变量。<br>私有变量可以用到闭包。</p>\n<p><strong>闭包的用途 :</strong></p>\n<p>可以在函数外部读取函数内部成员<br>让函数内成员始终存活在内存中</p>\n<p><strong>案例 1</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>按钮<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;button&quot;</span>).onclick = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> num = <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">console</span>.log(++num);</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;;</span></span><br><span class=\"line\"><span class=\"javascript\">  &#125;)();</span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>案例 2</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&quot;this window&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;this object&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">getName</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name = <span class=\"string\">&quot;this func1&quot;</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name); <span class=\"comment\">// this object (obj1调用它，this 指向 obj1)</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(name); <span class=\"comment\">// this func1 ( 作用域由内指向外 )</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 闭包函数</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(name); <span class=\"comment\">//this func1 ( 作用域由内指向外 )</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name); <span class=\"comment\">// this window ( this 指向 windows )</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name); <span class=\"comment\">// retuen 后面的语句不会再执行</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(name); <span class=\"comment\">// 同上</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">obj1.getName()();</span><br></pre></td></tr></table></figure>\n\n<p><strong>案例 3</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getRandom</span>(<span class=\"params\">min, max</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> num = <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * (max - min + <span class=\"number\">1</span>)) + min;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;num:&quot;</span> + num); <span class=\"comment\">// 19行 getRandom 被调用,打印随机数</span></span><br><span class=\"line\">  <span class=\"comment\">// 闭包</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(num);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = getRandom(<span class=\"number\">1</span>, <span class=\"number\">10</span>); <span class=\"comment\">// getRandom 被调用, 执行13行打印随机数,返回 function()&#123;&#125; 赋给 result</span></span><br><span class=\"line\">result(); <span class=\"comment\">// 相当于 ( function()&#123;console.log(num)&#125; )() , 打印 num , 作用域由内指向外, 打印 12行的生成的随机数</span></span><br><span class=\"line\">result(); <span class=\"comment\">// result 没变 , 同上</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"The-End\"><a href=\"#The-End\" class=\"headerlink\" title=\"The_End\"></a>The_End</h1>","site":{"data":{"link":{"class1":{"class_name":"舍友","link_list":{"1":{"name":"codeAntg","link":"https://blog.csdn.net/weixin_44745147","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/fjh.jpg","descr":"那家刀削面不错","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class2":{"class_name":"致谢","link_list":{"1":{"name":"JerrC","link":"https://immyw.com","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/immyw.png","descr":"今日事,今日毕","width":"1px","style":"solid","color":"#60d0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/hexo.svg","descr":"A fast, simple & powerful blog framework","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class3":{"class_name":"友人","link_list":{"1":{"name":"Chester","link":"http://chesterlds.cn","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/chester.jpg","descr":null,"width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Wangs","link":"https://wangsss.cn/","avatar":"https://wangsss.cn/img/avatar.png","descr":"不疯魔，不成活 ~","width":"1px","style":"solid","color":"#9d9d9d","custom":"link_custom1","time":"4s","namecolor":"0094ff","descolor":"#ff9191"}}}}}},"excerpt":"","more":"<h1 id=\"1-定义\"><a href=\"#1-定义\" class=\"headerlink\" title=\"1. 定义\"></a>1. 定义</h1><p>闭包就是能够读取其他函数内部变量的函数，由于在 <code>Javascript</code> 语言中，只有函数内部的子函数才能读取局部变量，因此可以把闭包简单理解成 “ 定义在一个函数内部的函数 “。所以，在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。</p>\n<p><code>JavaScript</code> 变量可以是局部变量或全局变量。<br>私有变量可以用到闭包。</p>\n<p><strong>闭包的用途 :</strong></p>\n<p>可以在函数外部读取函数内部成员<br>让函数内成员始终存活在内存中</p>\n<p><strong>案例 1</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>按钮<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;button&quot;</span>).onclick = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> num = <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">console</span>.log(++num);</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;;</span></span><br><span class=\"line\"><span class=\"javascript\">  &#125;)();</span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>案例 2</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&quot;this window&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;this object&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">getName</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name = <span class=\"string\">&quot;this func1&quot;</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name); <span class=\"comment\">// this object (obj1调用它，this 指向 obj1)</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(name); <span class=\"comment\">// this func1 ( 作用域由内指向外 )</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// 闭包函数</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(name); <span class=\"comment\">//this func1 ( 作用域由内指向外 )</span></span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name); <span class=\"comment\">// this window ( this 指向 windows )</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name); <span class=\"comment\">// retuen 后面的语句不会再执行</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(name); <span class=\"comment\">// 同上</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">obj1.getName()();</span><br></pre></td></tr></table></figure>\n\n<p><strong>案例 3</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getRandom</span>(<span class=\"params\">min, max</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> num = <span class=\"built_in\">Math</span>.floor(<span class=\"built_in\">Math</span>.random() * (max - min + <span class=\"number\">1</span>)) + min;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;num:&quot;</span> + num); <span class=\"comment\">// 19行 getRandom 被调用,打印随机数</span></span><br><span class=\"line\">  <span class=\"comment\">// 闭包</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(num);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = getRandom(<span class=\"number\">1</span>, <span class=\"number\">10</span>); <span class=\"comment\">// getRandom 被调用, 执行13行打印随机数,返回 function()&#123;&#125; 赋给 result</span></span><br><span class=\"line\">result(); <span class=\"comment\">// 相当于 ( function()&#123;console.log(num)&#125; )() , 打印 num , 作用域由内指向外, 打印 12行的生成的随机数</span></span><br><span class=\"line\">result(); <span class=\"comment\">// result 没变 , 同上</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"The-End\"><a href=\"#The-End\" class=\"headerlink\" title=\"The_End\"></a>The_End</h1>"},{"title":"Js 实现递归深拷贝","date":"2021-06-19T02:09:41.000Z","top_img":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg","cover":"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/desktop.png","comments":1,"_content":"\n# 利用循环和递归的方式实现深拷贝\n\n```js\nfunction deepClone(obj, newObj) {\n  var newObj = newObj || {};\n  for (let key in obj) {\n    if (typeof obj[key] == \"object\") {\n      newObj[key] = obj[key].constructor === Array ? [] : {};\n      deepClone(obj[key], newObj[key]);\n    } else {\n      newObj[key] = obj[key];\n    }\n  }\n  return newObj;\n}\n```\n","source":"_posts/js/js-deepclone.md","raw":"---\ntitle: Js 实现递归深拷贝\ndate: 2021-06-19 10:09:41\ntop_img: https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg\ncover:\ntags:\n  - js\n  - deepClone\n  - 递归\n  - 深拷贝\ncategories:\n  - js\ncomments:\n---\n\n# 利用循环和递归的方式实现深拷贝\n\n```js\nfunction deepClone(obj, newObj) {\n  var newObj = newObj || {};\n  for (let key in obj) {\n    if (typeof obj[key] == \"object\") {\n      newObj[key] = obj[key].constructor === Array ? [] : {};\n      deepClone(obj[key], newObj[key]);\n    } else {\n      newObj[key] = obj[key];\n    }\n  }\n  return newObj;\n}\n```\n","slug":"js/js-deepclone","published":1,"updated":"2021-06-24T10:41:01.090Z","layout":"post","photos":[],"link":"","_id":"cksvxwnnz002lgubq8ye69idc","content":"<h1 id=\"利用循环和递归的方式实现深拷贝\"><a href=\"#利用循环和递归的方式实现深拷贝\" class=\"headerlink\" title=\"利用循环和递归的方式实现深拷贝\"></a>利用循环和递归的方式实现深拷贝</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deepClone</span>(<span class=\"params\">obj, newObj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> newObj = newObj || &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> obj[key] == <span class=\"string\">&quot;object&quot;</span>) &#123;</span><br><span class=\"line\">      newObj[key] = obj[key].constructor === <span class=\"built_in\">Array</span> ? [] : &#123;&#125;;</span><br><span class=\"line\">      deepClone(obj[key], newObj[key]);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      newObj[key] = obj[key];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> newObj;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{"link":{"class1":{"class_name":"舍友","link_list":{"1":{"name":"codeAntg","link":"https://blog.csdn.net/weixin_44745147","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/fjh.jpg","descr":"那家刀削面不错","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class2":{"class_name":"致谢","link_list":{"1":{"name":"JerrC","link":"https://immyw.com","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/immyw.png","descr":"今日事,今日毕","width":"1px","style":"solid","color":"#60d0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/hexo.svg","descr":"A fast, simple & powerful blog framework","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class3":{"class_name":"友人","link_list":{"1":{"name":"Chester","link":"http://chesterlds.cn","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/chester.jpg","descr":null,"width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Wangs","link":"https://wangsss.cn/","avatar":"https://wangsss.cn/img/avatar.png","descr":"不疯魔，不成活 ~","width":"1px","style":"solid","color":"#9d9d9d","custom":"link_custom1","time":"4s","namecolor":"0094ff","descolor":"#ff9191"}}}}}},"excerpt":"","more":"<h1 id=\"利用循环和递归的方式实现深拷贝\"><a href=\"#利用循环和递归的方式实现深拷贝\" class=\"headerlink\" title=\"利用循环和递归的方式实现深拷贝\"></a>利用循环和递归的方式实现深拷贝</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deepClone</span>(<span class=\"params\">obj, newObj</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> newObj = newObj || &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> obj[key] == <span class=\"string\">&quot;object&quot;</span>) &#123;</span><br><span class=\"line\">      newObj[key] = obj[key].constructor === <span class=\"built_in\">Array</span> ? [] : &#123;&#125;;</span><br><span class=\"line\">      deepClone(obj[key], newObj[key]);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      newObj[key] = obj[key];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> newObj;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"用 Js 找出最长的单词并排序","date":"2021-06-15T03:15:48.000Z","top_img":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg","cover":"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/desktop.png","aside":null,"comments":1,"_content":"\n```js\n// 找出最长的单词并输出每个单词的长度\nvar str = \"My name is Tom , I love jerry !\";\nvar maxLength = 0;\nvar maxLengthWord = [];\nvar strList = str.split(\" \");\n\nfor (let i = 0; i < strList.length; i++) {\n  if (i + 1 <= strList.length - 1) {\n    // 如果后者长度大于前者长度 且 后者长度大于或等于已知的最大长度，就存于 maxLengthWord 数组\n    if (\n      strList[i].length < strList[i + 1].length &&\n      strList[i + 1].length >= maxLength\n    ) {\n      // 避免重复\n      // 如果不存在就 push\n      if (maxLengthWord.indexOf(strList[i + 1]) == -1) {\n        maxLengthWord.push(strList[i + 1]);\n        maxLength = strList[i + 1].length;\n      }\n    }\n    // 如果后者长度等于前者长度 且 长度大于或等于已知的最大长度，就将两者都存于 maxLengthWord 数组\n    else if (\n      strList.length == strList[i + 1].length &&\n      strList[i].length >= maxLength\n    ) {\n      // 避免重复\n      // 如果不存在就 push\n      if (maxLengthWord.indexOf(strList[i]) == -1) {\n        maxLengthWord.push(strList[i]);\n      }\n      // 避免重复\n      // 如果不存在就 push\n      if (maxLengthWord.indexOf(strList[i + 1]) == -1) {\n        maxLengthWord.push(strList[i + 1]);\n      }\n      maxLength = strList[i].length;\n    }\n    // 后者长度小于前者长度 且 前者长度大于已知的最大长度，就存于 maxLengthWord 数组\n    else if (\n      strList[i].length > strList[i + 1].length &&\n      strList[i].length >= maxLength\n    ) {\n      // 避免重复\n      // 如果不存在就 push\n      if (maxLengthWord.indexOf(strList[i]) == -1) {\n        maxLengthWord.push(strList[i]);\n        maxLength = strList[i].length;\n      }\n    }\n  }\n}\n\nconsole.log('\" ' + str + ' \"');\n\nmaxLengthWord.forEach(function (value) {\n  console.log(\"最长单词为: \" + value + \" ,单词长度为\" + value.length);\n});\n```\n","source":"_posts/js/js-find-longest-word-and-sort.md","raw":"---\ntitle: 用 Js 找出最长的单词并排序\ndate: 2021-06-15 11:15:48\ntop_img: https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg\ncover:\ntags:\n  - js\n  - javascript\ncategories:\n  - js\naside:\ncomments:\n---\n\n```js\n// 找出最长的单词并输出每个单词的长度\nvar str = \"My name is Tom , I love jerry !\";\nvar maxLength = 0;\nvar maxLengthWord = [];\nvar strList = str.split(\" \");\n\nfor (let i = 0; i < strList.length; i++) {\n  if (i + 1 <= strList.length - 1) {\n    // 如果后者长度大于前者长度 且 后者长度大于或等于已知的最大长度，就存于 maxLengthWord 数组\n    if (\n      strList[i].length < strList[i + 1].length &&\n      strList[i + 1].length >= maxLength\n    ) {\n      // 避免重复\n      // 如果不存在就 push\n      if (maxLengthWord.indexOf(strList[i + 1]) == -1) {\n        maxLengthWord.push(strList[i + 1]);\n        maxLength = strList[i + 1].length;\n      }\n    }\n    // 如果后者长度等于前者长度 且 长度大于或等于已知的最大长度，就将两者都存于 maxLengthWord 数组\n    else if (\n      strList.length == strList[i + 1].length &&\n      strList[i].length >= maxLength\n    ) {\n      // 避免重复\n      // 如果不存在就 push\n      if (maxLengthWord.indexOf(strList[i]) == -1) {\n        maxLengthWord.push(strList[i]);\n      }\n      // 避免重复\n      // 如果不存在就 push\n      if (maxLengthWord.indexOf(strList[i + 1]) == -1) {\n        maxLengthWord.push(strList[i + 1]);\n      }\n      maxLength = strList[i].length;\n    }\n    // 后者长度小于前者长度 且 前者长度大于已知的最大长度，就存于 maxLengthWord 数组\n    else if (\n      strList[i].length > strList[i + 1].length &&\n      strList[i].length >= maxLength\n    ) {\n      // 避免重复\n      // 如果不存在就 push\n      if (maxLengthWord.indexOf(strList[i]) == -1) {\n        maxLengthWord.push(strList[i]);\n        maxLength = strList[i].length;\n      }\n    }\n  }\n}\n\nconsole.log('\" ' + str + ' \"');\n\nmaxLengthWord.forEach(function (value) {\n  console.log(\"最长单词为: \" + value + \" ,单词长度为\" + value.length);\n});\n```\n","slug":"js/js-find-longest-word-and-sort","published":1,"updated":"2021-06-15T03:18:05.223Z","layout":"post","photos":[],"link":"","_id":"cksvxwno1002qgubq5r8hcql2","content":"<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 找出最长的单词并输出每个单词的长度</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&quot;My name is Tom , I love jerry !&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> maxLength = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> maxLengthWord = [];</span><br><span class=\"line\"><span class=\"keyword\">var</span> strList = str.split(<span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; strList.length; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (i + <span class=\"number\">1</span> &lt;= strList.length - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果后者长度大于前者长度 且 后者长度大于或等于已知的最大长度，就存于 maxLengthWord 数组</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (</span><br><span class=\"line\">      strList[i].length &lt; strList[i + <span class=\"number\">1</span>].length &amp;&amp;</span><br><span class=\"line\">      strList[i + <span class=\"number\">1</span>].length &gt;= maxLength</span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 避免重复</span></span><br><span class=\"line\">      <span class=\"comment\">// 如果不存在就 push</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (maxLengthWord.indexOf(strList[i + <span class=\"number\">1</span>]) == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        maxLengthWord.push(strList[i + <span class=\"number\">1</span>]);</span><br><span class=\"line\">        maxLength = strList[i + <span class=\"number\">1</span>].length;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 如果后者长度等于前者长度 且 长度大于或等于已知的最大长度，就将两者都存于 maxLengthWord 数组</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (</span><br><span class=\"line\">      strList.length == strList[i + <span class=\"number\">1</span>].length &amp;&amp;</span><br><span class=\"line\">      strList[i].length &gt;= maxLength</span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 避免重复</span></span><br><span class=\"line\">      <span class=\"comment\">// 如果不存在就 push</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (maxLengthWord.indexOf(strList[i]) == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        maxLengthWord.push(strList[i]);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 避免重复</span></span><br><span class=\"line\">      <span class=\"comment\">// 如果不存在就 push</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (maxLengthWord.indexOf(strList[i + <span class=\"number\">1</span>]) == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        maxLengthWord.push(strList[i + <span class=\"number\">1</span>]);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      maxLength = strList[i].length;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 后者长度小于前者长度 且 前者长度大于已知的最大长度，就存于 maxLengthWord 数组</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (</span><br><span class=\"line\">      strList[i].length &gt; strList[i + <span class=\"number\">1</span>].length &amp;&amp;</span><br><span class=\"line\">      strList[i].length &gt;= maxLength</span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 避免重复</span></span><br><span class=\"line\">      <span class=\"comment\">// 如果不存在就 push</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (maxLengthWord.indexOf(strList[i]) == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        maxLengthWord.push(strList[i]);</span><br><span class=\"line\">        maxLength = strList[i].length;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;&quot; &#x27;</span> + str + <span class=\"string\">&#x27; &quot;&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">maxLengthWord.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;最长单词为: &quot;</span> + value + <span class=\"string\">&quot; ,单词长度为&quot;</span> + value.length);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n","site":{"data":{"link":{"class1":{"class_name":"舍友","link_list":{"1":{"name":"codeAntg","link":"https://blog.csdn.net/weixin_44745147","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/fjh.jpg","descr":"那家刀削面不错","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class2":{"class_name":"致谢","link_list":{"1":{"name":"JerrC","link":"https://immyw.com","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/immyw.png","descr":"今日事,今日毕","width":"1px","style":"solid","color":"#60d0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/hexo.svg","descr":"A fast, simple & powerful blog framework","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class3":{"class_name":"友人","link_list":{"1":{"name":"Chester","link":"http://chesterlds.cn","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/chester.jpg","descr":null,"width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Wangs","link":"https://wangsss.cn/","avatar":"https://wangsss.cn/img/avatar.png","descr":"不疯魔，不成活 ~","width":"1px","style":"solid","color":"#9d9d9d","custom":"link_custom1","time":"4s","namecolor":"0094ff","descolor":"#ff9191"}}}}}},"excerpt":"","more":"<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 找出最长的单词并输出每个单词的长度</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&quot;My name is Tom , I love jerry !&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> maxLength = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> maxLengthWord = [];</span><br><span class=\"line\"><span class=\"keyword\">var</span> strList = str.split(<span class=\"string\">&quot; &quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; strList.length; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (i + <span class=\"number\">1</span> &lt;= strList.length - <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 如果后者长度大于前者长度 且 后者长度大于或等于已知的最大长度，就存于 maxLengthWord 数组</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (</span><br><span class=\"line\">      strList[i].length &lt; strList[i + <span class=\"number\">1</span>].length &amp;&amp;</span><br><span class=\"line\">      strList[i + <span class=\"number\">1</span>].length &gt;= maxLength</span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 避免重复</span></span><br><span class=\"line\">      <span class=\"comment\">// 如果不存在就 push</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (maxLengthWord.indexOf(strList[i + <span class=\"number\">1</span>]) == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        maxLengthWord.push(strList[i + <span class=\"number\">1</span>]);</span><br><span class=\"line\">        maxLength = strList[i + <span class=\"number\">1</span>].length;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 如果后者长度等于前者长度 且 长度大于或等于已知的最大长度，就将两者都存于 maxLengthWord 数组</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (</span><br><span class=\"line\">      strList.length == strList[i + <span class=\"number\">1</span>].length &amp;&amp;</span><br><span class=\"line\">      strList[i].length &gt;= maxLength</span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 避免重复</span></span><br><span class=\"line\">      <span class=\"comment\">// 如果不存在就 push</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (maxLengthWord.indexOf(strList[i]) == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        maxLengthWord.push(strList[i]);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"comment\">// 避免重复</span></span><br><span class=\"line\">      <span class=\"comment\">// 如果不存在就 push</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (maxLengthWord.indexOf(strList[i + <span class=\"number\">1</span>]) == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        maxLengthWord.push(strList[i + <span class=\"number\">1</span>]);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      maxLength = strList[i].length;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 后者长度小于前者长度 且 前者长度大于已知的最大长度，就存于 maxLengthWord 数组</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (</span><br><span class=\"line\">      strList[i].length &gt; strList[i + <span class=\"number\">1</span>].length &amp;&amp;</span><br><span class=\"line\">      strList[i].length &gt;= maxLength</span><br><span class=\"line\">    ) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 避免重复</span></span><br><span class=\"line\">      <span class=\"comment\">// 如果不存在就 push</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> (maxLengthWord.indexOf(strList[i]) == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        maxLengthWord.push(strList[i]);</span><br><span class=\"line\">        maxLength = strList[i].length;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;&quot; &#x27;</span> + str + <span class=\"string\">&#x27; &quot;&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">maxLengthWord.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;最长单词为: &quot;</span> + value + <span class=\"string\">&quot; ,单词长度为&quot;</span> + value.length);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n"},{"title":"Js 面向对象继承","date":"2021-06-16T10:36:07.000Z","top_img":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg","cover":"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/desktop.png","comments":1,"_content":"\n# 1. 原型继承\n\n```js\n// Person\nfunction Person(name, age) {\n  this.name = name;\n  this.age = age;\n}\n// Student\nfunction Student(className, score) {\n  this.className = className;\n  this.score = score;\n}\n// 在 Person 原型上添加 play 方法\nPerson.prototype.play = function () {\n  console.log(\"Person_play\");\n};\n// 让 Student 继承 Person\nStudent.prototype = new Person(\"nameA\", 20);\n// 实例化一个 Student 对象\nvar stu1 = new Student(\"A\", 60);\n\nstu1.play(); // Person_play\n// Student 实例化后\n// 在 Student 对象原型上添加 play 方法\nStudent.prototype.play = function () {\n  console.log(\"Student_play\");\n};\nstu1.play(); // Student_play\nconsole.log(stu1.className); // A\nconsole.log(stu1.score); // 60\nconsole.log(stu1.name); // nameA\nconsole.log(stu1.age); // 20\n\n// 通过原型继承，子类本身构造函数中的属性和方法以及子类原型中的属性和方法都可以获取到，并且父类构造函数中的属性和方法以及父类原型中的属性和方法也可以获取到\n```\n\n# 2. 构造函数继承\n\n```js\nfunction Person(name, age) {\n  this.name = name;\n  this.age = age;\n}\n// call(),this指向第一个参数,后面的依次传参\nfunction Boy(score, name, age) {\n  this.score = score;\n  Person.call(this, name, age);\n  this.study = function () {\n    console.log(score);\n  };\n}\n\nvar boyA = new Boy(100, \"tom\", 10);\nconsole.log(boyA);\n```\n\n# 3. 拷贝继承\n\n```js\nvar obj1 = {\n  gender: \"男\",\n  name: \"tom\",\n};\n\nvar obj2 = {}; // 创建一个空对象\n\nfor (let key in obj1) {\n  obj2[key] = obj1[key];\n}\nobj2.name = \"jerry\";\nconsole.log(obj2);\nconsole.log(obj2.name);\n```\n\n# 未完待续 . . .\n","source":"_posts/js/js-object-oriented-inherit.md","raw":"---\ntitle: Js 面向对象继承\ndate: 2021-06-16 18:36:07\ntop_img: https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg\ncover:\ntags:\n  - js\n  - javascript\n  - 面向对象\n  - 继承\ncategories:\n  - js\ncomments:\n---\n\n# 1. 原型继承\n\n```js\n// Person\nfunction Person(name, age) {\n  this.name = name;\n  this.age = age;\n}\n// Student\nfunction Student(className, score) {\n  this.className = className;\n  this.score = score;\n}\n// 在 Person 原型上添加 play 方法\nPerson.prototype.play = function () {\n  console.log(\"Person_play\");\n};\n// 让 Student 继承 Person\nStudent.prototype = new Person(\"nameA\", 20);\n// 实例化一个 Student 对象\nvar stu1 = new Student(\"A\", 60);\n\nstu1.play(); // Person_play\n// Student 实例化后\n// 在 Student 对象原型上添加 play 方法\nStudent.prototype.play = function () {\n  console.log(\"Student_play\");\n};\nstu1.play(); // Student_play\nconsole.log(stu1.className); // A\nconsole.log(stu1.score); // 60\nconsole.log(stu1.name); // nameA\nconsole.log(stu1.age); // 20\n\n// 通过原型继承，子类本身构造函数中的属性和方法以及子类原型中的属性和方法都可以获取到，并且父类构造函数中的属性和方法以及父类原型中的属性和方法也可以获取到\n```\n\n# 2. 构造函数继承\n\n```js\nfunction Person(name, age) {\n  this.name = name;\n  this.age = age;\n}\n// call(),this指向第一个参数,后面的依次传参\nfunction Boy(score, name, age) {\n  this.score = score;\n  Person.call(this, name, age);\n  this.study = function () {\n    console.log(score);\n  };\n}\n\nvar boyA = new Boy(100, \"tom\", 10);\nconsole.log(boyA);\n```\n\n# 3. 拷贝继承\n\n```js\nvar obj1 = {\n  gender: \"男\",\n  name: \"tom\",\n};\n\nvar obj2 = {}; // 创建一个空对象\n\nfor (let key in obj1) {\n  obj2[key] = obj1[key];\n}\nobj2.name = \"jerry\";\nconsole.log(obj2);\nconsole.log(obj2.name);\n```\n\n# 未完待续 . . .\n","slug":"js/js-object-oriented-inherit","published":1,"updated":"2021-06-28T08:33:24.524Z","layout":"post","photos":[],"link":"","_id":"cksvxwno2002rgubq8wjec6ae","content":"<h1 id=\"1-原型继承\"><a href=\"#1-原型继承\" class=\"headerlink\" title=\"1. 原型继承\"></a>1. 原型继承</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Person</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Student</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Student</span>(<span class=\"params\">className, score</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.className = className;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.score = score;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 在 Person 原型上添加 play 方法</span></span><br><span class=\"line\">Person.prototype.play = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;Person_play&quot;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 让 Student 继承 Person</span></span><br><span class=\"line\">Student.prototype = <span class=\"keyword\">new</span> Person(<span class=\"string\">&quot;nameA&quot;</span>, <span class=\"number\">20</span>);</span><br><span class=\"line\"><span class=\"comment\">// 实例化一个 Student 对象</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> stu1 = <span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;A&quot;</span>, <span class=\"number\">60</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">stu1.play(); <span class=\"comment\">// Person_play</span></span><br><span class=\"line\"><span class=\"comment\">// Student 实例化后</span></span><br><span class=\"line\"><span class=\"comment\">// 在 Student 对象原型上添加 play 方法</span></span><br><span class=\"line\">Student.prototype.play = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;Student_play&quot;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">stu1.play(); <span class=\"comment\">// Student_play</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(stu1.className); <span class=\"comment\">// A</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(stu1.score); <span class=\"comment\">// 60</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(stu1.name); <span class=\"comment\">// nameA</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(stu1.age); <span class=\"comment\">// 20</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 通过原型继承，子类本身构造函数中的属性和方法以及子类原型中的属性和方法都可以获取到，并且父类构造函数中的属性和方法以及父类原型中的属性和方法也可以获取到</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"2-构造函数继承\"><a href=\"#2-构造函数继承\" class=\"headerlink\" title=\"2. 构造函数继承\"></a>2. 构造函数继承</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// call(),this指向第一个参数,后面的依次传参</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Boy</span>(<span class=\"params\">score, name, age</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.score = score;</span><br><span class=\"line\">  Person.call(<span class=\"built_in\">this</span>, name, age);</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.study = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(score);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> boyA = <span class=\"keyword\">new</span> Boy(<span class=\"number\">100</span>, <span class=\"string\">&quot;tom&quot;</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(boyA);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-拷贝继承\"><a href=\"#3-拷贝继承\" class=\"headerlink\" title=\"3. 拷贝继承\"></a>3. 拷贝继承</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;</span><br><span class=\"line\">  <span class=\"attr\">gender</span>: <span class=\"string\">&quot;男&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;tom&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = &#123;&#125;; <span class=\"comment\">// 创建一个空对象</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> obj1) &#123;</span><br><span class=\"line\">  obj2[key] = obj1[key];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj2.name = <span class=\"string\">&quot;jerry&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj2);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj2.name);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"未完待续\"><a href=\"#未完待续\" class=\"headerlink\" title=\"未完待续 . . .\"></a>未完待续 . . .</h1>","site":{"data":{"link":{"class1":{"class_name":"舍友","link_list":{"1":{"name":"codeAntg","link":"https://blog.csdn.net/weixin_44745147","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/fjh.jpg","descr":"那家刀削面不错","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class2":{"class_name":"致谢","link_list":{"1":{"name":"JerrC","link":"https://immyw.com","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/immyw.png","descr":"今日事,今日毕","width":"1px","style":"solid","color":"#60d0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/hexo.svg","descr":"A fast, simple & powerful blog framework","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class3":{"class_name":"友人","link_list":{"1":{"name":"Chester","link":"http://chesterlds.cn","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/chester.jpg","descr":null,"width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Wangs","link":"https://wangsss.cn/","avatar":"https://wangsss.cn/img/avatar.png","descr":"不疯魔，不成活 ~","width":"1px","style":"solid","color":"#9d9d9d","custom":"link_custom1","time":"4s","namecolor":"0094ff","descolor":"#ff9191"}}}}}},"excerpt":"","more":"<h1 id=\"1-原型继承\"><a href=\"#1-原型继承\" class=\"headerlink\" title=\"1. 原型继承\"></a>1. 原型继承</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Person</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// Student</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Student</span>(<span class=\"params\">className, score</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.className = className;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.score = score;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 在 Person 原型上添加 play 方法</span></span><br><span class=\"line\">Person.prototype.play = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;Person_play&quot;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 让 Student 继承 Person</span></span><br><span class=\"line\">Student.prototype = <span class=\"keyword\">new</span> Person(<span class=\"string\">&quot;nameA&quot;</span>, <span class=\"number\">20</span>);</span><br><span class=\"line\"><span class=\"comment\">// 实例化一个 Student 对象</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> stu1 = <span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;A&quot;</span>, <span class=\"number\">60</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">stu1.play(); <span class=\"comment\">// Person_play</span></span><br><span class=\"line\"><span class=\"comment\">// Student 实例化后</span></span><br><span class=\"line\"><span class=\"comment\">// 在 Student 对象原型上添加 play 方法</span></span><br><span class=\"line\">Student.prototype.play = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;Student_play&quot;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">stu1.play(); <span class=\"comment\">// Student_play</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(stu1.className); <span class=\"comment\">// A</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(stu1.score); <span class=\"comment\">// 60</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(stu1.name); <span class=\"comment\">// nameA</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(stu1.age); <span class=\"comment\">// 20</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 通过原型继承，子类本身构造函数中的属性和方法以及子类原型中的属性和方法都可以获取到，并且父类构造函数中的属性和方法以及父类原型中的属性和方法也可以获取到</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"2-构造函数继承\"><a href=\"#2-构造函数继承\" class=\"headerlink\" title=\"2. 构造函数继承\"></a>2. 构造函数继承</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// call(),this指向第一个参数,后面的依次传参</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Boy</span>(<span class=\"params\">score, name, age</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.score = score;</span><br><span class=\"line\">  Person.call(<span class=\"built_in\">this</span>, name, age);</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.study = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(score);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> boyA = <span class=\"keyword\">new</span> Boy(<span class=\"number\">100</span>, <span class=\"string\">&quot;tom&quot;</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(boyA);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-拷贝继承\"><a href=\"#3-拷贝继承\" class=\"headerlink\" title=\"3. 拷贝继承\"></a>3. 拷贝继承</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;</span><br><span class=\"line\">  <span class=\"attr\">gender</span>: <span class=\"string\">&quot;男&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;tom&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj2 = &#123;&#125;; <span class=\"comment\">// 创建一个空对象</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> obj1) &#123;</span><br><span class=\"line\">  obj2[key] = obj1[key];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj2.name = <span class=\"string\">&quot;jerry&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj2);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(obj2.name);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"未完待续\"><a href=\"#未完待续\" class=\"headerlink\" title=\"未完待续 . . .\"></a>未完待续 . . .</h1>"},{"title":"Js 面向对象","date":"2021-06-15T12:18:18.000Z","top_img":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg","cover":"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/desktop.png","aside":null,"comments":1,"_content":"\n# 1. JavaScript 面向对象的介绍\n\n## (1) 什么是对象\n\nEverything is object （万物皆对象）\n对象是一个容器，封装了属性（ `property` ）和方法（ `method` ）。\n\nECMAScript-262 把对象定义为：无序属性的集合，其属性可以包含基本值、对象或者函数。严格来讲，这就相当于说对象是一组没有特定顺序的值。对象的每个属性或方法都有一个名字，而每个名字都映射到一个值。\n\n## (2) 什么是面向对象\n\n面向对象是对过程式代码的一种高度封装，目的在于提高代码的开发效率和可维护性。\n\n面向对象编程 —— Object Oriented Programming，简称 OOP ，是一种编程开发思想。它将真实世界各种复杂的关系，抽象为一个个对象，然后由对象之间的分工与合作，完成对真实世界的模拟。\n\n## (3) 面向对象的特征\n\n**封装性**\n\n**继承性**\n\n**多态性**\n\n# 2. 基本类型与引用类型的区别\n\n## (1) 基本类型\n\n**占用空间固定，保存在栈中**（当一个方法执行时，每个方法都会建立自己的内存栈，在这个方法内定义的变量将会逐个放入这块栈内存里，随着方法的执行结束，这个方法的内存栈也将自然销毁了。因此，所有在方法中定义的变量都是放在栈内存中的；栈中存储的是基础变量以及一些对象的引用变量，基础变量的值是存储在栈中，而引用变量存储在栈中的是指向堆中的数组或者对象的地址，这就是为何修改引用类型总会影响到其他指向这个地址的引用变量。\n保存与复制的是值本身，使用 `typeof` 检测数据的类型，基本类型数据是值类型\n\n## (2) 引用类型\n\n**占用空间不固定，保存在堆中**（当我们在程序中创建一个对象时，这个对象将被保存到运行时数据区中，以便反复利用（因为对象的创建成本通常较大），这个运行时数据区就是堆内存。堆内存中的对象不会随方法的结束而销毁，即使方法结束后，这个对象还可能被另一个引用变量所引用（方法的参数传递时很常见），则这个对象依然不会被销毁，只有当一个对象没有任何引用变量引用它时，系统的垃圾回收机制才会在核实的时候回收它\n\n**栈**：自动分配内存空间，系统自动释放，里面存放的是基本类型的值和引用类型的地址\n\n**堆**：动态分配的内存，大小不定，也不会自动释放。里面存放引用类型的值。\n\n# 3. 创建对象的四种方法\n\n## 1. 对象字面量\n\n```js\nvar obj = {\n  name: \"zs\",\n  age: 18,\n  sex: true\n  fun=function(){\n    console.log(\"fun\")\n  }\n};\n```\n\n## 2. new Object()创建对象\n\n```js\nvar person = new Object();\nperson.name = \"lisi\";\nperson.age = 35;\nperson.job = \"codeman\";\nperson.say = function () {\n  console.log(\"Hello\");\n};\n```\n\n## 3. 工厂函数创建对象\n\n```js\nfunction createPerson(name, age, job) {\n  var person = new Object();\n  person.name = name;\n  person.age = age;\n  person.job = job;\n  person.say = function () {\n    console.log(\"Hello\");\n  };\n  return person;\n}\nvar p1 = createPerson(\"张三\", 22, \"actor\");\n```\n\n## 4. 自定义构造函数\n\n```js\nfunction Person(name, age, job) {\n  this.name = name;\n  this.age = age;\n  this.job = job;\n  this.say = function () {\n    console.log(\"Hello\");\n  };\n}\nvar p1 = new Person(\"张三\", 22, \"actor\");\n```\n\n# 4. 构造函数和实例对象的关系\n\n创建一个实例对象，须使用 new 操作符。以这种方式调用构造函数会经历以下 4 个步骤：\n\n## (1) 解析构造函数代码的执行\n\n1. 创建一个新对象\n2. 将构造函数的作用域赋给新对象（因此 `this` 就指向了这个新对象）\n3. 执行构造函数中的代码\n4. 返回新对象\n\n## (2) constructor 属性\n\n可以通过实例的 `constructor` 属性判断实例和构造函数之间的关系  \n构造函数实例化对象的 `constructor` 属性指向的是构造函数本身\n\n```js\nconsole.log(obj1.constructor == Object);\n```\n\n## (3) instanceof 关键字\n\n如果要检测对象的类型，还是使用 `instanceof` 操作符更可靠一些,返回 `true` 为对象\n\n```js\nconsole.log(obj1 instanceof Object);\n```\n\n## 总结 :\n\n构造函数是根据具体的事物抽象出来的抽象模板  \n实例对象是根据抽象的构造函数模板得到的具体实例对象  \n每一个实例对象都具有一个 `constructor` 属性，指向创建该实例的构造函数\n\n# 5. 构造函数的问题\n\n## 内存浪费\n\n对于每一个实例对象，如果我们在每一个实例对象的内部创建一个属性，值为函数。假如创建两个对象，属性名也许一致,看似都是一模一样的内容，但是其实每一次生成一个实例，都会多占用一些内存，如果实例对象很多，会造成极大的内存浪费。\n\n# 6. 原型\n\n上述问题的更好的解决方案： `prototype`\n\n`Javascript` 规定，每一个构造函数都有一个 `prototype` 属性，指向另一个对象。这个对象的所有属性和方法，都会被构造函数的实例继承。\n这也就意味着，我们可以把所有对象实例需要共享的属性和方法直接定义在 `prototype` 对象上。\n\n```js\nfunction Person(name, age) {\n  this.name = name;\n  this.age = age;\n}\nPerson.prototype.say = function () {\n  console.log(\"Hello\");\n};\n\nvar p1 = new Person(\"Tom\", 20);\nvar p2 = new Person(\"Jerry\", 20);\n\nconsole.log(p1.say === p2.say); // true\n```\n\n**构造函数、实例、原型三者之间的关系**\n\n![js-prototype](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/js/jsprototype.png)\n\n任何函数都具有一个 `prototype` 属性，该属性是一个对象\n\n构造函数的 `prototype` 对象默认都有一个 `constructor` 属性，指向 `prototype` 对象所在函数\n\n通过构造函数得到的实例对象内部会包含一个指向构造函数的 `prototype` 对象的指针 \\_\\_proto\\_\\_\n\\_\\_proto\\_\\_ 是非标准属性\n\n**总结 :**\n\n1. 任何函数都具有一个 `prototype` 属性，该属性是一个对象\n2. 构造函数有一个 `protoType` 属性，它本身是一个对象，我们称之为原型\n3. 构造函数的 `protoType` 原型对象的属性和方法，都可以被构造函数实例化的对象所继承\n4. 构造函数的 `protoType` 原型对象有个 `constructor` 属性，指向的是当前原型对象所在的构造函数\n5. 实例对象有\\_\\_proto\\_\\_属性，它是一个指针，指向的是构造函数的的原型 `prototype`\n6. 实例对象都具有一个 `constructor` 属性，指向创建该实例的构造函数\n\n# 7. 把局部变量变为全局变量\n\n```js\n(function () {\n  var a = 10;\n  window.a = a;\n})(window);\n\nconsole.log(a);\n```\n\n# 未完待续 ...\n","source":"_posts/js/js-object-oriented.md","raw":"---\ntitle: Js 面向对象\ndate: 2021-06-15 20:18:18\ntop_img: https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg\ncover:\naside:\ntags:\n  - js\n  - javascript\n  - 面向对象\ncategories:\n  - js\ncomments:\n---\n\n# 1. JavaScript 面向对象的介绍\n\n## (1) 什么是对象\n\nEverything is object （万物皆对象）\n对象是一个容器，封装了属性（ `property` ）和方法（ `method` ）。\n\nECMAScript-262 把对象定义为：无序属性的集合，其属性可以包含基本值、对象或者函数。严格来讲，这就相当于说对象是一组没有特定顺序的值。对象的每个属性或方法都有一个名字，而每个名字都映射到一个值。\n\n## (2) 什么是面向对象\n\n面向对象是对过程式代码的一种高度封装，目的在于提高代码的开发效率和可维护性。\n\n面向对象编程 —— Object Oriented Programming，简称 OOP ，是一种编程开发思想。它将真实世界各种复杂的关系，抽象为一个个对象，然后由对象之间的分工与合作，完成对真实世界的模拟。\n\n## (3) 面向对象的特征\n\n**封装性**\n\n**继承性**\n\n**多态性**\n\n# 2. 基本类型与引用类型的区别\n\n## (1) 基本类型\n\n**占用空间固定，保存在栈中**（当一个方法执行时，每个方法都会建立自己的内存栈，在这个方法内定义的变量将会逐个放入这块栈内存里，随着方法的执行结束，这个方法的内存栈也将自然销毁了。因此，所有在方法中定义的变量都是放在栈内存中的；栈中存储的是基础变量以及一些对象的引用变量，基础变量的值是存储在栈中，而引用变量存储在栈中的是指向堆中的数组或者对象的地址，这就是为何修改引用类型总会影响到其他指向这个地址的引用变量。\n保存与复制的是值本身，使用 `typeof` 检测数据的类型，基本类型数据是值类型\n\n## (2) 引用类型\n\n**占用空间不固定，保存在堆中**（当我们在程序中创建一个对象时，这个对象将被保存到运行时数据区中，以便反复利用（因为对象的创建成本通常较大），这个运行时数据区就是堆内存。堆内存中的对象不会随方法的结束而销毁，即使方法结束后，这个对象还可能被另一个引用变量所引用（方法的参数传递时很常见），则这个对象依然不会被销毁，只有当一个对象没有任何引用变量引用它时，系统的垃圾回收机制才会在核实的时候回收它\n\n**栈**：自动分配内存空间，系统自动释放，里面存放的是基本类型的值和引用类型的地址\n\n**堆**：动态分配的内存，大小不定，也不会自动释放。里面存放引用类型的值。\n\n# 3. 创建对象的四种方法\n\n## 1. 对象字面量\n\n```js\nvar obj = {\n  name: \"zs\",\n  age: 18,\n  sex: true\n  fun=function(){\n    console.log(\"fun\")\n  }\n};\n```\n\n## 2. new Object()创建对象\n\n```js\nvar person = new Object();\nperson.name = \"lisi\";\nperson.age = 35;\nperson.job = \"codeman\";\nperson.say = function () {\n  console.log(\"Hello\");\n};\n```\n\n## 3. 工厂函数创建对象\n\n```js\nfunction createPerson(name, age, job) {\n  var person = new Object();\n  person.name = name;\n  person.age = age;\n  person.job = job;\n  person.say = function () {\n    console.log(\"Hello\");\n  };\n  return person;\n}\nvar p1 = createPerson(\"张三\", 22, \"actor\");\n```\n\n## 4. 自定义构造函数\n\n```js\nfunction Person(name, age, job) {\n  this.name = name;\n  this.age = age;\n  this.job = job;\n  this.say = function () {\n    console.log(\"Hello\");\n  };\n}\nvar p1 = new Person(\"张三\", 22, \"actor\");\n```\n\n# 4. 构造函数和实例对象的关系\n\n创建一个实例对象，须使用 new 操作符。以这种方式调用构造函数会经历以下 4 个步骤：\n\n## (1) 解析构造函数代码的执行\n\n1. 创建一个新对象\n2. 将构造函数的作用域赋给新对象（因此 `this` 就指向了这个新对象）\n3. 执行构造函数中的代码\n4. 返回新对象\n\n## (2) constructor 属性\n\n可以通过实例的 `constructor` 属性判断实例和构造函数之间的关系  \n构造函数实例化对象的 `constructor` 属性指向的是构造函数本身\n\n```js\nconsole.log(obj1.constructor == Object);\n```\n\n## (3) instanceof 关键字\n\n如果要检测对象的类型，还是使用 `instanceof` 操作符更可靠一些,返回 `true` 为对象\n\n```js\nconsole.log(obj1 instanceof Object);\n```\n\n## 总结 :\n\n构造函数是根据具体的事物抽象出来的抽象模板  \n实例对象是根据抽象的构造函数模板得到的具体实例对象  \n每一个实例对象都具有一个 `constructor` 属性，指向创建该实例的构造函数\n\n# 5. 构造函数的问题\n\n## 内存浪费\n\n对于每一个实例对象，如果我们在每一个实例对象的内部创建一个属性，值为函数。假如创建两个对象，属性名也许一致,看似都是一模一样的内容，但是其实每一次生成一个实例，都会多占用一些内存，如果实例对象很多，会造成极大的内存浪费。\n\n# 6. 原型\n\n上述问题的更好的解决方案： `prototype`\n\n`Javascript` 规定，每一个构造函数都有一个 `prototype` 属性，指向另一个对象。这个对象的所有属性和方法，都会被构造函数的实例继承。\n这也就意味着，我们可以把所有对象实例需要共享的属性和方法直接定义在 `prototype` 对象上。\n\n```js\nfunction Person(name, age) {\n  this.name = name;\n  this.age = age;\n}\nPerson.prototype.say = function () {\n  console.log(\"Hello\");\n};\n\nvar p1 = new Person(\"Tom\", 20);\nvar p2 = new Person(\"Jerry\", 20);\n\nconsole.log(p1.say === p2.say); // true\n```\n\n**构造函数、实例、原型三者之间的关系**\n\n![js-prototype](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/js/jsprototype.png)\n\n任何函数都具有一个 `prototype` 属性，该属性是一个对象\n\n构造函数的 `prototype` 对象默认都有一个 `constructor` 属性，指向 `prototype` 对象所在函数\n\n通过构造函数得到的实例对象内部会包含一个指向构造函数的 `prototype` 对象的指针 \\_\\_proto\\_\\_\n\\_\\_proto\\_\\_ 是非标准属性\n\n**总结 :**\n\n1. 任何函数都具有一个 `prototype` 属性，该属性是一个对象\n2. 构造函数有一个 `protoType` 属性，它本身是一个对象，我们称之为原型\n3. 构造函数的 `protoType` 原型对象的属性和方法，都可以被构造函数实例化的对象所继承\n4. 构造函数的 `protoType` 原型对象有个 `constructor` 属性，指向的是当前原型对象所在的构造函数\n5. 实例对象有\\_\\_proto\\_\\_属性，它是一个指针，指向的是构造函数的的原型 `prototype`\n6. 实例对象都具有一个 `constructor` 属性，指向创建该实例的构造函数\n\n# 7. 把局部变量变为全局变量\n\n```js\n(function () {\n  var a = 10;\n  window.a = a;\n})(window);\n\nconsole.log(a);\n```\n\n# 未完待续 ...\n","slug":"js/js-object-oriented","published":1,"updated":"2021-06-19T07:10:13.431Z","layout":"post","photos":[],"link":"","_id":"cksvxwno3002ugubqati0ckxc","content":"<h1 id=\"1-JavaScript-面向对象的介绍\"><a href=\"#1-JavaScript-面向对象的介绍\" class=\"headerlink\" title=\"1. JavaScript 面向对象的介绍\"></a>1. JavaScript 面向对象的介绍</h1><h2 id=\"1-什么是对象\"><a href=\"#1-什么是对象\" class=\"headerlink\" title=\"(1) 什么是对象\"></a>(1) 什么是对象</h2><p>Everything is object （万物皆对象）<br>对象是一个容器，封装了属性（ <code>property</code> ）和方法（ <code>method</code> ）。</p>\n<p>ECMAScript-262 把对象定义为：无序属性的集合，其属性可以包含基本值、对象或者函数。严格来讲，这就相当于说对象是一组没有特定顺序的值。对象的每个属性或方法都有一个名字，而每个名字都映射到一个值。</p>\n<h2 id=\"2-什么是面向对象\"><a href=\"#2-什么是面向对象\" class=\"headerlink\" title=\"(2) 什么是面向对象\"></a>(2) 什么是面向对象</h2><p>面向对象是对过程式代码的一种高度封装，目的在于提高代码的开发效率和可维护性。</p>\n<p>面向对象编程 —— Object Oriented Programming，简称 OOP ，是一种编程开发思想。它将真实世界各种复杂的关系，抽象为一个个对象，然后由对象之间的分工与合作，完成对真实世界的模拟。</p>\n<h2 id=\"3-面向对象的特征\"><a href=\"#3-面向对象的特征\" class=\"headerlink\" title=\"(3) 面向对象的特征\"></a>(3) 面向对象的特征</h2><p><strong>封装性</strong></p>\n<p><strong>继承性</strong></p>\n<p><strong>多态性</strong></p>\n<h1 id=\"2-基本类型与引用类型的区别\"><a href=\"#2-基本类型与引用类型的区别\" class=\"headerlink\" title=\"2. 基本类型与引用类型的区别\"></a>2. 基本类型与引用类型的区别</h1><h2 id=\"1-基本类型\"><a href=\"#1-基本类型\" class=\"headerlink\" title=\"(1) 基本类型\"></a>(1) 基本类型</h2><p><strong>占用空间固定，保存在栈中</strong>（当一个方法执行时，每个方法都会建立自己的内存栈，在这个方法内定义的变量将会逐个放入这块栈内存里，随着方法的执行结束，这个方法的内存栈也将自然销毁了。因此，所有在方法中定义的变量都是放在栈内存中的；栈中存储的是基础变量以及一些对象的引用变量，基础变量的值是存储在栈中，而引用变量存储在栈中的是指向堆中的数组或者对象的地址，这就是为何修改引用类型总会影响到其他指向这个地址的引用变量。<br>保存与复制的是值本身，使用 <code>typeof</code> 检测数据的类型，基本类型数据是值类型</p>\n<h2 id=\"2-引用类型\"><a href=\"#2-引用类型\" class=\"headerlink\" title=\"(2) 引用类型\"></a>(2) 引用类型</h2><p><strong>占用空间不固定，保存在堆中</strong>（当我们在程序中创建一个对象时，这个对象将被保存到运行时数据区中，以便反复利用（因为对象的创建成本通常较大），这个运行时数据区就是堆内存。堆内存中的对象不会随方法的结束而销毁，即使方法结束后，这个对象还可能被另一个引用变量所引用（方法的参数传递时很常见），则这个对象依然不会被销毁，只有当一个对象没有任何引用变量引用它时，系统的垃圾回收机制才会在核实的时候回收它</p>\n<p><strong>栈</strong>：自动分配内存空间，系统自动释放，里面存放的是基本类型的值和引用类型的地址</p>\n<p><strong>堆</strong>：动态分配的内存，大小不定，也不会自动释放。里面存放引用类型的值。</p>\n<h1 id=\"3-创建对象的四种方法\"><a href=\"#3-创建对象的四种方法\" class=\"headerlink\" title=\"3. 创建对象的四种方法\"></a>3. 创建对象的四种方法</h1><h2 id=\"1-对象字面量\"><a href=\"#1-对象字面量\" class=\"headerlink\" title=\"1. 对象字面量\"></a>1. 对象字面量</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;zs&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">18</span>,</span><br><span class=\"line\">  <span class=\"attr\">sex</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  fun=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;fun&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-new-Object-创建对象\"><a href=\"#2-new-Object-创建对象\" class=\"headerlink\" title=\"2. new Object()创建对象\"></a>2. new Object()创建对象</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\">person.name = <span class=\"string\">&quot;lisi&quot;</span>;</span><br><span class=\"line\">person.age = <span class=\"number\">35</span>;</span><br><span class=\"line\">person.job = <span class=\"string\">&quot;codeman&quot;</span>;</span><br><span class=\"line\">person.say = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;Hello&quot;</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-工厂函数创建对象\"><a href=\"#3-工厂函数创建对象\" class=\"headerlink\" title=\"3. 工厂函数创建对象\"></a>3. 工厂函数创建对象</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createPerson</span>(<span class=\"params\">name, age, job</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\">  person.name = name;</span><br><span class=\"line\">  person.age = age;</span><br><span class=\"line\">  person.job = job;</span><br><span class=\"line\">  person.say = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;Hello&quot;</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> person;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> p1 = createPerson(<span class=\"string\">&quot;张三&quot;</span>, <span class=\"number\">22</span>, <span class=\"string\">&quot;actor&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-自定义构造函数\"><a href=\"#4-自定义构造函数\" class=\"headerlink\" title=\"4. 自定义构造函数\"></a>4. 自定义构造函数</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age, job</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.job = job;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.say = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;Hello&quot;</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">&quot;张三&quot;</span>, <span class=\"number\">22</span>, <span class=\"string\">&quot;actor&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"4-构造函数和实例对象的关系\"><a href=\"#4-构造函数和实例对象的关系\" class=\"headerlink\" title=\"4. 构造函数和实例对象的关系\"></a>4. 构造函数和实例对象的关系</h1><p>创建一个实例对象，须使用 new 操作符。以这种方式调用构造函数会经历以下 4 个步骤：</p>\n<h2 id=\"1-解析构造函数代码的执行\"><a href=\"#1-解析构造函数代码的执行\" class=\"headerlink\" title=\"(1) 解析构造函数代码的执行\"></a>(1) 解析构造函数代码的执行</h2><ol>\n<li>创建一个新对象</li>\n<li>将构造函数的作用域赋给新对象（因此 <code>this</code> 就指向了这个新对象）</li>\n<li>执行构造函数中的代码</li>\n<li>返回新对象</li>\n</ol>\n<h2 id=\"2-constructor-属性\"><a href=\"#2-constructor-属性\" class=\"headerlink\" title=\"(2) constructor 属性\"></a>(2) constructor 属性</h2><p>可以通过实例的 <code>constructor</code> 属性判断实例和构造函数之间的关系<br>构造函数实例化对象的 <code>constructor</code> 属性指向的是构造函数本身</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1.constructor == <span class=\"built_in\">Object</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-instanceof-关键字\"><a href=\"#3-instanceof-关键字\" class=\"headerlink\" title=\"(3) instanceof 关键字\"></a>(3) instanceof 关键字</h2><p>如果要检测对象的类型，还是使用 <code>instanceof</code> 操作符更可靠一些,返回 <code>true</code> 为对象</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1 <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结 :\"></a>总结 :</h2><p>构造函数是根据具体的事物抽象出来的抽象模板<br>实例对象是根据抽象的构造函数模板得到的具体实例对象<br>每一个实例对象都具有一个 <code>constructor</code> 属性，指向创建该实例的构造函数</p>\n<h1 id=\"5-构造函数的问题\"><a href=\"#5-构造函数的问题\" class=\"headerlink\" title=\"5. 构造函数的问题\"></a>5. 构造函数的问题</h1><h2 id=\"内存浪费\"><a href=\"#内存浪费\" class=\"headerlink\" title=\"内存浪费\"></a>内存浪费</h2><p>对于每一个实例对象，如果我们在每一个实例对象的内部创建一个属性，值为函数。假如创建两个对象，属性名也许一致,看似都是一模一样的内容，但是其实每一次生成一个实例，都会多占用一些内存，如果实例对象很多，会造成极大的内存浪费。</p>\n<h1 id=\"6-原型\"><a href=\"#6-原型\" class=\"headerlink\" title=\"6. 原型\"></a>6. 原型</h1><p>上述问题的更好的解决方案： <code>prototype</code></p>\n<p><code>Javascript</code> 规定，每一个构造函数都有一个 <code>prototype</code> 属性，指向另一个对象。这个对象的所有属性和方法，都会被构造函数的实例继承。<br>这也就意味着，我们可以把所有对象实例需要共享的属性和方法直接定义在 <code>prototype</code> 对象上。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Person.prototype.say = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;Hello&quot;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">&quot;Tom&quot;</span>, <span class=\"number\">20</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"keyword\">new</span> Person(<span class=\"string\">&quot;Jerry&quot;</span>, <span class=\"number\">20</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(p1.say === p2.say); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>构造函数、实例、原型三者之间的关系</strong></p>\n<p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/js/jsprototype.png\" alt=\"js-prototype\"></p>\n<p>任何函数都具有一个 <code>prototype</code> 属性，该属性是一个对象</p>\n<p>构造函数的 <code>prototype</code> 对象默认都有一个 <code>constructor</code> 属性，指向 <code>prototype</code> 对象所在函数</p>\n<p>通过构造函数得到的实例对象内部会包含一个指向构造函数的 <code>prototype</code> 对象的指针 __proto__<br>__proto__ 是非标准属性</p>\n<p><strong>总结 :</strong></p>\n<ol>\n<li>任何函数都具有一个 <code>prototype</code> 属性，该属性是一个对象</li>\n<li>构造函数有一个 <code>protoType</code> 属性，它本身是一个对象，我们称之为原型</li>\n<li>构造函数的 <code>protoType</code> 原型对象的属性和方法，都可以被构造函数实例化的对象所继承</li>\n<li>构造函数的 <code>protoType</code> 原型对象有个 <code>constructor</code> 属性，指向的是当前原型对象所在的构造函数</li>\n<li>实例对象有__proto__属性，它是一个指针，指向的是构造函数的的原型 <code>prototype</code></li>\n<li>实例对象都具有一个 <code>constructor</code> 属性，指向创建该实例的构造函数</li>\n</ol>\n<h1 id=\"7-把局部变量变为全局变量\"><a href=\"#7-把局部变量变为全局变量\" class=\"headerlink\" title=\"7. 把局部变量变为全局变量\"></a>7. 把局部变量变为全局变量</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">  <span class=\"built_in\">window</span>.a = a;</span><br><span class=\"line\">&#125;)(<span class=\"built_in\">window</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"未完待续-…\"><a href=\"#未完待续-…\" class=\"headerlink\" title=\"未完待续 …\"></a>未完待续 …</h1>","site":{"data":{"link":{"class1":{"class_name":"舍友","link_list":{"1":{"name":"codeAntg","link":"https://blog.csdn.net/weixin_44745147","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/fjh.jpg","descr":"那家刀削面不错","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class2":{"class_name":"致谢","link_list":{"1":{"name":"JerrC","link":"https://immyw.com","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/immyw.png","descr":"今日事,今日毕","width":"1px","style":"solid","color":"#60d0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/hexo.svg","descr":"A fast, simple & powerful blog framework","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class3":{"class_name":"友人","link_list":{"1":{"name":"Chester","link":"http://chesterlds.cn","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/chester.jpg","descr":null,"width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Wangs","link":"https://wangsss.cn/","avatar":"https://wangsss.cn/img/avatar.png","descr":"不疯魔，不成活 ~","width":"1px","style":"solid","color":"#9d9d9d","custom":"link_custom1","time":"4s","namecolor":"0094ff","descolor":"#ff9191"}}}}}},"excerpt":"","more":"<h1 id=\"1-JavaScript-面向对象的介绍\"><a href=\"#1-JavaScript-面向对象的介绍\" class=\"headerlink\" title=\"1. JavaScript 面向对象的介绍\"></a>1. JavaScript 面向对象的介绍</h1><h2 id=\"1-什么是对象\"><a href=\"#1-什么是对象\" class=\"headerlink\" title=\"(1) 什么是对象\"></a>(1) 什么是对象</h2><p>Everything is object （万物皆对象）<br>对象是一个容器，封装了属性（ <code>property</code> ）和方法（ <code>method</code> ）。</p>\n<p>ECMAScript-262 把对象定义为：无序属性的集合，其属性可以包含基本值、对象或者函数。严格来讲，这就相当于说对象是一组没有特定顺序的值。对象的每个属性或方法都有一个名字，而每个名字都映射到一个值。</p>\n<h2 id=\"2-什么是面向对象\"><a href=\"#2-什么是面向对象\" class=\"headerlink\" title=\"(2) 什么是面向对象\"></a>(2) 什么是面向对象</h2><p>面向对象是对过程式代码的一种高度封装，目的在于提高代码的开发效率和可维护性。</p>\n<p>面向对象编程 —— Object Oriented Programming，简称 OOP ，是一种编程开发思想。它将真实世界各种复杂的关系，抽象为一个个对象，然后由对象之间的分工与合作，完成对真实世界的模拟。</p>\n<h2 id=\"3-面向对象的特征\"><a href=\"#3-面向对象的特征\" class=\"headerlink\" title=\"(3) 面向对象的特征\"></a>(3) 面向对象的特征</h2><p><strong>封装性</strong></p>\n<p><strong>继承性</strong></p>\n<p><strong>多态性</strong></p>\n<h1 id=\"2-基本类型与引用类型的区别\"><a href=\"#2-基本类型与引用类型的区别\" class=\"headerlink\" title=\"2. 基本类型与引用类型的区别\"></a>2. 基本类型与引用类型的区别</h1><h2 id=\"1-基本类型\"><a href=\"#1-基本类型\" class=\"headerlink\" title=\"(1) 基本类型\"></a>(1) 基本类型</h2><p><strong>占用空间固定，保存在栈中</strong>（当一个方法执行时，每个方法都会建立自己的内存栈，在这个方法内定义的变量将会逐个放入这块栈内存里，随着方法的执行结束，这个方法的内存栈也将自然销毁了。因此，所有在方法中定义的变量都是放在栈内存中的；栈中存储的是基础变量以及一些对象的引用变量，基础变量的值是存储在栈中，而引用变量存储在栈中的是指向堆中的数组或者对象的地址，这就是为何修改引用类型总会影响到其他指向这个地址的引用变量。<br>保存与复制的是值本身，使用 <code>typeof</code> 检测数据的类型，基本类型数据是值类型</p>\n<h2 id=\"2-引用类型\"><a href=\"#2-引用类型\" class=\"headerlink\" title=\"(2) 引用类型\"></a>(2) 引用类型</h2><p><strong>占用空间不固定，保存在堆中</strong>（当我们在程序中创建一个对象时，这个对象将被保存到运行时数据区中，以便反复利用（因为对象的创建成本通常较大），这个运行时数据区就是堆内存。堆内存中的对象不会随方法的结束而销毁，即使方法结束后，这个对象还可能被另一个引用变量所引用（方法的参数传递时很常见），则这个对象依然不会被销毁，只有当一个对象没有任何引用变量引用它时，系统的垃圾回收机制才会在核实的时候回收它</p>\n<p><strong>栈</strong>：自动分配内存空间，系统自动释放，里面存放的是基本类型的值和引用类型的地址</p>\n<p><strong>堆</strong>：动态分配的内存，大小不定，也不会自动释放。里面存放引用类型的值。</p>\n<h1 id=\"3-创建对象的四种方法\"><a href=\"#3-创建对象的四种方法\" class=\"headerlink\" title=\"3. 创建对象的四种方法\"></a>3. 创建对象的四种方法</h1><h2 id=\"1-对象字面量\"><a href=\"#1-对象字面量\" class=\"headerlink\" title=\"1. 对象字面量\"></a>1. 对象字面量</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;zs&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">18</span>,</span><br><span class=\"line\">  <span class=\"attr\">sex</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  fun=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;fun&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-new-Object-创建对象\"><a href=\"#2-new-Object-创建对象\" class=\"headerlink\" title=\"2. new Object()创建对象\"></a>2. new Object()创建对象</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\">person.name = <span class=\"string\">&quot;lisi&quot;</span>;</span><br><span class=\"line\">person.age = <span class=\"number\">35</span>;</span><br><span class=\"line\">person.job = <span class=\"string\">&quot;codeman&quot;</span>;</span><br><span class=\"line\">person.say = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;Hello&quot;</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-工厂函数创建对象\"><a href=\"#3-工厂函数创建对象\" class=\"headerlink\" title=\"3. 工厂函数创建对象\"></a>3. 工厂函数创建对象</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createPerson</span>(<span class=\"params\">name, age, job</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\">  person.name = name;</span><br><span class=\"line\">  person.age = age;</span><br><span class=\"line\">  person.job = job;</span><br><span class=\"line\">  person.say = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;Hello&quot;</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> person;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> p1 = createPerson(<span class=\"string\">&quot;张三&quot;</span>, <span class=\"number\">22</span>, <span class=\"string\">&quot;actor&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-自定义构造函数\"><a href=\"#4-自定义构造函数\" class=\"headerlink\" title=\"4. 自定义构造函数\"></a>4. 自定义构造函数</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age, job</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.job = job;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.say = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;Hello&quot;</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">&quot;张三&quot;</span>, <span class=\"number\">22</span>, <span class=\"string\">&quot;actor&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"4-构造函数和实例对象的关系\"><a href=\"#4-构造函数和实例对象的关系\" class=\"headerlink\" title=\"4. 构造函数和实例对象的关系\"></a>4. 构造函数和实例对象的关系</h1><p>创建一个实例对象，须使用 new 操作符。以这种方式调用构造函数会经历以下 4 个步骤：</p>\n<h2 id=\"1-解析构造函数代码的执行\"><a href=\"#1-解析构造函数代码的执行\" class=\"headerlink\" title=\"(1) 解析构造函数代码的执行\"></a>(1) 解析构造函数代码的执行</h2><ol>\n<li>创建一个新对象</li>\n<li>将构造函数的作用域赋给新对象（因此 <code>this</code> 就指向了这个新对象）</li>\n<li>执行构造函数中的代码</li>\n<li>返回新对象</li>\n</ol>\n<h2 id=\"2-constructor-属性\"><a href=\"#2-constructor-属性\" class=\"headerlink\" title=\"(2) constructor 属性\"></a>(2) constructor 属性</h2><p>可以通过实例的 <code>constructor</code> 属性判断实例和构造函数之间的关系<br>构造函数实例化对象的 <code>constructor</code> 属性指向的是构造函数本身</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1.constructor == <span class=\"built_in\">Object</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-instanceof-关键字\"><a href=\"#3-instanceof-关键字\" class=\"headerlink\" title=\"(3) instanceof 关键字\"></a>(3) instanceof 关键字</h2><p>如果要检测对象的类型，还是使用 <code>instanceof</code> 操作符更可靠一些,返回 <code>true</code> 为对象</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(obj1 <span class=\"keyword\">instanceof</span> <span class=\"built_in\">Object</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结 :\"></a>总结 :</h2><p>构造函数是根据具体的事物抽象出来的抽象模板<br>实例对象是根据抽象的构造函数模板得到的具体实例对象<br>每一个实例对象都具有一个 <code>constructor</code> 属性，指向创建该实例的构造函数</p>\n<h1 id=\"5-构造函数的问题\"><a href=\"#5-构造函数的问题\" class=\"headerlink\" title=\"5. 构造函数的问题\"></a>5. 构造函数的问题</h1><h2 id=\"内存浪费\"><a href=\"#内存浪费\" class=\"headerlink\" title=\"内存浪费\"></a>内存浪费</h2><p>对于每一个实例对象，如果我们在每一个实例对象的内部创建一个属性，值为函数。假如创建两个对象，属性名也许一致,看似都是一模一样的内容，但是其实每一次生成一个实例，都会多占用一些内存，如果实例对象很多，会造成极大的内存浪费。</p>\n<h1 id=\"6-原型\"><a href=\"#6-原型\" class=\"headerlink\" title=\"6. 原型\"></a>6. 原型</h1><p>上述问题的更好的解决方案： <code>prototype</code></p>\n<p><code>Javascript</code> 规定，每一个构造函数都有一个 <code>prototype</code> 属性，指向另一个对象。这个对象的所有属性和方法，都会被构造函数的实例继承。<br>这也就意味着，我们可以把所有对象实例需要共享的属性和方法直接定义在 <code>prototype</code> 对象上。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Person.prototype.say = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;Hello&quot;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">&quot;Tom&quot;</span>, <span class=\"number\">20</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"keyword\">new</span> Person(<span class=\"string\">&quot;Jerry&quot;</span>, <span class=\"number\">20</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(p1.say === p2.say); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>构造函数、实例、原型三者之间的关系</strong></p>\n<p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/js/jsprototype.png\" alt=\"js-prototype\"></p>\n<p>任何函数都具有一个 <code>prototype</code> 属性，该属性是一个对象</p>\n<p>构造函数的 <code>prototype</code> 对象默认都有一个 <code>constructor</code> 属性，指向 <code>prototype</code> 对象所在函数</p>\n<p>通过构造函数得到的实例对象内部会包含一个指向构造函数的 <code>prototype</code> 对象的指针 __proto__<br>__proto__ 是非标准属性</p>\n<p><strong>总结 :</strong></p>\n<ol>\n<li>任何函数都具有一个 <code>prototype</code> 属性，该属性是一个对象</li>\n<li>构造函数有一个 <code>protoType</code> 属性，它本身是一个对象，我们称之为原型</li>\n<li>构造函数的 <code>protoType</code> 原型对象的属性和方法，都可以被构造函数实例化的对象所继承</li>\n<li>构造函数的 <code>protoType</code> 原型对象有个 <code>constructor</code> 属性，指向的是当前原型对象所在的构造函数</li>\n<li>实例对象有__proto__属性，它是一个指针，指向的是构造函数的的原型 <code>prototype</code></li>\n<li>实例对象都具有一个 <code>constructor</code> 属性，指向创建该实例的构造函数</li>\n</ol>\n<h1 id=\"7-把局部变量变为全局变量\"><a href=\"#7-把局部变量变为全局变量\" class=\"headerlink\" title=\"7. 把局部变量变为全局变量\"></a>7. 把局部变量变为全局变量</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">10</span>;</span><br><span class=\"line\">  <span class=\"built_in\">window</span>.a = a;</span><br><span class=\"line\">&#125;)(<span class=\"built_in\">window</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"未完待续-…\"><a href=\"#未完待续-…\" class=\"headerlink\" title=\"未完待续 …\"></a>未完待续 …</h1>"},{"title":"Js 递归","date":"2021-06-19T01:00:22.000Z","top_img":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg","cover":"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/desktop.png","comments":1,"_content":"\n# 简单来说递归就是函数直接或间接调用自己\n\n# 案例\n\n## 1. 递归实现 1 + ... + n\n\n```js\nfunction sum(n) {\n  if (n == 1) {\n    return 1;\n  }\n  return n + sum(n - 1);\n}\nconsole.log(sum(3));\nconsole.log(sum(4));\nconsole.log(sum(100));\n```\n\n## 2. 递归实现 1 \\* . . . \\* n\n\n```js\nfunction sum2(n) {\n  if (n == 1 || n == 0) {\n    return 1;\n  }\n  return n * sum2(n - 1);\n}\nconsole.log(sum2(3));\nconsole.log(sum2(4));\nconsole.log(sum2(5));\nconsole.log(sum2(6));\n```\n\n## 3. 递归实现斐波那契数列\n\n```js\n// 1,1,2,3,5,8 . . .\nfunction feiBoNaQi(n) {\n  if (n == 1 || n == 2) {\n    return 1;\n  }\n  return feiBoNaQi(n - 1) + feiBoNaQi(n - 2);\n}\nconsole.log(feiBoNaQi(1));\nconsole.log(feiBoNaQi(2));\nconsole.log(feiBoNaQi(3));\nconsole.log(feiBoNaQi(4));\nconsole.log(feiBoNaQi(5));\nconsole.log(feiBoNaQi(6));\n```\n\n## 4. 一共 10 级楼梯，每次可以走一步或两步，求一共多少种走法?\n\n```js\n// 1阶 => 1种\n// 2阶 => 2种\n// 3阶 => 3种\n// 4阶 => 5种\n// 假设有 5 阶,去掉一阶就是 4 阶,相当于假设最后走一步,然后加上 4 阶的走法\n\nfunction feiBoNaQi(n) {\n  if (n == 1) {\n    return 1;\n  }\n  if (n == 2) {\n    return 2;\n  }\n  return feiBoNaQi(n - 1) + feiBoNaQi(n - 2);\n}\nconsole.log(feiBoNaQi(5));\n```\n\n## 5. 假设一个细胞一小时后分裂成两个 , 生命周期为三个小时 , 若开始有一个细胞 , n 小时后有多少个细胞?\n\n**黑色代表那个细胞生命结束**\n\n![cell-division](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/js/celldivision.png)\n**方法 1**\n\n```js\n// 白\n// 绿，白\n// 黄，白，绿，白\n// 白，绿，白，黄，白，绿，白\n// 绿，白，黄，白，绿，白，白，绿，白，黄，白，绿，白\n// 黄，白，绿，白，白，绿，白，黄，白，绿，白，绿，白，黄，白，绿，白，白，绿，白，黄，白，绿，白\n\n// 白 (1,1,2,4,7,13,24)\n// 绿 (0,1,1,2,4,7,13)\n// 黄 (0,0,1,1,2,4,7)\n// 总 (1,2,4,7,13,24)\n\n// 找规律发现从第四项开始后者是前三项的和\nfunction A(h) {\n  switch (h) {\n    case 1:\n      return 2;\n    case 2:\n      return 4;\n    case 3:\n      return 7;\n  }\n  return A(h - 1) + A(h - 2) + A(h - 3);\n}\nconsole.log(A(7));\n```\n\n**方法 2**\n\n```js\n// 绿色细胞数量\nfunction green(n) {\n  if (n == 0) {\n    return 0;\n  }\n  return white(n - 1);\n}\n// 黄色细胞数量\nfunction yellow(n) {\n  if (n == 0 || n == 1) {\n    return 0;\n  }\n  return green(n - 1);\n}\n// 白色细胞数量\nfunction white(n) {\n  if (n == 0) {\n    return 1;\n  }\n  return green(n - 1) + yellow(n - 1) + white(n - 1);\n}\n// 细胞数量总和\nfunction total(n) {\n  return green(n) + yellow(n) + white(n);\n}\nconsole.log(total(0)); // 1\nconsole.log(total(1)); // 2\nconsole.log(total(2)); // 4\nconsole.log(total(3)); // 7\nconsole.log(total(4)); // 13\nconsole.log(total(5)); // 24\n```\n\n# The_End\n","source":"_posts/js/js-recursive.md","raw":"---\ntitle: Js 递归\ndate: 2021-06-19 09:00:22\ntop_img: https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg\ncover:\ntags:\n  - javascript\n  - js\n  - recursive\n  - 递归\ncategories:\n  - js\ncomments:\n---\n\n# 简单来说递归就是函数直接或间接调用自己\n\n# 案例\n\n## 1. 递归实现 1 + ... + n\n\n```js\nfunction sum(n) {\n  if (n == 1) {\n    return 1;\n  }\n  return n + sum(n - 1);\n}\nconsole.log(sum(3));\nconsole.log(sum(4));\nconsole.log(sum(100));\n```\n\n## 2. 递归实现 1 \\* . . . \\* n\n\n```js\nfunction sum2(n) {\n  if (n == 1 || n == 0) {\n    return 1;\n  }\n  return n * sum2(n - 1);\n}\nconsole.log(sum2(3));\nconsole.log(sum2(4));\nconsole.log(sum2(5));\nconsole.log(sum2(6));\n```\n\n## 3. 递归实现斐波那契数列\n\n```js\n// 1,1,2,3,5,8 . . .\nfunction feiBoNaQi(n) {\n  if (n == 1 || n == 2) {\n    return 1;\n  }\n  return feiBoNaQi(n - 1) + feiBoNaQi(n - 2);\n}\nconsole.log(feiBoNaQi(1));\nconsole.log(feiBoNaQi(2));\nconsole.log(feiBoNaQi(3));\nconsole.log(feiBoNaQi(4));\nconsole.log(feiBoNaQi(5));\nconsole.log(feiBoNaQi(6));\n```\n\n## 4. 一共 10 级楼梯，每次可以走一步或两步，求一共多少种走法?\n\n```js\n// 1阶 => 1种\n// 2阶 => 2种\n// 3阶 => 3种\n// 4阶 => 5种\n// 假设有 5 阶,去掉一阶就是 4 阶,相当于假设最后走一步,然后加上 4 阶的走法\n\nfunction feiBoNaQi(n) {\n  if (n == 1) {\n    return 1;\n  }\n  if (n == 2) {\n    return 2;\n  }\n  return feiBoNaQi(n - 1) + feiBoNaQi(n - 2);\n}\nconsole.log(feiBoNaQi(5));\n```\n\n## 5. 假设一个细胞一小时后分裂成两个 , 生命周期为三个小时 , 若开始有一个细胞 , n 小时后有多少个细胞?\n\n**黑色代表那个细胞生命结束**\n\n![cell-division](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/js/celldivision.png)\n**方法 1**\n\n```js\n// 白\n// 绿，白\n// 黄，白，绿，白\n// 白，绿，白，黄，白，绿，白\n// 绿，白，黄，白，绿，白，白，绿，白，黄，白，绿，白\n// 黄，白，绿，白，白，绿，白，黄，白，绿，白，绿，白，黄，白，绿，白，白，绿，白，黄，白，绿，白\n\n// 白 (1,1,2,4,7,13,24)\n// 绿 (0,1,1,2,4,7,13)\n// 黄 (0,0,1,1,2,4,7)\n// 总 (1,2,4,7,13,24)\n\n// 找规律发现从第四项开始后者是前三项的和\nfunction A(h) {\n  switch (h) {\n    case 1:\n      return 2;\n    case 2:\n      return 4;\n    case 3:\n      return 7;\n  }\n  return A(h - 1) + A(h - 2) + A(h - 3);\n}\nconsole.log(A(7));\n```\n\n**方法 2**\n\n```js\n// 绿色细胞数量\nfunction green(n) {\n  if (n == 0) {\n    return 0;\n  }\n  return white(n - 1);\n}\n// 黄色细胞数量\nfunction yellow(n) {\n  if (n == 0 || n == 1) {\n    return 0;\n  }\n  return green(n - 1);\n}\n// 白色细胞数量\nfunction white(n) {\n  if (n == 0) {\n    return 1;\n  }\n  return green(n - 1) + yellow(n - 1) + white(n - 1);\n}\n// 细胞数量总和\nfunction total(n) {\n  return green(n) + yellow(n) + white(n);\n}\nconsole.log(total(0)); // 1\nconsole.log(total(1)); // 2\nconsole.log(total(2)); // 4\nconsole.log(total(3)); // 7\nconsole.log(total(4)); // 13\nconsole.log(total(5)); // 24\n```\n\n# The_End\n","slug":"js/js-recursive","published":1,"updated":"2021-06-28T08:53:58.189Z","layout":"post","photos":[],"link":"","_id":"cksvxwno4002xgubq1lrbhabn","content":"<h1 id=\"简单来说递归就是函数直接或间接调用自己\"><a href=\"#简单来说递归就是函数直接或间接调用自己\" class=\"headerlink\" title=\"简单来说递归就是函数直接或间接调用自己\"></a>简单来说递归就是函数直接或间接调用自己</h1><h1 id=\"案例\"><a href=\"#案例\" class=\"headerlink\" title=\"案例\"></a>案例</h1><h2 id=\"1-递归实现-1-…-n\"><a href=\"#1-递归实现-1-…-n\" class=\"headerlink\" title=\"1. 递归实现 1 + … + n\"></a>1. 递归实现 1 + … + n</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> n + sum(n - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum(<span class=\"number\">3</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum(<span class=\"number\">4</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum(<span class=\"number\">100</span>));</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-递归实现-1-n\"><a href=\"#2-递归实现-1-n\" class=\"headerlink\" title=\"2. 递归实现 1 * . . . * n\"></a>2. 递归实现 1 * . . . * n</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum2</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span> || n == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> n * sum2(n - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum2(<span class=\"number\">3</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum2(<span class=\"number\">4</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum2(<span class=\"number\">5</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum2(<span class=\"number\">6</span>));</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-递归实现斐波那契数列\"><a href=\"#3-递归实现斐波那契数列\" class=\"headerlink\" title=\"3. 递归实现斐波那契数列\"></a>3. 递归实现斐波那契数列</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1,1,2,3,5,8 . . .</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">feiBoNaQi</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span> || n == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> feiBoNaQi(n - <span class=\"number\">1</span>) + feiBoNaQi(n - <span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(feiBoNaQi(<span class=\"number\">1</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(feiBoNaQi(<span class=\"number\">2</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(feiBoNaQi(<span class=\"number\">3</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(feiBoNaQi(<span class=\"number\">4</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(feiBoNaQi(<span class=\"number\">5</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(feiBoNaQi(<span class=\"number\">6</span>));</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-一共-10-级楼梯，每次可以走一步或两步，求一共多少种走法\"><a href=\"#4-一共-10-级楼梯，每次可以走一步或两步，求一共多少种走法\" class=\"headerlink\" title=\"4. 一共 10 级楼梯，每次可以走一步或两步，求一共多少种走法?\"></a>4. 一共 10 级楼梯，每次可以走一步或两步，求一共多少种走法?</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1阶 =&gt; 1种</span></span><br><span class=\"line\"><span class=\"comment\">// 2阶 =&gt; 2种</span></span><br><span class=\"line\"><span class=\"comment\">// 3阶 =&gt; 3种</span></span><br><span class=\"line\"><span class=\"comment\">// 4阶 =&gt; 5种</span></span><br><span class=\"line\"><span class=\"comment\">// 假设有 5 阶,去掉一阶就是 4 阶,相当于假设最后走一步,然后加上 4 阶的走法</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">feiBoNaQi</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> feiBoNaQi(n - <span class=\"number\">1</span>) + feiBoNaQi(n - <span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(feiBoNaQi(<span class=\"number\">5</span>));</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-假设一个细胞一小时后分裂成两个-生命周期为三个小时-若开始有一个细胞-n-小时后有多少个细胞\"><a href=\"#5-假设一个细胞一小时后分裂成两个-生命周期为三个小时-若开始有一个细胞-n-小时后有多少个细胞\" class=\"headerlink\" title=\"5. 假设一个细胞一小时后分裂成两个 , 生命周期为三个小时 , 若开始有一个细胞 , n 小时后有多少个细胞?\"></a>5. 假设一个细胞一小时后分裂成两个 , 生命周期为三个小时 , 若开始有一个细胞 , n 小时后有多少个细胞?</h2><p><strong>黑色代表那个细胞生命结束</strong></p>\n<p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/js/celldivision.png\" alt=\"cell-division\"><br><strong>方法 1</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 白</span></span><br><span class=\"line\"><span class=\"comment\">// 绿，白</span></span><br><span class=\"line\"><span class=\"comment\">// 黄，白，绿，白</span></span><br><span class=\"line\"><span class=\"comment\">// 白，绿，白，黄，白，绿，白</span></span><br><span class=\"line\"><span class=\"comment\">// 绿，白，黄，白，绿，白，白，绿，白，黄，白，绿，白</span></span><br><span class=\"line\"><span class=\"comment\">// 黄，白，绿，白，白，绿，白，黄，白，绿，白，绿，白，黄，白，绿，白，白，绿，白，黄，白，绿，白</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 白 (1,1,2,4,7,13,24)</span></span><br><span class=\"line\"><span class=\"comment\">// 绿 (0,1,1,2,4,7,13)</span></span><br><span class=\"line\"><span class=\"comment\">// 黄 (0,0,1,1,2,4,7)</span></span><br><span class=\"line\"><span class=\"comment\">// 总 (1,2,4,7,13,24)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 找规律发现从第四项开始后者是前三项的和</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">A</span>(<span class=\"params\">h</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (h) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">4</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">7</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> A(h - <span class=\"number\">1</span>) + A(h - <span class=\"number\">2</span>) + A(h - <span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(A(<span class=\"number\">7</span>));</span><br></pre></td></tr></table></figure>\n\n<p><strong>方法 2</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 绿色细胞数量</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">green</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> white(n - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 黄色细胞数量</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">yellow</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span> || n == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> green(n - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 白色细胞数量</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">white</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> green(n - <span class=\"number\">1</span>) + yellow(n - <span class=\"number\">1</span>) + white(n - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 细胞数量总和</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">total</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> green(n) + yellow(n) + white(n);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(total(<span class=\"number\">0</span>)); <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(total(<span class=\"number\">1</span>)); <span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(total(<span class=\"number\">2</span>)); <span class=\"comment\">// 4</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(total(<span class=\"number\">3</span>)); <span class=\"comment\">// 7</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(total(<span class=\"number\">4</span>)); <span class=\"comment\">// 13</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(total(<span class=\"number\">5</span>)); <span class=\"comment\">// 24</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"The-End\"><a href=\"#The-End\" class=\"headerlink\" title=\"The_End\"></a>The_End</h1>","site":{"data":{"link":{"class1":{"class_name":"舍友","link_list":{"1":{"name":"codeAntg","link":"https://blog.csdn.net/weixin_44745147","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/fjh.jpg","descr":"那家刀削面不错","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class2":{"class_name":"致谢","link_list":{"1":{"name":"JerrC","link":"https://immyw.com","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/immyw.png","descr":"今日事,今日毕","width":"1px","style":"solid","color":"#60d0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/hexo.svg","descr":"A fast, simple & powerful blog framework","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class3":{"class_name":"友人","link_list":{"1":{"name":"Chester","link":"http://chesterlds.cn","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/chester.jpg","descr":null,"width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Wangs","link":"https://wangsss.cn/","avatar":"https://wangsss.cn/img/avatar.png","descr":"不疯魔，不成活 ~","width":"1px","style":"solid","color":"#9d9d9d","custom":"link_custom1","time":"4s","namecolor":"0094ff","descolor":"#ff9191"}}}}}},"excerpt":"","more":"<h1 id=\"简单来说递归就是函数直接或间接调用自己\"><a href=\"#简单来说递归就是函数直接或间接调用自己\" class=\"headerlink\" title=\"简单来说递归就是函数直接或间接调用自己\"></a>简单来说递归就是函数直接或间接调用自己</h1><h1 id=\"案例\"><a href=\"#案例\" class=\"headerlink\" title=\"案例\"></a>案例</h1><h2 id=\"1-递归实现-1-…-n\"><a href=\"#1-递归实现-1-…-n\" class=\"headerlink\" title=\"1. 递归实现 1 + … + n\"></a>1. 递归实现 1 + … + n</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> n + sum(n - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum(<span class=\"number\">3</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum(<span class=\"number\">4</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum(<span class=\"number\">100</span>));</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-递归实现-1-n\"><a href=\"#2-递归实现-1-n\" class=\"headerlink\" title=\"2. 递归实现 1 * . . . * n\"></a>2. 递归实现 1 * . . . * n</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum2</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span> || n == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> n * sum2(n - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum2(<span class=\"number\">3</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum2(<span class=\"number\">4</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum2(<span class=\"number\">5</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum2(<span class=\"number\">6</span>));</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-递归实现斐波那契数列\"><a href=\"#3-递归实现斐波那契数列\" class=\"headerlink\" title=\"3. 递归实现斐波那契数列\"></a>3. 递归实现斐波那契数列</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1,1,2,3,5,8 . . .</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">feiBoNaQi</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span> || n == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> feiBoNaQi(n - <span class=\"number\">1</span>) + feiBoNaQi(n - <span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(feiBoNaQi(<span class=\"number\">1</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(feiBoNaQi(<span class=\"number\">2</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(feiBoNaQi(<span class=\"number\">3</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(feiBoNaQi(<span class=\"number\">4</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(feiBoNaQi(<span class=\"number\">5</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(feiBoNaQi(<span class=\"number\">6</span>));</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-一共-10-级楼梯，每次可以走一步或两步，求一共多少种走法\"><a href=\"#4-一共-10-级楼梯，每次可以走一步或两步，求一共多少种走法\" class=\"headerlink\" title=\"4. 一共 10 级楼梯，每次可以走一步或两步，求一共多少种走法?\"></a>4. 一共 10 级楼梯，每次可以走一步或两步，求一共多少种走法?</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1阶 =&gt; 1种</span></span><br><span class=\"line\"><span class=\"comment\">// 2阶 =&gt; 2种</span></span><br><span class=\"line\"><span class=\"comment\">// 3阶 =&gt; 3种</span></span><br><span class=\"line\"><span class=\"comment\">// 4阶 =&gt; 5种</span></span><br><span class=\"line\"><span class=\"comment\">// 假设有 5 阶,去掉一阶就是 4 阶,相当于假设最后走一步,然后加上 4 阶的走法</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">feiBoNaQi</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> feiBoNaQi(n - <span class=\"number\">1</span>) + feiBoNaQi(n - <span class=\"number\">2</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(feiBoNaQi(<span class=\"number\">5</span>));</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-假设一个细胞一小时后分裂成两个-生命周期为三个小时-若开始有一个细胞-n-小时后有多少个细胞\"><a href=\"#5-假设一个细胞一小时后分裂成两个-生命周期为三个小时-若开始有一个细胞-n-小时后有多少个细胞\" class=\"headerlink\" title=\"5. 假设一个细胞一小时后分裂成两个 , 生命周期为三个小时 , 若开始有一个细胞 , n 小时后有多少个细胞?\"></a>5. 假设一个细胞一小时后分裂成两个 , 生命周期为三个小时 , 若开始有一个细胞 , n 小时后有多少个细胞?</h2><p><strong>黑色代表那个细胞生命结束</strong></p>\n<p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/js/celldivision.png\" alt=\"cell-division\"><br><strong>方法 1</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 白</span></span><br><span class=\"line\"><span class=\"comment\">// 绿，白</span></span><br><span class=\"line\"><span class=\"comment\">// 黄，白，绿，白</span></span><br><span class=\"line\"><span class=\"comment\">// 白，绿，白，黄，白，绿，白</span></span><br><span class=\"line\"><span class=\"comment\">// 绿，白，黄，白，绿，白，白，绿，白，黄，白，绿，白</span></span><br><span class=\"line\"><span class=\"comment\">// 黄，白，绿，白，白，绿，白，黄，白，绿，白，绿，白，黄，白，绿，白，白，绿，白，黄，白，绿，白</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 白 (1,1,2,4,7,13,24)</span></span><br><span class=\"line\"><span class=\"comment\">// 绿 (0,1,1,2,4,7,13)</span></span><br><span class=\"line\"><span class=\"comment\">// 黄 (0,0,1,1,2,4,7)</span></span><br><span class=\"line\"><span class=\"comment\">// 总 (1,2,4,7,13,24)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 找规律发现从第四项开始后者是前三项的和</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">A</span>(<span class=\"params\">h</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">switch</span> (h) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">4</span>;</span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">7</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> A(h - <span class=\"number\">1</span>) + A(h - <span class=\"number\">2</span>) + A(h - <span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(A(<span class=\"number\">7</span>));</span><br></pre></td></tr></table></figure>\n\n<p><strong>方法 2</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 绿色细胞数量</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">green</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> white(n - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 黄色细胞数量</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">yellow</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span> || n == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> green(n - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 白色细胞数量</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">white</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> green(n - <span class=\"number\">1</span>) + yellow(n - <span class=\"number\">1</span>) + white(n - <span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 细胞数量总和</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">total</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> green(n) + yellow(n) + white(n);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(total(<span class=\"number\">0</span>)); <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(total(<span class=\"number\">1</span>)); <span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(total(<span class=\"number\">2</span>)); <span class=\"comment\">// 4</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(total(<span class=\"number\">3</span>)); <span class=\"comment\">// 7</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(total(<span class=\"number\">4</span>)); <span class=\"comment\">// 13</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(total(<span class=\"number\">5</span>)); <span class=\"comment\">// 24</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"The-End\"><a href=\"#The-End\" class=\"headerlink\" title=\"The_End\"></a>The_End</h1>"},{"title":"Js 正则表达式","date":"2021-06-19T07:06:18.000Z","top_img":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg","cover":"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/desktop.png","comments":1,"_content":"\n# 1. 正则表达式的作用\n\n给定的字符串是否符合正则表达式的过滤逻辑 ( 匹配 )\n可以通过正则表达式，从字符串中获取我们想要的特定部分 ( 提取 )\n强大的字符串替换能力 ( 替换 )\n\n# 2. 正则的组成\n\n## (1) 特殊字符\n\n普通数字 , 字母 , 中文 , 符号 , 特殊字符 . . .\n\n## (2) 常用元字符\n\n| 元字符 | 说明                                  |\n| :----: | :------------------------------------ |\n|   \\d   | 匹配至少一个数字                      |\n|   \\D   | 匹配至少一个除数字外的任意字符        |\n|   \\w   | 匹配至少一个字母或数字或下划线 ( \\_ ) |\n|   \\W   | 匹配至少一个非字母或数字或下划线      |\n|   \\s   | 匹配至少一个空白字符                  |\n|   \\S   | 匹配至少一个非空白任意字符            |\n|   .    | 匹配除换行符以外的任意单个字符        |\n|   ^    | 匹配行首的文本 ( 以谁开始 )           |\n|   $    | 匹配行尾的文本 ( 以谁结束 )           |\n\n## (3) 限定符\n\n| 限定符 | 说明             |\n| :----: | :--------------- |\n|   \\*   | 重复零次或更多次 |\n|   +    | 重复一次或多次   |\n|   ?    | 重复零次或一次   |\n|  {n}   | 重复 n 次        |\n|  {n,}  | 至少重复 n 次    |\n| {n,m}  | 重复 n 到 m 次   |\n\n## (4) 其他符号\n\n|    其他符号     | 说明                                                                               |\n| :-------------: | :--------------------------------------------------------------------------------- |\n|       []        | 字符串用中括号括起来，表示匹配其中的任一字符 , 相当于或的意思, 比如 0 到 9 : [0-9] |\n|       [^]       | 匹配除中括号以内的内容 , 比如 [^0-9] , 就是除了 0 到 9 之外的内容                  |\n|       \\\\        | 转义符： \\ 的用法主要是用法是在正则表达式中的特殊符号转换为它本身的意思            |\n|       \\|        | 或者，选择两者中的一个。注意将左右两边分为两部分，而不管左右两边有多长多乱         |\n|       ( )       | 从两个直接量中选择一个                                                             |\n| [\\u4e00-\\u9fa5] | 匹配汉字                                                                           |\n\n# 3. 创建正则对象\n\n## (1) 字面量创建\n\n```js\nvar reg = /\\d/;\n```\n\n## (2) 构造函数创建\n\n```js\nvar regObj = new RegExp(/\\d/);\n```\n\n# 4. 正则匹配\n\n在 `RegExp` 的原型上有个 `test` 方法,用类测试是否匹配成功\n\n`RegExp.prototype.test()`\n\n**语法** :`reg.test(str)`\n**参数** : `str` 与正则表达式匹配的字符串\n**返回值** : 如果正则表达式与指定的字符串匹配 , 返回 `true` ; 否则 `false`\n\n**案例 :**\n\n**html**\n\n```html\n<input type=\"email\" name=\"\" id=\"\" /> <button>提交</button>\n```\n\n**js**\n\n```js\n// 验证输入邮箱\nvar reg = /^([a-zA-Z]|[0-9])(\\w|\\-)+@[a-zA-Z0-9]+\\.([a-zA-Z]{2,4})$/;\ndocument.querySelector(\"button\").addEventListener(\"click\", function () {\n  var value = document.querySelector(\"input\").value;\n  console.log(reg.test(value));\n});\n```\n\n# 5. 正则提取\n\n`String.prototype.match()`\n\n**语法** : `str.match(reg)`\n**参数** : `reg`\n**返回值 :** 如果使用 `g` 标志，则将返回与完整正则表达式匹配的所有结果 ( `Array` ), 但不会返回捕获组 , 或者未匹配返回 ` null`\n如果未使用 `g` 标志，则仅返回第一个完整匹配及其相关的捕获组( `Array` ) 或者未匹配返回 ` null`\n\n**案例 :**\n\n**html**\n\n```html\n<input type=\"text\" name=\"\" id=\"\" /> <button>提取</button>\n```\n\n**js**\n\n```js\n// 提取非数字\nvar reg = /[^\\d]/g;\ndocument.querySelector(\"button\").addEventListener(\"click\", function () {\n  var value = document.querySelector(\"input\").value;\n  console.log(value.match(reg));\n});\n```\n\n# 6. 正则替换\n\n`String.prototype.replace()`\n\n**原字符串不会改变**\n\n**语法** : `str.replace(regexp|substr, newSubStr|function)`\n\n**返回值 :** 替代后的新的字符串。\n\n**案例 :**\n全局匹配,将 \" l \" 替换为 \" L \"\n\n```js\nvar str = \"Hello World!\";\nconsole.log(str.replace(/l/g, \"L\"));\n```\n\n# The_End\n","source":"_posts/js/js-regexp.md","raw":"---\ntitle: Js 正则表达式\ndate: 2021-06-19 15:06:18\ntop_img: https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg\ncover:\ntags:\n  - js\n  - javascript\n  - RegExp\n  - 正则\n  - test\n  - match\n  - replace\ncategories:\n  - js\ncomments:\n---\n\n# 1. 正则表达式的作用\n\n给定的字符串是否符合正则表达式的过滤逻辑 ( 匹配 )\n可以通过正则表达式，从字符串中获取我们想要的特定部分 ( 提取 )\n强大的字符串替换能力 ( 替换 )\n\n# 2. 正则的组成\n\n## (1) 特殊字符\n\n普通数字 , 字母 , 中文 , 符号 , 特殊字符 . . .\n\n## (2) 常用元字符\n\n| 元字符 | 说明                                  |\n| :----: | :------------------------------------ |\n|   \\d   | 匹配至少一个数字                      |\n|   \\D   | 匹配至少一个除数字外的任意字符        |\n|   \\w   | 匹配至少一个字母或数字或下划线 ( \\_ ) |\n|   \\W   | 匹配至少一个非字母或数字或下划线      |\n|   \\s   | 匹配至少一个空白字符                  |\n|   \\S   | 匹配至少一个非空白任意字符            |\n|   .    | 匹配除换行符以外的任意单个字符        |\n|   ^    | 匹配行首的文本 ( 以谁开始 )           |\n|   $    | 匹配行尾的文本 ( 以谁结束 )           |\n\n## (3) 限定符\n\n| 限定符 | 说明             |\n| :----: | :--------------- |\n|   \\*   | 重复零次或更多次 |\n|   +    | 重复一次或多次   |\n|   ?    | 重复零次或一次   |\n|  {n}   | 重复 n 次        |\n|  {n,}  | 至少重复 n 次    |\n| {n,m}  | 重复 n 到 m 次   |\n\n## (4) 其他符号\n\n|    其他符号     | 说明                                                                               |\n| :-------------: | :--------------------------------------------------------------------------------- |\n|       []        | 字符串用中括号括起来，表示匹配其中的任一字符 , 相当于或的意思, 比如 0 到 9 : [0-9] |\n|       [^]       | 匹配除中括号以内的内容 , 比如 [^0-9] , 就是除了 0 到 9 之外的内容                  |\n|       \\\\        | 转义符： \\ 的用法主要是用法是在正则表达式中的特殊符号转换为它本身的意思            |\n|       \\|        | 或者，选择两者中的一个。注意将左右两边分为两部分，而不管左右两边有多长多乱         |\n|       ( )       | 从两个直接量中选择一个                                                             |\n| [\\u4e00-\\u9fa5] | 匹配汉字                                                                           |\n\n# 3. 创建正则对象\n\n## (1) 字面量创建\n\n```js\nvar reg = /\\d/;\n```\n\n## (2) 构造函数创建\n\n```js\nvar regObj = new RegExp(/\\d/);\n```\n\n# 4. 正则匹配\n\n在 `RegExp` 的原型上有个 `test` 方法,用类测试是否匹配成功\n\n`RegExp.prototype.test()`\n\n**语法** :`reg.test(str)`\n**参数** : `str` 与正则表达式匹配的字符串\n**返回值** : 如果正则表达式与指定的字符串匹配 , 返回 `true` ; 否则 `false`\n\n**案例 :**\n\n**html**\n\n```html\n<input type=\"email\" name=\"\" id=\"\" /> <button>提交</button>\n```\n\n**js**\n\n```js\n// 验证输入邮箱\nvar reg = /^([a-zA-Z]|[0-9])(\\w|\\-)+@[a-zA-Z0-9]+\\.([a-zA-Z]{2,4})$/;\ndocument.querySelector(\"button\").addEventListener(\"click\", function () {\n  var value = document.querySelector(\"input\").value;\n  console.log(reg.test(value));\n});\n```\n\n# 5. 正则提取\n\n`String.prototype.match()`\n\n**语法** : `str.match(reg)`\n**参数** : `reg`\n**返回值 :** 如果使用 `g` 标志，则将返回与完整正则表达式匹配的所有结果 ( `Array` ), 但不会返回捕获组 , 或者未匹配返回 ` null`\n如果未使用 `g` 标志，则仅返回第一个完整匹配及其相关的捕获组( `Array` ) 或者未匹配返回 ` null`\n\n**案例 :**\n\n**html**\n\n```html\n<input type=\"text\" name=\"\" id=\"\" /> <button>提取</button>\n```\n\n**js**\n\n```js\n// 提取非数字\nvar reg = /[^\\d]/g;\ndocument.querySelector(\"button\").addEventListener(\"click\", function () {\n  var value = document.querySelector(\"input\").value;\n  console.log(value.match(reg));\n});\n```\n\n# 6. 正则替换\n\n`String.prototype.replace()`\n\n**原字符串不会改变**\n\n**语法** : `str.replace(regexp|substr, newSubStr|function)`\n\n**返回值 :** 替代后的新的字符串。\n\n**案例 :**\n全局匹配,将 \" l \" 替换为 \" L \"\n\n```js\nvar str = \"Hello World!\";\nconsole.log(str.replace(/l/g, \"L\"));\n```\n\n# The_End\n","slug":"js/js-regexp","published":1,"updated":"2021-06-20T06:19:22.446Z","layout":"post","photos":[],"link":"","_id":"cksvxwno50030gubqdvs85sl4","content":"<h1 id=\"1-正则表达式的作用\"><a href=\"#1-正则表达式的作用\" class=\"headerlink\" title=\"1. 正则表达式的作用\"></a>1. 正则表达式的作用</h1><p>给定的字符串是否符合正则表达式的过滤逻辑 ( 匹配 )<br>可以通过正则表达式，从字符串中获取我们想要的特定部分 ( 提取 )<br>强大的字符串替换能力 ( 替换 )</p>\n<h1 id=\"2-正则的组成\"><a href=\"#2-正则的组成\" class=\"headerlink\" title=\"2. 正则的组成\"></a>2. 正则的组成</h1><h2 id=\"1-特殊字符\"><a href=\"#1-特殊字符\" class=\"headerlink\" title=\"(1) 特殊字符\"></a>(1) 特殊字符</h2><p>普通数字 , 字母 , 中文 , 符号 , 特殊字符 . . .</p>\n<h2 id=\"2-常用元字符\"><a href=\"#2-常用元字符\" class=\"headerlink\" title=\"(2) 常用元字符\"></a>(2) 常用元字符</h2><table>\n<thead>\n<tr>\n<th align=\"center\">元字符</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">\\d</td>\n<td align=\"left\">匹配至少一个数字</td>\n</tr>\n<tr>\n<td align=\"center\">\\D</td>\n<td align=\"left\">匹配至少一个除数字外的任意字符</td>\n</tr>\n<tr>\n<td align=\"center\">\\w</td>\n<td align=\"left\">匹配至少一个字母或数字或下划线 ( _ )</td>\n</tr>\n<tr>\n<td align=\"center\">\\W</td>\n<td align=\"left\">匹配至少一个非字母或数字或下划线</td>\n</tr>\n<tr>\n<td align=\"center\">\\s</td>\n<td align=\"left\">匹配至少一个空白字符</td>\n</tr>\n<tr>\n<td align=\"center\">\\S</td>\n<td align=\"left\">匹配至少一个非空白任意字符</td>\n</tr>\n<tr>\n<td align=\"center\">.</td>\n<td align=\"left\">匹配除换行符以外的任意单个字符</td>\n</tr>\n<tr>\n<td align=\"center\">^</td>\n<td align=\"left\">匹配行首的文本 ( 以谁开始 )</td>\n</tr>\n<tr>\n<td align=\"center\">$</td>\n<td align=\"left\">匹配行尾的文本 ( 以谁结束 )</td>\n</tr>\n</tbody></table>\n<h2 id=\"3-限定符\"><a href=\"#3-限定符\" class=\"headerlink\" title=\"(3) 限定符\"></a>(3) 限定符</h2><table>\n<thead>\n<tr>\n<th align=\"center\">限定符</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">*</td>\n<td align=\"left\">重复零次或更多次</td>\n</tr>\n<tr>\n<td align=\"center\">+</td>\n<td align=\"left\">重复一次或多次</td>\n</tr>\n<tr>\n<td align=\"center\">?</td>\n<td align=\"left\">重复零次或一次</td>\n</tr>\n<tr>\n<td align=\"center\">{n}</td>\n<td align=\"left\">重复 n 次</td>\n</tr>\n<tr>\n<td align=\"center\">{n,}</td>\n<td align=\"left\">至少重复 n 次</td>\n</tr>\n<tr>\n<td align=\"center\">{n,m}</td>\n<td align=\"left\">重复 n 到 m 次</td>\n</tr>\n</tbody></table>\n<h2 id=\"4-其他符号\"><a href=\"#4-其他符号\" class=\"headerlink\" title=\"(4) 其他符号\"></a>(4) 其他符号</h2><table>\n<thead>\n<tr>\n<th align=\"center\">其他符号</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">[]</td>\n<td align=\"left\">字符串用中括号括起来，表示匹配其中的任一字符 , 相当于或的意思, 比如 0 到 9 : [0-9]</td>\n</tr>\n<tr>\n<td align=\"center\">[^]</td>\n<td align=\"left\">匹配除中括号以内的内容 , 比如 [^0-9] , 就是除了 0 到 9 之外的内容</td>\n</tr>\n<tr>\n<td align=\"center\">\\</td>\n<td align=\"left\">转义符： \\ 的用法主要是用法是在正则表达式中的特殊符号转换为它本身的意思</td>\n</tr>\n<tr>\n<td align=\"center\">|</td>\n<td align=\"left\">或者，选择两者中的一个。注意将左右两边分为两部分，而不管左右两边有多长多乱</td>\n</tr>\n<tr>\n<td align=\"center\">( )</td>\n<td align=\"left\">从两个直接量中选择一个</td>\n</tr>\n<tr>\n<td align=\"center\">[\\u4e00-\\u9fa5]</td>\n<td align=\"left\">匹配汉字</td>\n</tr>\n</tbody></table>\n<h1 id=\"3-创建正则对象\"><a href=\"#3-创建正则对象\" class=\"headerlink\" title=\"3. 创建正则对象\"></a>3. 创建正则对象</h1><h2 id=\"1-字面量创建\"><a href=\"#1-字面量创建\" class=\"headerlink\" title=\"(1) 字面量创建\"></a>(1) 字面量创建</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/\\d/</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-构造函数创建\"><a href=\"#2-构造函数创建\" class=\"headerlink\" title=\"(2) 构造函数创建\"></a>(2) 构造函数创建</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> regObj = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"regexp\">/\\d/</span>);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"4-正则匹配\"><a href=\"#4-正则匹配\" class=\"headerlink\" title=\"4. 正则匹配\"></a>4. 正则匹配</h1><p>在 <code>RegExp</code> 的原型上有个 <code>test</code> 方法,用类测试是否匹配成功</p>\n<p><code>RegExp.prototype.test()</code></p>\n<p><strong>语法</strong> :<code>reg.test(str)</code><br><strong>参数</strong> : <code>str</code> 与正则表达式匹配的字符串<br><strong>返回值</strong> : 如果正则表达式与指定的字符串匹配 , 返回 <code>true</code> ; 否则 <code>false</code></p>\n<p><strong>案例 :</strong></p>\n<p><strong>html</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;email&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;&quot;</span> /&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>提交<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 验证输入邮箱</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/^([a-zA-Z]|[0-9])(\\w|\\-)+@[a-zA-Z0-9]+\\.([a-zA-Z]&#123;2,4&#125;)$/</span>;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;button&quot;</span>).addEventListener(<span class=\"string\">&quot;click&quot;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> value = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;input&quot;</span>).value;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(reg.test(value));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"5-正则提取\"><a href=\"#5-正则提取\" class=\"headerlink\" title=\"5. 正则提取\"></a>5. 正则提取</h1><p><code>String.prototype.match()</code></p>\n<p><strong>语法</strong> : <code>str.match(reg)</code><br><strong>参数</strong> : <code>reg</code><br><strong>返回值 :</strong> 如果使用 <code>g</code> 标志，则将返回与完整正则表达式匹配的所有结果 ( <code>Array</code> ), 但不会返回捕获组 , 或者未匹配返回 <code> null</code><br>如果未使用 <code>g</code> 标志，则仅返回第一个完整匹配及其相关的捕获组( <code>Array</code> ) 或者未匹配返回 <code> null</code></p>\n<p><strong>案例 :</strong></p>\n<p><strong>html</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;&quot;</span> /&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>提取<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 提取非数字</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/[^\\d]/g</span>;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;button&quot;</span>).addEventListener(<span class=\"string\">&quot;click&quot;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> value = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;input&quot;</span>).value;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(value.match(reg));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"6-正则替换\"><a href=\"#6-正则替换\" class=\"headerlink\" title=\"6. 正则替换\"></a>6. 正则替换</h1><p><code>String.prototype.replace()</code></p>\n<p><strong>原字符串不会改变</strong></p>\n<p><strong>语法</strong> : <code>str.replace(regexp|substr, newSubStr|function)</code></p>\n<p><strong>返回值 :</strong> 替代后的新的字符串。</p>\n<p><strong>案例 :</strong><br>全局匹配,将 “ l “ 替换为 “ L “</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&quot;Hello World!&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.replace(<span class=\"regexp\">/l/g</span>, <span class=\"string\">&quot;L&quot;</span>));</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"The-End\"><a href=\"#The-End\" class=\"headerlink\" title=\"The_End\"></a>The_End</h1>","site":{"data":{"link":{"class1":{"class_name":"舍友","link_list":{"1":{"name":"codeAntg","link":"https://blog.csdn.net/weixin_44745147","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/fjh.jpg","descr":"那家刀削面不错","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class2":{"class_name":"致谢","link_list":{"1":{"name":"JerrC","link":"https://immyw.com","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/immyw.png","descr":"今日事,今日毕","width":"1px","style":"solid","color":"#60d0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/hexo.svg","descr":"A fast, simple & powerful blog framework","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class3":{"class_name":"友人","link_list":{"1":{"name":"Chester","link":"http://chesterlds.cn","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/chester.jpg","descr":null,"width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Wangs","link":"https://wangsss.cn/","avatar":"https://wangsss.cn/img/avatar.png","descr":"不疯魔，不成活 ~","width":"1px","style":"solid","color":"#9d9d9d","custom":"link_custom1","time":"4s","namecolor":"0094ff","descolor":"#ff9191"}}}}}},"excerpt":"","more":"<h1 id=\"1-正则表达式的作用\"><a href=\"#1-正则表达式的作用\" class=\"headerlink\" title=\"1. 正则表达式的作用\"></a>1. 正则表达式的作用</h1><p>给定的字符串是否符合正则表达式的过滤逻辑 ( 匹配 )<br>可以通过正则表达式，从字符串中获取我们想要的特定部分 ( 提取 )<br>强大的字符串替换能力 ( 替换 )</p>\n<h1 id=\"2-正则的组成\"><a href=\"#2-正则的组成\" class=\"headerlink\" title=\"2. 正则的组成\"></a>2. 正则的组成</h1><h2 id=\"1-特殊字符\"><a href=\"#1-特殊字符\" class=\"headerlink\" title=\"(1) 特殊字符\"></a>(1) 特殊字符</h2><p>普通数字 , 字母 , 中文 , 符号 , 特殊字符 . . .</p>\n<h2 id=\"2-常用元字符\"><a href=\"#2-常用元字符\" class=\"headerlink\" title=\"(2) 常用元字符\"></a>(2) 常用元字符</h2><table>\n<thead>\n<tr>\n<th align=\"center\">元字符</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">\\d</td>\n<td align=\"left\">匹配至少一个数字</td>\n</tr>\n<tr>\n<td align=\"center\">\\D</td>\n<td align=\"left\">匹配至少一个除数字外的任意字符</td>\n</tr>\n<tr>\n<td align=\"center\">\\w</td>\n<td align=\"left\">匹配至少一个字母或数字或下划线 ( _ )</td>\n</tr>\n<tr>\n<td align=\"center\">\\W</td>\n<td align=\"left\">匹配至少一个非字母或数字或下划线</td>\n</tr>\n<tr>\n<td align=\"center\">\\s</td>\n<td align=\"left\">匹配至少一个空白字符</td>\n</tr>\n<tr>\n<td align=\"center\">\\S</td>\n<td align=\"left\">匹配至少一个非空白任意字符</td>\n</tr>\n<tr>\n<td align=\"center\">.</td>\n<td align=\"left\">匹配除换行符以外的任意单个字符</td>\n</tr>\n<tr>\n<td align=\"center\">^</td>\n<td align=\"left\">匹配行首的文本 ( 以谁开始 )</td>\n</tr>\n<tr>\n<td align=\"center\">$</td>\n<td align=\"left\">匹配行尾的文本 ( 以谁结束 )</td>\n</tr>\n</tbody></table>\n<h2 id=\"3-限定符\"><a href=\"#3-限定符\" class=\"headerlink\" title=\"(3) 限定符\"></a>(3) 限定符</h2><table>\n<thead>\n<tr>\n<th align=\"center\">限定符</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">*</td>\n<td align=\"left\">重复零次或更多次</td>\n</tr>\n<tr>\n<td align=\"center\">+</td>\n<td align=\"left\">重复一次或多次</td>\n</tr>\n<tr>\n<td align=\"center\">?</td>\n<td align=\"left\">重复零次或一次</td>\n</tr>\n<tr>\n<td align=\"center\">{n}</td>\n<td align=\"left\">重复 n 次</td>\n</tr>\n<tr>\n<td align=\"center\">{n,}</td>\n<td align=\"left\">至少重复 n 次</td>\n</tr>\n<tr>\n<td align=\"center\">{n,m}</td>\n<td align=\"left\">重复 n 到 m 次</td>\n</tr>\n</tbody></table>\n<h2 id=\"4-其他符号\"><a href=\"#4-其他符号\" class=\"headerlink\" title=\"(4) 其他符号\"></a>(4) 其他符号</h2><table>\n<thead>\n<tr>\n<th align=\"center\">其他符号</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">[]</td>\n<td align=\"left\">字符串用中括号括起来，表示匹配其中的任一字符 , 相当于或的意思, 比如 0 到 9 : [0-9]</td>\n</tr>\n<tr>\n<td align=\"center\">[^]</td>\n<td align=\"left\">匹配除中括号以内的内容 , 比如 [^0-9] , 就是除了 0 到 9 之外的内容</td>\n</tr>\n<tr>\n<td align=\"center\">\\</td>\n<td align=\"left\">转义符： \\ 的用法主要是用法是在正则表达式中的特殊符号转换为它本身的意思</td>\n</tr>\n<tr>\n<td align=\"center\">|</td>\n<td align=\"left\">或者，选择两者中的一个。注意将左右两边分为两部分，而不管左右两边有多长多乱</td>\n</tr>\n<tr>\n<td align=\"center\">( )</td>\n<td align=\"left\">从两个直接量中选择一个</td>\n</tr>\n<tr>\n<td align=\"center\">[\\u4e00-\\u9fa5]</td>\n<td align=\"left\">匹配汉字</td>\n</tr>\n</tbody></table>\n<h1 id=\"3-创建正则对象\"><a href=\"#3-创建正则对象\" class=\"headerlink\" title=\"3. 创建正则对象\"></a>3. 创建正则对象</h1><h2 id=\"1-字面量创建\"><a href=\"#1-字面量创建\" class=\"headerlink\" title=\"(1) 字面量创建\"></a>(1) 字面量创建</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/\\d/</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-构造函数创建\"><a href=\"#2-构造函数创建\" class=\"headerlink\" title=\"(2) 构造函数创建\"></a>(2) 构造函数创建</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> regObj = <span class=\"keyword\">new</span> <span class=\"built_in\">RegExp</span>(<span class=\"regexp\">/\\d/</span>);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"4-正则匹配\"><a href=\"#4-正则匹配\" class=\"headerlink\" title=\"4. 正则匹配\"></a>4. 正则匹配</h1><p>在 <code>RegExp</code> 的原型上有个 <code>test</code> 方法,用类测试是否匹配成功</p>\n<p><code>RegExp.prototype.test()</code></p>\n<p><strong>语法</strong> :<code>reg.test(str)</code><br><strong>参数</strong> : <code>str</code> 与正则表达式匹配的字符串<br><strong>返回值</strong> : 如果正则表达式与指定的字符串匹配 , 返回 <code>true</code> ; 否则 <code>false</code></p>\n<p><strong>案例 :</strong></p>\n<p><strong>html</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;email&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;&quot;</span> /&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>提交<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 验证输入邮箱</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/^([a-zA-Z]|[0-9])(\\w|\\-)+@[a-zA-Z0-9]+\\.([a-zA-Z]&#123;2,4&#125;)$/</span>;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;button&quot;</span>).addEventListener(<span class=\"string\">&quot;click&quot;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> value = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;input&quot;</span>).value;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(reg.test(value));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"5-正则提取\"><a href=\"#5-正则提取\" class=\"headerlink\" title=\"5. 正则提取\"></a>5. 正则提取</h1><p><code>String.prototype.match()</code></p>\n<p><strong>语法</strong> : <code>str.match(reg)</code><br><strong>参数</strong> : <code>reg</code><br><strong>返回值 :</strong> 如果使用 <code>g</code> 标志，则将返回与完整正则表达式匹配的所有结果 ( <code>Array</code> ), 但不会返回捕获组 , 或者未匹配返回 <code> null</code><br>如果未使用 <code>g</code> 标志，则仅返回第一个完整匹配及其相关的捕获组( <code>Array</code> ) 或者未匹配返回 <code> null</code></p>\n<p><strong>案例 :</strong></p>\n<p><strong>html</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;&quot;</span> /&gt;</span> <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>提取<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>js</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 提取非数字</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> reg = <span class=\"regexp\">/[^\\d]/g</span>;</span><br><span class=\"line\"><span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;button&quot;</span>).addEventListener(<span class=\"string\">&quot;click&quot;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> value = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;input&quot;</span>).value;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(value.match(reg));</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"6-正则替换\"><a href=\"#6-正则替换\" class=\"headerlink\" title=\"6. 正则替换\"></a>6. 正则替换</h1><p><code>String.prototype.replace()</code></p>\n<p><strong>原字符串不会改变</strong></p>\n<p><strong>语法</strong> : <code>str.replace(regexp|substr, newSubStr|function)</code></p>\n<p><strong>返回值 :</strong> 替代后的新的字符串。</p>\n<p><strong>案例 :</strong><br>全局匹配,将 “ l “ 替换为 “ L “</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&quot;Hello World!&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.replace(<span class=\"regexp\">/l/g</span>, <span class=\"string\">&quot;L&quot;</span>));</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"The-End\"><a href=\"#The-End\" class=\"headerlink\" title=\"The_End\"></a>The_End</h1>"},{"title":"Js 数组去重方法总结","date":"2021-06-19T08:12:01.000Z","top_img":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg","cover":"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/desktop.png","comments":1,"_content":"\n# 利用 indexOf() 方法判断当新数组里原数组某一项不存在时返回 -1 就 push()\n\n```js\nlet arr = [1, 2, 1, 1, 4, 4, 6, 7, 7, 7, 9, 9, 0, 0, 3, 3, 2];\nfunction A(arr) {\n  let newArr = [];\n  arr.forEach(function (value) {\n    if (newArr.indexOf(value) == -1) {\n      newArr.push(value);\n    }\n  });\n  return newArr;\n}\n// console.log(A(arr));\n```\n\n# 利用 indexOf() 方法判断当原数组里某一项返回值与下标相同时就 push\n\n```js\nfunction B(arr) {\n  let newArr = [];\n  arr.forEach(function (value, index) {\n    if (arr.indexOf(value) == index) {\n      newArr.push(value);\n    }\n  });\n  return newArr;\n}\n// console.log(B(arr));\n```\n\n# 利用对象属性不重复这一特点\n\n```js\nfunction C(arr) {\n  let newArr = [];\n  let obj = {};\n  arr.forEach(function (value) {\n    if (!obj[value]) {\n      newArr.push(value);\n      obj[value] = true;\n    }\n  });\n  return newArr;\n}\n// console.log(C(arr));\n```\n\n# 利用数组的 includes() 方法\n\n```js\nfunction D(arr) {\n  let newArr = [];\n  arr.forEach(function (value) {\n    if (!newArr.includes(value)) {\n      newArr.push(value);\n    }\n  });\n  return newArr;\n}\nconsole.log(D(arr));\n```\n\n# 利用 Set 结构成员不重复\n\n```js\nfunction deduplication(arr) {\n  return Array.from(new Set(arr));\n}\n\nconsole.log(deduplication(arr));\n```\n\n# 未完待续 ...\n","source":"_posts/js/js-remove-array-duplicates.md","raw":"---\ntitle: Js 数组去重方法总结\ndate: 2021-06-19 16:12:01\ntop_img: https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg\ncover:\ntags:\n  - js\n  - javascript\n  - 数组去重\ncategories:\n  - js\ncomments:\n---\n\n# 利用 indexOf() 方法判断当新数组里原数组某一项不存在时返回 -1 就 push()\n\n```js\nlet arr = [1, 2, 1, 1, 4, 4, 6, 7, 7, 7, 9, 9, 0, 0, 3, 3, 2];\nfunction A(arr) {\n  let newArr = [];\n  arr.forEach(function (value) {\n    if (newArr.indexOf(value) == -1) {\n      newArr.push(value);\n    }\n  });\n  return newArr;\n}\n// console.log(A(arr));\n```\n\n# 利用 indexOf() 方法判断当原数组里某一项返回值与下标相同时就 push\n\n```js\nfunction B(arr) {\n  let newArr = [];\n  arr.forEach(function (value, index) {\n    if (arr.indexOf(value) == index) {\n      newArr.push(value);\n    }\n  });\n  return newArr;\n}\n// console.log(B(arr));\n```\n\n# 利用对象属性不重复这一特点\n\n```js\nfunction C(arr) {\n  let newArr = [];\n  let obj = {};\n  arr.forEach(function (value) {\n    if (!obj[value]) {\n      newArr.push(value);\n      obj[value] = true;\n    }\n  });\n  return newArr;\n}\n// console.log(C(arr));\n```\n\n# 利用数组的 includes() 方法\n\n```js\nfunction D(arr) {\n  let newArr = [];\n  arr.forEach(function (value) {\n    if (!newArr.includes(value)) {\n      newArr.push(value);\n    }\n  });\n  return newArr;\n}\nconsole.log(D(arr));\n```\n\n# 利用 Set 结构成员不重复\n\n```js\nfunction deduplication(arr) {\n  return Array.from(new Set(arr));\n}\n\nconsole.log(deduplication(arr));\n```\n\n# 未完待续 ...\n","slug":"js/js-remove-array-duplicates","published":1,"updated":"2021-06-25T10:15:54.814Z","layout":"post","photos":[],"link":"","_id":"cksvxwno60033gubq5x45an1l","content":"<h1 id=\"利用-indexOf-方法判断当新数组里原数组某一项不存在时返回-1-就-push\"><a href=\"#利用-indexOf-方法判断当新数组里原数组某一项不存在时返回-1-就-push\" class=\"headerlink\" title=\"利用 indexOf() 方法判断当新数组里原数组某一项不存在时返回 -1 就 push()\"></a>利用 indexOf() 方法判断当新数组里原数组某一项不存在时返回 -1 就 push()</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">7</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>, <span class=\"number\">9</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">A</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> newArr = [];</span><br><span class=\"line\">  arr.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newArr.indexOf(value) == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      newArr.push(value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> newArr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// console.log(A(arr));</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"利用-indexOf-方法判断当原数组里某一项返回值与下标相同时就-push\"><a href=\"#利用-indexOf-方法判断当原数组里某一项返回值与下标相同时就-push\" class=\"headerlink\" title=\"利用 indexOf() 方法判断当原数组里某一项返回值与下标相同时就 push\"></a>利用 indexOf() 方法判断当原数组里某一项返回值与下标相同时就 push</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">B</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> newArr = [];</span><br><span class=\"line\">  arr.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value, index</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr.indexOf(value) == index) &#123;</span><br><span class=\"line\">      newArr.push(value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> newArr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// console.log(B(arr));</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"利用对象属性不重复这一特点\"><a href=\"#利用对象属性不重复这一特点\" class=\"headerlink\" title=\"利用对象属性不重复这一特点\"></a>利用对象属性不重复这一特点</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">C</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> newArr = [];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> obj = &#123;&#125;;</span><br><span class=\"line\">  arr.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!obj[value]) &#123;</span><br><span class=\"line\">      newArr.push(value);</span><br><span class=\"line\">      obj[value] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> newArr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// console.log(C(arr));</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"利用数组的-includes-方法\"><a href=\"#利用数组的-includes-方法\" class=\"headerlink\" title=\"利用数组的 includes() 方法\"></a>利用数组的 includes() 方法</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">D</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> newArr = [];</span><br><span class=\"line\">  arr.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!newArr.includes(value)) &#123;</span><br><span class=\"line\">      newArr.push(value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> newArr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(D(arr));</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"利用-Set-结构成员不重复\"><a href=\"#利用-Set-结构成员不重复\" class=\"headerlink\" title=\"利用 Set 结构成员不重复\"></a>利用 Set 结构成员不重复</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deduplication</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Array</span>.from(<span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(arr));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(deduplication(arr));</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"未完待续-…\"><a href=\"#未完待续-…\" class=\"headerlink\" title=\"未完待续 …\"></a>未完待续 …</h1>","site":{"data":{"link":{"class1":{"class_name":"舍友","link_list":{"1":{"name":"codeAntg","link":"https://blog.csdn.net/weixin_44745147","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/fjh.jpg","descr":"那家刀削面不错","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class2":{"class_name":"致谢","link_list":{"1":{"name":"JerrC","link":"https://immyw.com","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/immyw.png","descr":"今日事,今日毕","width":"1px","style":"solid","color":"#60d0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/hexo.svg","descr":"A fast, simple & powerful blog framework","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class3":{"class_name":"友人","link_list":{"1":{"name":"Chester","link":"http://chesterlds.cn","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/chester.jpg","descr":null,"width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Wangs","link":"https://wangsss.cn/","avatar":"https://wangsss.cn/img/avatar.png","descr":"不疯魔，不成活 ~","width":"1px","style":"solid","color":"#9d9d9d","custom":"link_custom1","time":"4s","namecolor":"0094ff","descolor":"#ff9191"}}}}}},"excerpt":"","more":"<h1 id=\"利用-indexOf-方法判断当新数组里原数组某一项不存在时返回-1-就-push\"><a href=\"#利用-indexOf-方法判断当新数组里原数组某一项不存在时返回-1-就-push\" class=\"headerlink\" title=\"利用 indexOf() 方法判断当新数组里原数组某一项不存在时返回 -1 就 push()\"></a>利用 indexOf() 方法判断当新数组里原数组某一项不存在时返回 -1 就 push()</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">4</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">7</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>, <span class=\"number\">9</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">A</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> newArr = [];</span><br><span class=\"line\">  arr.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newArr.indexOf(value) == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      newArr.push(value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> newArr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// console.log(A(arr));</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"利用-indexOf-方法判断当原数组里某一项返回值与下标相同时就-push\"><a href=\"#利用-indexOf-方法判断当原数组里某一项返回值与下标相同时就-push\" class=\"headerlink\" title=\"利用 indexOf() 方法判断当原数组里某一项返回值与下标相同时就 push\"></a>利用 indexOf() 方法判断当原数组里某一项返回值与下标相同时就 push</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">B</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> newArr = [];</span><br><span class=\"line\">  arr.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value, index</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr.indexOf(value) == index) &#123;</span><br><span class=\"line\">      newArr.push(value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> newArr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// console.log(B(arr));</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"利用对象属性不重复这一特点\"><a href=\"#利用对象属性不重复这一特点\" class=\"headerlink\" title=\"利用对象属性不重复这一特点\"></a>利用对象属性不重复这一特点</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">C</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> newArr = [];</span><br><span class=\"line\">  <span class=\"keyword\">let</span> obj = &#123;&#125;;</span><br><span class=\"line\">  arr.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!obj[value]) &#123;</span><br><span class=\"line\">      newArr.push(value);</span><br><span class=\"line\">      obj[value] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> newArr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// console.log(C(arr));</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"利用数组的-includes-方法\"><a href=\"#利用数组的-includes-方法\" class=\"headerlink\" title=\"利用数组的 includes() 方法\"></a>利用数组的 includes() 方法</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">D</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> newArr = [];</span><br><span class=\"line\">  arr.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!newArr.includes(value)) &#123;</span><br><span class=\"line\">      newArr.push(value);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">return</span> newArr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(D(arr));</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"利用-Set-结构成员不重复\"><a href=\"#利用-Set-结构成员不重复\" class=\"headerlink\" title=\"利用 Set 结构成员不重复\"></a>利用 Set 结构成员不重复</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">deduplication</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">Array</span>.from(<span class=\"keyword\">new</span> <span class=\"built_in\">Set</span>(arr));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(deduplication(arr));</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"未完待续-…\"><a href=\"#未完待续-…\" class=\"headerlink\" title=\"未完待续 …\"></a>未完待续 …</h1>"},{"title":"原生 Js 实现轮播图","date":"2021-06-04T14:47:07.000Z","top_img":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg","cover":"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/desktop.png","aside":null,"comments":1,"_content":"\n> # [https://github.com/codehhr/web](https://github.com/codehhr/web)\n","source":"_posts/js/js-swiper.md","raw":"---\ntitle: 原生 Js 实现轮播图\ndate: 2021-06-04 22:47:07\ntop_img: https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg\ncover:\ntags:\n  - js\n  - javascript\n  - swiper\n  - 轮播图\ncategories:\n  - js\naside:\ncomments:\n---\n\n> # [https://github.com/codehhr/web](https://github.com/codehhr/web)\n","slug":"js/js-swiper","published":1,"updated":"2021-07-02T02:59:21.579Z","layout":"post","photos":[],"link":"","_id":"cksvxwno70036gubq2rmf1k5w","content":"<blockquote>\n<h1 id=\"https-github-com-codehhr-web\"><a href=\"#https-github-com-codehhr-web\" class=\"headerlink\" title=\"https://github.com/codehhr/web\"></a><a href=\"https://github.com/codehhr/web\">https://github.com/codehhr/web</a></h1></blockquote>\n","site":{"data":{"link":{"class1":{"class_name":"舍友","link_list":{"1":{"name":"codeAntg","link":"https://blog.csdn.net/weixin_44745147","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/fjh.jpg","descr":"那家刀削面不错","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class2":{"class_name":"致谢","link_list":{"1":{"name":"JerrC","link":"https://immyw.com","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/immyw.png","descr":"今日事,今日毕","width":"1px","style":"solid","color":"#60d0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/hexo.svg","descr":"A fast, simple & powerful blog framework","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class3":{"class_name":"友人","link_list":{"1":{"name":"Chester","link":"http://chesterlds.cn","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/chester.jpg","descr":null,"width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Wangs","link":"https://wangsss.cn/","avatar":"https://wangsss.cn/img/avatar.png","descr":"不疯魔，不成活 ~","width":"1px","style":"solid","color":"#9d9d9d","custom":"link_custom1","time":"4s","namecolor":"0094ff","descolor":"#ff9191"}}}}}},"excerpt":"","more":"<blockquote>\n<h1 id=\"https-github-com-codehhr-web\"><a href=\"#https-github-com-codehhr-web\" class=\"headerlink\" title=\"https://github.com/codehhr/web\"></a><a href=\"https://github.com/codehhr/web\">https://github.com/codehhr/web</a></h1></blockquote>\n"},{"title":"Js 获取并格式化当前日期","date":"2021-06-15T03:06:04.000Z","top_img":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg","cover":"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/desktop.png","aside":null,"comments":1,"_content":"\n```js\n// 返回当前日期\nfunction today() {\n  let date = new Date();\n  return (\n    date.getFullYear() +\n    \"-\" +\n    formatTime(date.getMonth() + 1) +\n    \"-\" +\n    formatTime(date.getDate()) +\n    \" \" +\n    formatTime(date.getHours()) +\n    \":\" +\n    formatTime(date.getMinutes()) +\n    \":\" +\n    formatTime(date.getSeconds())\n  );\n  function formatTime(t) {\n    return t < 10 ? \"0\" + t : t;\n  }\n}\n\nconsole.log(today());\n```\n","source":"_posts/js/js-today.md","raw":"---\ntitle: Js 获取并格式化当前日期\ndate: 2021-06-15 11:06:04\ntop_img: https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg\ncover:\ntags:\n  - js\n  - javascript\ncategories:\n  - js\naside:\ncomments:\n---\n\n```js\n// 返回当前日期\nfunction today() {\n  let date = new Date();\n  return (\n    date.getFullYear() +\n    \"-\" +\n    formatTime(date.getMonth() + 1) +\n    \"-\" +\n    formatTime(date.getDate()) +\n    \" \" +\n    formatTime(date.getHours()) +\n    \":\" +\n    formatTime(date.getMinutes()) +\n    \":\" +\n    formatTime(date.getSeconds())\n  );\n  function formatTime(t) {\n    return t < 10 ? \"0\" + t : t;\n  }\n}\n\nconsole.log(today());\n```\n","slug":"js/js-today","published":1,"updated":"2021-06-15T03:14:11.564Z","layout":"post","photos":[],"link":"","_id":"cksvxwno80039gubq5cy2epv0","content":"<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 返回当前日期</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">today</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    date.getFullYear() +</span><br><span class=\"line\">    <span class=\"string\">&quot;-&quot;</span> +</span><br><span class=\"line\">    formatTime(date.getMonth() + <span class=\"number\">1</span>) +</span><br><span class=\"line\">    <span class=\"string\">&quot;-&quot;</span> +</span><br><span class=\"line\">    formatTime(date.getDate()) +</span><br><span class=\"line\">    <span class=\"string\">&quot; &quot;</span> +</span><br><span class=\"line\">    formatTime(date.getHours()) +</span><br><span class=\"line\">    <span class=\"string\">&quot;:&quot;</span> +</span><br><span class=\"line\">    formatTime(date.getMinutes()) +</span><br><span class=\"line\">    <span class=\"string\">&quot;:&quot;</span> +</span><br><span class=\"line\">    formatTime(date.getSeconds())</span><br><span class=\"line\">  );</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">formatTime</span>(<span class=\"params\">t</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> t &lt; <span class=\"number\">10</span> ? <span class=\"string\">&quot;0&quot;</span> + t : t;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(today());</span><br></pre></td></tr></table></figure>\n","site":{"data":{"link":{"class1":{"class_name":"舍友","link_list":{"1":{"name":"codeAntg","link":"https://blog.csdn.net/weixin_44745147","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/fjh.jpg","descr":"那家刀削面不错","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class2":{"class_name":"致谢","link_list":{"1":{"name":"JerrC","link":"https://immyw.com","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/immyw.png","descr":"今日事,今日毕","width":"1px","style":"solid","color":"#60d0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/hexo.svg","descr":"A fast, simple & powerful blog framework","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class3":{"class_name":"友人","link_list":{"1":{"name":"Chester","link":"http://chesterlds.cn","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/chester.jpg","descr":null,"width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Wangs","link":"https://wangsss.cn/","avatar":"https://wangsss.cn/img/avatar.png","descr":"不疯魔，不成活 ~","width":"1px","style":"solid","color":"#9d9d9d","custom":"link_custom1","time":"4s","namecolor":"0094ff","descolor":"#ff9191"}}}}}},"excerpt":"","more":"<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 返回当前日期</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">today</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    date.getFullYear() +</span><br><span class=\"line\">    <span class=\"string\">&quot;-&quot;</span> +</span><br><span class=\"line\">    formatTime(date.getMonth() + <span class=\"number\">1</span>) +</span><br><span class=\"line\">    <span class=\"string\">&quot;-&quot;</span> +</span><br><span class=\"line\">    formatTime(date.getDate()) +</span><br><span class=\"line\">    <span class=\"string\">&quot; &quot;</span> +</span><br><span class=\"line\">    formatTime(date.getHours()) +</span><br><span class=\"line\">    <span class=\"string\">&quot;:&quot;</span> +</span><br><span class=\"line\">    formatTime(date.getMinutes()) +</span><br><span class=\"line\">    <span class=\"string\">&quot;:&quot;</span> +</span><br><span class=\"line\">    formatTime(date.getSeconds())</span><br><span class=\"line\">  );</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">formatTime</span>(<span class=\"params\">t</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> t &lt; <span class=\"number\">10</span> ? <span class=\"string\">&quot;0&quot;</span> + t : t;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(today());</span><br></pre></td></tr></table></figure>\n"},{"title":"VMware 安装 CentOS7 后的简单配置","top_img":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg","date":"2020-10-06T12:48:41.000Z","_content":"\n# 1.连网\n\n如果能连网,跳过此步\n试着 ping 一下百度\n\n```bash\nping baidu.com\n```\n\n## 动态分配 IP\n\n```bash\nsudo vim /etc/sysconfig/network-scripts/ifcfg-ens33\n```\n\n记得前面加上 `sudo` ,其实你不加根本编辑不了,哈哈哈哈哈哈 !\n后面的 `ens33` 可能不太一样,是网卡名,输入的时候按 `Tab` 补全就行了\n\n![dhcp](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/centos/dhcp.png)\n\n如上图所示需要改动两个地方\n\n```bash\nBOOTPROTO=dhcp\nONBOOT=yes\n```\n\n顺便说一下`vim`这个编辑器,按`i`,`o`,`I`,`A`都可以进入插入模式，退出保存先按`esc`,然后按 `ZZ` (大写的) 就可以了,或者按 `esc` 后输入`:wq`再按回车\n\n然后重启网络服务\n\n```bash\nsudo systemctl restart network\n```\n\n输入`ip addr`可以查看 ip,试着 ping 一下 baidu ,已经有网了\n\n![ipaddr](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/centos/ipaddr.png)\n\n# 2.换为国内软件源,方便快速下载(其实有好几种方式)\n\n> ## 作为参考: https://mirrors.cnnic.cn/help/centos/\n\n## 可以先把原来的源文件备份一下\n\n```bash\nsudo mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup\n```\n\n## 下载阿里和网易的 CentOS-Base.repo\n\n### 我用的 CentOS-7\n\n```bash\nsudo wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo\n或者\nsudo curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.163.com/.help/CentOS7-Base-163.repo\n```\n\n## 清除 yum 缓存并生成新的 yum 缓存\n\n```bash\nsudo yum clean all\nsudo yum makecache\n```\n\n## 安装 epel 源\n\n```bash\nsudo yum list | grep epel-release\nsudo yum install -y epel-release\n```\n\n## 使用阿里镜像提供的 epel 源\n\n```bash\nsudo wget -O /etc/yum.repos.d/epel-7.repo http://mirrors.aliyun.com/repo/epel-7.repo\n```\n\n## 重新清除 yum 缓存并生成新的 yum 缓存\n\n```bash\nsudo yum clean all\nsudo yum makecache\n```\n\n## 系统升级\n\n```bash\nsudo yum -y update\n```\n\n会更新所有软件\n`-y`可选,加上会同意所有项,即默认 `yes`\n\n# 3.安装,卸载软件\n\n比如安装`git`\n\n```bash\nsudo yum -y install git\n```\n\n卸载 `git`\n\n```bash\nsudo yum -y remove git\n```\n\n# The_End\n","source":"_posts/linux/linux-centos.md","raw":"---\ntitle: VMware 安装 CentOS7 后的简单配置\ntop_img: https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg\ndate: 2020-10-06 20:48:41\ntags:\n  - linux\n  - CentOS\ncategories:\n  - linux\n  - CentOS\n---\n\n# 1.连网\n\n如果能连网,跳过此步\n试着 ping 一下百度\n\n```bash\nping baidu.com\n```\n\n## 动态分配 IP\n\n```bash\nsudo vim /etc/sysconfig/network-scripts/ifcfg-ens33\n```\n\n记得前面加上 `sudo` ,其实你不加根本编辑不了,哈哈哈哈哈哈 !\n后面的 `ens33` 可能不太一样,是网卡名,输入的时候按 `Tab` 补全就行了\n\n![dhcp](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/centos/dhcp.png)\n\n如上图所示需要改动两个地方\n\n```bash\nBOOTPROTO=dhcp\nONBOOT=yes\n```\n\n顺便说一下`vim`这个编辑器,按`i`,`o`,`I`,`A`都可以进入插入模式，退出保存先按`esc`,然后按 `ZZ` (大写的) 就可以了,或者按 `esc` 后输入`:wq`再按回车\n\n然后重启网络服务\n\n```bash\nsudo systemctl restart network\n```\n\n输入`ip addr`可以查看 ip,试着 ping 一下 baidu ,已经有网了\n\n![ipaddr](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/centos/ipaddr.png)\n\n# 2.换为国内软件源,方便快速下载(其实有好几种方式)\n\n> ## 作为参考: https://mirrors.cnnic.cn/help/centos/\n\n## 可以先把原来的源文件备份一下\n\n```bash\nsudo mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup\n```\n\n## 下载阿里和网易的 CentOS-Base.repo\n\n### 我用的 CentOS-7\n\n```bash\nsudo wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo\n或者\nsudo curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.163.com/.help/CentOS7-Base-163.repo\n```\n\n## 清除 yum 缓存并生成新的 yum 缓存\n\n```bash\nsudo yum clean all\nsudo yum makecache\n```\n\n## 安装 epel 源\n\n```bash\nsudo yum list | grep epel-release\nsudo yum install -y epel-release\n```\n\n## 使用阿里镜像提供的 epel 源\n\n```bash\nsudo wget -O /etc/yum.repos.d/epel-7.repo http://mirrors.aliyun.com/repo/epel-7.repo\n```\n\n## 重新清除 yum 缓存并生成新的 yum 缓存\n\n```bash\nsudo yum clean all\nsudo yum makecache\n```\n\n## 系统升级\n\n```bash\nsudo yum -y update\n```\n\n会更新所有软件\n`-y`可选,加上会同意所有项,即默认 `yes`\n\n# 3.安装,卸载软件\n\n比如安装`git`\n\n```bash\nsudo yum -y install git\n```\n\n卸载 `git`\n\n```bash\nsudo yum -y remove git\n```\n\n# The_End\n","slug":"linux/linux-centos","published":1,"updated":"2021-07-18T07:24:35.232Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cksvxwno9003cgubqhaoj68mq","content":"<h1 id=\"1-连网\"><a href=\"#1-连网\" class=\"headerlink\" title=\"1.连网\"></a>1.连网</h1><p>如果能连网,跳过此步<br>试着 ping 一下百度</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ping baidu.com</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"动态分配-IP\"><a href=\"#动态分配-IP\" class=\"headerlink\" title=\"动态分配 IP\"></a>动态分配 IP</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/sysconfig/network-scripts/ifcfg-ens33</span><br></pre></td></tr></table></figure>\n\n<p>记得前面加上 <code>sudo</code> ,其实你不加根本编辑不了,哈哈哈哈哈哈 !<br>后面的 <code>ens33</code> 可能不太一样,是网卡名,输入的时候按 <code>Tab</code> 补全就行了</p>\n<p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/centos/dhcp.png\" alt=\"dhcp\"></p>\n<p>如上图所示需要改动两个地方</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BOOTPROTO=dhcp</span><br><span class=\"line\">ONBOOT=yes</span><br></pre></td></tr></table></figure>\n\n<p>顺便说一下<code>vim</code>这个编辑器,按<code>i</code>,<code>o</code>,<code>I</code>,<code>A</code>都可以进入插入模式，退出保存先按<code>esc</code>,然后按 <code>ZZ</code> (大写的) 就可以了,或者按 <code>esc</code> 后输入<code>:wq</code>再按回车</p>\n<p>然后重启网络服务</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl restart network</span><br></pre></td></tr></table></figure>\n\n<p>输入<code>ip addr</code>可以查看 ip,试着 ping 一下 baidu ,已经有网了</p>\n<p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/centos/ipaddr.png\" alt=\"ipaddr\"></p>\n<h1 id=\"2-换为国内软件源-方便快速下载-其实有好几种方式\"><a href=\"#2-换为国内软件源-方便快速下载-其实有好几种方式\" class=\"headerlink\" title=\"2.换为国内软件源,方便快速下载(其实有好几种方式)\"></a>2.换为国内软件源,方便快速下载(其实有好几种方式)</h1><blockquote>\n<h2 id=\"作为参考-https-mirrors-cnnic-cn-help-centos\"><a href=\"#作为参考-https-mirrors-cnnic-cn-help-centos\" class=\"headerlink\" title=\"作为参考: https://mirrors.cnnic.cn/help/centos/\"></a>作为参考: <a href=\"https://mirrors.cnnic.cn/help/centos/\">https://mirrors.cnnic.cn/help/centos/</a></h2></blockquote>\n<h2 id=\"可以先把原来的源文件备份一下\"><a href=\"#可以先把原来的源文件备份一下\" class=\"headerlink\" title=\"可以先把原来的源文件备份一下\"></a>可以先把原来的源文件备份一下</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"下载阿里和网易的-CentOS-Base-repo\"><a href=\"#下载阿里和网易的-CentOS-Base-repo\" class=\"headerlink\" title=\"下载阿里和网易的 CentOS-Base.repo\"></a>下载阿里和网易的 CentOS-Base.repo</h2><h3 id=\"我用的-CentOS-7\"><a href=\"#我用的-CentOS-7\" class=\"headerlink\" title=\"我用的 CentOS-7\"></a>我用的 CentOS-7</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class=\"line\">或者</span><br><span class=\"line\">sudo curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.163.com/.<span class=\"built_in\">help</span>/CentOS7-Base-163.repo</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"清除-yum-缓存并生成新的-yum-缓存\"><a href=\"#清除-yum-缓存并生成新的-yum-缓存\" class=\"headerlink\" title=\"清除 yum 缓存并生成新的 yum 缓存\"></a>清除 yum 缓存并生成新的 yum 缓存</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum clean all</span><br><span class=\"line\">sudo yum makecache</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装-epel-源\"><a href=\"#安装-epel-源\" class=\"headerlink\" title=\"安装 epel 源\"></a>安装 epel 源</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum list | grep epel-release</span><br><span class=\"line\">sudo yum install -y epel-release</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用阿里镜像提供的-epel-源\"><a href=\"#使用阿里镜像提供的-epel-源\" class=\"headerlink\" title=\"使用阿里镜像提供的 epel 源\"></a>使用阿里镜像提供的 epel 源</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo wget -O /etc/yum.repos.d/epel-7.repo http://mirrors.aliyun.com/repo/epel-7.repo</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"重新清除-yum-缓存并生成新的-yum-缓存\"><a href=\"#重新清除-yum-缓存并生成新的-yum-缓存\" class=\"headerlink\" title=\"重新清除 yum 缓存并生成新的 yum 缓存\"></a>重新清除 yum 缓存并生成新的 yum 缓存</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum clean all</span><br><span class=\"line\">sudo yum makecache</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"系统升级\"><a href=\"#系统升级\" class=\"headerlink\" title=\"系统升级\"></a>系统升级</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum -y update</span><br></pre></td></tr></table></figure>\n\n<p>会更新所有软件<br><code>-y</code>可选,加上会同意所有项,即默认 <code>yes</code></p>\n<h1 id=\"3-安装-卸载软件\"><a href=\"#3-安装-卸载软件\" class=\"headerlink\" title=\"3.安装,卸载软件\"></a>3.安装,卸载软件</h1><p>比如安装<code>git</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum -y install git</span><br></pre></td></tr></table></figure>\n\n<p>卸载 <code>git</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum -y remove git</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"The-End\"><a href=\"#The-End\" class=\"headerlink\" title=\"The_End\"></a>The_End</h1>","site":{"data":{"link":{"class1":{"class_name":"舍友","link_list":{"1":{"name":"codeAntg","link":"https://blog.csdn.net/weixin_44745147","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/fjh.jpg","descr":"那家刀削面不错","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class2":{"class_name":"致谢","link_list":{"1":{"name":"JerrC","link":"https://immyw.com","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/immyw.png","descr":"今日事,今日毕","width":"1px","style":"solid","color":"#60d0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/hexo.svg","descr":"A fast, simple & powerful blog framework","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class3":{"class_name":"友人","link_list":{"1":{"name":"Chester","link":"http://chesterlds.cn","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/chester.jpg","descr":null,"width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Wangs","link":"https://wangsss.cn/","avatar":"https://wangsss.cn/img/avatar.png","descr":"不疯魔，不成活 ~","width":"1px","style":"solid","color":"#9d9d9d","custom":"link_custom1","time":"4s","namecolor":"0094ff","descolor":"#ff9191"}}}}}},"cover":"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/desktop.png","excerpt":"","more":"<h1 id=\"1-连网\"><a href=\"#1-连网\" class=\"headerlink\" title=\"1.连网\"></a>1.连网</h1><p>如果能连网,跳过此步<br>试着 ping 一下百度</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ping baidu.com</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"动态分配-IP\"><a href=\"#动态分配-IP\" class=\"headerlink\" title=\"动态分配 IP\"></a>动态分配 IP</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo vim /etc/sysconfig/network-scripts/ifcfg-ens33</span><br></pre></td></tr></table></figure>\n\n<p>记得前面加上 <code>sudo</code> ,其实你不加根本编辑不了,哈哈哈哈哈哈 !<br>后面的 <code>ens33</code> 可能不太一样,是网卡名,输入的时候按 <code>Tab</code> 补全就行了</p>\n<p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/centos/dhcp.png\" alt=\"dhcp\"></p>\n<p>如上图所示需要改动两个地方</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BOOTPROTO=dhcp</span><br><span class=\"line\">ONBOOT=yes</span><br></pre></td></tr></table></figure>\n\n<p>顺便说一下<code>vim</code>这个编辑器,按<code>i</code>,<code>o</code>,<code>I</code>,<code>A</code>都可以进入插入模式，退出保存先按<code>esc</code>,然后按 <code>ZZ</code> (大写的) 就可以了,或者按 <code>esc</code> 后输入<code>:wq</code>再按回车</p>\n<p>然后重启网络服务</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl restart network</span><br></pre></td></tr></table></figure>\n\n<p>输入<code>ip addr</code>可以查看 ip,试着 ping 一下 baidu ,已经有网了</p>\n<p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/centos/ipaddr.png\" alt=\"ipaddr\"></p>\n<h1 id=\"2-换为国内软件源-方便快速下载-其实有好几种方式\"><a href=\"#2-换为国内软件源-方便快速下载-其实有好几种方式\" class=\"headerlink\" title=\"2.换为国内软件源,方便快速下载(其实有好几种方式)\"></a>2.换为国内软件源,方便快速下载(其实有好几种方式)</h1><blockquote>\n<h2 id=\"作为参考-https-mirrors-cnnic-cn-help-centos\"><a href=\"#作为参考-https-mirrors-cnnic-cn-help-centos\" class=\"headerlink\" title=\"作为参考: https://mirrors.cnnic.cn/help/centos/\"></a>作为参考: <a href=\"https://mirrors.cnnic.cn/help/centos/\">https://mirrors.cnnic.cn/help/centos/</a></h2></blockquote>\n<h2 id=\"可以先把原来的源文件备份一下\"><a href=\"#可以先把原来的源文件备份一下\" class=\"headerlink\" title=\"可以先把原来的源文件备份一下\"></a>可以先把原来的源文件备份一下</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"下载阿里和网易的-CentOS-Base-repo\"><a href=\"#下载阿里和网易的-CentOS-Base-repo\" class=\"headerlink\" title=\"下载阿里和网易的 CentOS-Base.repo\"></a>下载阿里和网易的 CentOS-Base.repo</h2><h3 id=\"我用的-CentOS-7\"><a href=\"#我用的-CentOS-7\" class=\"headerlink\" title=\"我用的 CentOS-7\"></a>我用的 CentOS-7</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class=\"line\">或者</span><br><span class=\"line\">sudo curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.163.com/.<span class=\"built_in\">help</span>/CentOS7-Base-163.repo</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"清除-yum-缓存并生成新的-yum-缓存\"><a href=\"#清除-yum-缓存并生成新的-yum-缓存\" class=\"headerlink\" title=\"清除 yum 缓存并生成新的 yum 缓存\"></a>清除 yum 缓存并生成新的 yum 缓存</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum clean all</span><br><span class=\"line\">sudo yum makecache</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装-epel-源\"><a href=\"#安装-epel-源\" class=\"headerlink\" title=\"安装 epel 源\"></a>安装 epel 源</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum list | grep epel-release</span><br><span class=\"line\">sudo yum install -y epel-release</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用阿里镜像提供的-epel-源\"><a href=\"#使用阿里镜像提供的-epel-源\" class=\"headerlink\" title=\"使用阿里镜像提供的 epel 源\"></a>使用阿里镜像提供的 epel 源</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo wget -O /etc/yum.repos.d/epel-7.repo http://mirrors.aliyun.com/repo/epel-7.repo</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"重新清除-yum-缓存并生成新的-yum-缓存\"><a href=\"#重新清除-yum-缓存并生成新的-yum-缓存\" class=\"headerlink\" title=\"重新清除 yum 缓存并生成新的 yum 缓存\"></a>重新清除 yum 缓存并生成新的 yum 缓存</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum clean all</span><br><span class=\"line\">sudo yum makecache</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"系统升级\"><a href=\"#系统升级\" class=\"headerlink\" title=\"系统升级\"></a>系统升级</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum -y update</span><br></pre></td></tr></table></figure>\n\n<p>会更新所有软件<br><code>-y</code>可选,加上会同意所有项,即默认 <code>yes</code></p>\n<h1 id=\"3-安装-卸载软件\"><a href=\"#3-安装-卸载软件\" class=\"headerlink\" title=\"3.安装,卸载软件\"></a>3.安装,卸载软件</h1><p>比如安装<code>git</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum -y install git</span><br></pre></td></tr></table></figure>\n\n<p>卸载 <code>git</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum -y remove git</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"The-End\"><a href=\"#The-End\" class=\"headerlink\" title=\"The_End\"></a>The_End</h1>"},{"title":"Js 基础总结及案例","date":"2021-05-13T07:03:46.000Z","top_img":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg","cover":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/js/js.jpeg","aside":null,"_content":"\n# 一. JavaScript 介绍\n\n## (1) 、JavaScript 是什么\n\n### 1. JavaScript 的历史\n\nNetscape（网景）在最初将其脚本语言命名为 LiveScript，是布兰登.艾克发明的。后来 Netscape 在与 Sun 合作之后将其改名为 JavaScript。JavaScript 最初受 Java 启发而开始设计的，目的之一就是“看上去像 Java”，因此语法上有类似之处，一些名称和命名规范也借自 Java。JavaScript 与 Java 名称上的近似，是当时 Netscape 为了营销考虑与 Sun 微系统达成协议的结果。\n\n### 2. JavaScript 是什么语言\n\n可以说：Java 服务器端的编程语言，JavaScript 运行在客户端(浏览器)的编程语言\nJavaScript(简称 JS)是一种运行在客户端的脚本语言，JavaScript 的解释器被称为 JavaScript 引擎，为浏览器的一部分，广泛用于客户端的脚本语言，最早是在 HTML（标准通用标记语言下的一个应用）网页上使用，用来给 HTML 网页增加动态功能。\n也可以说，是一门脚本语言、是一门解释性语言、是一门动态类型的语言、是一门基于\n对象的语言。（不是面向对象）、是一门弱性语言\n\n### 3. JavaScript 的发展和意义\n\n最初的目的是为了处理表单的验证操作。JavaScript 发展到现在几乎无所不能，例如：做网页特效、与交互（表单的提交），比如：轮播图、tab 切换、返回顶部。。。\n例如：网页特效、服务端开发(Node.js)、命令行工具(Node.js)、桌面程序(Electron)、App(Cordova)、控制硬件-物联网(Ruff)、游戏开发(cocos2d-js)\n\n### 4. JavaScript 和 HTML、CSS 的区别\n\n`HTML` - 提供网页的结构，提供网页中的内容\n`CSS` - 用来美化网页\n`JavaScript` - 可以用来控制网页内容，给网页增加动态的效果\n\n### 5. JavaScript 的组成\n\n![js](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/js/jscontent.png)\n\n#### （1）ECMAScript - JavaScript 的核心\n\nECMA 欧洲计算机制造联合会。JavaScript 的核心，描述了语言的基本语法和数据类型，ECMAScript 是一套标准，定义了一种语言的标准与具体实现无关。\n\n#### （2）BOM - 浏览器对象模型\n\n一套操作浏览器功能的 API。通过 BOM 可以操作浏览器窗口，比如：弹出框、控制浏览器跳转、获取分辨率等。Borswer object model\n\n#### （3）DOM - 文档对象模型\n\n一套操作页面元素的 API。DOM 可以把 HTML 看做是文档树，通过 DOM 提供的 API 可以对树上的节点进行操作。Document object model\n\n## (2) JavaScript 代码写法\n\nCSS 代码写法分为行内样式、嵌入样式（内部）、外部样式、控制台书写。那么，js 的代码可以分四个地方写：  \n1.在 html 的文件中,script 的标签中写 js 代码  \n2.js 代码可以在 html 的标签中写  \n3.在 js 文件中可以写 js 代码,但是需要在 html 页面中引入 script 的标签中的 src=\"js 的路径\"  \n4.还可以在控制台直接书写 js 代码\n\n### (3) JavaScript 问题总结\n\n1. 在一对 script 的标签中有错误的 js 代码,那么该错误的代码后面的 js 代码不会执行\n2. 如果第一对的 script 标签中有错误,不会影响后面的 script 标签中的 js 代码执行\n3. script 的标签中可以写 type=\"text/javascript\"标准写法或者写 language=\"JavaScript\"都可以。但是，目前在我们的 html 页面中，type 和 language 都可以省略，原因：html 是遵循 h5 的标准。\n4. 有可能会出现这种情况：script 标签中可能同时出现 type 和 language 的写法。\n5. script 标签在页面中可以出现多对。\n6. script 标签一般是放在 body 的标签的最后的，有的时候会在 head 标签中，目前讲课的时候都在 body 标签的后面(body 中的最后)。\n7. 如果 script 标签是引入外部 js 文件的作用，那么这对标签中不要写任何的 js 代码，如果要写，重新写一对 script 标签，里面写代码。\n\n### (4) 注释\n\n单行注释\n\n```js\n// var a;\n```\n\n多行注释\n\n```js\n/*\nvar a = 1\nvar b = 1\n*/\n```\n\n# 二. JavaScript 变量\n\n## (1) 变量引入\n\n**什么是变量**\n变量是计算机内存中存储数据的标识符，根据变量名称可以获取到内存中存储的数据\n**为什么要使用变量**\n使用变量可以方便的获取或者修改内存中的数据\n\n## (2) 变量声明和初始化\n\n`var` 声明变量\n\n```js\nvar age;\n```\n\n变量的赋值\n\n```js\nvar age;\nage = 18;\n```\n\n同时声明多个变量\n\n```js\nvar age, name, sex;\nage = 10;\nname = \"zs\";\n```\n\n同时声明多个变量并赋值\n\n```js\nvar age = 10,\n  name = \"zs\";\n```\n\n变量在内存中的存储\n\n```js\nvar age = 18;\n```\n\n## (3) 变量的命名规则和规范\n\n**规则 - 必须遵守的，不遵守会报错**\n1、由字母、数字、下划线、$符号组成，不能以数字开头\n2、不能是关键字和保留字，例如：for、while。\n3、区分大小写\n**规范 - 建议遵守的，不遵守不会报错**\n1、变量名必须有意义\n2、遵守驼峰命名法。首字母小写，后面单词的首字母需要大写。\n\n## (4) 字面量\n\n在源代码中一个固定值的表示法，也叫字面量。\n数值字面量：8, 9, 10\n字符串字面量：`'程序员'`, `\"大前端\"`\n布尔字面量：`true`，`false`\n\n# 三. JavaScript 数据类型\n\n## (1) 基本数据类型\n\n`Number`、`String`、`Boolean`、`Undefined`、`Null`\n\n### 1. Number 类型\n\n```js\n// 十进制\nvar num = 9;\n//进行算数计算时，八进制和十六进制表示的数值最终都被转换成十进制数值。\n\n// 十六进制\nvar num = 0xA;//数字序列范围：0~9 以及 A~F\n\n// 八进制\nvar num1 = 07;  // 对应十进制的 7\nvar num2 = 011; // 对应十进制的 9\nvar num3 = 021; // 对应十进制的 17 //数字序列范围：0~7\n// 如果字面值中的数值超出了范围，那么前导零将被忽略，后面的数值将被当作十进制数值解析\n\n// 浮点数\nvar n = 5e-5;   // 科学计数法 5 乘以 10 的-5 次方  \n\n// 浮点数值的最高精度是 17 位小数，但在进行算术计算时其精确度远远不如整数\nvar result = 0.1 + 0.2; // 结果不是 0.3，而是：0.30000000000000004\nconsole.log(0.07 * 100);\n\n// 注意：不要判断两个浮点数是否相等\n// 就是说由于 0.1 转换成二进制时是无限循环的，所以在计算机中 0.1 只能存储成一个近似值\n\n// 最小值：\n// 这个值为： 5e-324\nNumber.MIN_VALUE\n\n// 最大值：\n// 这个值为： 1.7976931348623157e+308\nNumber.MAX_VALUE\n\n无穷大：Infinity\n无穷小：-Infinity\n```\n\n### 数值判断\n\n```js\n//可以通过 Number()方法判断\nNaN：not a number\nNaN 与任何值都不相等，包括他本身\nisNaN(): is not a number\n// 如果 x 是特殊的非数字值 NaN (或者能被转换为这样的值 )，返回的值就是 true。如果 x 是其他值,则返回 false\n```\n\n### 2、String 类型\n\n字符串可以使用单引号,也可以使用双引号，例如：`'abc'`、`\"abc\"`\n字符串字面量：`'I am Happy'`、`\"Hello World\"`\n\n#### 转义符\n\n![striingtranslate](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/js/striingtranslate.png)\n\n#### 字符串长度\n\n```js\n// length属性用来获取字符串的长度;\nvar str = \"Hello World\";\nconsole.log(str.length);\n```\n\n#### 字符串拼接\n\n```js\n// 字符串拼接使用 + 连接;\nconsole.log(11 + 11);\nconsole.log(\"hello\" + \" world\");\nconsole.log(\"100\" + \"100\");\nconsole.log(\"11\" + 11);\nconsole.log(\"male:\" + true);\n// 两边只要有一个是字符串，那么+就是字符串拼接功能\n// 两边如果都是数字，那么就是算术功能。\n```\n\n语言具有隐式转换 ( 隐式类型转换就是指，数据的类型在不用人工干预的情况下进行转换的行为，原因：`js` 是一门弱类型（动态类型）的语言，他在声明变量的时候不需要指定类型，对变量赋值也没有类型的检测，所以 `js` 是非常的灵活的，)\n\n### 3. Boolean 类型\n\n`Boolean` 字面量： `true` 和 `false`，区分大小写\n计算机内部存储：`true` 为 `1`，`false` 为 `0`\n\n### 4. Undefined 和 Null\n\n`undefined` 表示一个声明了没有赋值的变量，变量只声明的时候值默认是 `undefined`\n`null` 表示一个空，变量的值如果想为 `null`，必须手动设置\n\n## (2) 复杂数据类型\n\n`Object`\n\n## (3) 数据类型转换\n\n### `typeof` 关键字\n\n获取变量的类型\n\n```js\nvar age = 18;\nconsole.log(typeof age); // number\n```\n\n```js\nconsole.log(typeof null); // Object\n```\n\n**一个 bug，`null` 为什么是引用类型（复杂类型）？**\n\n在 JS 的最初版本中使用的是 32 位系统，为了性能考虑使用低位存储变量的类型信息，000 开头的是对象，`null` 是全 0，所以将 `null` 误判为 `Object` 了，虽然现在的内部类型判断代码已经改变了，但 bug 永久的遗留下来了\n\n### toString()\n\n转换成字符串类型\n\n```js\nvar num = 5;\nconsole.log(num.toString()); // String(\"5\")\n```\n\n### String()\n\n`String()` 函数存在的意义：有些值没有 `toString()`, 这个时候可以使用 `String()`.比如：`undefined` 和 `null`\n\n### 拼接字符串方式\n\n`num + \"\"`，当 + 两边一个操作符是字符串类型，一个操作符是其它类型的时候，会先把其它类型转换成字符串再进行字符串拼接，返回字符串\n\n### 转换成数值类型\n\n`Number()` 可以把任意值转换成数值，如果要转换的字符串中有一个不是数值的字符，返回 `NaN`\n#### Number()转化规则\na. 如果字符串中只包含数字时，将其转换为十进制数值，忽略前导 0\nb. 如果字符串中包含有效浮点格式，如“1.1”，将其转换为对应的浮点数字，忽略前导 0\nc. 如果字符串中包含有效的十六进制格式，如“0xf”，将其转换为相同大小的十进制数值\nd. 如果字符串为空，或者是空内容，将其转换为 0\ne. 如果字符串中包含除上述格式之外的字符，则将其转换为 NaN\n\n#### parseInt()\n\n```js\n// 返回 12，如果第一个字符是数字会解析知道遇到第一个小数点结束\nvar num1 = parseInt(\"12.3abc\");\n// 返回 NaN，如果第一个字符不是数字或者符号就返回 NaN\nvar num2 = parseInt(\"abc123\");\n```\n\n#### parseFloat()\n\n`parseFloat()` 把字符串转换成浮点数，`parseFloat()` 和 `parseInt()` 非常相似，不同之处在与\n`parseFloat()` 会解析第一个`.` 遇到第二个 `.` 或者非数字结束\n如果解析的内容里只有整数，解析成整数\n\n#### 正负运算\n\n```js\nvar str = \"500\";\nconsole.log(+str); // 取正\nconsole.log(-str); // 取负\n```\n\n### 转换成布尔类型\n\n**`Boolean()`**\n`0`, `''`, `null`, `undefined`, `NaN`, 会转换成 `false`,其它都会转换成 `true`\n\n# 四. JavaScript 运算\n\n## (1) 算术运算符\n\n`+ - * / %`\n\n## (2) 一元运算符\n\n一元运算符：只有一个操作数的运算符\n`5 + 6` 两个操作数的运算符是二元运算符\n`++` 自身加 1, `--` 自身减 1\n\n**前置 `++` 先将自身的值自增 1，再将自增后的值赋值给变量**\n\n```js\nvar num1 = 5;\n++num1;\nconsole.log(num1); // 6\n```\n\n**后置 `++` 先将自身的值赋值给变量，然后再自增 1**\n\n```js\nvar num2 = 5;\nconsole.log(num2++); // 5\nconsole.log(num2); // 6\n```\n\n**总结：**\n前置 `++`： 先加后输出\n后置 `++`： 先输出后加\n\n## (3) 逻辑运算符 (布尔运算符)\n\n`&&` (与) 两个操作数同时为 `true`，结果为 `true`，否则都是 `false`\n`||` (或) 两个操作数有一个为 `true`，结果为 `true`，否则为 `false`\n`!` (非) 取反\n\n## (4) 关系运算符(比较运算符)\n\n`< > >= <= == != === !==`\n`==` 与 `===` 的区别：`==` 只进行值得比较，`===` 类型和值同时相等，则相等\n\n```js\nvar result = \"55\" == 55; // true\nvar result = \"55\" === 55; // false 值相等，类型不相等\nvar result = 55 === 55; // true 值和类型都相等\n```\n\n## (5) 赋值运算符\n\n`= += -= *= /= %=`\n\n```js\nnum += 5; //相当于 num = num + 5;\nnum *= 5; //相当于 num = num * 5;\n```\n\n## (6) 运算符的优先级\n\n**优先级从高到底如下：**\n\n括号>点运算符>一元运算符> 算数运算符 >关系运算符>逻辑运算符 >赋值运算符\n\n**注意：同级运算符先后顺序如下：**\n一元运算符 `++` `--` `!`\n算数运算符 先 `*` `/` `%` 后 `+` `-`\n关系运算符 `>` `>=` `<` `<=` `==` `!=` `===` `!==`\n逻辑运算符 先 `&&` 后 `||`\n\n## 运算优先级练习\n\n**优先级： 括号>点运算符>一元运算符> 算数运算符 >关系运算符>逻辑运算符 >赋值运算符**\n(1)\n\n```js\n4 >= 6 || (\"人\" != \"阿凡达\" && !(12 * 2 == 144) && true);\n// 第一轮 4 >= 6 || (\"人\" != \"阿凡达\" && !(false) && true)\n// 第二轮 4 >= 6 || (\"人\" != \"阿凡达\" && true && true)\n// 第三轮 false || (true && true && true)\n// 第四轮 false || true\n// 结果为 true\n```\n\n(2)\n\n```js\n100.2 >= 52 || (\"蛇\" != \"眼镜蛇\" && !(25 * 4 == 120)) || true;\n// 结果为 true\n// 第一轮 : 100.2 >= 52 || (\"蛇\" != \"眼镜蛇\" && !false) || true\n// 第二轮 : 100.2 >= 52 || (\"蛇\" != \"眼镜蛇\" && true) || true\n// 第三轮 : true || (true && true) || true\n// 第四轮 : true\n```\n\n# 五. 流程控制\n\n程序的三种基本结构\n顺序结构：从上到下执行的代码就是顺序结构(程序默认就是由上到下顺序执行的)\n分支结构：根据不同的情况，执行对应代码\n循环结构：重复做一件事情\n\n## 1. 分支结构\n\n### (1) if 语句\n\n`if` 语句  - 只有当指定条件为 true 时，使用该语句来执行代码\n`if...else` 语句  - 当条件为 true 时执行代码，当条件为 false 时执行其他代码\n`if...else if....else` 语句- 使用该语句来选择多个代码块之一来执行\n\n**if 案例判断一个人的年龄是否满 18 岁(是否成年)**\n\n```js\nif // 判断\nif // (条件) {执行语句}\nvar age = 19;\nif (age >= 18) {\n  console.log(\"成年了\");\n}\n\nif (age < 18) {\n  console.log(\"未成年\");\n}\n\n// 弹出输入框\nprompt(\"参数会展示在页面上\") // 点击确认会返回输入内容，点击取消会返回 null\n\nvar a = prompt();\nconsole.log(a);\n\nvar age = prompt();\nif (age >= 18) {\n  console.log(\"成年了\");\n}\nif (age < 18) {\n  console.log(\"未成年\");\n}\n```\n\n**if 案例百分制转换成等级制**\n\n```js\nvar grade = prompt(\"请输入成绩\");\nif (grade > 0 && grade < 60) {\n  console.log(\"不及格\");\n} else if (grade < 70) {\n  console.log(\"及格\");\n} else if (grade < 80) {\n  console.log(\"良\");\n} else if (grade < 90) {\n  console.log(\"良好\");\n} else if (grade <= 100) {\n  console.log(\"优秀\");\n} else {\n  console.log(\"请输入0-100\");\n}\n```\n\n### (2) 三元运算符\n\n`表达式 1` ? `表达式 2` : `表达式 3`\n是对 `if ... else` 语句的一种简化写法\n\n```js\nage >= 18 ? console.log(\"成年\") : console.log(\"未成年\");\n```\n\n### (3) switch 语句\n\n`switch` 语句\n`break` 可以省略，如果省略，代码会继续执行下一个 `case`\n`default` 关键词来规定匹配不存在时做的事情。\n`switch case` 使用严格比较（===），值必须与要匹配的类型相同\n\n```js\nvar day = prompt(\"请输入数字\");\n// prompt 返回类型为字符串\nswitch (Number(day)) {\n  case 1:\n    console.log(\"周一\");\n    break;\n  case 2:\n    console.log(\"周二\");\n    break;\n  case 3:\n    console.log(\"周三\");\n    break;\n  case 4:\n    console.log(\"周四\");\n    break;\n  case 5:\n    console.log(\"周五\");\n    break;\n  case 6:\n    console.log(\"周六\");\n    break;\n  case 7:\n    console.log(\"周日\");\n    break;\n  default:\n    console.log(\"666\");\n}\n```\n\n**百分制转换成等级制**\n\n```js\nvar grade = prompt();\nvar g = parseInt(grade / 10);\nconsole.log(g);\nswitch (g) {\n  case 10:\n    console.log(\"NB\");\n    break;\n  case 9:\n    console.log(\"优秀\");\n    break;\n  case 8:\n    console.log(\"良好\");\n    break;\n  case 7:\n    console.log(\"良\");\n    break;\n  case 6:\n    console.log(\"及格\");\n    break;\n  default:\n    console.log(\"不及格\");\n}\n```\n\n能用 `switch` 语句实现的就一定可以使用 `if` 实现，但是反之不一定，如果是区间范围就采用 `if` .如果是等值判断使用 `switch`\n\n```js\n// If 语句会把后面的值隐式转换成布尔类型\n// 转换为 true ： 非空字符串 非 0 数字 true 任何对象\n// 转换成 false ： 空字符串, 0, false, null, undefined\nif (undefined) {\n  console.log(\"OK\");\n} else {\n  console.log(\"NO\");\n}\n```\n\n## 2. 循环结构\n\n在 `javascript` 中，循环语句有三种，`while`、`do..while`、`for` 循环。\n\n### (1) while 语句\n\nwhile 循环会在指定条件为真时循环执行代码块\n\n```js\n//   死循环\n// while (true) {\n//   console.log();\n// }\n\n// 打印 1-100\nvar a = 1;\nwhile (a <= 100) {\n  console.log(a);\n  a++;\n  console.log(a++);\n}\n\n// 打印 1-100 的和\nvar sum = 0;\nvar b = 1;\nwhile (b <= 100) {\n  sum += b;\n  b++;\n}\n\n// 打印 100 以内 7 的倍数\nvar c = 1;\nwhile (c <= 100) {\n  if (c % 7 == 0) {\n    console.log(c);\n  }\n  c++;\n  // ++c;\n}\n\n// 100 以内偶数及和\nvar d = 1;\nvar sum2 = 0;\nwhile (d <= 100) {\n  if (d % 2 == 0) {\n    console.log(d + \"是偶数\");\n    sum2 += d;\n  }\n  d++;\n}\nconsole.log(sum2);\n\n// 100 以内奇数及和\nvar e = 1;\nvar sum3 = 0;\nwhile (e <= 100) {\n  if (e % 2 != 0) {\n    console.log(e + \"是奇数\");\n    sum3 += e;\n  }\n  e++;\n}\nconsole.log(sum3);\n```\n\n### (2) do...while 语句\n\n`do..while` 循环和 `while` 循环非常像，二者经常可以相互替代，但是 `do..while` 的特点是不管条件成不成立，都会执行一次。\n\n```js\n// do ... while\n// 打印 1-100 之间所有数的和\nvar f = 1;\nvar sum4 = 0;\ndo {\n  console.log(f);\n  sum4 += f;\n  f++;\n} while (f <= 100);\n\n// 打印 100 以内 7的倍数\nvar g = 1;\ndo {\n  if (g % 7 == 0) {\n    console.log(g);\n  }\n  g++;\n} while (g <= 100);\n\n// 打印 100 以内所有偶数\nvar i = 1;\nvar sum = 0;\ndo {\n  if (i % 2 == 0) {\n    console.log(i + \"是偶数\");\n    sum += i;\n  }\n  i++;\n} while (i <= 100);\nconsole.log(sum);\n```\n\n### (3) for 语句\n\n`while` 和 `do...while` 一般用来解决无法确认次数的循环。`for` 循环一般在循环次数确定的时候比较方便\n\n```js\n// for 循环\n// 1-100 和\nvar sum = 0;\nfor (var j = 1; j < 101; j++) {\n  console.log(j);\n  sum += j;\n}\nconsole.log(sum);\n\n// 1-100 偶数和\nvar sum = 0;\nfor (var i = 1; i <= 100; i++) {\n  if (i % 2 == 0) {\n    sum += i;\n  }\n}\nconsole.log(sum);\n\n// 双层 for 循环\n// 正方形\nfor (var i = 0; i < 10; i++) {\n  for (var j = 0; j < 10; j++) {\n    document.write(\"*\");\n  }\n  document.write(\"<br />\");\n}\n\n// 三角形\nfor (var i = 0; i < 10; i++) {\n  for (var j = 0; j < i; j++) {\n    document.write(\"#\");\n  }\n  document.write(\"<br />\");\n}\n```\n\n### (4) continue 和 break\n\n`break` :立即跳出整个循环，即循环结束，开始执行循环后面的内容（直接跳到大括号）\n`continue` :立即跳出当前循环，继续下一次循环（跳到 `i++` 的地方）\n\n```js\n// break\n// continue\nvar sum = 0;\nfor (var i = 1; i <= 100; i++) {\n  if (i % 10 == 3) {\n    break;\n    // continue;\n  }\n}\nsum += i;\nconsole.log(sum);\n```\n\n### (5) 循环语句区别\n\n#### 1. 循环结构的表达式不同\n\n`do-while` 循环结构表达式为：`do`{循环体;}\n`for` 循环的结构表达式为：`for`（单次表达式;条件表达式;末尾循环体）{中间循环体；}。\n`while` 循环的结构表达式为：`while`（表达式）{循环体}\n\n#### 2. 执行时判断方式不同\n\n`do-while` 循环将先运行一次，因为经过第一次 `do` 循环后，当检查条件表达式的值时，其值为   不成立时而会退出循环。保证了至少执行 `do`{ }内的语句一次。\n`for` 循环执行的中间循环体可以为一个语句，也可以为多个语句，当中间循环体只有一个语句时，其大括号{}可以省略，执行完中间循环体后接着执行末尾循环体。\n`while` 循环执行时当满足条件时进入循环，进入循环后，当条件不满足时，执行完循环体内全部语句后再跳出（而不是立即跳出循环）。\n\n#### 3. 执行次数不同\n\n`do-while` 循环是先执行后判断，执行次数至少为一次。\n`for` 循环是先判断后执行，可以不执行中间循环体。\n`while` 循环先判断后执行，可以不执行中间循环体。\n\n#### 4. 执行末尾循环体的顺序不同\n\n`do-while` 循环是在中间循环体中加入末尾循环体，并在执行中间循环体时执行末尾循环体。\n`for` 循环的中间循环体在条件判断语句里，执行末尾循环体后自动执行中间循环体。\n`while` 循环的末尾循环体也是在中间循环体里，并在中间循环体中执行。\n\n## 作业\n\n```js\n// 作业 1\n// 求 1-100 所有数的乘积\nvar sum1 = 1;\nfor (var a = 1; a <= 100; a++) {\n  sum1 *= a;\n}\nconsole.log(sum1);\n// ---------------------------------------------\n// 作业 2\n// 求 1-100 之间所有奇数的和\nvar sum2 = 0;\nfor (var b = 1; b <= 100; b++) {\n  if (b % 2 == 1) {\n    sum2 += b;\n  }\n}\nconsole.log(sum2);\n\n// ---------------------------------------------\n// 作业 3\n// 计算 1-100 之间能被 3 整除的数的和\nvar sum3 = 0;\nfor (var c = 1; c <= 100; c++) {\n  if (c % 3 == 0) {\n    sum3 += c;\n  }\n}\nconsole.log(sum3);\n\n// ---------------------------------------------\n// 作业 4\n// 计算 1-100 之间不能被7整除的数的和\nvar sum4 = 0;\nfor (var d = 1; d <= 100; d++) {\n  if (d % 7 == 0) {\n  } else {\n    sum4 += d;\n  }\n}\nconsole.log(sum4);\n\n// ---------------------------------------------\n// 作业 5\n// 本金10000元存入银行，年利率是千分之三，每过1年，将本金和利息相加作为新的本金。计算5年后，获得的本金是多少？\nvar money = 10000,\n  rate = 0.003,\n  years = 5,\n  sum5 = 0;\nsum5 += money;\nfor (var year = 1; year <= years; year++) {\n  sum5 *= 1 + rate;\n}\nconsole.log(sum5);\n\n// ---------------------------------------------\n// 作业 6\n// 有个人想知道，一年之内一对兔子能繁殖多少对？\n// 于是就筑了一道围墙把一对兔子关在里面。已知一对兔子每个月可以生一对小兔子，而一对兔子从出生后第3个月起每月生一对小兔子。假如一年内没有发生死亡现象，那么，一对兔子一年内（12个月）能繁殖成多少对？\n// (兔子的规律为数列，1，1，2，3，5，8，13，21)\nvar sum6,\n  r1 = 1,\n  r2 = 1;\nfor (var month = 1; month <= 12; month++) {\n  sum6 = r1 + r2;\n  r1 = r2;\n  r2 = sum6;\n  console.log(\"第\" + month + \"个月 : \" + sum6 + \" 只\");\n}\n// ---------------------------------------------\n// 作业 7\n// 求 1-100 之间不能被 7 整除的整数的和（用continue）\nvar sum7 = 0;\nfor (var e = 1; e <= 100; e++) {\n  if (e % 7 == 0) {\n    continue;\n  } else {\n    sum7 += e;\n  }\n}\nconsole.log(sum7);\n\n// ---------------------------------------------\n// 作业 8\n// 求 200-300 之间所有的奇数的和（用continue）\nvar sum8 = 0;\nfor (var i = 200; i <= 300; i++) {\n  if (i % 2 == 0) {\n    continue;\n  } else {\n    sum8 += i;\n  }\n}\nconsole.log(sum8);\n// ---------------------------------------------\n// 作业 9\n// 求 200-300之间第一个能被7整数的数（break）\nfor (var j = 200; j <= 300; j++) {\n  if (j % 7 == 0) {\n    console.log(j);\n    break;\n  }\n}\n```\n\n## 2. 调试\n\n### (1) alert()\n\n### (2) console.log()\n\n### (3) debugger 关键字\n\ndebugger  关键字用于停止执行 JavaScript，并调用调试函数。这个关键字与在调试工具中设置断点的效果是一样的\n\n### (4) 断点调试\n\n# 六. 数组\n\n## (1) 为什么要学习数组\n\n之前学习的数据类型，只能存储一个值,比如：`Number`,`String`\n\n## (2) 数组的定义\n\n所谓数组，就是将多个元素（通常是同一类型）按一定顺序排列放到一个集合中，那么这个集合我们就称之为数组。\n数组是一个有序的列表，可以在数组中存放任意的数据，并且数组的长度可以动态的调整\n\n## (3) 通过数组字面量创建数组\n\n```js\n// 创建一个空数组\nvar arr1 = [];\n// 创建一个包含3个数值的数组，多个数组项以逗号隔开\nvar arr2 = [1, 3, 4];\n// 创建一个包含2个字符串的数组\nvar arr3 = [\"a\", \"c\"];\n// 可以通过数组的length属性获取数组的长度\nconsole.log(arr3.length);\n// 可以设置length属性改变数组中元素的个数\narr3.length = 0;\n```\n\n## (4) 获取数组元素\n\n```js\n// 获取数组元素\n// 按下标取值,从0开始\n// 取值未定义的下标，值为 undefined\nconsole.log(arr2[0]);\nconsole.log(arr2[10]); // undefined\n```\n\n## (5) 遍历数组\n\n遍历：遍及所有，对数组的每一个元素都访问一次就叫遍历。\n\n```js\nfor (var i = 0; i < arr.length; i++) {\n  console.log(arr[i]);\n}\n```\n\n## (6) 数组中新增元素\n\n```js\n// 数组中新增元素\n// 赋值\narr2[arr2.length] = 100;\nconsole.log(arr2);\n\n// push()\n// 在数组末尾添加，返回数组长度\narr2.push(101);\nconsole.log(arr2);\n\n// unshift()\n// 在数组开始添加任意元素,返回数组长度\narr2.unshift(0);\nconsole.log(arr2);\n\n// shift()\n// 从数组中删除第一个元元素，并返回该元素的值.此方法会更改数组的长度\nvar r = arr2.shift();\nconsole.log(r);\nconsole.log(arr2);\n```\n\n## 数组练习案例\n\n```js\n// 求数组所有数平均值\nvar sum = 0;\nvar arr1 = [2, 3, 4];\nfor (var i = 0; i < arr1.length; i++) {\n  sum += arr1[i];\n}\nconsole.log(sum);\nconsole.log(sum / arr1.length);\n\n// 数组最大值，最小值 (第一种)\nvar arr2 = [0, 1, , 32, 0, 2, 3, 4, 5, 6];\nvar min = arr2[0], // 假设第一个元素是最小值\n  max = arr2[0]; // 假设第一个元素是最大值\nfor (var i = 0; i < arr2.length; i++) {\n  if (arr2[i] > max) {\n    max = arr2[i];\n  }\n  if (arr2[i] < min) {\n    min = arr2[i];\n  }\n}\nconsole.log(max);\nconsole.log(min);\n// 数组最大值，最小值 (第二种)\nfor (var i = 0; i < arr2.length; i++) {\n  if (arr2[i] > arr2[i + 1]) {\n    var temp = arr2[i + 1];\n    arr2[i + 1] = arr2[i];\n    arr2[i] = temp;\n  }\n}\nmax = arr2[arr2.length - 1];\nconsole.log(max);\n\n// indexOf()\n// 返回在数组中可以找到一个给定元素的第一个索引，如果不存在，则返回 -1\n// 数组去重\n// 第一种\nvar arr3 = [1, 1, 22, 22, 55, 55, 9, 9];\nvar newArr = [];\nfor (var i = 0; i < arr3.length; i++) {\n  if (arr3.indexOf(arr3[i]) == i) {\n    newArr.push(arr3[i]);\n  }\n}\nconsole.log(newArr);\n\n// 第二种\n// 遍历新数组,indexOf 返回判断 -1, 即不存在就 push()\nfor (var i = 0; i < arr3.length; i++) {\n  if (newArr.indexOf(arr3[i]) == -1) {\n    newArr.push(arr3[i]);\n  }\n}\nconsole.log(newArr);\n```\n\n# 七. 函数\n\n## (1) 为什么要有函数\n\n如果要在多个地方求 1-100 之间所有数的和，应该怎么做？\n\n## (2) 什么是函数\n\n把一段相对独立的具有特定功能的代码块封装起来，形成一个独立实体，就是函数。\n起个名字（函数名），在后续开发中可以反复调用。\n函数的作用就是封装一段代码，将来可以重复使用。\n\n## (3) 函数的定义\n\n```js\n// 1.具名函数\nfunction name() {\n  console.log(\"name\");\n}\n\n// 2.匿名函数\nvar fun = function () {\n  console.log(\"fun\");\n};\n```\n\n## (4) 函数的调用\n\n```js\n// 函数调用，加 (),即函数名();\n// 特点：函数体只有在调用的时候才会执行，调用需要()进行调用。可以调用多次(重复使用)\nname();\nfun();\n```\n\n**示例**\n\n```js\n// 声明函数\nfunction sayHi() {\n  console.log(\"吃了没？\");\n}\n// 调用函数\nsayHi();\n​\n// 求1-100之间所有数的和\nfunction getSum() {\n  var sum = 0;\n  for (var  i = 0; i < 100; i++) {\n    sum += i;\n  }\n  console.log(sum);\n}\n// 调用\ngetSum();\n```\n\n## (5) 函数的参数\n\n**形参和实参**\n\n1. 形式参数：在声明一个函数的时候，为了函数的功能更加灵活，有些值是固定不了的，对于这些固定不了的值。我们可以给函数设置参数。这个参数没有具体的值，仅仅起到一个占位置的作用，我们通常称之为形式参数，也叫形参\n2. 实际参数：如果函数在声明时，设置了形参，那么在函数调用的时候就需要传入对应的参数，我们把传入的参数叫做实际参数，也叫实参。\n\n```js\nvar x = 5,\n  y = 6;\nfn(x, y);\nfunction fn(a, b) {\n  console.log(a + b);\n}\n//x,y实参，有具体的值。函数执行的时候会把x,y复制一份给函数内部的a和b，函数内部的值是复制的新值，无法修改外部的x,y\n// 不传值为 undefined;\n```\n\n## (6) 函数的返回值\n\n```js\n// 函数通过return返回一个返回值\nfunction re(e) {\n  return e;\n}\nconsole.log(re(1));\n\n// 返回值总结\n// 1.如果函数没有使用 return语句 ，那么函数有默认的返回值：undefined\n// 2.如果函数使用 return语句，那么跟再 return 后面的值，就成了函数的返回值\n// 3.如果函数使用 return语句，但是return后面没有任何值，那么函数的返回值也是：undefined\n// 4.函数使用 return 语句后，这个函数会在执行完 return 语句之后停止并立即退出，也就是说 return 后面的所有其他代码都不会再执行\n// 推荐的做法是要么让函数始终都返回一个值，要么永远都不要返回值\n\n// 求阶乘\nfunction jieCh(n) {\n  var j = 1;\n  if (n == 0) {\n    return 1;\n  } else {\n    for (i = 1; i <= n; i++) {\n      j *= i;\n    }\n    return j;\n  }\n}\nconsole.log(jieCh(4));\n```\n\n## 函数案例\n\n```js\n// 求 1-n 之间所有的和\nfunction sumN(n) {\n  sum = 0;\n  for (var i = 1; i <= n; i++) {\n    sum += i;\n  }\n  console.log(sum);\n}\nsumN(3);\n\n// 圆的面积\n// toFixed : 四舍五入,指定小数位数\nfunction circle(r) {\n  console.log((Math.PI * r * r).toFixed(2));\n}\ncircle(1);\n\n// 求俩数中的最大值\nfunction getMaxNum(numA, numB) {\n  if (numA > numB) {\n    console.log(\"最大值 : \" + numA);\n  } else if (numA < numB) {\n    console.log(\"最大值 : \" + numB);\n  } else {\n    console.log(numA + \"=\" + numB);\n  }\n}\ngetMaxNum(2, 3);\ngetMaxNum(2, 2);\n\n// 求三个数的最大值\nfunction getMaxNumInThreeNum(numX, numY, numZ) {\n  if (numX == numY) {\n    if (numX == numZ) {\n      console.log(\"三者相等\");\n    } else if (numX > numZ) {\n      console.log(\"最大值 ：\" + numX);\n      // 或者: console.log(\"最大值 ：\" + numY);\n    } else {\n      console.log(\"最大值 : \" + numZ);\n    }\n  } else if (numX > numY) {\n    if (numX > numZ) {\n      console.log(\"最大值 : \" + numX);\n    } else {\n      console.log(\"最大值 : \" + numZ);\n    }\n  } else {\n    if (numY > numZ) {\n      console.log(\"最大值 ：\" + numY);\n    } else {\n      console.log(\"最大值 ：\" + numZ);\n    }\n  }\n}\ngetMaxNumInThreeNum(2, 2, 1);\n\n// 判断一个数是否为素数\nfunction isPrime(n) {\n  if (n == 0 || n == 1) {\n    console.log(n + \" 是素数\");\n  } else if (n == 2) {\n    console.log(n + \" 不是素数\");\n  } else {\n    for (var i = 2; i < n; i++) {\n      if (n % i != 0) {\n        console.log(n + \" 是素数\");\n        break;\n      } else {\n        console.log(n + \" 不是素数\");\n        break;\n      }\n    }\n  }\n}\nisPrime(4);\n```\n\n## 作业\n\n```js\n// 作业1：\n// 数组去重，返回一个新数组\nvar arr1 = [2, 4, 4, 5, 5, 7, 8, 9];\nfunction duplicateRemoval(arr) {\n  var newArr = [];\n  for (var i = 0; i < arr.length; i++) {\n    if (newArr.indexOf(arr[i]) == -1) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n}\n\nconsole.log(duplicateRemoval(arr1));\n\n// 作业2：\n// 将数组[10,1,35,61,89,36,55]冒泡排序，从小到大\nvar arr2 = [10, 1, 35, 61, 89, 36, 55];\nfor (var i = 0; i < arr2.length - 1; i++) {\n  for (var j = 0; j < arr2.length - 1 - i; j++) {\n    if (arr2[j] > arr2[j + 1]) {\n      var temp = arr2[j];\n      arr2[j] = arr2[j + 1];\n      arr2[j + 1] = temp;\n    }\n  }\n}\nconsole.log(arr2);\n\n// 作业3：\n// 求1!+2!+3!+....+n!\nfunction sumJieCh(n) {\n  var sumJie = 0;\n  // n 轮\n  for (var i = 1; i <= n; i++) {\n    // 每轮从 1 开始累乘\n    jie = 1;\n    for (var j = 1; j <= i; j++) {\n      jie *= j;\n    }\n    sumJie += jie;\n  }\n  return sumJie;\n}\nconsole.log(sumJieCh(1), sumJieCh(2), sumJieCh(3), sumJieCh(4));\n\n// 作业4：\n// 输入一个年份，判断是否是闰年[闰年：能被4整数并且不能被100整数，或者能被400整数]\nfunction isLeapYear() {\n  var year = prompt(\"请输入年份\");\n  if (year % 4 == 0 && year % 100 != 0) {\n    console.log(year + \" 是闰年\");\n  } else if (year % 400 == 0) {\n    console.log(year + \" 是世纪闰年\");\n  } else {\n    console.log(year + \" 不是闰年\");\n  }\n}\nisLeapYear();\n\n// 作业5：\n// 输入某年某月某日，判断这一天是这一年的第几天？（不用做）\n// 😁\n\n// 作业6：\n// 利用函数的返回值，求1+2+3+4+………+n\nfunction sum(n) {\n  var result = 0;\n  for (var i = 1; i <= n; i++) {\n    result += i;\n  }\n  return result;\n}\nconsole.log(sum(3));\n\n// 作业7：\n// 斐波那契数列函数\nfunction fibonacci(n) {\n  var f = [1, 1];\n  for (var i = 0; i < n - 2; i++) {\n    f.push(f[i] + f[i + 1]);\n  }\n  return f;\n}\nconsole.log(fibonacci(5));\n```\n\n## 冒泡排序\n\n```js\n// 冒泡排序\n// 从小到大\nvar arr1 = [2, 1, 6, 0, 3, 8, 4, 5, 9, 7];\n// 第一层 for 循环是比较多少轮\nfor (var i = 0; i < arr1.length - 1; i++) {\n  // 第二层 for 循环是每轮比较多少次,递减\n  for (var j = 0; j < arr1.length - 1 - i; j++) {\n    if (arr1[j] > arr1[j + 1]) {\n      var temp = arr1[j + 1];\n      arr1[j + 1] = arr1[j];\n      arr1[j] = temp;\n    }\n  }\n}\nconsole.log(arr1);\n\n// 从大到小\n// 俩数判断后交换顺序改一下就行\nvar arr2 = [2, 1, 6, 0, 3, 8, 4, 5, 9, 7];\nfor (var i = 0; i < arr2.length - 1; i++) {\n  for (var j = 0; j < arr2.length - 1 - i; j++) {\n    if (arr2[j] < arr2[j + 1]) {\n      var temp = arr2[j + 1];\n      arr2[j + 1] = arr2[j];\n      arr2[j] = temp;\n    }\n  }\n}\nconsole.log(arr2);\n```\n\n<!-- -------------------------------- -->\n\n# 八. 预解析\n\n`JavaScript` 引擎在对 `JavaScript` 代码进行解释执行之前，会对 `JavaScript` 代码进行预解析，在预解析阶段，会将以关键字 `var` 和 `function` 开头的语句块提前进行处理。\n当变量和函数的声明处在作用域比较靠后的位置的时候，变量和函数的声明会被提升到作用域的开头。\n\n## (1) 函数提升\n\n```js\nfunc();\nfunction func() {\n  alert(\"fun\");\n}\n// 由于 JavaScript 的预解析机制，上面的代码就等效于：\nfunction func() {\n  alert(\"fun\");\n}\nfunc();\n```\n\n## (2) 变量提升\n\n```js\n// 变量声明被提升,赋值并没有提升\nconsole.log(e); // undefined\nvar e = 1;\n// 相当于\nvar e;\nconsole.log(e);\ne = 1;\n```\n\n## (3) 函数同名\n\n```js\nfunc1();\nfunction func1() {\n  console.log(\"func1\");\n}\nfunc1();\nfunction func1() {\n  console.log(\"func2\");\n}\n// 由于预解析机制，func1的声明会被提升，提升之后的代码为\nfunction func1() {\n  console.log(\"func2\");\n}\nfunc1();\nfunc1();\n// 同名的函数，后面的会覆盖前面的，所以两次输出结果都是 func2\n```\n\n## (4) 变量和函数同名\n\n```js\nconsole.log(f);\nvar f = 1;\nfunction f() {}\n// 当出现变量声明和函数同名的时候，只会对函数声明进行提升，变量会被忽略。所以上面的代码的输出结果为\n// ƒ f() {}\n```\n\n```js\nvar num = 1;\nfunction num() {\n  alert(num);\n}\nnum(); // num is not a function\n\n// 当变量和函数同名时,只会对函数声明进行提升，变量会被忽略。\n\n// 同名的变量和函数，变量会覆盖函数，导致函数无法调用\n\n// 通俗来讲就是只要出现同名的函数和变量，优先对函数进行提升。但没用，变量会覆盖函数，最终只有变量声明语句生效\n\n// 按照常规的书写顺序，同名的函数与变量，变量会覆盖函数\n```\n\n## 练习\n\n```js\n// 先提升\n// 再看顺序\n// 1\nfunction test(a, b) {\n  console.log(a);\n  var a = 3;\n  console.log(b);\n  var b = 2;\n  function b() {}\n  console.log(b);\n}\ntest(1);\n// 变量提升后的顺序:\nfunction test(a, b) {\n  var a;\n  function b() {}\n  var b;\n  console.log(a);\n  a = 3;\n  console.log(b);\n  b = 2;\n  console.log(b);\n}\ntest(1);\n// 所以结果为\n// 1\n// ƒ b() {}\n// 2\n\n// 2\nfunction test() {\n  console.log(a);\n  console.log(b);\n  var b = 234;\n  console.log(b);\n  a = 123;\n  console.log(a);\n  function a() {}\n  var a;\n  b = 234;\n  var b = function () {};\n  console.log(a);\n  console.log(b);\n}\ntest();\n// 变量提升后的顺序:\nfunction test() {\n  var b;\n  function a() {}\n  var a;\n  console.log(a);\n  console.log(b);\n  b = 234;\n  console.log(b);\n  a = 123;\n  console.log(a);\n  b = 234;\n  var b = function () {};\n  console.log(a);\n  console.log(b);\n}\ntest();\n// 所以结果为:\n// ƒ a() {}\n// undefined\n// 234\n// 123\n// 123\n// ƒ () {}\n```\n\n## (5) 预解析是分作用域的\n\n```js\nfunction m() {\n  var m = \"m\";\n}\nconsole.log(m); // m 未定义\n// 解析后的代码:\nfunction m() {\n  var m;\n  m = \"m\";\n}\nconsole.log(m); // m 未定义\n```\n\n## (6) 函数表达式不会提升\n\n```js\nfun1();\nvar fun1 = function () {\n  console.log(\"666\");\n};\n// 结果是 : func1 is not a function，原因就是函数表达式，并不会被提升。只是简单地当做变量声明进行了处理，如下\nvar fun1;\nfun1();\nfun1 = function () {\n  console.log(\"666\");\n};\n```\n\n## (7)作用域\n\n### (1) 全局作用域\n\n直接编写在 `script` 标签之中的 `JS` 代码，都是全局作用域；或者是一个单独的 `JS` 文件中的。\n全局作用域在页面打开时创建，页面关闭时销毁；\n在全局作用域中有一个全局对象 `window`（代表的是一个浏览器的窗口，由浏览器创建），可以直接使用。\n所有创建的变量都会作为 `window` 对象的属性保存。\n\n### (2) 局部作用域 ( 函数作用域 )\n\n在函数内部就是局部作用域，这个代码的名字只在函数的内部起作用\n\n### (3) 隐式全局变量\n\n声明变量使用`var`, 如果不使用 `var` 声明的变量就是全局变量( 禁用 )\n因为在任何代码结构中都可以使用该语法. 那么再代码维护的时候会有问题. 所以除非特殊原因不要这么用.\n\n```js\nfun2();\nconsole.log(a);\nconsole.log(b);\nconsole.log(c);\nfunction fun2() {\n  var a = 1;\n  b = 1;\n  c = 1;\n  console.log(a);\n  console.log(b);\n  console.log(c);\n}\nfun2 执行后获得隐式全局变量 `b` 和 `c`\n```\n\n# 九. 对象\n\n## (1) 为什么要有对象\n\n```js\nfunction printPerson(name, age, sex....) {}\n// 函数的参数如果特别多的话，可以使用对象简化\nfunction printPerson(person) {  \n   console.log(person.name);  \n}\n```\n\n## (2) 什么是对象\n\n现实生活中：万物皆对象，对象是一个具体的事物，一个具体的事物就会有行为和特征。\n举例： 一辆车、一部手机、一台电脑、一张桌子\n车是一类事物，门口停的那辆车才是对象。特征：红色、四个轮子，行为：驾驶、刹车\n\n## (3) JavaScript 中的对象\n\nJavaScript 的对象是无序属性的集合。\n其属性可以包含基本值、对象或函数。对象就是一组没有顺序的值。我们可以把 JavaScript 中的对象想象成键值对，其中值可以是数据和函数。\n`Key` = `value`\n对象的行为和特征\n特征---属性\n行为---方法\nTips：\n事物的特征在对象中用属性来表示。\n事物的行为在对象中用方法来表示。\n\n## (4) 对象创建方式\n\n### 1. 对象字面量\n\n```js\nvar obj = {\n  name: \"zs\",\n  age: 18,\n  sex: true\n  fun=function(){\n    console.log(\"fun\")\n  }\n};\n```\n\n### 2. new Object()创建对象\n\n```js\nvar person = new Object();\nperson.name = \"lisi\";\nperson.age = 35;\nperson.job = \"codeman\";\nperson.say = function () {\n  console.log(\"Hello\");\n};\n```\n\n### 3. 工厂函数创建对象\n\n```js\nfunction createPerson(name, age, job) {\n  var person = new Object();\n  person.name = name;\n  person.age = age;\n  person.job = job;\n  person.say = function () {\n    console.log(\"Hello\");\n  };\n  return person;\n}\nvar p1 = createPerson(\"张三\", 22, \"actor\");\n```\n\n### 4. 自定义构造函数\n\n```js\nfunction Person(name, age, job) {\n  this.name = name;\n  this.age = age;\n  this.job = job;\n  this.say = function () {\n    console.log(\"Hello\");\n  };\n}\nvar p1 = new Person(\"张三\", 22, \"actor\");\n```\n\n## (5) 属性和方法\n\n1. 如果一个变量属于一个对象所有，那么该变量就可以称之为该对象的一个属性\n\n2. 如果一个函数属于一个对象所有，那么该函数就可以称之为该对象的一个方法\n\n## (6) new 关键字\n\n构造函数，是一种特殊的函数。主要用来在创建对象时初始化对象，即为对象成员变量赋初始值，总与 new 运算符一起使用在创建对象的语句中。\n\n1. 构造函数用于创建一类对象，首字母要大写。\n\n2. 构造函数要和 `new` 一起使用才有意义。\n\n**`new` 在执行时会做四件事情：**\n\n1、new 会在内存中创建一个新的空对象\n2、new 会让 this 指向这个新的对象\n3、new 会返回这个新对象\n\n## (7) this\n\n函数内部的 `this` 几个特点：\n\n1. 函数在定义的时候 `this` 是不确定的，只有在调用的时候才可以确定\n2. 一般函数直接执行，内部 `this` 指向全局 window\n3. 函数作为一个对象的方法，被该对象所调用，那么 `this` 指向的是该对象\n4. 构造函数中的 `this` 其实是一个隐式对象，类似一个初始化的模型，所有方法和属性都挂载到了这个隐式对象身上，后续通过 new 关键字来调用，从而实现实例化\n\n## (8) 对象的使用\n\n遍历对象的属性\n通过 for..in 语法可以遍历一个对象\n删除对象的属性\n\n```js\n// 通过 for ... in 遍历对象的属性\nvar obj1 = {\n  name: \"man\",\n  age: 20,\n};\nfor (var key in obj1) {\n  console.log(key);\n}\n// 遍历对象的属性值\nfor (var key in obj1) {\n  console.log(obj1[key]);\n}\n// 删除对象的属性\ndelete obj1.name;\n```\n\n# 十. JavaScript  错误\n\n## (1) JavaScript `try` 和 `catch`\n\n`try`  语句允许我们定义在执行时进行错误测试的代码块。\n`catch`  语句允许我们定义当 `try` 代码块发生错误时，所执行的代码块。\n`JavaScript` 语句  `try`  和  `catch`  是成对出现的。\n\n```js\nfunction t() {\n  try {\n    alertt(\"666\");\n  } catch (error) {\n    console.log(error.message); // alertt is not defined\n  }\n}\nt();\n// catch 块会捕捉到 try 块中的错误，会执行 catch 里的部分\n```\n\n## (2) finally 语句\n\n`finally` 语句不论之前的 `try` 和 `catch` 中是否产生异常都会执行该代码块\n\n```js\nfunction t() {\n  try {\n    alertt(\"666\");\n  } catch (error) {\n    console.log(error.message); // alertt is not defined\n  } finally {\n    console.log(\"finally\");\n  }\n}\nt();\n```\n\n## (3) Throw 语句\n\n`throw` 语句允许我们创建自定义错误。\n正确的技术术语是：创建或抛出异常（exception）。\n\n```js\n// 检测输入变量的值。如果值是错误的，会抛出一个异常（错误）。catch 会捕捉到这个错误，并显示一段自定义的错误消息\nfunction myFunction() {\n  var x = prompt();\n  try {\n    if (x == \"\") throw \"值为空\";\n    if (isNaN(x)) throw \"请输入数字\";\n    x = Number(x);\n    if (x < 5) throw \"太小\";\n    if (x > 10) throw \"太大\";\n    else {\n      console.log(\"good\");\n    }\n  } catch (err) {\n    console.log(err);\n  }\n}\nmyFunction();\n```\n\n## 作业\n\n```js\n// 作业1;\n// 创建一个电脑对象,有颜色,有重量,有品牌,有型号,可以看电影,可以听音乐,可以打游戏,可以敲代码;\nvar computer = {\n  color: \"#494f5c\",\n  weight: \"120\",\n  brand: \"Brand\",\n  model: \"model\",\n  seeMovies: function () {\n    console.log(\"看电影\");\n  },\n  listenMusics: function () {\n    console.log(\"听音乐\");\n  },\n  gaming: function () {\n    console.log(\"打游戏\");\n  },\n  coding: function () {\n    console.log(\"coding\");\n  },\n};\nconsole.log(computer);\ncomputer.gaming();\ncomputer.coding();\n\n// 作业2;\n// 创建一个按钮对象, 宽, 高, 背景颜色, 点击行为, 按钮有鼠标进入的行为;\nvar button = new Object();\nbutton.width = \"120px\";\nbutton.height = \"40px\";\nbutton.backgroundColor = \"#494f5c\";\nbutton.click = function () {\n  console.log(\"click\");\n};\nbutton.hover = function () {\n  console.log(\"hover\");\n};\nconsole.log(button);\nbutton.click();\nbutton.hover();\n\n// 作业3;\n// 创建一个车的对象, 有重量, 颜色, 牌子, 可以载人, 拉货;\nfunction createCar(weight, color, brand, canBeManned, pickUpTheGoods) {\n  var car = new Object();\n  car.weight = weight;\n  car.color = color;\n  car.brand = brand;\n  car.canBeManned = function () {\n    console.log(\"可以载人\");\n  };\n  car.pickUpTheGoods = function () {\n    console.log(\"可拉货\");\n  };\n  return car;\n}\nvar car1 = createCar(\"2000kg\", \"#494f5c\", \"brand\");\nconsole.log(car1);\ncar1.canBeManned();\n\n// 作业4;\n// 利用对象属性不能重复的特性给数组去重;\nvar arr = [1, 2, 2, 3, 3, 5, 5, 6, 8, 8, 9, 9];\nfunction duplicateRemoval(arr) {\n  var obj = {};\n  var newArr = [];\n  for (var i = 0; i < arr.length; i++) {\n    if (!obj[arr[i]]) {\n      newArr.push(arr[i]);\n      obj[arr[i]] = true;\n    }\n  }\n  return newArr;\n}\nconsole.log(duplicateRemoval(arr));\n```\n\n# 十一. js 内置对象\n\n## 1.内置对象\n\n`JavaScript` 中的对象分为 4 种：内置对象、浏览器对象、自定义对象、DOM 对象。\n`JavaScript` 提供多个内置对象：Math/Array/Number/String/Boolean ...\n对象只是带有属性和方法的特殊数据类型。学习一个内置对象的使用，只要学会其常用的成员的使用(通过查文档学习)。内置对象的方法很多，我们只需要知道内置对象提供的常用方法，使用的时候查询文档。\n\n## 2. Math 对象\n\n`Math` 对象不是构造函数，它具有数学常数和函数的属性和方法，都以静态成员的方式提供。\n跟数学相关的运算来找 `Math` 中的成员(求绝对值，取整)。\n\n### (1) 常用属性\n\n```js\nMath.PI; // 圆周率\n```\n\n### (2) 常用方法\n\n```js\nMath.random(); // 生成随机数\nMath.floor(); // 向下取整\nMath.ceil(); // 向上取整\nMath.round(); // 取整，四舍五入\nMath.abs(); // 绝对值\nMath.max(); // 最大值\nMath.min(); // 最小值\nMath.sin(); // 正弦\nMath.cos(); // 余弦\nMath.pow(); // 求指数次幂\nMath.sqrt(); // 求平方根\n```\n\n## 3. Date 对象\n\n创建 `Date` 实例用来处理日期和时间。`Date` 对象基于 1970 年 1 月 1 日（世界标准时间）起的毫秒数。\n\n### (1) 创建日期对象\n\n`Date()` 是构造函数\n\n```js\nvar date = new Date(); // 获取到的是 1970 年 1 月 1 日至今的毫秒数\n```\n\n### (2) 日期原始值\n\ngetTime()：获取 1970 年 1 月 1 日至今的毫秒数\nvalueOf();原始值，获取 1970 年 1 月 1 日至今的毫秒数\n\n### (3) 获取日期指定部分\n\n```js\ngetMilliseconds();\ngetSeconds(); // 返回 0-59\ngetMinutes(); // 返回 0-59\ngetHours(); // 返回 0-23\ngetDay(); // 返回星期几 0 周日   6 周 6\ngetDate(); // 返回当前月的第几天\ngetMonth(); // 返回月份，从 0 开始\ngetFullYear(); //返回 4 位的年份 如 2016\n```\n\n## 4. Array 对象\n\n### (1) 创建数组对象的两种方式\n\n1、字面量方式\n2、new Array()\n\n### (2) 检测一个对象是否是数组\n\n`instanceof` 如果返回 `true` 就是数组，`false` 是非数组 ( 这玩意儿很少用 )\n`Array.isArray()` 如果返回 `true` 就是数组，`false` 是非数组 ( 常用 )\n`valueOf()` 返回数组对象本身\n\n### (3) 栈操作 (先进后出)\n\n```js\npush(); // 添加元素\npop(); // 删除元素\n```\n\n![stack](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/js/stack.png)\n\n### (4) 队列操作 (先进先出)\n\n```js\nshift(); // 删除元素\nunshift(); // 添加元素\n```\n\n### (5) 排序方法\n\n```js\nreverse(); // 翻转数组\nsort(); // 只看第一位数来排序\n```\n\n```js\n//   var arr = [1, 2, 3, 4, 9, 8, 7, 6, 5];\nvar arr1 = [100, 200, 3, 4, 9, 8, 7, 6, 5];\nconsole.log(arr1.sort()); // 然而排序后的结果不是咱想要的\n```\n\n**可以这样**\n\n```js\narr1.sort(function (a, b) {\n  return a - b; // 从小到大排序\n  return b - a; // 从大到小排序\n});\n```\n\n### (6) 操作方法\n\n#### `concat()` 把参数拼接到当前数组、  或者用于连接两个或多个数组\n\n#### `slice(start,end)`\n\n1、从 `start` 开始截取元素，到 `end` 结束，包括 `start`,不包括 `end`,返回新数组，`start`,`end` 是索引,\n2、不会改变原始数组\n\n#### `splice()`\n\n`splice(start,length)`\n1、从 `start` 开始截取元素，截取 `length` 个，,`返回新数组，start` 是索引,`length` 是个数, **如果不写`length`参数,会从`start`一直删到最后**\n2、会改变元素的数组\n\n### (7) 位置方法\n\n`indexOf()` 寻找元素位置,返回第一次出现的位置的索引值,没有找到返回 -1，\n`lastIndexOf()`   从后往前找\n上述方法只是查找顺序不一样 结果都是索引值\n\n### (8) 数组迭代方法\n\n1、`forEach()` 方法用于调用数组的每个元素，并将元素传递给回调函数\n\n可以拿到每个数组中的值，没有返回值\n\n```js\narray.forEach(function(value, index))\n// value 必需,当前元素\n// Index 可选,当前元素索引值\n```\n\n2、`every()`, `some()` 方法用于检测数组所有元素是否都符合指定条件（通过函数提供）\n`some()`,`every()` 方法的参数是一个回调函数，回调函数中的第一个参数是数组的元素，第二个参数是数组的索引\n`some()`,`every()` 方法都会返回新的数组\n\n```js\nvar flag1 = arr3.every(function (value, index) {\n  return value > 55;\n});\nconsole.log(flag1);\nvar flag2 = arr3.some(function (value, index) {\n  return value >= 88;\n});\nconsole.log(flag2);\n```\n\n`every()` :判断回调函数中的表达式是否全部满足，如果满足，返回值就是 `true`,只要有一个不满足就是 `false`\n\n`some` 判断回调函数中的表达式是否有一个满足，如果至少一个满足，返回值就是 `true`\n\n### (9) 清空数组\n\n#### 方式 1 推荐\n\n```js\narr = [];\n```\n\n#### 方式 2\n\n```js\narr.length = 0;\n```\n\n#### 方式 3\n\n```js\narr.splice(0, arr.length);\n// 或者,不写 length ,会一直删到最后\narr.splice(0);\n```\n\n### (10) 数组转化字符串\n\n`join()` 将数组转化为字符串，以参数分割\n\n```js\nvar str = \"31423412\";\nconsole.log(str.split(\"\").join()); // 3,1,4,2,3,4,1,2\nconsole.log(str.split(\"\").join(\"\")); // 31423412\nconsole.log(str.split(\"\").join(\"-\")); // 3-1-4-2-3-4-1-2\n```\n\n## 5. 基本包装类型\n\n为了方便操作基本数据类型，`JavaScript` 还提供了三个特殊的引用类型：`String`,`Number`,`Boolean`\n\n```js\n// s1是基本类型，基本类型是没有方法来操作的\nvar s1 = 'zhangsan';\nvar s2 = s1.substring(5);\n​\n// 当调用 s1.substring(5) 的时候，先把 s1 包装成 String 类型的临时对象，再调用 substring 方法，最后销毁临时对象, 相当于：\nvar s1 = new String('zhangsan');\nvar s2 = s1.substring(5);\ns1 = null;\n```\n\n```js\n// 创建基本包装类型的对象\nvar num = 18; //数值，基本类型\nvar num = Number(\"18\"); //类型转换\nvar num = new Number(18); //基本包装类型，对象\n// Number 和 Boolean 基本包装类型基本不用，使用的话可能会引起歧义。例如：\nvar b1 = new Boolean(false);\nvar b2 = b1 && true; // 结果是 true, 因为 object && true = true\n```\n\n## 6. String 对象\n\n### (1) 字符串的不可变\n\n```js\nvar str = \"abc\";\nstr = \"hello\";\n// 当重新给 str 赋值的时候，常量 'abc'不会被修改，依然在内存中\n// 重新给字符串赋值，会重新在内存中开辟空间，这个特点就是字符串的不可变\n// 由于字符串的不可变，在大量拼接字符串的时候会有效率问题\n```\n\n### (2) 创建字符串对象\n\n```js\nvar str = new String(\"Hello World\");\n// 获取字符串中字符的个数\nconsole.log(str.length);\n```\n\n### (3) 字符串对象的常用方法\n\n字符串所有的方法，都不会修改字符串本身(字符串是不可变的)，操作完成会返回一个新的字符串\n\n#### 1. 字符方法\n\n```js\ncharAt(); //获取指定位置处字符\ncharCodeAt(); //获取指定位置处字符的 ASCII 码\nstr[0]; //HTML5，IE8+支持 和 charAt()等效\n```\n\n#### 2. 字符串操作方法\n\n```js\nconcat()   //拼接字符串，等效于+，+更常用\nslice(start,end)   //从 start 位置开始，截取到 end 位置，end 取不到\nsubstring(start,end) //从 start 位置开始，截取到 end 位置，end 取不到\nsubstr(start,length)   //// 从 start 位置开始，截取 length 个字符\nindexOf()   //返回指定内容在元字符串中的位置,,如果没有，返回-1；(从前往后，检索到第一个就结束)\nlastIndexOf() //返回指定内容在元字符串中的位置,,如果没有，返回-1；(从后往前，检索到第一个就结束)\ntrim() //只能去除字符串前后的空白\n\n// 大小写转换方法\ntoUpperCase() //转换大写\ntoLowerCase() //转换小写\nsearch()//方法用于检索字符串中指定的子字符串，返回子字符串的起始位置\nreplace(old,new) //替换字符串替换字符串 new 替换 old\nsplit() //分割字符串 返回的是一个数组。。数组的元素就是以参数的分割的\n```\n\n**演示**\n\n```js\nvar str = \"uy weiu ryqi w-u-q-wey82374192739    \";\n\nconsole.log(str.charAt(0)); // //获取指定位置处字符\n\nconsole.log(str.charCodeAt(0)); //获取指定位置处字符的ASCII码\n\nconsole.log(str[0]); //HTML5，IE8+支持 和charAt()等效\n\nvar str2 = \"\";\nstr2 = str.concat(str); //拼接字符串，等效于+，+更常用\nconsole.log(str2);\n\nconsole.log(str.slice(0, 1)); //从start位置开始，截取到end位置，end取不到\n\nconsole.log(str.slice(2, 4));\n\nconsole.log(str.substring(2, 4)); //从start位置开始，截取到end位置，end取不到\n\nconsole.log(str.substr(2, 4)); // 从start位置开始，截取 length 个字符\n\nconsole.log(str.indexOf(\"u\")); //返回指定内容在元字符串中的位置,,如果没有，返回-1；(从前往后，检索到第一个就结束)\n\nconsole.log(str.lastIndexOf(\"u\")); //返回指定内容在元字符串中的位置,,如果没有，返回-1；(从后往前，检索到第一个就结束)\n\nconsole.log(str.trim()); //只能去除字符串前后的空白\n\n// 大小写转换方法\nconsole.log(str.charAt(0).toUpperCase()); //转换大写\n\nconsole.log(str.charAt(0).toLowerCase()); //转换小写\n\nconsole.log(str.search(\"u\")); //方法用于检索字符串中指定的子字符串，返回子字符串的起始位置\n\nconsole.log(str.replace(\"u\", \"new\")); //替换字符串替换字符串 new替换old\n\nconsole.log(str.split()); //分割字符串 返回的是一个数组。。数组的元素就是以参数的分割的\n\nconsole.log(str.split(\"\"));\nconsole.log(str.split(\" \"));\nconsole.log(str.split(\"-\"));\n```\n\n**作业**\n\n```js\n//   -------------------------\n// Wechat收购 Baidu，电话号码相同的人当作是同一个人，合并后salary相加，其他属性保留Wechat的数据，新的Baidu的员工重新生成id,salary涨幅20%\n// 统计收购后的员工平均工资，最高工资，最低工资，male的平均工资，female的平均工资\n// 找出收购后工资高于8000的员工姓名和电话号码，按薪水从高到低排序\n// 找出收购前后工资涨幅最高的员工姓名和电话号码，以及涨幅的百分比\n// 找出收购后重名最多的三个姓名，统一出他们的平均年龄\nvar BaiduUsers = [],\n  WechatUsers = [];\nvar User = function (id, name, phone, gender, age, salary) {\n  this.id = id;\n  this.name = name;\n  this.phone = phone;\n  this.gender = gender;\n  this.age = age;\n  this.salary = salary;\n};\nUser.create = function (id, name, phone, gender, age, salary) {\n  return new User(id, name, phone, gender, age, salary);\n};\nBaiduUsers.push(User.create(1, \"tommy\", \"1111\", \"male\", 18, 10000));\nBaiduUsers.push(User.create(2, \"jerry\", \"2222\", \"male\", 28, 10000));\nBaiduUsers.push(User.create(3, \"raobin\", \"3333\", \"female\", 14, 1200));\nBaiduUsers.push(User.create(4, \"binbin\", \"4444\", \"male\", 23, 9800));\nBaiduUsers.push(User.create(5, \"arthur\", \"5555\", \"female\", 22, 10000));\n//\nWechatUsers.push(User.create(1, \"tommy\", \"1111\", \"male\", 20, 40000));\nWechatUsers.push(User.create(2, \"allen\", \"6666\", \"male\", 34, 15800));\nWechatUsers.push(User.create(3, \"raobin\", \"3333\", \"female\", 16, 2300));\nWechatUsers.push(User.create(4, \"harvey\", \"7777\", \"male\", 30, 29800));\nWechatUsers.push(User.create(5, \"yuyu\", \"8888\", \"female\", 27, 7000));\n\n// 电话号码相同的人当作是同一个人，合并后salary相加，其他属性保留Wechat的数据\nfor (var b = 0; b < BaiduUsers.length; b++) {\n  for (var w = 0; w < WechatUsers.length; w++) {\n    if (BaiduUsers[b].phone == WechatUsers[w].phone) {\n      WechatUsers[w].oldsalary = WechatUsers[w].salary;\n      WechatUsers[w].salary = WechatUsers[w].oldsalary + BaiduUsers[b].salary;\n      BaiduUsers.splice(b, 1);\n    }\n  }\n}\n\n// 新的Baidu的员工重新生成id,salary涨幅20%\nfor (var i = 0; i < BaiduUsers.length; i++) {\n  BaiduUsers[i].oldsalary = BaiduUsers[i].salary;\n  BaiduUsers[i].salary = BaiduUsers[i].salary * 1.2;\n  BaiduUsers[i].id = WechatUsers.length + 1 + i;\n}\n\n// 所有 weChat 员工\nnewWechatUsers = WechatUsers.concat(BaiduUsers);\n\n// 统计收购后的员工平均工资，最高工资，最低工资，male的平均工资，female的平均工资\nvar sumSalary = 0, // 所有员工薪资和\n  usersSalary = [], // 所有员工薪资\n  averageSalary = 0, // 平均薪资\n  max = 0, // 最高薪资\n  min = 0, // 最低薪资\n  maleSalary = [], // 男员工薪资集合\n  femaleSalary = [], // 女员工薪资集合\n  sumMaleSalary = 0,\n  sumFemaleSalary = 0;\nnewWechatUsers.forEach(function (user, userIndex) {\n  // 把所有员工薪资放到一个新数组里\n  usersSalary.push(newWechatUsers[userIndex].salary);\n\n  // 把所有男员工薪资放到一个新数组里\n  if (user.gender == \"male\") {\n    maleSalary.push(newWechatUsers[userIndex].salary);\n  }\n\n  // 把所有女员工薪资放到一个新数组里\n  if (user.gender == \"female\") {\n    femaleSalary.push(newWechatUsers[userIndex].salary);\n  }\n});\n\n// 所有员工的薪资\nusersSalary.forEach(function (userSalary) {\n  sumSalary += userSalary;\n});\n\n// 平均薪资\naverageSalary = sumSalary / newWechatUsers.length;\nconsole.log(averageSalary);\n\n// 最高工资，最低工资\nmax = usersSalary[0];\nmin = usersSalary[0];\nusersSalary.forEach(function (value) {\n  if (max < value) {\n    max = value;\n  }\n  if (min > value) {\n    min = value;\n  }\n});\nconsole.log(max, min);\n\n// male的平均工资\nfor (var i = 0; i < maleSalary.length; i++) {\n  sumMaleSalary += maleSalary[i];\n}\nconsole.log(sumMaleSalary / maleSalary.length);\n\n// female的平均工资\nfor (var i = 0; i < femaleSalary.length; i++) {\n  sumFemaleSalary += femaleSalary[i];\n}\nconsole.log(sumFemaleSalary / femaleSalary.length);\n\n// 找出收购后工资高于8000的员工姓名和电话号码，按薪水从高到低排序\n\n// 先把整体重新排序\nnewWechatUsers.sort(function (a, b) {\n  return b[\"salary\"] - a[\"salary\"];\n});\n\nvar more8000 = [];\n\nfunction UserList(name, phone) {\n  this.name = name;\n  this.phone = phone;\n  return { name, phone };\n}\nfor (var i = 0; i < newWechatUsers.length; i++) {\n  if (newWechatUsers[i].salary > 8000) {\n    more8000.push(UserList(newWechatUsers[i].name, newWechatUsers[i].phone));\n  }\n}\n\n// 找出收购前后工资涨幅最高的员工姓名和电话号码，以及涨幅的百分比\nfor (var i = 0; i < newWechatUsers.length; i++) {\n  if (newWechatUsers[i].oldsalary != undefined) {\n    newWechatUsers[i].riseSalary =\n      newWechatUsers[i].salary - newWechatUsers[i].oldsalary;\n    newWechatUsers[i].percentRise =\n      (newWechatUsers[i].riseSalary / newWechatUsers[i].oldsalary) * 100;\n  }\n  // 因为有的员工薪资没有合并，也没有涨薪，所以 oldsalary 会是 undefined\n  else {\n    newWechatUsers.splice(i, 1);\n  }\n}\n\nnewWechatUsers.sort(function (a, b) {\n  return b[\"percentRise\"] - a[\"percentRise\"];\n});\nconsole.log(\n  newWechatUsers[0].name,\n  newWechatUsers[0].phone,\n  \"涨幅百分比 :\" + newWechatUsers[0].percentRise + \"%\"\n);\n\nconsole.log(\"-------------------------------------\");\n\nvar str = \"abaasdffggghhjjkkgfddsssss3444343\";\n\n// 1、 字符串的长度\nconsole.log(str.length);\n\n// 2、 取出指定位置的字符，如：0,3,5,9等\nconsole.log(str.slice(0, 1));\nconsole.log(str.slice(2, 3));\nconsole.log(str.slice(4, 5));\nconsole.log(str.slice(8, 9));\n\n// 3、 查找指定字符是否在以上字符串中存在，如：i，c ，b等\nfunction searchStr(string, element) {\n  if (string.search(element) == -1) {\n    console.log(\"没找到\");\n  } else {\n    console.log(\"存在\");\n  }\n}\nsearchStr(str, \"i\");\nsearchStr(str, \"c\");\nsearchStr(str, \"b\");\n\n// 4、 替换指定的字符，如：g替换为22,ss替换为b等操作方法\nvar str2 = str;\ndo {\n  str2 = str2.replace(\"g\", 22);\n} while (str2.search(\"g\") != -1);\nconsole.log(str2);\n\nvar str3 = str;\ndo {\n  str3 = str3.replace(\"ss\", \"b\");\n} while (str3.search(\"ss\") != -1);\nconsole.log(str3);\n\n// 5、 截取指定开始位置到结束位置的字符串，如：取得1-5的字符串\nconsole.log(str.substring(0, 5));\n\n// 6、 找出以上字符串中出现次数最多的字符和出现的次数\nvar obj = {},\n  count = 0,\n  s = \"\";\nfor (var i = 0; i < str.split(\"\").length; i++) {\n  // 如果不存在,记录一次\n  if (!obj[str.charAt(i)]) {\n    obj[str.charAt(i)] = 1;\n  }\n  // 如果存在，则 +1\n  else {\n    obj[str.charAt(i)]++;\n  }\n}\n\nfor (var key in obj) {\n  if (obj[key] > count) {\n    count = obj[key];\n    s = key;\n  }\n}\nconsole.log(\"出现次数最多的字符 : \" + s + \" ; \" + \"次数 : \" + count);\n\n// 7、 遍历字符串，并将遍历出的字符两头添加符号“@”输出至当前的文档页面\nstr.split(\"\").forEach(function (value, index) {\n  document.write(\"@\" + value + \"@\");\n  document.write(\"<br />\");\n});\n```\n\n# The_End\n","source":"_posts/js/js.md","raw":"---\ntitle: Js 基础总结及案例\ndate: 2021-05-13 15:03:46\ntop_img: https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg\ncover: https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/js/js.jpeg\naside:\ntags:\n  - js\n  - javascript\n  - 基础总结\ncategories:\n  - js\n---\n\n# 一. JavaScript 介绍\n\n## (1) 、JavaScript 是什么\n\n### 1. JavaScript 的历史\n\nNetscape（网景）在最初将其脚本语言命名为 LiveScript，是布兰登.艾克发明的。后来 Netscape 在与 Sun 合作之后将其改名为 JavaScript。JavaScript 最初受 Java 启发而开始设计的，目的之一就是“看上去像 Java”，因此语法上有类似之处，一些名称和命名规范也借自 Java。JavaScript 与 Java 名称上的近似，是当时 Netscape 为了营销考虑与 Sun 微系统达成协议的结果。\n\n### 2. JavaScript 是什么语言\n\n可以说：Java 服务器端的编程语言，JavaScript 运行在客户端(浏览器)的编程语言\nJavaScript(简称 JS)是一种运行在客户端的脚本语言，JavaScript 的解释器被称为 JavaScript 引擎，为浏览器的一部分，广泛用于客户端的脚本语言，最早是在 HTML（标准通用标记语言下的一个应用）网页上使用，用来给 HTML 网页增加动态功能。\n也可以说，是一门脚本语言、是一门解释性语言、是一门动态类型的语言、是一门基于\n对象的语言。（不是面向对象）、是一门弱性语言\n\n### 3. JavaScript 的发展和意义\n\n最初的目的是为了处理表单的验证操作。JavaScript 发展到现在几乎无所不能，例如：做网页特效、与交互（表单的提交），比如：轮播图、tab 切换、返回顶部。。。\n例如：网页特效、服务端开发(Node.js)、命令行工具(Node.js)、桌面程序(Electron)、App(Cordova)、控制硬件-物联网(Ruff)、游戏开发(cocos2d-js)\n\n### 4. JavaScript 和 HTML、CSS 的区别\n\n`HTML` - 提供网页的结构，提供网页中的内容\n`CSS` - 用来美化网页\n`JavaScript` - 可以用来控制网页内容，给网页增加动态的效果\n\n### 5. JavaScript 的组成\n\n![js](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/js/jscontent.png)\n\n#### （1）ECMAScript - JavaScript 的核心\n\nECMA 欧洲计算机制造联合会。JavaScript 的核心，描述了语言的基本语法和数据类型，ECMAScript 是一套标准，定义了一种语言的标准与具体实现无关。\n\n#### （2）BOM - 浏览器对象模型\n\n一套操作浏览器功能的 API。通过 BOM 可以操作浏览器窗口，比如：弹出框、控制浏览器跳转、获取分辨率等。Borswer object model\n\n#### （3）DOM - 文档对象模型\n\n一套操作页面元素的 API。DOM 可以把 HTML 看做是文档树，通过 DOM 提供的 API 可以对树上的节点进行操作。Document object model\n\n## (2) JavaScript 代码写法\n\nCSS 代码写法分为行内样式、嵌入样式（内部）、外部样式、控制台书写。那么，js 的代码可以分四个地方写：  \n1.在 html 的文件中,script 的标签中写 js 代码  \n2.js 代码可以在 html 的标签中写  \n3.在 js 文件中可以写 js 代码,但是需要在 html 页面中引入 script 的标签中的 src=\"js 的路径\"  \n4.还可以在控制台直接书写 js 代码\n\n### (3) JavaScript 问题总结\n\n1. 在一对 script 的标签中有错误的 js 代码,那么该错误的代码后面的 js 代码不会执行\n2. 如果第一对的 script 标签中有错误,不会影响后面的 script 标签中的 js 代码执行\n3. script 的标签中可以写 type=\"text/javascript\"标准写法或者写 language=\"JavaScript\"都可以。但是，目前在我们的 html 页面中，type 和 language 都可以省略，原因：html 是遵循 h5 的标准。\n4. 有可能会出现这种情况：script 标签中可能同时出现 type 和 language 的写法。\n5. script 标签在页面中可以出现多对。\n6. script 标签一般是放在 body 的标签的最后的，有的时候会在 head 标签中，目前讲课的时候都在 body 标签的后面(body 中的最后)。\n7. 如果 script 标签是引入外部 js 文件的作用，那么这对标签中不要写任何的 js 代码，如果要写，重新写一对 script 标签，里面写代码。\n\n### (4) 注释\n\n单行注释\n\n```js\n// var a;\n```\n\n多行注释\n\n```js\n/*\nvar a = 1\nvar b = 1\n*/\n```\n\n# 二. JavaScript 变量\n\n## (1) 变量引入\n\n**什么是变量**\n变量是计算机内存中存储数据的标识符，根据变量名称可以获取到内存中存储的数据\n**为什么要使用变量**\n使用变量可以方便的获取或者修改内存中的数据\n\n## (2) 变量声明和初始化\n\n`var` 声明变量\n\n```js\nvar age;\n```\n\n变量的赋值\n\n```js\nvar age;\nage = 18;\n```\n\n同时声明多个变量\n\n```js\nvar age, name, sex;\nage = 10;\nname = \"zs\";\n```\n\n同时声明多个变量并赋值\n\n```js\nvar age = 10,\n  name = \"zs\";\n```\n\n变量在内存中的存储\n\n```js\nvar age = 18;\n```\n\n## (3) 变量的命名规则和规范\n\n**规则 - 必须遵守的，不遵守会报错**\n1、由字母、数字、下划线、$符号组成，不能以数字开头\n2、不能是关键字和保留字，例如：for、while。\n3、区分大小写\n**规范 - 建议遵守的，不遵守不会报错**\n1、变量名必须有意义\n2、遵守驼峰命名法。首字母小写，后面单词的首字母需要大写。\n\n## (4) 字面量\n\n在源代码中一个固定值的表示法，也叫字面量。\n数值字面量：8, 9, 10\n字符串字面量：`'程序员'`, `\"大前端\"`\n布尔字面量：`true`，`false`\n\n# 三. JavaScript 数据类型\n\n## (1) 基本数据类型\n\n`Number`、`String`、`Boolean`、`Undefined`、`Null`\n\n### 1. Number 类型\n\n```js\n// 十进制\nvar num = 9;\n//进行算数计算时，八进制和十六进制表示的数值最终都被转换成十进制数值。\n\n// 十六进制\nvar num = 0xA;//数字序列范围：0~9 以及 A~F\n\n// 八进制\nvar num1 = 07;  // 对应十进制的 7\nvar num2 = 011; // 对应十进制的 9\nvar num3 = 021; // 对应十进制的 17 //数字序列范围：0~7\n// 如果字面值中的数值超出了范围，那么前导零将被忽略，后面的数值将被当作十进制数值解析\n\n// 浮点数\nvar n = 5e-5;   // 科学计数法 5 乘以 10 的-5 次方  \n\n// 浮点数值的最高精度是 17 位小数，但在进行算术计算时其精确度远远不如整数\nvar result = 0.1 + 0.2; // 结果不是 0.3，而是：0.30000000000000004\nconsole.log(0.07 * 100);\n\n// 注意：不要判断两个浮点数是否相等\n// 就是说由于 0.1 转换成二进制时是无限循环的，所以在计算机中 0.1 只能存储成一个近似值\n\n// 最小值：\n// 这个值为： 5e-324\nNumber.MIN_VALUE\n\n// 最大值：\n// 这个值为： 1.7976931348623157e+308\nNumber.MAX_VALUE\n\n无穷大：Infinity\n无穷小：-Infinity\n```\n\n### 数值判断\n\n```js\n//可以通过 Number()方法判断\nNaN：not a number\nNaN 与任何值都不相等，包括他本身\nisNaN(): is not a number\n// 如果 x 是特殊的非数字值 NaN (或者能被转换为这样的值 )，返回的值就是 true。如果 x 是其他值,则返回 false\n```\n\n### 2、String 类型\n\n字符串可以使用单引号,也可以使用双引号，例如：`'abc'`、`\"abc\"`\n字符串字面量：`'I am Happy'`、`\"Hello World\"`\n\n#### 转义符\n\n![striingtranslate](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/js/striingtranslate.png)\n\n#### 字符串长度\n\n```js\n// length属性用来获取字符串的长度;\nvar str = \"Hello World\";\nconsole.log(str.length);\n```\n\n#### 字符串拼接\n\n```js\n// 字符串拼接使用 + 连接;\nconsole.log(11 + 11);\nconsole.log(\"hello\" + \" world\");\nconsole.log(\"100\" + \"100\");\nconsole.log(\"11\" + 11);\nconsole.log(\"male:\" + true);\n// 两边只要有一个是字符串，那么+就是字符串拼接功能\n// 两边如果都是数字，那么就是算术功能。\n```\n\n语言具有隐式转换 ( 隐式类型转换就是指，数据的类型在不用人工干预的情况下进行转换的行为，原因：`js` 是一门弱类型（动态类型）的语言，他在声明变量的时候不需要指定类型，对变量赋值也没有类型的检测，所以 `js` 是非常的灵活的，)\n\n### 3. Boolean 类型\n\n`Boolean` 字面量： `true` 和 `false`，区分大小写\n计算机内部存储：`true` 为 `1`，`false` 为 `0`\n\n### 4. Undefined 和 Null\n\n`undefined` 表示一个声明了没有赋值的变量，变量只声明的时候值默认是 `undefined`\n`null` 表示一个空，变量的值如果想为 `null`，必须手动设置\n\n## (2) 复杂数据类型\n\n`Object`\n\n## (3) 数据类型转换\n\n### `typeof` 关键字\n\n获取变量的类型\n\n```js\nvar age = 18;\nconsole.log(typeof age); // number\n```\n\n```js\nconsole.log(typeof null); // Object\n```\n\n**一个 bug，`null` 为什么是引用类型（复杂类型）？**\n\n在 JS 的最初版本中使用的是 32 位系统，为了性能考虑使用低位存储变量的类型信息，000 开头的是对象，`null` 是全 0，所以将 `null` 误判为 `Object` 了，虽然现在的内部类型判断代码已经改变了，但 bug 永久的遗留下来了\n\n### toString()\n\n转换成字符串类型\n\n```js\nvar num = 5;\nconsole.log(num.toString()); // String(\"5\")\n```\n\n### String()\n\n`String()` 函数存在的意义：有些值没有 `toString()`, 这个时候可以使用 `String()`.比如：`undefined` 和 `null`\n\n### 拼接字符串方式\n\n`num + \"\"`，当 + 两边一个操作符是字符串类型，一个操作符是其它类型的时候，会先把其它类型转换成字符串再进行字符串拼接，返回字符串\n\n### 转换成数值类型\n\n`Number()` 可以把任意值转换成数值，如果要转换的字符串中有一个不是数值的字符，返回 `NaN`\n#### Number()转化规则\na. 如果字符串中只包含数字时，将其转换为十进制数值，忽略前导 0\nb. 如果字符串中包含有效浮点格式，如“1.1”，将其转换为对应的浮点数字，忽略前导 0\nc. 如果字符串中包含有效的十六进制格式，如“0xf”，将其转换为相同大小的十进制数值\nd. 如果字符串为空，或者是空内容，将其转换为 0\ne. 如果字符串中包含除上述格式之外的字符，则将其转换为 NaN\n\n#### parseInt()\n\n```js\n// 返回 12，如果第一个字符是数字会解析知道遇到第一个小数点结束\nvar num1 = parseInt(\"12.3abc\");\n// 返回 NaN，如果第一个字符不是数字或者符号就返回 NaN\nvar num2 = parseInt(\"abc123\");\n```\n\n#### parseFloat()\n\n`parseFloat()` 把字符串转换成浮点数，`parseFloat()` 和 `parseInt()` 非常相似，不同之处在与\n`parseFloat()` 会解析第一个`.` 遇到第二个 `.` 或者非数字结束\n如果解析的内容里只有整数，解析成整数\n\n#### 正负运算\n\n```js\nvar str = \"500\";\nconsole.log(+str); // 取正\nconsole.log(-str); // 取负\n```\n\n### 转换成布尔类型\n\n**`Boolean()`**\n`0`, `''`, `null`, `undefined`, `NaN`, 会转换成 `false`,其它都会转换成 `true`\n\n# 四. JavaScript 运算\n\n## (1) 算术运算符\n\n`+ - * / %`\n\n## (2) 一元运算符\n\n一元运算符：只有一个操作数的运算符\n`5 + 6` 两个操作数的运算符是二元运算符\n`++` 自身加 1, `--` 自身减 1\n\n**前置 `++` 先将自身的值自增 1，再将自增后的值赋值给变量**\n\n```js\nvar num1 = 5;\n++num1;\nconsole.log(num1); // 6\n```\n\n**后置 `++` 先将自身的值赋值给变量，然后再自增 1**\n\n```js\nvar num2 = 5;\nconsole.log(num2++); // 5\nconsole.log(num2); // 6\n```\n\n**总结：**\n前置 `++`： 先加后输出\n后置 `++`： 先输出后加\n\n## (3) 逻辑运算符 (布尔运算符)\n\n`&&` (与) 两个操作数同时为 `true`，结果为 `true`，否则都是 `false`\n`||` (或) 两个操作数有一个为 `true`，结果为 `true`，否则为 `false`\n`!` (非) 取反\n\n## (4) 关系运算符(比较运算符)\n\n`< > >= <= == != === !==`\n`==` 与 `===` 的区别：`==` 只进行值得比较，`===` 类型和值同时相等，则相等\n\n```js\nvar result = \"55\" == 55; // true\nvar result = \"55\" === 55; // false 值相等，类型不相等\nvar result = 55 === 55; // true 值和类型都相等\n```\n\n## (5) 赋值运算符\n\n`= += -= *= /= %=`\n\n```js\nnum += 5; //相当于 num = num + 5;\nnum *= 5; //相当于 num = num * 5;\n```\n\n## (6) 运算符的优先级\n\n**优先级从高到底如下：**\n\n括号>点运算符>一元运算符> 算数运算符 >关系运算符>逻辑运算符 >赋值运算符\n\n**注意：同级运算符先后顺序如下：**\n一元运算符 `++` `--` `!`\n算数运算符 先 `*` `/` `%` 后 `+` `-`\n关系运算符 `>` `>=` `<` `<=` `==` `!=` `===` `!==`\n逻辑运算符 先 `&&` 后 `||`\n\n## 运算优先级练习\n\n**优先级： 括号>点运算符>一元运算符> 算数运算符 >关系运算符>逻辑运算符 >赋值运算符**\n(1)\n\n```js\n4 >= 6 || (\"人\" != \"阿凡达\" && !(12 * 2 == 144) && true);\n// 第一轮 4 >= 6 || (\"人\" != \"阿凡达\" && !(false) && true)\n// 第二轮 4 >= 6 || (\"人\" != \"阿凡达\" && true && true)\n// 第三轮 false || (true && true && true)\n// 第四轮 false || true\n// 结果为 true\n```\n\n(2)\n\n```js\n100.2 >= 52 || (\"蛇\" != \"眼镜蛇\" && !(25 * 4 == 120)) || true;\n// 结果为 true\n// 第一轮 : 100.2 >= 52 || (\"蛇\" != \"眼镜蛇\" && !false) || true\n// 第二轮 : 100.2 >= 52 || (\"蛇\" != \"眼镜蛇\" && true) || true\n// 第三轮 : true || (true && true) || true\n// 第四轮 : true\n```\n\n# 五. 流程控制\n\n程序的三种基本结构\n顺序结构：从上到下执行的代码就是顺序结构(程序默认就是由上到下顺序执行的)\n分支结构：根据不同的情况，执行对应代码\n循环结构：重复做一件事情\n\n## 1. 分支结构\n\n### (1) if 语句\n\n`if` 语句  - 只有当指定条件为 true 时，使用该语句来执行代码\n`if...else` 语句  - 当条件为 true 时执行代码，当条件为 false 时执行其他代码\n`if...else if....else` 语句- 使用该语句来选择多个代码块之一来执行\n\n**if 案例判断一个人的年龄是否满 18 岁(是否成年)**\n\n```js\nif // 判断\nif // (条件) {执行语句}\nvar age = 19;\nif (age >= 18) {\n  console.log(\"成年了\");\n}\n\nif (age < 18) {\n  console.log(\"未成年\");\n}\n\n// 弹出输入框\nprompt(\"参数会展示在页面上\") // 点击确认会返回输入内容，点击取消会返回 null\n\nvar a = prompt();\nconsole.log(a);\n\nvar age = prompt();\nif (age >= 18) {\n  console.log(\"成年了\");\n}\nif (age < 18) {\n  console.log(\"未成年\");\n}\n```\n\n**if 案例百分制转换成等级制**\n\n```js\nvar grade = prompt(\"请输入成绩\");\nif (grade > 0 && grade < 60) {\n  console.log(\"不及格\");\n} else if (grade < 70) {\n  console.log(\"及格\");\n} else if (grade < 80) {\n  console.log(\"良\");\n} else if (grade < 90) {\n  console.log(\"良好\");\n} else if (grade <= 100) {\n  console.log(\"优秀\");\n} else {\n  console.log(\"请输入0-100\");\n}\n```\n\n### (2) 三元运算符\n\n`表达式 1` ? `表达式 2` : `表达式 3`\n是对 `if ... else` 语句的一种简化写法\n\n```js\nage >= 18 ? console.log(\"成年\") : console.log(\"未成年\");\n```\n\n### (3) switch 语句\n\n`switch` 语句\n`break` 可以省略，如果省略，代码会继续执行下一个 `case`\n`default` 关键词来规定匹配不存在时做的事情。\n`switch case` 使用严格比较（===），值必须与要匹配的类型相同\n\n```js\nvar day = prompt(\"请输入数字\");\n// prompt 返回类型为字符串\nswitch (Number(day)) {\n  case 1:\n    console.log(\"周一\");\n    break;\n  case 2:\n    console.log(\"周二\");\n    break;\n  case 3:\n    console.log(\"周三\");\n    break;\n  case 4:\n    console.log(\"周四\");\n    break;\n  case 5:\n    console.log(\"周五\");\n    break;\n  case 6:\n    console.log(\"周六\");\n    break;\n  case 7:\n    console.log(\"周日\");\n    break;\n  default:\n    console.log(\"666\");\n}\n```\n\n**百分制转换成等级制**\n\n```js\nvar grade = prompt();\nvar g = parseInt(grade / 10);\nconsole.log(g);\nswitch (g) {\n  case 10:\n    console.log(\"NB\");\n    break;\n  case 9:\n    console.log(\"优秀\");\n    break;\n  case 8:\n    console.log(\"良好\");\n    break;\n  case 7:\n    console.log(\"良\");\n    break;\n  case 6:\n    console.log(\"及格\");\n    break;\n  default:\n    console.log(\"不及格\");\n}\n```\n\n能用 `switch` 语句实现的就一定可以使用 `if` 实现，但是反之不一定，如果是区间范围就采用 `if` .如果是等值判断使用 `switch`\n\n```js\n// If 语句会把后面的值隐式转换成布尔类型\n// 转换为 true ： 非空字符串 非 0 数字 true 任何对象\n// 转换成 false ： 空字符串, 0, false, null, undefined\nif (undefined) {\n  console.log(\"OK\");\n} else {\n  console.log(\"NO\");\n}\n```\n\n## 2. 循环结构\n\n在 `javascript` 中，循环语句有三种，`while`、`do..while`、`for` 循环。\n\n### (1) while 语句\n\nwhile 循环会在指定条件为真时循环执行代码块\n\n```js\n//   死循环\n// while (true) {\n//   console.log();\n// }\n\n// 打印 1-100\nvar a = 1;\nwhile (a <= 100) {\n  console.log(a);\n  a++;\n  console.log(a++);\n}\n\n// 打印 1-100 的和\nvar sum = 0;\nvar b = 1;\nwhile (b <= 100) {\n  sum += b;\n  b++;\n}\n\n// 打印 100 以内 7 的倍数\nvar c = 1;\nwhile (c <= 100) {\n  if (c % 7 == 0) {\n    console.log(c);\n  }\n  c++;\n  // ++c;\n}\n\n// 100 以内偶数及和\nvar d = 1;\nvar sum2 = 0;\nwhile (d <= 100) {\n  if (d % 2 == 0) {\n    console.log(d + \"是偶数\");\n    sum2 += d;\n  }\n  d++;\n}\nconsole.log(sum2);\n\n// 100 以内奇数及和\nvar e = 1;\nvar sum3 = 0;\nwhile (e <= 100) {\n  if (e % 2 != 0) {\n    console.log(e + \"是奇数\");\n    sum3 += e;\n  }\n  e++;\n}\nconsole.log(sum3);\n```\n\n### (2) do...while 语句\n\n`do..while` 循环和 `while` 循环非常像，二者经常可以相互替代，但是 `do..while` 的特点是不管条件成不成立，都会执行一次。\n\n```js\n// do ... while\n// 打印 1-100 之间所有数的和\nvar f = 1;\nvar sum4 = 0;\ndo {\n  console.log(f);\n  sum4 += f;\n  f++;\n} while (f <= 100);\n\n// 打印 100 以内 7的倍数\nvar g = 1;\ndo {\n  if (g % 7 == 0) {\n    console.log(g);\n  }\n  g++;\n} while (g <= 100);\n\n// 打印 100 以内所有偶数\nvar i = 1;\nvar sum = 0;\ndo {\n  if (i % 2 == 0) {\n    console.log(i + \"是偶数\");\n    sum += i;\n  }\n  i++;\n} while (i <= 100);\nconsole.log(sum);\n```\n\n### (3) for 语句\n\n`while` 和 `do...while` 一般用来解决无法确认次数的循环。`for` 循环一般在循环次数确定的时候比较方便\n\n```js\n// for 循环\n// 1-100 和\nvar sum = 0;\nfor (var j = 1; j < 101; j++) {\n  console.log(j);\n  sum += j;\n}\nconsole.log(sum);\n\n// 1-100 偶数和\nvar sum = 0;\nfor (var i = 1; i <= 100; i++) {\n  if (i % 2 == 0) {\n    sum += i;\n  }\n}\nconsole.log(sum);\n\n// 双层 for 循环\n// 正方形\nfor (var i = 0; i < 10; i++) {\n  for (var j = 0; j < 10; j++) {\n    document.write(\"*\");\n  }\n  document.write(\"<br />\");\n}\n\n// 三角形\nfor (var i = 0; i < 10; i++) {\n  for (var j = 0; j < i; j++) {\n    document.write(\"#\");\n  }\n  document.write(\"<br />\");\n}\n```\n\n### (4) continue 和 break\n\n`break` :立即跳出整个循环，即循环结束，开始执行循环后面的内容（直接跳到大括号）\n`continue` :立即跳出当前循环，继续下一次循环（跳到 `i++` 的地方）\n\n```js\n// break\n// continue\nvar sum = 0;\nfor (var i = 1; i <= 100; i++) {\n  if (i % 10 == 3) {\n    break;\n    // continue;\n  }\n}\nsum += i;\nconsole.log(sum);\n```\n\n### (5) 循环语句区别\n\n#### 1. 循环结构的表达式不同\n\n`do-while` 循环结构表达式为：`do`{循环体;}\n`for` 循环的结构表达式为：`for`（单次表达式;条件表达式;末尾循环体）{中间循环体；}。\n`while` 循环的结构表达式为：`while`（表达式）{循环体}\n\n#### 2. 执行时判断方式不同\n\n`do-while` 循环将先运行一次，因为经过第一次 `do` 循环后，当检查条件表达式的值时，其值为   不成立时而会退出循环。保证了至少执行 `do`{ }内的语句一次。\n`for` 循环执行的中间循环体可以为一个语句，也可以为多个语句，当中间循环体只有一个语句时，其大括号{}可以省略，执行完中间循环体后接着执行末尾循环体。\n`while` 循环执行时当满足条件时进入循环，进入循环后，当条件不满足时，执行完循环体内全部语句后再跳出（而不是立即跳出循环）。\n\n#### 3. 执行次数不同\n\n`do-while` 循环是先执行后判断，执行次数至少为一次。\n`for` 循环是先判断后执行，可以不执行中间循环体。\n`while` 循环先判断后执行，可以不执行中间循环体。\n\n#### 4. 执行末尾循环体的顺序不同\n\n`do-while` 循环是在中间循环体中加入末尾循环体，并在执行中间循环体时执行末尾循环体。\n`for` 循环的中间循环体在条件判断语句里，执行末尾循环体后自动执行中间循环体。\n`while` 循环的末尾循环体也是在中间循环体里，并在中间循环体中执行。\n\n## 作业\n\n```js\n// 作业 1\n// 求 1-100 所有数的乘积\nvar sum1 = 1;\nfor (var a = 1; a <= 100; a++) {\n  sum1 *= a;\n}\nconsole.log(sum1);\n// ---------------------------------------------\n// 作业 2\n// 求 1-100 之间所有奇数的和\nvar sum2 = 0;\nfor (var b = 1; b <= 100; b++) {\n  if (b % 2 == 1) {\n    sum2 += b;\n  }\n}\nconsole.log(sum2);\n\n// ---------------------------------------------\n// 作业 3\n// 计算 1-100 之间能被 3 整除的数的和\nvar sum3 = 0;\nfor (var c = 1; c <= 100; c++) {\n  if (c % 3 == 0) {\n    sum3 += c;\n  }\n}\nconsole.log(sum3);\n\n// ---------------------------------------------\n// 作业 4\n// 计算 1-100 之间不能被7整除的数的和\nvar sum4 = 0;\nfor (var d = 1; d <= 100; d++) {\n  if (d % 7 == 0) {\n  } else {\n    sum4 += d;\n  }\n}\nconsole.log(sum4);\n\n// ---------------------------------------------\n// 作业 5\n// 本金10000元存入银行，年利率是千分之三，每过1年，将本金和利息相加作为新的本金。计算5年后，获得的本金是多少？\nvar money = 10000,\n  rate = 0.003,\n  years = 5,\n  sum5 = 0;\nsum5 += money;\nfor (var year = 1; year <= years; year++) {\n  sum5 *= 1 + rate;\n}\nconsole.log(sum5);\n\n// ---------------------------------------------\n// 作业 6\n// 有个人想知道，一年之内一对兔子能繁殖多少对？\n// 于是就筑了一道围墙把一对兔子关在里面。已知一对兔子每个月可以生一对小兔子，而一对兔子从出生后第3个月起每月生一对小兔子。假如一年内没有发生死亡现象，那么，一对兔子一年内（12个月）能繁殖成多少对？\n// (兔子的规律为数列，1，1，2，3，5，8，13，21)\nvar sum6,\n  r1 = 1,\n  r2 = 1;\nfor (var month = 1; month <= 12; month++) {\n  sum6 = r1 + r2;\n  r1 = r2;\n  r2 = sum6;\n  console.log(\"第\" + month + \"个月 : \" + sum6 + \" 只\");\n}\n// ---------------------------------------------\n// 作业 7\n// 求 1-100 之间不能被 7 整除的整数的和（用continue）\nvar sum7 = 0;\nfor (var e = 1; e <= 100; e++) {\n  if (e % 7 == 0) {\n    continue;\n  } else {\n    sum7 += e;\n  }\n}\nconsole.log(sum7);\n\n// ---------------------------------------------\n// 作业 8\n// 求 200-300 之间所有的奇数的和（用continue）\nvar sum8 = 0;\nfor (var i = 200; i <= 300; i++) {\n  if (i % 2 == 0) {\n    continue;\n  } else {\n    sum8 += i;\n  }\n}\nconsole.log(sum8);\n// ---------------------------------------------\n// 作业 9\n// 求 200-300之间第一个能被7整数的数（break）\nfor (var j = 200; j <= 300; j++) {\n  if (j % 7 == 0) {\n    console.log(j);\n    break;\n  }\n}\n```\n\n## 2. 调试\n\n### (1) alert()\n\n### (2) console.log()\n\n### (3) debugger 关键字\n\ndebugger  关键字用于停止执行 JavaScript，并调用调试函数。这个关键字与在调试工具中设置断点的效果是一样的\n\n### (4) 断点调试\n\n# 六. 数组\n\n## (1) 为什么要学习数组\n\n之前学习的数据类型，只能存储一个值,比如：`Number`,`String`\n\n## (2) 数组的定义\n\n所谓数组，就是将多个元素（通常是同一类型）按一定顺序排列放到一个集合中，那么这个集合我们就称之为数组。\n数组是一个有序的列表，可以在数组中存放任意的数据，并且数组的长度可以动态的调整\n\n## (3) 通过数组字面量创建数组\n\n```js\n// 创建一个空数组\nvar arr1 = [];\n// 创建一个包含3个数值的数组，多个数组项以逗号隔开\nvar arr2 = [1, 3, 4];\n// 创建一个包含2个字符串的数组\nvar arr3 = [\"a\", \"c\"];\n// 可以通过数组的length属性获取数组的长度\nconsole.log(arr3.length);\n// 可以设置length属性改变数组中元素的个数\narr3.length = 0;\n```\n\n## (4) 获取数组元素\n\n```js\n// 获取数组元素\n// 按下标取值,从0开始\n// 取值未定义的下标，值为 undefined\nconsole.log(arr2[0]);\nconsole.log(arr2[10]); // undefined\n```\n\n## (5) 遍历数组\n\n遍历：遍及所有，对数组的每一个元素都访问一次就叫遍历。\n\n```js\nfor (var i = 0; i < arr.length; i++) {\n  console.log(arr[i]);\n}\n```\n\n## (6) 数组中新增元素\n\n```js\n// 数组中新增元素\n// 赋值\narr2[arr2.length] = 100;\nconsole.log(arr2);\n\n// push()\n// 在数组末尾添加，返回数组长度\narr2.push(101);\nconsole.log(arr2);\n\n// unshift()\n// 在数组开始添加任意元素,返回数组长度\narr2.unshift(0);\nconsole.log(arr2);\n\n// shift()\n// 从数组中删除第一个元元素，并返回该元素的值.此方法会更改数组的长度\nvar r = arr2.shift();\nconsole.log(r);\nconsole.log(arr2);\n```\n\n## 数组练习案例\n\n```js\n// 求数组所有数平均值\nvar sum = 0;\nvar arr1 = [2, 3, 4];\nfor (var i = 0; i < arr1.length; i++) {\n  sum += arr1[i];\n}\nconsole.log(sum);\nconsole.log(sum / arr1.length);\n\n// 数组最大值，最小值 (第一种)\nvar arr2 = [0, 1, , 32, 0, 2, 3, 4, 5, 6];\nvar min = arr2[0], // 假设第一个元素是最小值\n  max = arr2[0]; // 假设第一个元素是最大值\nfor (var i = 0; i < arr2.length; i++) {\n  if (arr2[i] > max) {\n    max = arr2[i];\n  }\n  if (arr2[i] < min) {\n    min = arr2[i];\n  }\n}\nconsole.log(max);\nconsole.log(min);\n// 数组最大值，最小值 (第二种)\nfor (var i = 0; i < arr2.length; i++) {\n  if (arr2[i] > arr2[i + 1]) {\n    var temp = arr2[i + 1];\n    arr2[i + 1] = arr2[i];\n    arr2[i] = temp;\n  }\n}\nmax = arr2[arr2.length - 1];\nconsole.log(max);\n\n// indexOf()\n// 返回在数组中可以找到一个给定元素的第一个索引，如果不存在，则返回 -1\n// 数组去重\n// 第一种\nvar arr3 = [1, 1, 22, 22, 55, 55, 9, 9];\nvar newArr = [];\nfor (var i = 0; i < arr3.length; i++) {\n  if (arr3.indexOf(arr3[i]) == i) {\n    newArr.push(arr3[i]);\n  }\n}\nconsole.log(newArr);\n\n// 第二种\n// 遍历新数组,indexOf 返回判断 -1, 即不存在就 push()\nfor (var i = 0; i < arr3.length; i++) {\n  if (newArr.indexOf(arr3[i]) == -1) {\n    newArr.push(arr3[i]);\n  }\n}\nconsole.log(newArr);\n```\n\n# 七. 函数\n\n## (1) 为什么要有函数\n\n如果要在多个地方求 1-100 之间所有数的和，应该怎么做？\n\n## (2) 什么是函数\n\n把一段相对独立的具有特定功能的代码块封装起来，形成一个独立实体，就是函数。\n起个名字（函数名），在后续开发中可以反复调用。\n函数的作用就是封装一段代码，将来可以重复使用。\n\n## (3) 函数的定义\n\n```js\n// 1.具名函数\nfunction name() {\n  console.log(\"name\");\n}\n\n// 2.匿名函数\nvar fun = function () {\n  console.log(\"fun\");\n};\n```\n\n## (4) 函数的调用\n\n```js\n// 函数调用，加 (),即函数名();\n// 特点：函数体只有在调用的时候才会执行，调用需要()进行调用。可以调用多次(重复使用)\nname();\nfun();\n```\n\n**示例**\n\n```js\n// 声明函数\nfunction sayHi() {\n  console.log(\"吃了没？\");\n}\n// 调用函数\nsayHi();\n​\n// 求1-100之间所有数的和\nfunction getSum() {\n  var sum = 0;\n  for (var  i = 0; i < 100; i++) {\n    sum += i;\n  }\n  console.log(sum);\n}\n// 调用\ngetSum();\n```\n\n## (5) 函数的参数\n\n**形参和实参**\n\n1. 形式参数：在声明一个函数的时候，为了函数的功能更加灵活，有些值是固定不了的，对于这些固定不了的值。我们可以给函数设置参数。这个参数没有具体的值，仅仅起到一个占位置的作用，我们通常称之为形式参数，也叫形参\n2. 实际参数：如果函数在声明时，设置了形参，那么在函数调用的时候就需要传入对应的参数，我们把传入的参数叫做实际参数，也叫实参。\n\n```js\nvar x = 5,\n  y = 6;\nfn(x, y);\nfunction fn(a, b) {\n  console.log(a + b);\n}\n//x,y实参，有具体的值。函数执行的时候会把x,y复制一份给函数内部的a和b，函数内部的值是复制的新值，无法修改外部的x,y\n// 不传值为 undefined;\n```\n\n## (6) 函数的返回值\n\n```js\n// 函数通过return返回一个返回值\nfunction re(e) {\n  return e;\n}\nconsole.log(re(1));\n\n// 返回值总结\n// 1.如果函数没有使用 return语句 ，那么函数有默认的返回值：undefined\n// 2.如果函数使用 return语句，那么跟再 return 后面的值，就成了函数的返回值\n// 3.如果函数使用 return语句，但是return后面没有任何值，那么函数的返回值也是：undefined\n// 4.函数使用 return 语句后，这个函数会在执行完 return 语句之后停止并立即退出，也就是说 return 后面的所有其他代码都不会再执行\n// 推荐的做法是要么让函数始终都返回一个值，要么永远都不要返回值\n\n// 求阶乘\nfunction jieCh(n) {\n  var j = 1;\n  if (n == 0) {\n    return 1;\n  } else {\n    for (i = 1; i <= n; i++) {\n      j *= i;\n    }\n    return j;\n  }\n}\nconsole.log(jieCh(4));\n```\n\n## 函数案例\n\n```js\n// 求 1-n 之间所有的和\nfunction sumN(n) {\n  sum = 0;\n  for (var i = 1; i <= n; i++) {\n    sum += i;\n  }\n  console.log(sum);\n}\nsumN(3);\n\n// 圆的面积\n// toFixed : 四舍五入,指定小数位数\nfunction circle(r) {\n  console.log((Math.PI * r * r).toFixed(2));\n}\ncircle(1);\n\n// 求俩数中的最大值\nfunction getMaxNum(numA, numB) {\n  if (numA > numB) {\n    console.log(\"最大值 : \" + numA);\n  } else if (numA < numB) {\n    console.log(\"最大值 : \" + numB);\n  } else {\n    console.log(numA + \"=\" + numB);\n  }\n}\ngetMaxNum(2, 3);\ngetMaxNum(2, 2);\n\n// 求三个数的最大值\nfunction getMaxNumInThreeNum(numX, numY, numZ) {\n  if (numX == numY) {\n    if (numX == numZ) {\n      console.log(\"三者相等\");\n    } else if (numX > numZ) {\n      console.log(\"最大值 ：\" + numX);\n      // 或者: console.log(\"最大值 ：\" + numY);\n    } else {\n      console.log(\"最大值 : \" + numZ);\n    }\n  } else if (numX > numY) {\n    if (numX > numZ) {\n      console.log(\"最大值 : \" + numX);\n    } else {\n      console.log(\"最大值 : \" + numZ);\n    }\n  } else {\n    if (numY > numZ) {\n      console.log(\"最大值 ：\" + numY);\n    } else {\n      console.log(\"最大值 ：\" + numZ);\n    }\n  }\n}\ngetMaxNumInThreeNum(2, 2, 1);\n\n// 判断一个数是否为素数\nfunction isPrime(n) {\n  if (n == 0 || n == 1) {\n    console.log(n + \" 是素数\");\n  } else if (n == 2) {\n    console.log(n + \" 不是素数\");\n  } else {\n    for (var i = 2; i < n; i++) {\n      if (n % i != 0) {\n        console.log(n + \" 是素数\");\n        break;\n      } else {\n        console.log(n + \" 不是素数\");\n        break;\n      }\n    }\n  }\n}\nisPrime(4);\n```\n\n## 作业\n\n```js\n// 作业1：\n// 数组去重，返回一个新数组\nvar arr1 = [2, 4, 4, 5, 5, 7, 8, 9];\nfunction duplicateRemoval(arr) {\n  var newArr = [];\n  for (var i = 0; i < arr.length; i++) {\n    if (newArr.indexOf(arr[i]) == -1) {\n      newArr.push(arr[i]);\n    }\n  }\n  return newArr;\n}\n\nconsole.log(duplicateRemoval(arr1));\n\n// 作业2：\n// 将数组[10,1,35,61,89,36,55]冒泡排序，从小到大\nvar arr2 = [10, 1, 35, 61, 89, 36, 55];\nfor (var i = 0; i < arr2.length - 1; i++) {\n  for (var j = 0; j < arr2.length - 1 - i; j++) {\n    if (arr2[j] > arr2[j + 1]) {\n      var temp = arr2[j];\n      arr2[j] = arr2[j + 1];\n      arr2[j + 1] = temp;\n    }\n  }\n}\nconsole.log(arr2);\n\n// 作业3：\n// 求1!+2!+3!+....+n!\nfunction sumJieCh(n) {\n  var sumJie = 0;\n  // n 轮\n  for (var i = 1; i <= n; i++) {\n    // 每轮从 1 开始累乘\n    jie = 1;\n    for (var j = 1; j <= i; j++) {\n      jie *= j;\n    }\n    sumJie += jie;\n  }\n  return sumJie;\n}\nconsole.log(sumJieCh(1), sumJieCh(2), sumJieCh(3), sumJieCh(4));\n\n// 作业4：\n// 输入一个年份，判断是否是闰年[闰年：能被4整数并且不能被100整数，或者能被400整数]\nfunction isLeapYear() {\n  var year = prompt(\"请输入年份\");\n  if (year % 4 == 0 && year % 100 != 0) {\n    console.log(year + \" 是闰年\");\n  } else if (year % 400 == 0) {\n    console.log(year + \" 是世纪闰年\");\n  } else {\n    console.log(year + \" 不是闰年\");\n  }\n}\nisLeapYear();\n\n// 作业5：\n// 输入某年某月某日，判断这一天是这一年的第几天？（不用做）\n// 😁\n\n// 作业6：\n// 利用函数的返回值，求1+2+3+4+………+n\nfunction sum(n) {\n  var result = 0;\n  for (var i = 1; i <= n; i++) {\n    result += i;\n  }\n  return result;\n}\nconsole.log(sum(3));\n\n// 作业7：\n// 斐波那契数列函数\nfunction fibonacci(n) {\n  var f = [1, 1];\n  for (var i = 0; i < n - 2; i++) {\n    f.push(f[i] + f[i + 1]);\n  }\n  return f;\n}\nconsole.log(fibonacci(5));\n```\n\n## 冒泡排序\n\n```js\n// 冒泡排序\n// 从小到大\nvar arr1 = [2, 1, 6, 0, 3, 8, 4, 5, 9, 7];\n// 第一层 for 循环是比较多少轮\nfor (var i = 0; i < arr1.length - 1; i++) {\n  // 第二层 for 循环是每轮比较多少次,递减\n  for (var j = 0; j < arr1.length - 1 - i; j++) {\n    if (arr1[j] > arr1[j + 1]) {\n      var temp = arr1[j + 1];\n      arr1[j + 1] = arr1[j];\n      arr1[j] = temp;\n    }\n  }\n}\nconsole.log(arr1);\n\n// 从大到小\n// 俩数判断后交换顺序改一下就行\nvar arr2 = [2, 1, 6, 0, 3, 8, 4, 5, 9, 7];\nfor (var i = 0; i < arr2.length - 1; i++) {\n  for (var j = 0; j < arr2.length - 1 - i; j++) {\n    if (arr2[j] < arr2[j + 1]) {\n      var temp = arr2[j + 1];\n      arr2[j + 1] = arr2[j];\n      arr2[j] = temp;\n    }\n  }\n}\nconsole.log(arr2);\n```\n\n<!-- -------------------------------- -->\n\n# 八. 预解析\n\n`JavaScript` 引擎在对 `JavaScript` 代码进行解释执行之前，会对 `JavaScript` 代码进行预解析，在预解析阶段，会将以关键字 `var` 和 `function` 开头的语句块提前进行处理。\n当变量和函数的声明处在作用域比较靠后的位置的时候，变量和函数的声明会被提升到作用域的开头。\n\n## (1) 函数提升\n\n```js\nfunc();\nfunction func() {\n  alert(\"fun\");\n}\n// 由于 JavaScript 的预解析机制，上面的代码就等效于：\nfunction func() {\n  alert(\"fun\");\n}\nfunc();\n```\n\n## (2) 变量提升\n\n```js\n// 变量声明被提升,赋值并没有提升\nconsole.log(e); // undefined\nvar e = 1;\n// 相当于\nvar e;\nconsole.log(e);\ne = 1;\n```\n\n## (3) 函数同名\n\n```js\nfunc1();\nfunction func1() {\n  console.log(\"func1\");\n}\nfunc1();\nfunction func1() {\n  console.log(\"func2\");\n}\n// 由于预解析机制，func1的声明会被提升，提升之后的代码为\nfunction func1() {\n  console.log(\"func2\");\n}\nfunc1();\nfunc1();\n// 同名的函数，后面的会覆盖前面的，所以两次输出结果都是 func2\n```\n\n## (4) 变量和函数同名\n\n```js\nconsole.log(f);\nvar f = 1;\nfunction f() {}\n// 当出现变量声明和函数同名的时候，只会对函数声明进行提升，变量会被忽略。所以上面的代码的输出结果为\n// ƒ f() {}\n```\n\n```js\nvar num = 1;\nfunction num() {\n  alert(num);\n}\nnum(); // num is not a function\n\n// 当变量和函数同名时,只会对函数声明进行提升，变量会被忽略。\n\n// 同名的变量和函数，变量会覆盖函数，导致函数无法调用\n\n// 通俗来讲就是只要出现同名的函数和变量，优先对函数进行提升。但没用，变量会覆盖函数，最终只有变量声明语句生效\n\n// 按照常规的书写顺序，同名的函数与变量，变量会覆盖函数\n```\n\n## 练习\n\n```js\n// 先提升\n// 再看顺序\n// 1\nfunction test(a, b) {\n  console.log(a);\n  var a = 3;\n  console.log(b);\n  var b = 2;\n  function b() {}\n  console.log(b);\n}\ntest(1);\n// 变量提升后的顺序:\nfunction test(a, b) {\n  var a;\n  function b() {}\n  var b;\n  console.log(a);\n  a = 3;\n  console.log(b);\n  b = 2;\n  console.log(b);\n}\ntest(1);\n// 所以结果为\n// 1\n// ƒ b() {}\n// 2\n\n// 2\nfunction test() {\n  console.log(a);\n  console.log(b);\n  var b = 234;\n  console.log(b);\n  a = 123;\n  console.log(a);\n  function a() {}\n  var a;\n  b = 234;\n  var b = function () {};\n  console.log(a);\n  console.log(b);\n}\ntest();\n// 变量提升后的顺序:\nfunction test() {\n  var b;\n  function a() {}\n  var a;\n  console.log(a);\n  console.log(b);\n  b = 234;\n  console.log(b);\n  a = 123;\n  console.log(a);\n  b = 234;\n  var b = function () {};\n  console.log(a);\n  console.log(b);\n}\ntest();\n// 所以结果为:\n// ƒ a() {}\n// undefined\n// 234\n// 123\n// 123\n// ƒ () {}\n```\n\n## (5) 预解析是分作用域的\n\n```js\nfunction m() {\n  var m = \"m\";\n}\nconsole.log(m); // m 未定义\n// 解析后的代码:\nfunction m() {\n  var m;\n  m = \"m\";\n}\nconsole.log(m); // m 未定义\n```\n\n## (6) 函数表达式不会提升\n\n```js\nfun1();\nvar fun1 = function () {\n  console.log(\"666\");\n};\n// 结果是 : func1 is not a function，原因就是函数表达式，并不会被提升。只是简单地当做变量声明进行了处理，如下\nvar fun1;\nfun1();\nfun1 = function () {\n  console.log(\"666\");\n};\n```\n\n## (7)作用域\n\n### (1) 全局作用域\n\n直接编写在 `script` 标签之中的 `JS` 代码，都是全局作用域；或者是一个单独的 `JS` 文件中的。\n全局作用域在页面打开时创建，页面关闭时销毁；\n在全局作用域中有一个全局对象 `window`（代表的是一个浏览器的窗口，由浏览器创建），可以直接使用。\n所有创建的变量都会作为 `window` 对象的属性保存。\n\n### (2) 局部作用域 ( 函数作用域 )\n\n在函数内部就是局部作用域，这个代码的名字只在函数的内部起作用\n\n### (3) 隐式全局变量\n\n声明变量使用`var`, 如果不使用 `var` 声明的变量就是全局变量( 禁用 )\n因为在任何代码结构中都可以使用该语法. 那么再代码维护的时候会有问题. 所以除非特殊原因不要这么用.\n\n```js\nfun2();\nconsole.log(a);\nconsole.log(b);\nconsole.log(c);\nfunction fun2() {\n  var a = 1;\n  b = 1;\n  c = 1;\n  console.log(a);\n  console.log(b);\n  console.log(c);\n}\nfun2 执行后获得隐式全局变量 `b` 和 `c`\n```\n\n# 九. 对象\n\n## (1) 为什么要有对象\n\n```js\nfunction printPerson(name, age, sex....) {}\n// 函数的参数如果特别多的话，可以使用对象简化\nfunction printPerson(person) {  \n   console.log(person.name);  \n}\n```\n\n## (2) 什么是对象\n\n现实生活中：万物皆对象，对象是一个具体的事物，一个具体的事物就会有行为和特征。\n举例： 一辆车、一部手机、一台电脑、一张桌子\n车是一类事物，门口停的那辆车才是对象。特征：红色、四个轮子，行为：驾驶、刹车\n\n## (3) JavaScript 中的对象\n\nJavaScript 的对象是无序属性的集合。\n其属性可以包含基本值、对象或函数。对象就是一组没有顺序的值。我们可以把 JavaScript 中的对象想象成键值对，其中值可以是数据和函数。\n`Key` = `value`\n对象的行为和特征\n特征---属性\n行为---方法\nTips：\n事物的特征在对象中用属性来表示。\n事物的行为在对象中用方法来表示。\n\n## (4) 对象创建方式\n\n### 1. 对象字面量\n\n```js\nvar obj = {\n  name: \"zs\",\n  age: 18,\n  sex: true\n  fun=function(){\n    console.log(\"fun\")\n  }\n};\n```\n\n### 2. new Object()创建对象\n\n```js\nvar person = new Object();\nperson.name = \"lisi\";\nperson.age = 35;\nperson.job = \"codeman\";\nperson.say = function () {\n  console.log(\"Hello\");\n};\n```\n\n### 3. 工厂函数创建对象\n\n```js\nfunction createPerson(name, age, job) {\n  var person = new Object();\n  person.name = name;\n  person.age = age;\n  person.job = job;\n  person.say = function () {\n    console.log(\"Hello\");\n  };\n  return person;\n}\nvar p1 = createPerson(\"张三\", 22, \"actor\");\n```\n\n### 4. 自定义构造函数\n\n```js\nfunction Person(name, age, job) {\n  this.name = name;\n  this.age = age;\n  this.job = job;\n  this.say = function () {\n    console.log(\"Hello\");\n  };\n}\nvar p1 = new Person(\"张三\", 22, \"actor\");\n```\n\n## (5) 属性和方法\n\n1. 如果一个变量属于一个对象所有，那么该变量就可以称之为该对象的一个属性\n\n2. 如果一个函数属于一个对象所有，那么该函数就可以称之为该对象的一个方法\n\n## (6) new 关键字\n\n构造函数，是一种特殊的函数。主要用来在创建对象时初始化对象，即为对象成员变量赋初始值，总与 new 运算符一起使用在创建对象的语句中。\n\n1. 构造函数用于创建一类对象，首字母要大写。\n\n2. 构造函数要和 `new` 一起使用才有意义。\n\n**`new` 在执行时会做四件事情：**\n\n1、new 会在内存中创建一个新的空对象\n2、new 会让 this 指向这个新的对象\n3、new 会返回这个新对象\n\n## (7) this\n\n函数内部的 `this` 几个特点：\n\n1. 函数在定义的时候 `this` 是不确定的，只有在调用的时候才可以确定\n2. 一般函数直接执行，内部 `this` 指向全局 window\n3. 函数作为一个对象的方法，被该对象所调用，那么 `this` 指向的是该对象\n4. 构造函数中的 `this` 其实是一个隐式对象，类似一个初始化的模型，所有方法和属性都挂载到了这个隐式对象身上，后续通过 new 关键字来调用，从而实现实例化\n\n## (8) 对象的使用\n\n遍历对象的属性\n通过 for..in 语法可以遍历一个对象\n删除对象的属性\n\n```js\n// 通过 for ... in 遍历对象的属性\nvar obj1 = {\n  name: \"man\",\n  age: 20,\n};\nfor (var key in obj1) {\n  console.log(key);\n}\n// 遍历对象的属性值\nfor (var key in obj1) {\n  console.log(obj1[key]);\n}\n// 删除对象的属性\ndelete obj1.name;\n```\n\n# 十. JavaScript  错误\n\n## (1) JavaScript `try` 和 `catch`\n\n`try`  语句允许我们定义在执行时进行错误测试的代码块。\n`catch`  语句允许我们定义当 `try` 代码块发生错误时，所执行的代码块。\n`JavaScript` 语句  `try`  和  `catch`  是成对出现的。\n\n```js\nfunction t() {\n  try {\n    alertt(\"666\");\n  } catch (error) {\n    console.log(error.message); // alertt is not defined\n  }\n}\nt();\n// catch 块会捕捉到 try 块中的错误，会执行 catch 里的部分\n```\n\n## (2) finally 语句\n\n`finally` 语句不论之前的 `try` 和 `catch` 中是否产生异常都会执行该代码块\n\n```js\nfunction t() {\n  try {\n    alertt(\"666\");\n  } catch (error) {\n    console.log(error.message); // alertt is not defined\n  } finally {\n    console.log(\"finally\");\n  }\n}\nt();\n```\n\n## (3) Throw 语句\n\n`throw` 语句允许我们创建自定义错误。\n正确的技术术语是：创建或抛出异常（exception）。\n\n```js\n// 检测输入变量的值。如果值是错误的，会抛出一个异常（错误）。catch 会捕捉到这个错误，并显示一段自定义的错误消息\nfunction myFunction() {\n  var x = prompt();\n  try {\n    if (x == \"\") throw \"值为空\";\n    if (isNaN(x)) throw \"请输入数字\";\n    x = Number(x);\n    if (x < 5) throw \"太小\";\n    if (x > 10) throw \"太大\";\n    else {\n      console.log(\"good\");\n    }\n  } catch (err) {\n    console.log(err);\n  }\n}\nmyFunction();\n```\n\n## 作业\n\n```js\n// 作业1;\n// 创建一个电脑对象,有颜色,有重量,有品牌,有型号,可以看电影,可以听音乐,可以打游戏,可以敲代码;\nvar computer = {\n  color: \"#494f5c\",\n  weight: \"120\",\n  brand: \"Brand\",\n  model: \"model\",\n  seeMovies: function () {\n    console.log(\"看电影\");\n  },\n  listenMusics: function () {\n    console.log(\"听音乐\");\n  },\n  gaming: function () {\n    console.log(\"打游戏\");\n  },\n  coding: function () {\n    console.log(\"coding\");\n  },\n};\nconsole.log(computer);\ncomputer.gaming();\ncomputer.coding();\n\n// 作业2;\n// 创建一个按钮对象, 宽, 高, 背景颜色, 点击行为, 按钮有鼠标进入的行为;\nvar button = new Object();\nbutton.width = \"120px\";\nbutton.height = \"40px\";\nbutton.backgroundColor = \"#494f5c\";\nbutton.click = function () {\n  console.log(\"click\");\n};\nbutton.hover = function () {\n  console.log(\"hover\");\n};\nconsole.log(button);\nbutton.click();\nbutton.hover();\n\n// 作业3;\n// 创建一个车的对象, 有重量, 颜色, 牌子, 可以载人, 拉货;\nfunction createCar(weight, color, brand, canBeManned, pickUpTheGoods) {\n  var car = new Object();\n  car.weight = weight;\n  car.color = color;\n  car.brand = brand;\n  car.canBeManned = function () {\n    console.log(\"可以载人\");\n  };\n  car.pickUpTheGoods = function () {\n    console.log(\"可拉货\");\n  };\n  return car;\n}\nvar car1 = createCar(\"2000kg\", \"#494f5c\", \"brand\");\nconsole.log(car1);\ncar1.canBeManned();\n\n// 作业4;\n// 利用对象属性不能重复的特性给数组去重;\nvar arr = [1, 2, 2, 3, 3, 5, 5, 6, 8, 8, 9, 9];\nfunction duplicateRemoval(arr) {\n  var obj = {};\n  var newArr = [];\n  for (var i = 0; i < arr.length; i++) {\n    if (!obj[arr[i]]) {\n      newArr.push(arr[i]);\n      obj[arr[i]] = true;\n    }\n  }\n  return newArr;\n}\nconsole.log(duplicateRemoval(arr));\n```\n\n# 十一. js 内置对象\n\n## 1.内置对象\n\n`JavaScript` 中的对象分为 4 种：内置对象、浏览器对象、自定义对象、DOM 对象。\n`JavaScript` 提供多个内置对象：Math/Array/Number/String/Boolean ...\n对象只是带有属性和方法的特殊数据类型。学习一个内置对象的使用，只要学会其常用的成员的使用(通过查文档学习)。内置对象的方法很多，我们只需要知道内置对象提供的常用方法，使用的时候查询文档。\n\n## 2. Math 对象\n\n`Math` 对象不是构造函数，它具有数学常数和函数的属性和方法，都以静态成员的方式提供。\n跟数学相关的运算来找 `Math` 中的成员(求绝对值，取整)。\n\n### (1) 常用属性\n\n```js\nMath.PI; // 圆周率\n```\n\n### (2) 常用方法\n\n```js\nMath.random(); // 生成随机数\nMath.floor(); // 向下取整\nMath.ceil(); // 向上取整\nMath.round(); // 取整，四舍五入\nMath.abs(); // 绝对值\nMath.max(); // 最大值\nMath.min(); // 最小值\nMath.sin(); // 正弦\nMath.cos(); // 余弦\nMath.pow(); // 求指数次幂\nMath.sqrt(); // 求平方根\n```\n\n## 3. Date 对象\n\n创建 `Date` 实例用来处理日期和时间。`Date` 对象基于 1970 年 1 月 1 日（世界标准时间）起的毫秒数。\n\n### (1) 创建日期对象\n\n`Date()` 是构造函数\n\n```js\nvar date = new Date(); // 获取到的是 1970 年 1 月 1 日至今的毫秒数\n```\n\n### (2) 日期原始值\n\ngetTime()：获取 1970 年 1 月 1 日至今的毫秒数\nvalueOf();原始值，获取 1970 年 1 月 1 日至今的毫秒数\n\n### (3) 获取日期指定部分\n\n```js\ngetMilliseconds();\ngetSeconds(); // 返回 0-59\ngetMinutes(); // 返回 0-59\ngetHours(); // 返回 0-23\ngetDay(); // 返回星期几 0 周日   6 周 6\ngetDate(); // 返回当前月的第几天\ngetMonth(); // 返回月份，从 0 开始\ngetFullYear(); //返回 4 位的年份 如 2016\n```\n\n## 4. Array 对象\n\n### (1) 创建数组对象的两种方式\n\n1、字面量方式\n2、new Array()\n\n### (2) 检测一个对象是否是数组\n\n`instanceof` 如果返回 `true` 就是数组，`false` 是非数组 ( 这玩意儿很少用 )\n`Array.isArray()` 如果返回 `true` 就是数组，`false` 是非数组 ( 常用 )\n`valueOf()` 返回数组对象本身\n\n### (3) 栈操作 (先进后出)\n\n```js\npush(); // 添加元素\npop(); // 删除元素\n```\n\n![stack](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/js/stack.png)\n\n### (4) 队列操作 (先进先出)\n\n```js\nshift(); // 删除元素\nunshift(); // 添加元素\n```\n\n### (5) 排序方法\n\n```js\nreverse(); // 翻转数组\nsort(); // 只看第一位数来排序\n```\n\n```js\n//   var arr = [1, 2, 3, 4, 9, 8, 7, 6, 5];\nvar arr1 = [100, 200, 3, 4, 9, 8, 7, 6, 5];\nconsole.log(arr1.sort()); // 然而排序后的结果不是咱想要的\n```\n\n**可以这样**\n\n```js\narr1.sort(function (a, b) {\n  return a - b; // 从小到大排序\n  return b - a; // 从大到小排序\n});\n```\n\n### (6) 操作方法\n\n#### `concat()` 把参数拼接到当前数组、  或者用于连接两个或多个数组\n\n#### `slice(start,end)`\n\n1、从 `start` 开始截取元素，到 `end` 结束，包括 `start`,不包括 `end`,返回新数组，`start`,`end` 是索引,\n2、不会改变原始数组\n\n#### `splice()`\n\n`splice(start,length)`\n1、从 `start` 开始截取元素，截取 `length` 个，,`返回新数组，start` 是索引,`length` 是个数, **如果不写`length`参数,会从`start`一直删到最后**\n2、会改变元素的数组\n\n### (7) 位置方法\n\n`indexOf()` 寻找元素位置,返回第一次出现的位置的索引值,没有找到返回 -1，\n`lastIndexOf()`   从后往前找\n上述方法只是查找顺序不一样 结果都是索引值\n\n### (8) 数组迭代方法\n\n1、`forEach()` 方法用于调用数组的每个元素，并将元素传递给回调函数\n\n可以拿到每个数组中的值，没有返回值\n\n```js\narray.forEach(function(value, index))\n// value 必需,当前元素\n// Index 可选,当前元素索引值\n```\n\n2、`every()`, `some()` 方法用于检测数组所有元素是否都符合指定条件（通过函数提供）\n`some()`,`every()` 方法的参数是一个回调函数，回调函数中的第一个参数是数组的元素，第二个参数是数组的索引\n`some()`,`every()` 方法都会返回新的数组\n\n```js\nvar flag1 = arr3.every(function (value, index) {\n  return value > 55;\n});\nconsole.log(flag1);\nvar flag2 = arr3.some(function (value, index) {\n  return value >= 88;\n});\nconsole.log(flag2);\n```\n\n`every()` :判断回调函数中的表达式是否全部满足，如果满足，返回值就是 `true`,只要有一个不满足就是 `false`\n\n`some` 判断回调函数中的表达式是否有一个满足，如果至少一个满足，返回值就是 `true`\n\n### (9) 清空数组\n\n#### 方式 1 推荐\n\n```js\narr = [];\n```\n\n#### 方式 2\n\n```js\narr.length = 0;\n```\n\n#### 方式 3\n\n```js\narr.splice(0, arr.length);\n// 或者,不写 length ,会一直删到最后\narr.splice(0);\n```\n\n### (10) 数组转化字符串\n\n`join()` 将数组转化为字符串，以参数分割\n\n```js\nvar str = \"31423412\";\nconsole.log(str.split(\"\").join()); // 3,1,4,2,3,4,1,2\nconsole.log(str.split(\"\").join(\"\")); // 31423412\nconsole.log(str.split(\"\").join(\"-\")); // 3-1-4-2-3-4-1-2\n```\n\n## 5. 基本包装类型\n\n为了方便操作基本数据类型，`JavaScript` 还提供了三个特殊的引用类型：`String`,`Number`,`Boolean`\n\n```js\n// s1是基本类型，基本类型是没有方法来操作的\nvar s1 = 'zhangsan';\nvar s2 = s1.substring(5);\n​\n// 当调用 s1.substring(5) 的时候，先把 s1 包装成 String 类型的临时对象，再调用 substring 方法，最后销毁临时对象, 相当于：\nvar s1 = new String('zhangsan');\nvar s2 = s1.substring(5);\ns1 = null;\n```\n\n```js\n// 创建基本包装类型的对象\nvar num = 18; //数值，基本类型\nvar num = Number(\"18\"); //类型转换\nvar num = new Number(18); //基本包装类型，对象\n// Number 和 Boolean 基本包装类型基本不用，使用的话可能会引起歧义。例如：\nvar b1 = new Boolean(false);\nvar b2 = b1 && true; // 结果是 true, 因为 object && true = true\n```\n\n## 6. String 对象\n\n### (1) 字符串的不可变\n\n```js\nvar str = \"abc\";\nstr = \"hello\";\n// 当重新给 str 赋值的时候，常量 'abc'不会被修改，依然在内存中\n// 重新给字符串赋值，会重新在内存中开辟空间，这个特点就是字符串的不可变\n// 由于字符串的不可变，在大量拼接字符串的时候会有效率问题\n```\n\n### (2) 创建字符串对象\n\n```js\nvar str = new String(\"Hello World\");\n// 获取字符串中字符的个数\nconsole.log(str.length);\n```\n\n### (3) 字符串对象的常用方法\n\n字符串所有的方法，都不会修改字符串本身(字符串是不可变的)，操作完成会返回一个新的字符串\n\n#### 1. 字符方法\n\n```js\ncharAt(); //获取指定位置处字符\ncharCodeAt(); //获取指定位置处字符的 ASCII 码\nstr[0]; //HTML5，IE8+支持 和 charAt()等效\n```\n\n#### 2. 字符串操作方法\n\n```js\nconcat()   //拼接字符串，等效于+，+更常用\nslice(start,end)   //从 start 位置开始，截取到 end 位置，end 取不到\nsubstring(start,end) //从 start 位置开始，截取到 end 位置，end 取不到\nsubstr(start,length)   //// 从 start 位置开始，截取 length 个字符\nindexOf()   //返回指定内容在元字符串中的位置,,如果没有，返回-1；(从前往后，检索到第一个就结束)\nlastIndexOf() //返回指定内容在元字符串中的位置,,如果没有，返回-1；(从后往前，检索到第一个就结束)\ntrim() //只能去除字符串前后的空白\n\n// 大小写转换方法\ntoUpperCase() //转换大写\ntoLowerCase() //转换小写\nsearch()//方法用于检索字符串中指定的子字符串，返回子字符串的起始位置\nreplace(old,new) //替换字符串替换字符串 new 替换 old\nsplit() //分割字符串 返回的是一个数组。。数组的元素就是以参数的分割的\n```\n\n**演示**\n\n```js\nvar str = \"uy weiu ryqi w-u-q-wey82374192739    \";\n\nconsole.log(str.charAt(0)); // //获取指定位置处字符\n\nconsole.log(str.charCodeAt(0)); //获取指定位置处字符的ASCII码\n\nconsole.log(str[0]); //HTML5，IE8+支持 和charAt()等效\n\nvar str2 = \"\";\nstr2 = str.concat(str); //拼接字符串，等效于+，+更常用\nconsole.log(str2);\n\nconsole.log(str.slice(0, 1)); //从start位置开始，截取到end位置，end取不到\n\nconsole.log(str.slice(2, 4));\n\nconsole.log(str.substring(2, 4)); //从start位置开始，截取到end位置，end取不到\n\nconsole.log(str.substr(2, 4)); // 从start位置开始，截取 length 个字符\n\nconsole.log(str.indexOf(\"u\")); //返回指定内容在元字符串中的位置,,如果没有，返回-1；(从前往后，检索到第一个就结束)\n\nconsole.log(str.lastIndexOf(\"u\")); //返回指定内容在元字符串中的位置,,如果没有，返回-1；(从后往前，检索到第一个就结束)\n\nconsole.log(str.trim()); //只能去除字符串前后的空白\n\n// 大小写转换方法\nconsole.log(str.charAt(0).toUpperCase()); //转换大写\n\nconsole.log(str.charAt(0).toLowerCase()); //转换小写\n\nconsole.log(str.search(\"u\")); //方法用于检索字符串中指定的子字符串，返回子字符串的起始位置\n\nconsole.log(str.replace(\"u\", \"new\")); //替换字符串替换字符串 new替换old\n\nconsole.log(str.split()); //分割字符串 返回的是一个数组。。数组的元素就是以参数的分割的\n\nconsole.log(str.split(\"\"));\nconsole.log(str.split(\" \"));\nconsole.log(str.split(\"-\"));\n```\n\n**作业**\n\n```js\n//   -------------------------\n// Wechat收购 Baidu，电话号码相同的人当作是同一个人，合并后salary相加，其他属性保留Wechat的数据，新的Baidu的员工重新生成id,salary涨幅20%\n// 统计收购后的员工平均工资，最高工资，最低工资，male的平均工资，female的平均工资\n// 找出收购后工资高于8000的员工姓名和电话号码，按薪水从高到低排序\n// 找出收购前后工资涨幅最高的员工姓名和电话号码，以及涨幅的百分比\n// 找出收购后重名最多的三个姓名，统一出他们的平均年龄\nvar BaiduUsers = [],\n  WechatUsers = [];\nvar User = function (id, name, phone, gender, age, salary) {\n  this.id = id;\n  this.name = name;\n  this.phone = phone;\n  this.gender = gender;\n  this.age = age;\n  this.salary = salary;\n};\nUser.create = function (id, name, phone, gender, age, salary) {\n  return new User(id, name, phone, gender, age, salary);\n};\nBaiduUsers.push(User.create(1, \"tommy\", \"1111\", \"male\", 18, 10000));\nBaiduUsers.push(User.create(2, \"jerry\", \"2222\", \"male\", 28, 10000));\nBaiduUsers.push(User.create(3, \"raobin\", \"3333\", \"female\", 14, 1200));\nBaiduUsers.push(User.create(4, \"binbin\", \"4444\", \"male\", 23, 9800));\nBaiduUsers.push(User.create(5, \"arthur\", \"5555\", \"female\", 22, 10000));\n//\nWechatUsers.push(User.create(1, \"tommy\", \"1111\", \"male\", 20, 40000));\nWechatUsers.push(User.create(2, \"allen\", \"6666\", \"male\", 34, 15800));\nWechatUsers.push(User.create(3, \"raobin\", \"3333\", \"female\", 16, 2300));\nWechatUsers.push(User.create(4, \"harvey\", \"7777\", \"male\", 30, 29800));\nWechatUsers.push(User.create(5, \"yuyu\", \"8888\", \"female\", 27, 7000));\n\n// 电话号码相同的人当作是同一个人，合并后salary相加，其他属性保留Wechat的数据\nfor (var b = 0; b < BaiduUsers.length; b++) {\n  for (var w = 0; w < WechatUsers.length; w++) {\n    if (BaiduUsers[b].phone == WechatUsers[w].phone) {\n      WechatUsers[w].oldsalary = WechatUsers[w].salary;\n      WechatUsers[w].salary = WechatUsers[w].oldsalary + BaiduUsers[b].salary;\n      BaiduUsers.splice(b, 1);\n    }\n  }\n}\n\n// 新的Baidu的员工重新生成id,salary涨幅20%\nfor (var i = 0; i < BaiduUsers.length; i++) {\n  BaiduUsers[i].oldsalary = BaiduUsers[i].salary;\n  BaiduUsers[i].salary = BaiduUsers[i].salary * 1.2;\n  BaiduUsers[i].id = WechatUsers.length + 1 + i;\n}\n\n// 所有 weChat 员工\nnewWechatUsers = WechatUsers.concat(BaiduUsers);\n\n// 统计收购后的员工平均工资，最高工资，最低工资，male的平均工资，female的平均工资\nvar sumSalary = 0, // 所有员工薪资和\n  usersSalary = [], // 所有员工薪资\n  averageSalary = 0, // 平均薪资\n  max = 0, // 最高薪资\n  min = 0, // 最低薪资\n  maleSalary = [], // 男员工薪资集合\n  femaleSalary = [], // 女员工薪资集合\n  sumMaleSalary = 0,\n  sumFemaleSalary = 0;\nnewWechatUsers.forEach(function (user, userIndex) {\n  // 把所有员工薪资放到一个新数组里\n  usersSalary.push(newWechatUsers[userIndex].salary);\n\n  // 把所有男员工薪资放到一个新数组里\n  if (user.gender == \"male\") {\n    maleSalary.push(newWechatUsers[userIndex].salary);\n  }\n\n  // 把所有女员工薪资放到一个新数组里\n  if (user.gender == \"female\") {\n    femaleSalary.push(newWechatUsers[userIndex].salary);\n  }\n});\n\n// 所有员工的薪资\nusersSalary.forEach(function (userSalary) {\n  sumSalary += userSalary;\n});\n\n// 平均薪资\naverageSalary = sumSalary / newWechatUsers.length;\nconsole.log(averageSalary);\n\n// 最高工资，最低工资\nmax = usersSalary[0];\nmin = usersSalary[0];\nusersSalary.forEach(function (value) {\n  if (max < value) {\n    max = value;\n  }\n  if (min > value) {\n    min = value;\n  }\n});\nconsole.log(max, min);\n\n// male的平均工资\nfor (var i = 0; i < maleSalary.length; i++) {\n  sumMaleSalary += maleSalary[i];\n}\nconsole.log(sumMaleSalary / maleSalary.length);\n\n// female的平均工资\nfor (var i = 0; i < femaleSalary.length; i++) {\n  sumFemaleSalary += femaleSalary[i];\n}\nconsole.log(sumFemaleSalary / femaleSalary.length);\n\n// 找出收购后工资高于8000的员工姓名和电话号码，按薪水从高到低排序\n\n// 先把整体重新排序\nnewWechatUsers.sort(function (a, b) {\n  return b[\"salary\"] - a[\"salary\"];\n});\n\nvar more8000 = [];\n\nfunction UserList(name, phone) {\n  this.name = name;\n  this.phone = phone;\n  return { name, phone };\n}\nfor (var i = 0; i < newWechatUsers.length; i++) {\n  if (newWechatUsers[i].salary > 8000) {\n    more8000.push(UserList(newWechatUsers[i].name, newWechatUsers[i].phone));\n  }\n}\n\n// 找出收购前后工资涨幅最高的员工姓名和电话号码，以及涨幅的百分比\nfor (var i = 0; i < newWechatUsers.length; i++) {\n  if (newWechatUsers[i].oldsalary != undefined) {\n    newWechatUsers[i].riseSalary =\n      newWechatUsers[i].salary - newWechatUsers[i].oldsalary;\n    newWechatUsers[i].percentRise =\n      (newWechatUsers[i].riseSalary / newWechatUsers[i].oldsalary) * 100;\n  }\n  // 因为有的员工薪资没有合并，也没有涨薪，所以 oldsalary 会是 undefined\n  else {\n    newWechatUsers.splice(i, 1);\n  }\n}\n\nnewWechatUsers.sort(function (a, b) {\n  return b[\"percentRise\"] - a[\"percentRise\"];\n});\nconsole.log(\n  newWechatUsers[0].name,\n  newWechatUsers[0].phone,\n  \"涨幅百分比 :\" + newWechatUsers[0].percentRise + \"%\"\n);\n\nconsole.log(\"-------------------------------------\");\n\nvar str = \"abaasdffggghhjjkkgfddsssss3444343\";\n\n// 1、 字符串的长度\nconsole.log(str.length);\n\n// 2、 取出指定位置的字符，如：0,3,5,9等\nconsole.log(str.slice(0, 1));\nconsole.log(str.slice(2, 3));\nconsole.log(str.slice(4, 5));\nconsole.log(str.slice(8, 9));\n\n// 3、 查找指定字符是否在以上字符串中存在，如：i，c ，b等\nfunction searchStr(string, element) {\n  if (string.search(element) == -1) {\n    console.log(\"没找到\");\n  } else {\n    console.log(\"存在\");\n  }\n}\nsearchStr(str, \"i\");\nsearchStr(str, \"c\");\nsearchStr(str, \"b\");\n\n// 4、 替换指定的字符，如：g替换为22,ss替换为b等操作方法\nvar str2 = str;\ndo {\n  str2 = str2.replace(\"g\", 22);\n} while (str2.search(\"g\") != -1);\nconsole.log(str2);\n\nvar str3 = str;\ndo {\n  str3 = str3.replace(\"ss\", \"b\");\n} while (str3.search(\"ss\") != -1);\nconsole.log(str3);\n\n// 5、 截取指定开始位置到结束位置的字符串，如：取得1-5的字符串\nconsole.log(str.substring(0, 5));\n\n// 6、 找出以上字符串中出现次数最多的字符和出现的次数\nvar obj = {},\n  count = 0,\n  s = \"\";\nfor (var i = 0; i < str.split(\"\").length; i++) {\n  // 如果不存在,记录一次\n  if (!obj[str.charAt(i)]) {\n    obj[str.charAt(i)] = 1;\n  }\n  // 如果存在，则 +1\n  else {\n    obj[str.charAt(i)]++;\n  }\n}\n\nfor (var key in obj) {\n  if (obj[key] > count) {\n    count = obj[key];\n    s = key;\n  }\n}\nconsole.log(\"出现次数最多的字符 : \" + s + \" ; \" + \"次数 : \" + count);\n\n// 7、 遍历字符串，并将遍历出的字符两头添加符号“@”输出至当前的文档页面\nstr.split(\"\").forEach(function (value, index) {\n  document.write(\"@\" + value + \"@\");\n  document.write(\"<br />\");\n});\n```\n\n# The_End\n","slug":"js/js","published":1,"updated":"2021-06-20T08:14:32.969Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cksvxwnoa003fgubqea8e2wk2","content":"<h1 id=\"一-JavaScript-介绍\"><a href=\"#一-JavaScript-介绍\" class=\"headerlink\" title=\"一. JavaScript 介绍\"></a>一. JavaScript 介绍</h1><h2 id=\"1-、JavaScript-是什么\"><a href=\"#1-、JavaScript-是什么\" class=\"headerlink\" title=\"(1) 、JavaScript 是什么\"></a>(1) 、JavaScript 是什么</h2><h3 id=\"1-JavaScript-的历史\"><a href=\"#1-JavaScript-的历史\" class=\"headerlink\" title=\"1. JavaScript 的历史\"></a>1. JavaScript 的历史</h3><p>Netscape（网景）在最初将其脚本语言命名为 LiveScript，是布兰登.艾克发明的。后来 Netscape 在与 Sun 合作之后将其改名为 JavaScript。JavaScript 最初受 Java 启发而开始设计的，目的之一就是“看上去像 Java”，因此语法上有类似之处，一些名称和命名规范也借自 Java。JavaScript 与 Java 名称上的近似，是当时 Netscape 为了营销考虑与 Sun 微系统达成协议的结果。</p>\n<h3 id=\"2-JavaScript-是什么语言\"><a href=\"#2-JavaScript-是什么语言\" class=\"headerlink\" title=\"2. JavaScript 是什么语言\"></a>2. JavaScript 是什么语言</h3><p>可以说：Java 服务器端的编程语言，JavaScript 运行在客户端(浏览器)的编程语言<br>JavaScript(简称 JS)是一种运行在客户端的脚本语言，JavaScript 的解释器被称为 JavaScript 引擎，为浏览器的一部分，广泛用于客户端的脚本语言，最早是在 HTML（标准通用标记语言下的一个应用）网页上使用，用来给 HTML 网页增加动态功能。<br>也可以说，是一门脚本语言、是一门解释性语言、是一门动态类型的语言、是一门基于<br>对象的语言。（不是面向对象）、是一门弱性语言</p>\n<h3 id=\"3-JavaScript-的发展和意义\"><a href=\"#3-JavaScript-的发展和意义\" class=\"headerlink\" title=\"3. JavaScript 的发展和意义\"></a>3. JavaScript 的发展和意义</h3><p>最初的目的是为了处理表单的验证操作。JavaScript 发展到现在几乎无所不能，例如：做网页特效、与交互（表单的提交），比如：轮播图、tab 切换、返回顶部。。。<br>例如：网页特效、服务端开发(Node.js)、命令行工具(Node.js)、桌面程序(Electron)、App(Cordova)、控制硬件-物联网(Ruff)、游戏开发(cocos2d-js)</p>\n<h3 id=\"4-JavaScript-和-HTML、CSS-的区别\"><a href=\"#4-JavaScript-和-HTML、CSS-的区别\" class=\"headerlink\" title=\"4. JavaScript 和 HTML、CSS 的区别\"></a>4. JavaScript 和 HTML、CSS 的区别</h3><p><code>HTML</code> - 提供网页的结构，提供网页中的内容<br><code>CSS</code> - 用来美化网页<br><code>JavaScript</code> - 可以用来控制网页内容，给网页增加动态的效果</p>\n<h3 id=\"5-JavaScript-的组成\"><a href=\"#5-JavaScript-的组成\" class=\"headerlink\" title=\"5. JavaScript 的组成\"></a>5. JavaScript 的组成</h3><p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/js/jscontent.png\" alt=\"js\"></p>\n<h4 id=\"（1）ECMAScript-JavaScript-的核心\"><a href=\"#（1）ECMAScript-JavaScript-的核心\" class=\"headerlink\" title=\"（1）ECMAScript - JavaScript 的核心\"></a>（1）ECMAScript - JavaScript 的核心</h4><p>ECMA 欧洲计算机制造联合会。JavaScript 的核心，描述了语言的基本语法和数据类型，ECMAScript 是一套标准，定义了一种语言的标准与具体实现无关。</p>\n<h4 id=\"（2）BOM-浏览器对象模型\"><a href=\"#（2）BOM-浏览器对象模型\" class=\"headerlink\" title=\"（2）BOM - 浏览器对象模型\"></a>（2）BOM - 浏览器对象模型</h4><p>一套操作浏览器功能的 API。通过 BOM 可以操作浏览器窗口，比如：弹出框、控制浏览器跳转、获取分辨率等。Borswer object model</p>\n<h4 id=\"（3）DOM-文档对象模型\"><a href=\"#（3）DOM-文档对象模型\" class=\"headerlink\" title=\"（3）DOM - 文档对象模型\"></a>（3）DOM - 文档对象模型</h4><p>一套操作页面元素的 API。DOM 可以把 HTML 看做是文档树，通过 DOM 提供的 API 可以对树上的节点进行操作。Document object model</p>\n<h2 id=\"2-JavaScript-代码写法\"><a href=\"#2-JavaScript-代码写法\" class=\"headerlink\" title=\"(2) JavaScript 代码写法\"></a>(2) JavaScript 代码写法</h2><p>CSS 代码写法分为行内样式、嵌入样式（内部）、外部样式、控制台书写。那么，js 的代码可以分四个地方写：<br>1.在 html 的文件中,script 的标签中写 js 代码<br>2.js 代码可以在 html 的标签中写<br>3.在 js 文件中可以写 js 代码,但是需要在 html 页面中引入 script 的标签中的 src=”js 的路径”<br>4.还可以在控制台直接书写 js 代码</p>\n<h3 id=\"3-JavaScript-问题总结\"><a href=\"#3-JavaScript-问题总结\" class=\"headerlink\" title=\"(3) JavaScript 问题总结\"></a>(3) JavaScript 问题总结</h3><ol>\n<li>在一对 script 的标签中有错误的 js 代码,那么该错误的代码后面的 js 代码不会执行</li>\n<li>如果第一对的 script 标签中有错误,不会影响后面的 script 标签中的 js 代码执行</li>\n<li>script 的标签中可以写 type=”text/javascript”标准写法或者写 language=”JavaScript”都可以。但是，目前在我们的 html 页面中，type 和 language 都可以省略，原因：html 是遵循 h5 的标准。</li>\n<li>有可能会出现这种情况：script 标签中可能同时出现 type 和 language 的写法。</li>\n<li>script 标签在页面中可以出现多对。</li>\n<li>script 标签一般是放在 body 的标签的最后的，有的时候会在 head 标签中，目前讲课的时候都在 body 标签的后面(body 中的最后)。</li>\n<li>如果 script 标签是引入外部 js 文件的作用，那么这对标签中不要写任何的 js 代码，如果要写，重新写一对 script 标签，里面写代码。</li>\n</ol>\n<h3 id=\"4-注释\"><a href=\"#4-注释\" class=\"headerlink\" title=\"(4) 注释\"></a>(4) 注释</h3><p>单行注释</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// var a;</span></span><br></pre></td></tr></table></figure>\n\n<p>多行注释</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">var a = 1</span></span><br><span class=\"line\"><span class=\"comment\">var b = 1</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"二-JavaScript-变量\"><a href=\"#二-JavaScript-变量\" class=\"headerlink\" title=\"二. JavaScript 变量\"></a>二. JavaScript 变量</h1><h2 id=\"1-变量引入\"><a href=\"#1-变量引入\" class=\"headerlink\" title=\"(1) 变量引入\"></a>(1) 变量引入</h2><p><strong>什么是变量</strong><br>变量是计算机内存中存储数据的标识符，根据变量名称可以获取到内存中存储的数据<br><strong>为什么要使用变量</strong><br>使用变量可以方便的获取或者修改内存中的数据</p>\n<h2 id=\"2-变量声明和初始化\"><a href=\"#2-变量声明和初始化\" class=\"headerlink\" title=\"(2) 变量声明和初始化\"></a>(2) 变量声明和初始化</h2><p><code>var</code> 声明变量</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> age;</span><br></pre></td></tr></table></figure>\n\n<p>变量的赋值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> age;</span><br><span class=\"line\">age = <span class=\"number\">18</span>;</span><br></pre></td></tr></table></figure>\n\n<p>同时声明多个变量</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> age, name, sex;</span><br><span class=\"line\">age = <span class=\"number\">10</span>;</span><br><span class=\"line\">name = <span class=\"string\">&quot;zs&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>同时声明多个变量并赋值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> age = <span class=\"number\">10</span>,</span><br><span class=\"line\">  name = <span class=\"string\">&quot;zs&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>变量在内存中的存储</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> age = <span class=\"number\">18</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-变量的命名规则和规范\"><a href=\"#3-变量的命名规则和规范\" class=\"headerlink\" title=\"(3) 变量的命名规则和规范\"></a>(3) 变量的命名规则和规范</h2><p><strong>规则 - 必须遵守的，不遵守会报错</strong><br>1、由字母、数字、下划线、$符号组成，不能以数字开头<br>2、不能是关键字和保留字，例如：for、while。<br>3、区分大小写<br><strong>规范 - 建议遵守的，不遵守不会报错</strong><br>1、变量名必须有意义<br>2、遵守驼峰命名法。首字母小写，后面单词的首字母需要大写。</p>\n<h2 id=\"4-字面量\"><a href=\"#4-字面量\" class=\"headerlink\" title=\"(4) 字面量\"></a>(4) 字面量</h2><p>在源代码中一个固定值的表示法，也叫字面量。<br>数值字面量：8, 9, 10<br>字符串字面量：<code>&#39;程序员&#39;</code>, <code>&quot;大前端&quot;</code><br>布尔字面量：<code>true</code>，<code>false</code></p>\n<h1 id=\"三-JavaScript-数据类型\"><a href=\"#三-JavaScript-数据类型\" class=\"headerlink\" title=\"三. JavaScript 数据类型\"></a>三. JavaScript 数据类型</h1><h2 id=\"1-基本数据类型\"><a href=\"#1-基本数据类型\" class=\"headerlink\" title=\"(1) 基本数据类型\"></a>(1) 基本数据类型</h2><p><code>Number</code>、<code>String</code>、<code>Boolean</code>、<code>Undefined</code>、<code>Null</code></p>\n<h3 id=\"1-Number-类型\"><a href=\"#1-Number-类型\" class=\"headerlink\" title=\"1. Number 类型\"></a>1. Number 类型</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 十进制</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">9</span>;</span><br><span class=\"line\"><span class=\"comment\">//进行算数计算时，八进制和十六进制表示的数值最终都被转换成十进制数值。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 十六进制</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">0xA</span>;<span class=\"comment\">//数字序列范围：0~9 以及 A~F</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 八进制</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> num1 = <span class=\"number\">07</span>;  <span class=\"comment\">// 对应十进制的 7</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> num2 = <span class=\"number\">011</span>; <span class=\"comment\">// 对应十进制的 9</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> num3 = <span class=\"number\">021</span>; <span class=\"comment\">// 对应十进制的 17 //数字序列范围：0~7</span></span><br><span class=\"line\"><span class=\"comment\">// 如果字面值中的数值超出了范围，那么前导零将被忽略，后面的数值将被当作十进制数值解析</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 浮点数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> n = <span class=\"number\">5e-5</span>;   <span class=\"comment\">// 科学计数法 5 乘以 10 的-5 次方  </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 浮点数值的最高精度是 17 位小数，但在进行算术计算时其精确度远远不如整数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> result = <span class=\"number\">0.1</span> + <span class=\"number\">0.2</span>; <span class=\"comment\">// 结果不是 0.3，而是：0.30000000000000004</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">0.07</span> * <span class=\"number\">100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 注意：不要判断两个浮点数是否相等</span></span><br><span class=\"line\"><span class=\"comment\">// 就是说由于 0.1 转换成二进制时是无限循环的，所以在计算机中 0.1 只能存储成一个近似值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 最小值：</span></span><br><span class=\"line\"><span class=\"comment\">// 这个值为： 5e-324</span></span><br><span class=\"line\"><span class=\"built_in\">Number</span>.MIN_VALUE</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 最大值：</span></span><br><span class=\"line\"><span class=\"comment\">// 这个值为： 1.7976931348623157e+308</span></span><br><span class=\"line\"><span class=\"built_in\">Number</span>.MAX_VALUE</span><br><span class=\"line\"></span><br><span class=\"line\">无穷大：<span class=\"literal\">Infinity</span></span><br><span class=\"line\">无穷小：-<span class=\"literal\">Infinity</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"数值判断\"><a href=\"#数值判断\" class=\"headerlink\" title=\"数值判断\"></a>数值判断</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//可以通过 Number()方法判断</span></span><br><span class=\"line\"><span class=\"literal\">NaN</span>：not a number</span><br><span class=\"line\"><span class=\"literal\">NaN</span> 与任何值都不相等，包括他本身</span><br><span class=\"line\"><span class=\"built_in\">isNaN</span>(): is not a number</span><br><span class=\"line\"><span class=\"comment\">// 如果 x 是特殊的非数字值 NaN (或者能被转换为这样的值 )，返回的值就是 true。如果 x 是其他值,则返回 false</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、String-类型\"><a href=\"#2、String-类型\" class=\"headerlink\" title=\"2、String 类型\"></a>2、String 类型</h3><p>字符串可以使用单引号,也可以使用双引号，例如：<code>&#39;abc&#39;</code>、<code>&quot;abc&quot;</code><br>字符串字面量：<code>&#39;I am Happy&#39;</code>、<code>&quot;Hello World&quot;</code></p>\n<h4 id=\"转义符\"><a href=\"#转义符\" class=\"headerlink\" title=\"转义符\"></a>转义符</h4><p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/js/striingtranslate.png\" alt=\"striingtranslate\"></p>\n<h4 id=\"字符串长度\"><a href=\"#字符串长度\" class=\"headerlink\" title=\"字符串长度\"></a>字符串长度</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// length属性用来获取字符串的长度;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&quot;Hello World&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.length);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"字符串拼接\"><a href=\"#字符串拼接\" class=\"headerlink\" title=\"字符串拼接\"></a>字符串拼接</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 字符串拼接使用 + 连接;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">11</span> + <span class=\"number\">11</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;hello&quot;</span> + <span class=\"string\">&quot; world&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;100&quot;</span> + <span class=\"string\">&quot;100&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;11&quot;</span> + <span class=\"number\">11</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;male:&quot;</span> + <span class=\"literal\">true</span>);</span><br><span class=\"line\"><span class=\"comment\">// 两边只要有一个是字符串，那么+就是字符串拼接功能</span></span><br><span class=\"line\"><span class=\"comment\">// 两边如果都是数字，那么就是算术功能。</span></span><br></pre></td></tr></table></figure>\n\n<p>语言具有隐式转换 ( 隐式类型转换就是指，数据的类型在不用人工干预的情况下进行转换的行为，原因：<code>js</code> 是一门弱类型（动态类型）的语言，他在声明变量的时候不需要指定类型，对变量赋值也没有类型的检测，所以 <code>js</code> 是非常的灵活的，)</p>\n<h3 id=\"3-Boolean-类型\"><a href=\"#3-Boolean-类型\" class=\"headerlink\" title=\"3. Boolean 类型\"></a>3. Boolean 类型</h3><p><code>Boolean</code> 字面量： <code>true</code> 和 <code>false</code>，区分大小写<br>计算机内部存储：<code>true</code> 为 <code>1</code>，<code>false</code> 为 <code>0</code></p>\n<h3 id=\"4-Undefined-和-Null\"><a href=\"#4-Undefined-和-Null\" class=\"headerlink\" title=\"4. Undefined 和 Null\"></a>4. Undefined 和 Null</h3><p><code>undefined</code> 表示一个声明了没有赋值的变量，变量只声明的时候值默认是 <code>undefined</code><br><code>null</code> 表示一个空，变量的值如果想为 <code>null</code>，必须手动设置</p>\n<h2 id=\"2-复杂数据类型\"><a href=\"#2-复杂数据类型\" class=\"headerlink\" title=\"(2) 复杂数据类型\"></a>(2) 复杂数据类型</h2><p><code>Object</code></p>\n<h2 id=\"3-数据类型转换\"><a href=\"#3-数据类型转换\" class=\"headerlink\" title=\"(3) 数据类型转换\"></a>(3) 数据类型转换</h2><h3 id=\"typeof-关键字\"><a href=\"#typeof-关键字\" class=\"headerlink\" title=\"typeof 关键字\"></a><code>typeof</code> 关键字</h3><p>获取变量的类型</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> age = <span class=\"number\">18</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> age); <span class=\"comment\">// number</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> <span class=\"literal\">null</span>); <span class=\"comment\">// Object</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>一个 bug，<code>null</code> 为什么是引用类型（复杂类型）？</strong></p>\n<p>在 JS 的最初版本中使用的是 32 位系统，为了性能考虑使用低位存储变量的类型信息，000 开头的是对象，<code>null</code> 是全 0，所以将 <code>null</code> 误判为 <code>Object</code> 了，虽然现在的内部类型判断代码已经改变了，但 bug 永久的遗留下来了</p>\n<h3 id=\"toString-NaN\"><a href=\"#toString-NaN\" class=\"headerlink\" title=\"toString()\"></a>toString()</h3><p>转换成字符串类型</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(num.toString()); <span class=\"comment\">// String(&quot;5&quot;)</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"String\"><a href=\"#String\" class=\"headerlink\" title=\"String()\"></a>String()</h3><p><code>String()</code> 函数存在的意义：有些值没有 <code>toString()</code>, 这个时候可以使用 <code>String()</code>.比如：<code>undefined</code> 和 <code>null</code></p>\n<h3 id=\"拼接字符串方式\"><a href=\"#拼接字符串方式\" class=\"headerlink\" title=\"拼接字符串方式\"></a>拼接字符串方式</h3><p><code>num + &quot;&quot;</code>，当 + 两边一个操作符是字符串类型，一个操作符是其它类型的时候，会先把其它类型转换成字符串再进行字符串拼接，返回字符串</p>\n<h3 id=\"转换成数值类型\"><a href=\"#转换成数值类型\" class=\"headerlink\" title=\"转换成数值类型\"></a>转换成数值类型</h3><p><code>Number()</code> 可以把任意值转换成数值，如果要转换的字符串中有一个不是数值的字符，返回 <code>NaN</code><br>#### Number()转化规则<br>a. 如果字符串中只包含数字时，将其转换为十进制数值，忽略前导 0<br>b. 如果字符串中包含有效浮点格式，如“1.1”，将其转换为对应的浮点数字，忽略前导 0<br>c. 如果字符串中包含有效的十六进制格式，如“0xf”，将其转换为相同大小的十进制数值<br>d. 如果字符串为空，或者是空内容，将其转换为 0<br>e. 如果字符串中包含除上述格式之外的字符，则将其转换为 NaN</p>\n<h4 id=\"parseInt\"><a href=\"#parseInt\" class=\"headerlink\" title=\"parseInt()\"></a>parseInt()</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 返回 12，如果第一个字符是数字会解析知道遇到第一个小数点结束</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> num1 = <span class=\"built_in\">parseInt</span>(<span class=\"string\">&quot;12.3abc&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 返回 NaN，如果第一个字符不是数字或者符号就返回 NaN</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> num2 = <span class=\"built_in\">parseInt</span>(<span class=\"string\">&quot;abc123&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"parseFloat\"><a href=\"#parseFloat\" class=\"headerlink\" title=\"parseFloat()\"></a>parseFloat()</h4><p><code>parseFloat()</code> 把字符串转换成浮点数，<code>parseFloat()</code> 和 <code>parseInt()</code> 非常相似，不同之处在与<br><code>parseFloat()</code> 会解析第一个<code>.</code> 遇到第二个 <code>.</code> 或者非数字结束<br>如果解析的内容里只有整数，解析成整数</p>\n<h4 id=\"正负运算\"><a href=\"#正负运算\" class=\"headerlink\" title=\"正负运算\"></a>正负运算</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&quot;500&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(+str); <span class=\"comment\">// 取正</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(-str); <span class=\"comment\">// 取负</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"转换成布尔类型\"><a href=\"#转换成布尔类型\" class=\"headerlink\" title=\"转换成布尔类型\"></a>转换成布尔类型</h3><p><strong><code>Boolean()</code></strong><br><code>0</code>, <code>&#39;&#39;</code>, <code>null</code>, <code>undefined</code>, <code>NaN</code>, 会转换成 <code>false</code>,其它都会转换成 <code>true</code></p>\n<h1 id=\"四-JavaScript-运算\"><a href=\"#四-JavaScript-运算\" class=\"headerlink\" title=\"四. JavaScript 运算\"></a>四. JavaScript 运算</h1><h2 id=\"1-算术运算符\"><a href=\"#1-算术运算符\" class=\"headerlink\" title=\"(1) 算术运算符\"></a>(1) 算术运算符</h2><p><code>+ - * / %</code></p>\n<h2 id=\"2-一元运算符\"><a href=\"#2-一元运算符\" class=\"headerlink\" title=\"(2) 一元运算符\"></a>(2) 一元运算符</h2><p>一元运算符：只有一个操作数的运算符<br><code>5 + 6</code> 两个操作数的运算符是二元运算符<br><code>++</code> 自身加 1, <code>--</code> 自身减 1</p>\n<p><strong>前置 <code>++</code> 先将自身的值自增 1，再将自增后的值赋值给变量</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> num1 = <span class=\"number\">5</span>;</span><br><span class=\"line\">++num1;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(num1); <span class=\"comment\">// 6</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>后置 <code>++</code> 先将自身的值赋值给变量，然后再自增 1</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> num2 = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(num2++); <span class=\"comment\">// 5</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(num2); <span class=\"comment\">// 6</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>总结：</strong><br>前置 <code>++</code>： 先加后输出<br>后置 <code>++</code>： 先输出后加</p>\n<h2 id=\"3-逻辑运算符-布尔运算符\"><a href=\"#3-逻辑运算符-布尔运算符\" class=\"headerlink\" title=\"(3) 逻辑运算符 (布尔运算符)\"></a>(3) 逻辑运算符 (布尔运算符)</h2><p><code>&amp;&amp;</code> (与) 两个操作数同时为 <code>true</code>，结果为 <code>true</code>，否则都是 <code>false</code><br><code>||</code> (或) 两个操作数有一个为 <code>true</code>，结果为 <code>true</code>，否则为 <code>false</code><br><code>!</code> (非) 取反</p>\n<h2 id=\"4-关系运算符-比较运算符\"><a href=\"#4-关系运算符-比较运算符\" class=\"headerlink\" title=\"(4) 关系运算符(比较运算符)\"></a>(4) 关系运算符(比较运算符)</h2><p><code>&lt; &gt; &gt;= &lt;= == != === !==</code><br><code>==</code> 与 <code>===</code> 的区别：<code>==</code> 只进行值得比较，<code>===</code> 类型和值同时相等，则相等</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> result = <span class=\"string\">&quot;55&quot;</span> == <span class=\"number\">55</span>; <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> result = <span class=\"string\">&quot;55&quot;</span> === <span class=\"number\">55</span>; <span class=\"comment\">// false 值相等，类型不相等</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> result = <span class=\"number\">55</span> === <span class=\"number\">55</span>; <span class=\"comment\">// true 值和类型都相等</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-赋值运算符\"><a href=\"#5-赋值运算符\" class=\"headerlink\" title=\"(5) 赋值运算符\"></a>(5) 赋值运算符</h2><p><code>= += -= *= /= %=</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">num += <span class=\"number\">5</span>; <span class=\"comment\">//相当于 num = num + 5;</span></span><br><span class=\"line\">num *= <span class=\"number\">5</span>; <span class=\"comment\">//相当于 num = num * 5;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-运算符的优先级\"><a href=\"#6-运算符的优先级\" class=\"headerlink\" title=\"(6) 运算符的优先级\"></a>(6) 运算符的优先级</h2><p><strong>优先级从高到底如下：</strong></p>\n<p>括号&gt;点运算符&gt;一元运算符&gt; 算数运算符 &gt;关系运算符&gt;逻辑运算符 &gt;赋值运算符</p>\n<p><strong>注意：同级运算符先后顺序如下：</strong><br>一元运算符 <code>++</code> <code>--</code> <code>!</code><br>算数运算符 先 <code>*</code> <code>/</code> <code>%</code> 后 <code>+</code> <code>-</code><br>关系运算符 <code>&gt;</code> <code>&gt;=</code> <code>&lt;</code> <code>&lt;=</code> <code>==</code> <code>!=</code> <code>===</code> <code>!==</code><br>逻辑运算符 先 <code>&amp;&amp;</code> 后 <code>||</code></p>\n<h2 id=\"运算优先级练习\"><a href=\"#运算优先级练习\" class=\"headerlink\" title=\"运算优先级练习\"></a>运算优先级练习</h2><p><strong>优先级： 括号&gt;点运算符&gt;一元运算符&gt; 算数运算符 &gt;关系运算符&gt;逻辑运算符 &gt;赋值运算符</strong><br>(1)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">4</span> &gt;= <span class=\"number\">6</span> || (<span class=\"string\">&quot;人&quot;</span> != <span class=\"string\">&quot;阿凡达&quot;</span> &amp;&amp; !(<span class=\"number\">12</span> * <span class=\"number\">2</span> == <span class=\"number\">144</span>) &amp;&amp; <span class=\"literal\">true</span>);</span><br><span class=\"line\"><span class=\"comment\">// 第一轮 4 &gt;= 6 || (&quot;人&quot; != &quot;阿凡达&quot; &amp;&amp; !(false) &amp;&amp; true)</span></span><br><span class=\"line\"><span class=\"comment\">// 第二轮 4 &gt;= 6 || (&quot;人&quot; != &quot;阿凡达&quot; &amp;&amp; true &amp;&amp; true)</span></span><br><span class=\"line\"><span class=\"comment\">// 第三轮 false || (true &amp;&amp; true &amp;&amp; true)</span></span><br><span class=\"line\"><span class=\"comment\">// 第四轮 false || true</span></span><br><span class=\"line\"><span class=\"comment\">// 结果为 true</span></span><br></pre></td></tr></table></figure>\n\n<p>(2)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">100.2</span> &gt;= <span class=\"number\">52</span> || (<span class=\"string\">&quot;蛇&quot;</span> != <span class=\"string\">&quot;眼镜蛇&quot;</span> &amp;&amp; !(<span class=\"number\">25</span> * <span class=\"number\">4</span> == <span class=\"number\">120</span>)) || <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"comment\">// 结果为 true</span></span><br><span class=\"line\"><span class=\"comment\">// 第一轮 : 100.2 &gt;= 52 || (&quot;蛇&quot; != &quot;眼镜蛇&quot; &amp;&amp; !false) || true</span></span><br><span class=\"line\"><span class=\"comment\">// 第二轮 : 100.2 &gt;= 52 || (&quot;蛇&quot; != &quot;眼镜蛇&quot; &amp;&amp; true) || true</span></span><br><span class=\"line\"><span class=\"comment\">// 第三轮 : true || (true &amp;&amp; true) || true</span></span><br><span class=\"line\"><span class=\"comment\">// 第四轮 : true</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"五-流程控制\"><a href=\"#五-流程控制\" class=\"headerlink\" title=\"五. 流程控制\"></a>五. 流程控制</h1><p>程序的三种基本结构<br>顺序结构：从上到下执行的代码就是顺序结构(程序默认就是由上到下顺序执行的)<br>分支结构：根据不同的情况，执行对应代码<br>循环结构：重复做一件事情</p>\n<h2 id=\"1-分支结构\"><a href=\"#1-分支结构\" class=\"headerlink\" title=\"1. 分支结构\"></a>1. 分支结构</h2><h3 id=\"1-if-语句\"><a href=\"#1-if-语句\" class=\"headerlink\" title=\"(1) if 语句\"></a>(1) if 语句</h3><p><code>if</code> 语句  - 只有当指定条件为 true 时，使用该语句来执行代码<br><code>if...else</code> 语句  - 当条件为 true 时执行代码，当条件为 false 时执行其他代码<br><code>if...else if....else</code> 语句- 使用该语句来选择多个代码块之一来执行</p>\n<p><strong>if 案例判断一个人的年龄是否满 18 岁(是否成年)</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"comment\">// 判断</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"comment\">// (条件) &#123;执行语句&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> age = <span class=\"number\">19</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (age &gt;= <span class=\"number\">18</span>) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;成年了&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (age &lt; <span class=\"number\">18</span>) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;未成年&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 弹出输入框</span></span><br><span class=\"line\">prompt(<span class=\"string\">&quot;参数会展示在页面上&quot;</span>) <span class=\"comment\">// 点击确认会返回输入内容，点击取消会返回 null</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = prompt();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> age = prompt();</span><br><span class=\"line\"><span class=\"keyword\">if</span> (age &gt;= <span class=\"number\">18</span>) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;成年了&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (age &lt; <span class=\"number\">18</span>) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;未成年&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>if 案例百分制转换成等级制</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> grade = prompt(<span class=\"string\">&quot;请输入成绩&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (grade &gt; <span class=\"number\">0</span> &amp;&amp; grade &lt; <span class=\"number\">60</span>) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;不及格&quot;</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (grade &lt; <span class=\"number\">70</span>) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;及格&quot;</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (grade &lt; <span class=\"number\">80</span>) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;良&quot;</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (grade &lt; <span class=\"number\">90</span>) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;良好&quot;</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (grade &lt;= <span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;优秀&quot;</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;请输入0-100&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-三元运算符\"><a href=\"#2-三元运算符\" class=\"headerlink\" title=\"(2) 三元运算符\"></a>(2) 三元运算符</h3><p><code>表达式 1</code> ? <code>表达式 2</code> : <code>表达式 3</code><br>是对 <code>if ... else</code> 语句的一种简化写法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">age &gt;= <span class=\"number\">18</span> ? <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;成年&quot;</span>) : <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;未成年&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-switch-语句\"><a href=\"#3-switch-语句\" class=\"headerlink\" title=\"(3) switch 语句\"></a>(3) switch 语句</h3><p><code>switch</code> 语句<br><code>break</code> 可以省略，如果省略，代码会继续执行下一个 <code>case</code><br><code>default</code> 关键词来规定匹配不存在时做的事情。<br><code>switch case</code> 使用严格比较（===），值必须与要匹配的类型相同</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> day = prompt(<span class=\"string\">&quot;请输入数字&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// prompt 返回类型为字符串</span></span><br><span class=\"line\"><span class=\"keyword\">switch</span> (<span class=\"built_in\">Number</span>(day)) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;周一&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;周二&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;周三&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">4</span>:</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;周四&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">5</span>:</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;周五&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">6</span>:</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;周六&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">7</span>:</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;周日&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">default</span>:</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;666&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>百分制转换成等级制</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> grade = prompt();</span><br><span class=\"line\"><span class=\"keyword\">var</span> g = <span class=\"built_in\">parseInt</span>(grade / <span class=\"number\">10</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(g);</span><br><span class=\"line\"><span class=\"keyword\">switch</span> (g) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">10</span>:</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;NB&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">9</span>:</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;优秀&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">8</span>:</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;良好&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">7</span>:</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;良&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">6</span>:</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;及格&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">default</span>:</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;不及格&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>能用 <code>switch</code> 语句实现的就一定可以使用 <code>if</code> 实现，但是反之不一定，如果是区间范围就采用 <code>if</code> .如果是等值判断使用 <code>switch</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// If 语句会把后面的值隐式转换成布尔类型</span></span><br><span class=\"line\"><span class=\"comment\">// 转换为 true ： 非空字符串 非 0 数字 true 任何对象</span></span><br><span class=\"line\"><span class=\"comment\">// 转换成 false ： 空字符串, 0, false, null, undefined</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;OK&quot;</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;NO&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-循环结构\"><a href=\"#2-循环结构\" class=\"headerlink\" title=\"2. 循环结构\"></a>2. 循环结构</h2><p>在 <code>javascript</code> 中，循环语句有三种，<code>while</code>、<code>do..while</code>、<code>for</code> 循环。</p>\n<h3 id=\"1-while-语句\"><a href=\"#1-while-语句\" class=\"headerlink\" title=\"(1) while 语句\"></a>(1) while 语句</h3><p>while 循环会在指定条件为真时循环执行代码块</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//   死循环</span></span><br><span class=\"line\"><span class=\"comment\">// while (true) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   console.log();</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印 1-100</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (a &lt;= <span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\">  a++;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a++);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印 1-100 的和</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (b &lt;= <span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">  sum += b;</span><br><span class=\"line\">  b++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印 100 以内 7 的倍数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (c &lt;= <span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (c % <span class=\"number\">7</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(c);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  c++;</span><br><span class=\"line\">  <span class=\"comment\">// ++c;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 100 以内偶数及和</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> d = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> sum2 = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (d &lt;= <span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (d % <span class=\"number\">2</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(d + <span class=\"string\">&quot;是偶数&quot;</span>);</span><br><span class=\"line\">    sum2 += d;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  d++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum2);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 100 以内奇数及和</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> e = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> sum3 = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (e &lt;= <span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (e % <span class=\"number\">2</span> != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(e + <span class=\"string\">&quot;是奇数&quot;</span>);</span><br><span class=\"line\">    sum3 += e;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  e++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum3);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-do…while-语句\"><a href=\"#2-do…while-语句\" class=\"headerlink\" title=\"(2) do…while 语句\"></a>(2) do…while 语句</h3><p><code>do..while</code> 循环和 <code>while</code> 循环非常像，二者经常可以相互替代，但是 <code>do..while</code> 的特点是不管条件成不成立，都会执行一次。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// do ... while</span></span><br><span class=\"line\"><span class=\"comment\">// 打印 1-100 之间所有数的和</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> sum4 = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(f);</span><br><span class=\"line\">  sum4 += f;</span><br><span class=\"line\">  f++;</span><br><span class=\"line\">&#125; <span class=\"keyword\">while</span> (f &lt;= <span class=\"number\">100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印 100 以内 7的倍数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> g = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (g % <span class=\"number\">7</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(g);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  g++;</span><br><span class=\"line\">&#125; <span class=\"keyword\">while</span> (g &lt;= <span class=\"number\">100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印 100 以内所有偶数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (i % <span class=\"number\">2</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(i + <span class=\"string\">&quot;是偶数&quot;</span>);</span><br><span class=\"line\">    sum += i;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  i++;</span><br><span class=\"line\">&#125; <span class=\"keyword\">while</span> (i &lt;= <span class=\"number\">100</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-for-语句\"><a href=\"#3-for-语句\" class=\"headerlink\" title=\"(3) for 语句\"></a>(3) for 语句</h3><p><code>while</code> 和 <code>do...while</code> 一般用来解决无法确认次数的循环。<code>for</code> 循环一般在循环次数确定的时候比较方便</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// for 循环</span></span><br><span class=\"line\"><span class=\"comment\">// 1-100 和</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">1</span>; j &lt; <span class=\"number\">101</span>; j++) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(j);</span><br><span class=\"line\">  sum += j;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1-100 偶数和</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (i % <span class=\"number\">2</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    sum += i;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 双层 for 循环</span></span><br><span class=\"line\"><span class=\"comment\">// 正方形</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">10</span>; j++) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.write(<span class=\"string\">&quot;*&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.write(<span class=\"string\">&quot;&lt;br /&gt;&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 三角形</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; i; j++) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.write(<span class=\"string\">&quot;#&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.write(<span class=\"string\">&quot;&lt;br /&gt;&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-continue-和-break\"><a href=\"#4-continue-和-break\" class=\"headerlink\" title=\"(4) continue 和 break\"></a>(4) continue 和 break</h3><p><code>break</code> :立即跳出整个循环，即循环结束，开始执行循环后面的内容（直接跳到大括号）<br><code>continue</code> :立即跳出当前循环，继续下一次循环（跳到 <code>i++</code> 的地方）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// break</span></span><br><span class=\"line\"><span class=\"comment\">// continue</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (i % <span class=\"number\">10</span> == <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"comment\">// continue;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">sum += i;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-循环语句区别\"><a href=\"#5-循环语句区别\" class=\"headerlink\" title=\"(5) 循环语句区别\"></a>(5) 循环语句区别</h3><h4 id=\"1-循环结构的表达式不同\"><a href=\"#1-循环结构的表达式不同\" class=\"headerlink\" title=\"1. 循环结构的表达式不同\"></a>1. 循环结构的表达式不同</h4><p><code>do-while</code> 循环结构表达式为：<code>do</code>{循环体;}<br><code>for</code> 循环的结构表达式为：<code>for</code>（单次表达式;条件表达式;末尾循环体）{中间循环体；}。<br><code>while</code> 循环的结构表达式为：<code>while</code>（表达式）{循环体}</p>\n<h4 id=\"2-执行时判断方式不同\"><a href=\"#2-执行时判断方式不同\" class=\"headerlink\" title=\"2. 执行时判断方式不同\"></a>2. 执行时判断方式不同</h4><p><code>do-while</code> 循环将先运行一次，因为经过第一次 <code>do</code> 循环后，当检查条件表达式的值时，其值为   不成立时而会退出循环。保证了至少执行 <code>do</code>{ }内的语句一次。<br><code>for</code> 循环执行的中间循环体可以为一个语句，也可以为多个语句，当中间循环体只有一个语句时，其大括号{}可以省略，执行完中间循环体后接着执行末尾循环体。<br><code>while</code> 循环执行时当满足条件时进入循环，进入循环后，当条件不满足时，执行完循环体内全部语句后再跳出（而不是立即跳出循环）。</p>\n<h4 id=\"3-执行次数不同\"><a href=\"#3-执行次数不同\" class=\"headerlink\" title=\"3. 执行次数不同\"></a>3. 执行次数不同</h4><p><code>do-while</code> 循环是先执行后判断，执行次数至少为一次。<br><code>for</code> 循环是先判断后执行，可以不执行中间循环体。<br><code>while</code> 循环先判断后执行，可以不执行中间循环体。</p>\n<h4 id=\"4-执行末尾循环体的顺序不同\"><a href=\"#4-执行末尾循环体的顺序不同\" class=\"headerlink\" title=\"4. 执行末尾循环体的顺序不同\"></a>4. 执行末尾循环体的顺序不同</h4><p><code>do-while</code> 循环是在中间循环体中加入末尾循环体，并在执行中间循环体时执行末尾循环体。<br><code>for</code> 循环的中间循环体在条件判断语句里，执行末尾循环体后自动执行中间循环体。<br><code>while</code> 循环的末尾循环体也是在中间循环体里，并在中间循环体中执行。</p>\n<h2 id=\"作业\"><a href=\"#作业\" class=\"headerlink\" title=\"作业\"></a>作业</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 作业 1</span></span><br><span class=\"line\"><span class=\"comment\">// 求 1-100 所有数的乘积</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> sum1 = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> a = <span class=\"number\">1</span>; a &lt;= <span class=\"number\">100</span>; a++) &#123;</span><br><span class=\"line\">  sum1 *= a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum1);</span><br><span class=\"line\"><span class=\"comment\">// ---------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">// 作业 2</span></span><br><span class=\"line\"><span class=\"comment\">// 求 1-100 之间所有奇数的和</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> sum2 = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> b = <span class=\"number\">1</span>; b &lt;= <span class=\"number\">100</span>; b++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (b % <span class=\"number\">2</span> == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    sum2 += b;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum2);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ---------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">// 作业 3</span></span><br><span class=\"line\"><span class=\"comment\">// 计算 1-100 之间能被 3 整除的数的和</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> sum3 = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> c = <span class=\"number\">1</span>; c &lt;= <span class=\"number\">100</span>; c++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (c % <span class=\"number\">3</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    sum3 += c;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum3);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ---------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">// 作业 4</span></span><br><span class=\"line\"><span class=\"comment\">// 计算 1-100 之间不能被7整除的数的和</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> sum4 = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> d = <span class=\"number\">1</span>; d &lt;= <span class=\"number\">100</span>; d++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (d % <span class=\"number\">7</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    sum4 += d;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum4);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ---------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">// 作业 5</span></span><br><span class=\"line\"><span class=\"comment\">// 本金10000元存入银行，年利率是千分之三，每过1年，将本金和利息相加作为新的本金。计算5年后，获得的本金是多少？</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> money = <span class=\"number\">10000</span>,</span><br><span class=\"line\">  rate = <span class=\"number\">0.003</span>,</span><br><span class=\"line\">  years = <span class=\"number\">5</span>,</span><br><span class=\"line\">  sum5 = <span class=\"number\">0</span>;</span><br><span class=\"line\">sum5 += money;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> year = <span class=\"number\">1</span>; year &lt;= years; year++) &#123;</span><br><span class=\"line\">  sum5 *= <span class=\"number\">1</span> + rate;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum5);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ---------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">// 作业 6</span></span><br><span class=\"line\"><span class=\"comment\">// 有个人想知道，一年之内一对兔子能繁殖多少对？</span></span><br><span class=\"line\"><span class=\"comment\">// 于是就筑了一道围墙把一对兔子关在里面。已知一对兔子每个月可以生一对小兔子，而一对兔子从出生后第3个月起每月生一对小兔子。假如一年内没有发生死亡现象，那么，一对兔子一年内（12个月）能繁殖成多少对？</span></span><br><span class=\"line\"><span class=\"comment\">// (兔子的规律为数列，1，1，2，3，5，8，13，21)</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> sum6,</span><br><span class=\"line\">  r1 = <span class=\"number\">1</span>,</span><br><span class=\"line\">  r2 = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> month = <span class=\"number\">1</span>; month &lt;= <span class=\"number\">12</span>; month++) &#123;</span><br><span class=\"line\">  sum6 = r1 + r2;</span><br><span class=\"line\">  r1 = r2;</span><br><span class=\"line\">  r2 = sum6;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;第&quot;</span> + month + <span class=\"string\">&quot;个月 : &quot;</span> + sum6 + <span class=\"string\">&quot; 只&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// ---------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">// 作业 7</span></span><br><span class=\"line\"><span class=\"comment\">// 求 1-100 之间不能被 7 整除的整数的和（用continue）</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> sum7 = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> e = <span class=\"number\">1</span>; e &lt;= <span class=\"number\">100</span>; e++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (e % <span class=\"number\">7</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    sum7 += e;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum7);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ---------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">// 作业 8</span></span><br><span class=\"line\"><span class=\"comment\">// 求 200-300 之间所有的奇数的和（用continue）</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> sum8 = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">200</span>; i &lt;= <span class=\"number\">300</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (i % <span class=\"number\">2</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    sum8 += i;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum8);</span><br><span class=\"line\"><span class=\"comment\">// ---------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">// 作业 9</span></span><br><span class=\"line\"><span class=\"comment\">// 求 200-300之间第一个能被7整数的数（break）</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">200</span>; j &lt;= <span class=\"number\">300</span>; j++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (j % <span class=\"number\">7</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(j);</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-调试\"><a href=\"#2-调试\" class=\"headerlink\" title=\"2. 调试\"></a>2. 调试</h2><h3 id=\"1-alert\"><a href=\"#1-alert\" class=\"headerlink\" title=\"(1) alert()\"></a>(1) alert()</h3><h3 id=\"2-console-log\"><a href=\"#2-console-log\" class=\"headerlink\" title=\"(2) console.log()\"></a>(2) console.log()</h3><h3 id=\"3-debugger-关键字\"><a href=\"#3-debugger-关键字\" class=\"headerlink\" title=\"(3) debugger 关键字\"></a>(3) debugger 关键字</h3><p>debugger  关键字用于停止执行 JavaScript，并调用调试函数。这个关键字与在调试工具中设置断点的效果是一样的</p>\n<h3 id=\"4-断点调试\"><a href=\"#4-断点调试\" class=\"headerlink\" title=\"(4) 断点调试\"></a>(4) 断点调试</h3><h1 id=\"六-数组\"><a href=\"#六-数组\" class=\"headerlink\" title=\"六. 数组\"></a>六. 数组</h1><h2 id=\"1-为什么要学习数组\"><a href=\"#1-为什么要学习数组\" class=\"headerlink\" title=\"(1) 为什么要学习数组\"></a>(1) 为什么要学习数组</h2><p>之前学习的数据类型，只能存储一个值,比如：<code>Number</code>,<code>String</code></p>\n<h2 id=\"2-数组的定义\"><a href=\"#2-数组的定义\" class=\"headerlink\" title=\"(2) 数组的定义\"></a>(2) 数组的定义</h2><p>所谓数组，就是将多个元素（通常是同一类型）按一定顺序排列放到一个集合中，那么这个集合我们就称之为数组。<br>数组是一个有序的列表，可以在数组中存放任意的数据，并且数组的长度可以动态的调整</p>\n<h2 id=\"3-通过数组字面量创建数组\"><a href=\"#3-通过数组字面量创建数组\" class=\"headerlink\" title=\"(3) 通过数组字面量创建数组\"></a>(3) 通过数组字面量创建数组</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建一个空数组</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr1 = [];</span><br><span class=\"line\"><span class=\"comment\">// 创建一个包含3个数值的数组，多个数组项以逗号隔开</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"comment\">// 创建一个包含2个字符串的数组</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr3 = [<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;c&quot;</span>];</span><br><span class=\"line\"><span class=\"comment\">// 可以通过数组的length属性获取数组的长度</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr3.length);</span><br><span class=\"line\"><span class=\"comment\">// 可以设置length属性改变数组中元素的个数</span></span><br><span class=\"line\">arr3.length = <span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-获取数组元素\"><a href=\"#4-获取数组元素\" class=\"headerlink\" title=\"(4) 获取数组元素\"></a>(4) 获取数组元素</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取数组元素</span></span><br><span class=\"line\"><span class=\"comment\">// 按下标取值,从0开始</span></span><br><span class=\"line\"><span class=\"comment\">// 取值未定义的下标，值为 undefined</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2[<span class=\"number\">0</span>]);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2[<span class=\"number\">10</span>]); <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-遍历数组\"><a href=\"#5-遍历数组\" class=\"headerlink\" title=\"(5) 遍历数组\"></a>(5) 遍历数组</h2><p>遍历：遍及所有，对数组的每一个元素都访问一次就叫遍历。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(arr[i]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-数组中新增元素\"><a href=\"#6-数组中新增元素\" class=\"headerlink\" title=\"(6) 数组中新增元素\"></a>(6) 数组中新增元素</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 数组中新增元素</span></span><br><span class=\"line\"><span class=\"comment\">// 赋值</span></span><br><span class=\"line\">arr2[arr2.length] = <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// push()</span></span><br><span class=\"line\"><span class=\"comment\">// 在数组末尾添加，返回数组长度</span></span><br><span class=\"line\">arr2.push(<span class=\"number\">101</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// unshift()</span></span><br><span class=\"line\"><span class=\"comment\">// 在数组开始添加任意元素,返回数组长度</span></span><br><span class=\"line\">arr2.unshift(<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// shift()</span></span><br><span class=\"line\"><span class=\"comment\">// 从数组中删除第一个元元素，并返回该元素的值.此方法会更改数组的长度</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> r = arr2.shift();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(r);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数组练习案例\"><a href=\"#数组练习案例\" class=\"headerlink\" title=\"数组练习案例\"></a>数组练习案例</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 求数组所有数平均值</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr1.length; i++) &#123;</span><br><span class=\"line\">  sum += arr1[i];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum / arr1.length);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 数组最大值，最小值 (第一种)</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, , <span class=\"number\">32</span>, <span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> min = arr2[<span class=\"number\">0</span>], <span class=\"comment\">// 假设第一个元素是最小值</span></span><br><span class=\"line\">  max = arr2[<span class=\"number\">0</span>]; <span class=\"comment\">// 假设第一个元素是最大值</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr2.length; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (arr2[i] &gt; max) &#123;</span><br><span class=\"line\">    max = arr2[i];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (arr2[i] &lt; min) &#123;</span><br><span class=\"line\">    min = arr2[i];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(max);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(min);</span><br><span class=\"line\"><span class=\"comment\">// 数组最大值，最小值 (第二种)</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr2.length; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (arr2[i] &gt; arr2[i + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> temp = arr2[i + <span class=\"number\">1</span>];</span><br><span class=\"line\">    arr2[i + <span class=\"number\">1</span>] = arr2[i];</span><br><span class=\"line\">    arr2[i] = temp;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">max = arr2[arr2.length - <span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(max);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// indexOf()</span></span><br><span class=\"line\"><span class=\"comment\">// 返回在数组中可以找到一个给定元素的第一个索引，如果不存在，则返回 -1</span></span><br><span class=\"line\"><span class=\"comment\">// 数组去重</span></span><br><span class=\"line\"><span class=\"comment\">// 第一种</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr3 = [<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">22</span>, <span class=\"number\">22</span>, <span class=\"number\">55</span>, <span class=\"number\">55</span>, <span class=\"number\">9</span>, <span class=\"number\">9</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> newArr = [];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr3.length; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (arr3.indexOf(arr3[i]) == i) &#123;</span><br><span class=\"line\">    newArr.push(arr3[i]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArr);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第二种</span></span><br><span class=\"line\"><span class=\"comment\">// 遍历新数组,indexOf 返回判断 -1, 即不存在就 push()</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr3.length; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (newArr.indexOf(arr3[i]) == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    newArr.push(arr3[i]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArr);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"七-函数\"><a href=\"#七-函数\" class=\"headerlink\" title=\"七. 函数\"></a>七. 函数</h1><h2 id=\"1-为什么要有函数\"><a href=\"#1-为什么要有函数\" class=\"headerlink\" title=\"(1) 为什么要有函数\"></a>(1) 为什么要有函数</h2><p>如果要在多个地方求 1-100 之间所有数的和，应该怎么做？</p>\n<h2 id=\"2-什么是函数\"><a href=\"#2-什么是函数\" class=\"headerlink\" title=\"(2) 什么是函数\"></a>(2) 什么是函数</h2><p>把一段相对独立的具有特定功能的代码块封装起来，形成一个独立实体，就是函数。<br>起个名字（函数名），在后续开发中可以反复调用。<br>函数的作用就是封装一段代码，将来可以重复使用。</p>\n<h2 id=\"3-函数的定义\"><a href=\"#3-函数的定义\" class=\"headerlink\" title=\"(3) 函数的定义\"></a>(3) 函数的定义</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1.具名函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">name</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;name&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2.匿名函数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> fun = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;fun&quot;</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-函数的调用\"><a href=\"#4-函数的调用\" class=\"headerlink\" title=\"(4) 函数的调用\"></a>(4) 函数的调用</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 函数调用，加 (),即函数名();</span></span><br><span class=\"line\"><span class=\"comment\">// 特点：函数体只有在调用的时候才会执行，调用需要()进行调用。可以调用多次(重复使用)</span></span><br><span class=\"line\">name();</span><br><span class=\"line\">fun();</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 声明函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayHi</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;吃了没？&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 调用函数</span></span><br><span class=\"line\">sayHi();</span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"comment\">// 求1-100之间所有数的和</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getSum</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span>  i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">    sum += i;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(sum);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 调用</span></span><br><span class=\"line\">getSum();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-函数的参数\"><a href=\"#5-函数的参数\" class=\"headerlink\" title=\"(5) 函数的参数\"></a>(5) 函数的参数</h2><p><strong>形参和实参</strong></p>\n<ol>\n<li>形式参数：在声明一个函数的时候，为了函数的功能更加灵活，有些值是固定不了的，对于这些固定不了的值。我们可以给函数设置参数。这个参数没有具体的值，仅仅起到一个占位置的作用，我们通常称之为形式参数，也叫形参</li>\n<li>实际参数：如果函数在声明时，设置了形参，那么在函数调用的时候就需要传入对应的参数，我们把传入的参数叫做实际参数，也叫实参。</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">5</span>,</span><br><span class=\"line\">  y = <span class=\"number\">6</span>;</span><br><span class=\"line\">fn(x, y);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a + b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//x,y实参，有具体的值。函数执行的时候会把x,y复制一份给函数内部的a和b，函数内部的值是复制的新值，无法修改外部的x,y</span></span><br><span class=\"line\"><span class=\"comment\">// 不传值为 undefined;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-函数的返回值\"><a href=\"#6-函数的返回值\" class=\"headerlink\" title=\"(6) 函数的返回值\"></a>(6) 函数的返回值</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 函数通过return返回一个返回值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">re</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> e;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(re(<span class=\"number\">1</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回值总结</span></span><br><span class=\"line\"><span class=\"comment\">// 1.如果函数没有使用 return语句 ，那么函数有默认的返回值：undefined</span></span><br><span class=\"line\"><span class=\"comment\">// 2.如果函数使用 return语句，那么跟再 return 后面的值，就成了函数的返回值</span></span><br><span class=\"line\"><span class=\"comment\">// 3.如果函数使用 return语句，但是return后面没有任何值，那么函数的返回值也是：undefined</span></span><br><span class=\"line\"><span class=\"comment\">// 4.函数使用 return 语句后，这个函数会在执行完 return 语句之后停止并立即退出，也就是说 return 后面的所有其他代码都不会再执行</span></span><br><span class=\"line\"><span class=\"comment\">// 推荐的做法是要么让函数始终都返回一个值，要么永远都不要返回值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 求阶乘</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">jieCh</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> j = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">      j *= i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> j;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(jieCh(<span class=\"number\">4</span>));</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"函数案例\"><a href=\"#函数案例\" class=\"headerlink\" title=\"函数案例\"></a>函数案例</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 求 1-n 之间所有的和</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sumN</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">  sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">    sum += i;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(sum);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">sumN(<span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 圆的面积</span></span><br><span class=\"line\"><span class=\"comment\">// toFixed : 四舍五入,指定小数位数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">circle</span>(<span class=\"params\">r</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log((<span class=\"built_in\">Math</span>.PI * r * r).toFixed(<span class=\"number\">2</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">circle(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 求俩数中的最大值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getMaxNum</span>(<span class=\"params\">numA, numB</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (numA &gt; numB) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;最大值 : &quot;</span> + numA);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (numA &lt; numB) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;最大值 : &quot;</span> + numB);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(numA + <span class=\"string\">&quot;=&quot;</span> + numB);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">getMaxNum(<span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">getMaxNum(<span class=\"number\">2</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 求三个数的最大值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getMaxNumInThreeNum</span>(<span class=\"params\">numX, numY, numZ</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (numX == numY) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (numX == numZ) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;三者相等&quot;</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (numX &gt; numZ) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;最大值 ：&quot;</span> + numX);</span><br><span class=\"line\">      <span class=\"comment\">// 或者: console.log(&quot;最大值 ：&quot; + numY);</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;最大值 : &quot;</span> + numZ);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (numX &gt; numY) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (numX &gt; numZ) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;最大值 : &quot;</span> + numX);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;最大值 : &quot;</span> + numZ);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (numY &gt; numZ) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;最大值 ：&quot;</span> + numY);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;最大值 ：&quot;</span> + numZ);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">getMaxNumInThreeNum(<span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 判断一个数是否为素数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isPrime</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span> || n == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(n + <span class=\"string\">&quot; 是素数&quot;</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (n == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(n + <span class=\"string\">&quot; 不是素数&quot;</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">2</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (n % i != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(n + <span class=\"string\">&quot; 是素数&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(n + <span class=\"string\">&quot; 不是素数&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">isPrime(<span class=\"number\">4</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"作业-1\"><a href=\"#作业-1\" class=\"headerlink\" title=\"作业\"></a>作业</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 作业1：</span></span><br><span class=\"line\"><span class=\"comment\">// 数组去重，返回一个新数组</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">duplicateRemoval</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> newArr = [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newArr.indexOf(arr[i]) == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      newArr.push(arr[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> newArr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(duplicateRemoval(arr1));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 作业2：</span></span><br><span class=\"line\"><span class=\"comment\">// 将数组[10,1,35,61,89,36,55]冒泡排序，从小到大</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = [<span class=\"number\">10</span>, <span class=\"number\">1</span>, <span class=\"number\">35</span>, <span class=\"number\">61</span>, <span class=\"number\">89</span>, <span class=\"number\">36</span>, <span class=\"number\">55</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr2.length - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; arr2.length - <span class=\"number\">1</span> - i; j++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr2[j] &gt; arr2[j + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> temp = arr2[j];</span><br><span class=\"line\">      arr2[j] = arr2[j + <span class=\"number\">1</span>];</span><br><span class=\"line\">      arr2[j + <span class=\"number\">1</span>] = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 作业3：</span></span><br><span class=\"line\"><span class=\"comment\">// 求1!+2!+3!+....+n!</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sumJieCh</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> sumJie = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"comment\">// n 轮</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 每轮从 1 开始累乘</span></span><br><span class=\"line\">    jie = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">1</span>; j &lt;= i; j++) &#123;</span><br><span class=\"line\">      jie *= j;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sumJie += jie;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> sumJie;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sumJieCh(<span class=\"number\">1</span>), sumJieCh(<span class=\"number\">2</span>), sumJieCh(<span class=\"number\">3</span>), sumJieCh(<span class=\"number\">4</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 作业4：</span></span><br><span class=\"line\"><span class=\"comment\">// 输入一个年份，判断是否是闰年[闰年：能被4整数并且不能被100整数，或者能被400整数]</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isLeapYear</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> year = prompt(<span class=\"string\">&quot;请输入年份&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (year % <span class=\"number\">4</span> == <span class=\"number\">0</span> &amp;&amp; year % <span class=\"number\">100</span> != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(year + <span class=\"string\">&quot; 是闰年&quot;</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (year % <span class=\"number\">400</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(year + <span class=\"string\">&quot; 是世纪闰年&quot;</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(year + <span class=\"string\">&quot; 不是闰年&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">isLeapYear();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 作业5：</span></span><br><span class=\"line\"><span class=\"comment\">// 输入某年某月某日，判断这一天是这一年的第几天？（不用做）</span></span><br><span class=\"line\"><span class=\"comment\">// 😁</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 作业6：</span></span><br><span class=\"line\"><span class=\"comment\">// 利用函数的返回值，求1+2+3+4+………+n</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> result = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">    result += i;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum(<span class=\"number\">3</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 作业7：</span></span><br><span class=\"line\"><span class=\"comment\">// 斐波那契数列函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fibonacci</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> f = [<span class=\"number\">1</span>, <span class=\"number\">1</span>];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; n - <span class=\"number\">2</span>; i++) &#123;</span><br><span class=\"line\">    f.push(f[i] + f[i + <span class=\"number\">1</span>]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(fibonacci(<span class=\"number\">5</span>));</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 冒泡排序</span></span><br><span class=\"line\"><span class=\"comment\">// 从小到大</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">6</span>, <span class=\"number\">0</span>, <span class=\"number\">3</span>, <span class=\"number\">8</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">9</span>, <span class=\"number\">7</span>];</span><br><span class=\"line\"><span class=\"comment\">// 第一层 for 循环是比较多少轮</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr1.length - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 第二层 for 循环是每轮比较多少次,递减</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; arr1.length - <span class=\"number\">1</span> - i; j++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr1[j] &gt; arr1[j + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> temp = arr1[j + <span class=\"number\">1</span>];</span><br><span class=\"line\">      arr1[j + <span class=\"number\">1</span>] = arr1[j];</span><br><span class=\"line\">      arr1[j] = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr1);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 从大到小</span></span><br><span class=\"line\"><span class=\"comment\">// 俩数判断后交换顺序改一下就行</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = [<span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">6</span>, <span class=\"number\">0</span>, <span class=\"number\">3</span>, <span class=\"number\">8</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">9</span>, <span class=\"number\">7</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr2.length - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; arr2.length - <span class=\"number\">1</span> - i; j++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr2[j] &lt; arr2[j + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> temp = arr2[j + <span class=\"number\">1</span>];</span><br><span class=\"line\">      arr2[j + <span class=\"number\">1</span>] = arr2[j];</span><br><span class=\"line\">      arr2[j] = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2);</span><br></pre></td></tr></table></figure>\n\n<!-- -------------------------------- -->\n\n<h1 id=\"八-预解析\"><a href=\"#八-预解析\" class=\"headerlink\" title=\"八. 预解析\"></a>八. 预解析</h1><p><code>JavaScript</code> 引擎在对 <code>JavaScript</code> 代码进行解释执行之前，会对 <code>JavaScript</code> 代码进行预解析，在预解析阶段，会将以关键字 <code>var</code> 和 <code>function</code> 开头的语句块提前进行处理。<br>当变量和函数的声明处在作用域比较靠后的位置的时候，变量和函数的声明会被提升到作用域的开头。</p>\n<h2 id=\"1-函数提升\"><a href=\"#1-函数提升\" class=\"headerlink\" title=\"(1) 函数提升\"></a>(1) 函数提升</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func();</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  alert(<span class=\"string\">&quot;fun&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 由于 JavaScript 的预解析机制，上面的代码就等效于：</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  alert(<span class=\"string\">&quot;fun&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-变量提升\"><a href=\"#2-变量提升\" class=\"headerlink\" title=\"(2) 变量提升\"></a>(2) 变量提升</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 变量声明被提升,赋值并没有提升</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(e); <span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> e = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"comment\">// 相当于</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> e;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(e);</span><br><span class=\"line\">e = <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-函数同名\"><a href=\"#3-函数同名\" class=\"headerlink\" title=\"(3) 函数同名\"></a>(3) 函数同名</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func1();</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;func1&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func1();</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;func2&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 由于预解析机制，func1的声明会被提升，提升之后的代码为</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;func2&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func1();</span><br><span class=\"line\">func1();</span><br><span class=\"line\"><span class=\"comment\">// 同名的函数，后面的会覆盖前面的，所以两次输出结果都是 func2</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-变量和函数同名\"><a href=\"#4-变量和函数同名\" class=\"headerlink\" title=\"(4) 变量和函数同名\"></a>(4) 变量和函数同名</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(f);</span><br><span class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">// 当出现变量声明和函数同名的时候，只会对函数声明进行提升，变量会被忽略。所以上面的代码的输出结果为</span></span><br><span class=\"line\"><span class=\"comment\">// ƒ f() &#123;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">num</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  alert(num);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">num(); <span class=\"comment\">// num is not a function</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 当变量和函数同名时,只会对函数声明进行提升，变量会被忽略。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 同名的变量和函数，变量会覆盖函数，导致函数无法调用</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 通俗来讲就是只要出现同名的函数和变量，优先对函数进行提升。但没用，变量会覆盖函数，最终只有变量声明语句生效</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 按照常规的书写顺序，同名的函数与变量，变量会覆盖函数</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"练习\"><a href=\"#练习\" class=\"headerlink\" title=\"练习\"></a>练习</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 先提升</span></span><br><span class=\"line\"><span class=\"comment\">// 再看顺序</span></span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">3</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(b);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"comment\">// 变量提升后的顺序:</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> b;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\">  a = <span class=\"number\">3</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(b);</span><br><span class=\"line\">  b = <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"comment\">// 所以结果为</span></span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// ƒ b() &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(b);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> b = <span class=\"number\">234</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(b);</span><br><span class=\"line\">  a = <span class=\"number\">123</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a;</span><br><span class=\"line\">  b = <span class=\"number\">234</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> b = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test();</span><br><span class=\"line\"><span class=\"comment\">// 变量提升后的顺序:</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> b;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(b);</span><br><span class=\"line\">  b = <span class=\"number\">234</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(b);</span><br><span class=\"line\">  a = <span class=\"number\">123</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\">  b = <span class=\"number\">234</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> b = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test();</span><br><span class=\"line\"><span class=\"comment\">// 所以结果为:</span></span><br><span class=\"line\"><span class=\"comment\">// ƒ a() &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"comment\">// 234</span></span><br><span class=\"line\"><span class=\"comment\">// 123</span></span><br><span class=\"line\"><span class=\"comment\">// 123</span></span><br><span class=\"line\"><span class=\"comment\">// ƒ () &#123;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-预解析是分作用域的\"><a href=\"#5-预解析是分作用域的\" class=\"headerlink\" title=\"(5) 预解析是分作用域的\"></a>(5) 预解析是分作用域的</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">m</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> m = <span class=\"string\">&quot;m&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(m); <span class=\"comment\">// m 未定义</span></span><br><span class=\"line\"><span class=\"comment\">// 解析后的代码:</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">m</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> m;</span><br><span class=\"line\">  m = <span class=\"string\">&quot;m&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(m); <span class=\"comment\">// m 未定义</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-函数表达式不会提升\"><a href=\"#6-函数表达式不会提升\" class=\"headerlink\" title=\"(6) 函数表达式不会提升\"></a>(6) 函数表达式不会提升</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fun1();</span><br><span class=\"line\"><span class=\"keyword\">var</span> fun1 = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;666&quot;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 结果是 : func1 is not a function，原因就是函数表达式，并不会被提升。只是简单地当做变量声明进行了处理，如下</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> fun1;</span><br><span class=\"line\">fun1();</span><br><span class=\"line\">fun1 = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;666&quot;</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"7-作用域\"><a href=\"#7-作用域\" class=\"headerlink\" title=\"(7)作用域\"></a>(7)作用域</h2><h3 id=\"1-全局作用域\"><a href=\"#1-全局作用域\" class=\"headerlink\" title=\"(1) 全局作用域\"></a>(1) 全局作用域</h3><p>直接编写在 <code>script</code> 标签之中的 <code>JS</code> 代码，都是全局作用域；或者是一个单独的 <code>JS</code> 文件中的。<br>全局作用域在页面打开时创建，页面关闭时销毁；<br>在全局作用域中有一个全局对象 <code>window</code>（代表的是一个浏览器的窗口，由浏览器创建），可以直接使用。<br>所有创建的变量都会作为 <code>window</code> 对象的属性保存。</p>\n<h3 id=\"2-局部作用域-函数作用域\"><a href=\"#2-局部作用域-函数作用域\" class=\"headerlink\" title=\"(2) 局部作用域 ( 函数作用域 )\"></a>(2) 局部作用域 ( 函数作用域 )</h3><p>在函数内部就是局部作用域，这个代码的名字只在函数的内部起作用</p>\n<h3 id=\"3-隐式全局变量\"><a href=\"#3-隐式全局变量\" class=\"headerlink\" title=\"(3) 隐式全局变量\"></a>(3) 隐式全局变量</h3><p>声明变量使用<code>var</code>, 如果不使用 <code>var</code> 声明的变量就是全局变量( 禁用 )<br>因为在任何代码结构中都可以使用该语法. 那么再代码维护的时候会有问题. 所以除非特殊原因不要这么用.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fun2();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">  b = <span class=\"number\">1</span>;</span><br><span class=\"line\">  c = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(b);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(c);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fun2 执行后获得隐式全局变量 <span class=\"string\">`b`</span> 和 <span class=\"string\">`c`</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"九-对象\"><a href=\"#九-对象\" class=\"headerlink\" title=\"九. 对象\"></a>九. 对象</h1><h2 id=\"1-为什么要有对象\"><a href=\"#1-为什么要有对象\" class=\"headerlink\" title=\"(1) 为什么要有对象\"></a>(1) 为什么要有对象</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">printPerson</span>(<span class=\"params\">name, age, sex....</span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">// 函数的参数如果特别多的话，可以使用对象简化</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">printPerson</span>(<span class=\"params\">person</span>) </span>&#123;  </span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(person.name);  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-什么是对象\"><a href=\"#2-什么是对象\" class=\"headerlink\" title=\"(2) 什么是对象\"></a>(2) 什么是对象</h2><p>现实生活中：万物皆对象，对象是一个具体的事物，一个具体的事物就会有行为和特征。<br>举例： 一辆车、一部手机、一台电脑、一张桌子<br>车是一类事物，门口停的那辆车才是对象。特征：红色、四个轮子，行为：驾驶、刹车</p>\n<h2 id=\"3-JavaScript-中的对象\"><a href=\"#3-JavaScript-中的对象\" class=\"headerlink\" title=\"(3) JavaScript 中的对象\"></a>(3) JavaScript 中的对象</h2><p>JavaScript 的对象是无序属性的集合。<br>其属性可以包含基本值、对象或函数。对象就是一组没有顺序的值。我们可以把 JavaScript 中的对象想象成键值对，其中值可以是数据和函数。<br><code>Key</code> = <code>value</code><br>对象的行为和特征<br>特征—属性<br>行为—方法<br>Tips：<br>事物的特征在对象中用属性来表示。<br>事物的行为在对象中用方法来表示。</p>\n<h2 id=\"4-对象创建方式\"><a href=\"#4-对象创建方式\" class=\"headerlink\" title=\"(4) 对象创建方式\"></a>(4) 对象创建方式</h2><h3 id=\"1-对象字面量\"><a href=\"#1-对象字面量\" class=\"headerlink\" title=\"1. 对象字面量\"></a>1. 对象字面量</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;zs&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">18</span>,</span><br><span class=\"line\">  <span class=\"attr\">sex</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  fun=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;fun&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-new-Object-创建对象\"><a href=\"#2-new-Object-创建对象\" class=\"headerlink\" title=\"2. new Object()创建对象\"></a>2. new Object()创建对象</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\">person.name = <span class=\"string\">&quot;lisi&quot;</span>;</span><br><span class=\"line\">person.age = <span class=\"number\">35</span>;</span><br><span class=\"line\">person.job = <span class=\"string\">&quot;codeman&quot;</span>;</span><br><span class=\"line\">person.say = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;Hello&quot;</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-工厂函数创建对象\"><a href=\"#3-工厂函数创建对象\" class=\"headerlink\" title=\"3. 工厂函数创建对象\"></a>3. 工厂函数创建对象</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createPerson</span>(<span class=\"params\">name, age, job</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\">  person.name = name;</span><br><span class=\"line\">  person.age = age;</span><br><span class=\"line\">  person.job = job;</span><br><span class=\"line\">  person.say = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;Hello&quot;</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> person;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> p1 = createPerson(<span class=\"string\">&quot;张三&quot;</span>, <span class=\"number\">22</span>, <span class=\"string\">&quot;actor&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-自定义构造函数\"><a href=\"#4-自定义构造函数\" class=\"headerlink\" title=\"4. 自定义构造函数\"></a>4. 自定义构造函数</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age, job</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.job = job;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.say = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;Hello&quot;</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">&quot;张三&quot;</span>, <span class=\"number\">22</span>, <span class=\"string\">&quot;actor&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-属性和方法\"><a href=\"#5-属性和方法\" class=\"headerlink\" title=\"(5) 属性和方法\"></a>(5) 属性和方法</h2><ol>\n<li><p>如果一个变量属于一个对象所有，那么该变量就可以称之为该对象的一个属性</p>\n</li>\n<li><p>如果一个函数属于一个对象所有，那么该函数就可以称之为该对象的一个方法</p>\n</li>\n</ol>\n<h2 id=\"6-new-关键字\"><a href=\"#6-new-关键字\" class=\"headerlink\" title=\"(6) new 关键字\"></a>(6) new 关键字</h2><p>构造函数，是一种特殊的函数。主要用来在创建对象时初始化对象，即为对象成员变量赋初始值，总与 new 运算符一起使用在创建对象的语句中。</p>\n<ol>\n<li><p>构造函数用于创建一类对象，首字母要大写。</p>\n</li>\n<li><p>构造函数要和 <code>new</code> 一起使用才有意义。</p>\n</li>\n</ol>\n<p><strong><code>new</code> 在执行时会做四件事情：</strong></p>\n<p>1、new 会在内存中创建一个新的空对象<br>2、new 会让 this 指向这个新的对象<br>3、new 会返回这个新对象</p>\n<h2 id=\"7-this\"><a href=\"#7-this\" class=\"headerlink\" title=\"(7) this\"></a>(7) this</h2><p>函数内部的 <code>this</code> 几个特点：</p>\n<ol>\n<li>函数在定义的时候 <code>this</code> 是不确定的，只有在调用的时候才可以确定</li>\n<li>一般函数直接执行，内部 <code>this</code> 指向全局 window</li>\n<li>函数作为一个对象的方法，被该对象所调用，那么 <code>this</code> 指向的是该对象</li>\n<li>构造函数中的 <code>this</code> 其实是一个隐式对象，类似一个初始化的模型，所有方法和属性都挂载到了这个隐式对象身上，后续通过 new 关键字来调用，从而实现实例化</li>\n</ol>\n<h2 id=\"8-对象的使用\"><a href=\"#8-对象的使用\" class=\"headerlink\" title=\"(8) 对象的使用\"></a>(8) 对象的使用</h2><p>遍历对象的属性<br>通过 for..in 语法可以遍历一个对象<br>删除对象的属性</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 通过 for ... in 遍历对象的属性</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;man&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">20</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> obj1) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(key);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 遍历对象的属性值</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> obj1) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(obj1[key]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 删除对象的属性</span></span><br><span class=\"line\"><span class=\"keyword\">delete</span> obj1.name;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"十-JavaScript-错误\"><a href=\"#十-JavaScript-错误\" class=\"headerlink\" title=\"十. JavaScript  错误\"></a>十. JavaScript  错误</h1><h2 id=\"1-JavaScript-try-和-catch\"><a href=\"#1-JavaScript-try-和-catch\" class=\"headerlink\" title=\"(1) JavaScript try 和 catch\"></a>(1) JavaScript <code>try</code> 和 <code>catch</code></h2><p><code>try</code>  语句允许我们定义在执行时进行错误测试的代码块。<br><code>catch</code>  语句允许我们定义当 <code>try</code> 代码块发生错误时，所执行的代码块。<br><code>JavaScript</code> 语句  <code>try</code>  和  <code>catch</code>  是成对出现的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">t</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    alertt(<span class=\"string\">&quot;666&quot;</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(error.message); <span class=\"comment\">// alertt is not defined</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">t();</span><br><span class=\"line\"><span class=\"comment\">// catch 块会捕捉到 try 块中的错误，会执行 catch 里的部分</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-finally-语句\"><a href=\"#2-finally-语句\" class=\"headerlink\" title=\"(2) finally 语句\"></a>(2) finally 语句</h2><p><code>finally</code> 语句不论之前的 <code>try</code> 和 <code>catch</code> 中是否产生异常都会执行该代码块</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">t</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    alertt(<span class=\"string\">&quot;666&quot;</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(error.message); <span class=\"comment\">// alertt is not defined</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;finally&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">t();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-Throw-语句\"><a href=\"#3-Throw-语句\" class=\"headerlink\" title=\"(3) Throw 语句\"></a>(3) Throw 语句</h2><p><code>throw</code> 语句允许我们创建自定义错误。<br>正确的技术术语是：创建或抛出异常（exception）。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 检测输入变量的值。如果值是错误的，会抛出一个异常（错误）。catch 会捕捉到这个错误，并显示一段自定义的错误消息</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myFunction</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> x = prompt();</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x == <span class=\"string\">&quot;&quot;</span>) <span class=\"keyword\">throw</span> <span class=\"string\">&quot;值为空&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">isNaN</span>(x)) <span class=\"keyword\">throw</span> <span class=\"string\">&quot;请输入数字&quot;</span>;</span><br><span class=\"line\">    x = <span class=\"built_in\">Number</span>(x);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">5</span>) <span class=\"keyword\">throw</span> <span class=\"string\">&quot;太小&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">10</span>) <span class=\"keyword\">throw</span> <span class=\"string\">&quot;太大&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;good&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">myFunction();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"作业-2\"><a href=\"#作业-2\" class=\"headerlink\" title=\"作业\"></a>作业</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 作业1;</span></span><br><span class=\"line\"><span class=\"comment\">// 创建一个电脑对象,有颜色,有重量,有品牌,有型号,可以看电影,可以听音乐,可以打游戏,可以敲代码;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> computer = &#123;</span><br><span class=\"line\">  <span class=\"attr\">color</span>: <span class=\"string\">&quot;#494f5c&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">weight</span>: <span class=\"string\">&quot;120&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">brand</span>: <span class=\"string\">&quot;Brand&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">model</span>: <span class=\"string\">&quot;model&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">seeMovies</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;看电影&quot;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">listenMusics</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;听音乐&quot;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">gaming</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;打游戏&quot;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">coding</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;coding&quot;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(computer);</span><br><span class=\"line\">computer.gaming();</span><br><span class=\"line\">computer.coding();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 作业2;</span></span><br><span class=\"line\"><span class=\"comment\">// 创建一个按钮对象, 宽, 高, 背景颜色, 点击行为, 按钮有鼠标进入的行为;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> button = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\">button.width = <span class=\"string\">&quot;120px&quot;</span>;</span><br><span class=\"line\">button.height = <span class=\"string\">&quot;40px&quot;</span>;</span><br><span class=\"line\">button.backgroundColor = <span class=\"string\">&quot;#494f5c&quot;</span>;</span><br><span class=\"line\">button.click = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;click&quot;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">button.hover = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;hover&quot;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(button);</span><br><span class=\"line\">button.click();</span><br><span class=\"line\">button.hover();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 作业3;</span></span><br><span class=\"line\"><span class=\"comment\">// 创建一个车的对象, 有重量, 颜色, 牌子, 可以载人, 拉货;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createCar</span>(<span class=\"params\">weight, color, brand, canBeManned, pickUpTheGoods</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> car = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\">  car.weight = weight;</span><br><span class=\"line\">  car.color = color;</span><br><span class=\"line\">  car.brand = brand;</span><br><span class=\"line\">  car.canBeManned = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;可以载人&quot;</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  car.pickUpTheGoods = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;可拉货&quot;</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> car;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> car1 = createCar(<span class=\"string\">&quot;2000kg&quot;</span>, <span class=\"string\">&quot;#494f5c&quot;</span>, <span class=\"string\">&quot;brand&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(car1);</span><br><span class=\"line\">car1.canBeManned();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 作业4;</span></span><br><span class=\"line\"><span class=\"comment\">// 利用对象属性不能重复的特性给数组去重;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">9</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">duplicateRemoval</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> obj = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> newArr = [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!obj[arr[i]]) &#123;</span><br><span class=\"line\">      newArr.push(arr[i]);</span><br><span class=\"line\">      obj[arr[i]] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> newArr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(duplicateRemoval(arr));</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"十一-js-内置对象\"><a href=\"#十一-js-内置对象\" class=\"headerlink\" title=\"十一. js 内置对象\"></a>十一. js 内置对象</h1><h2 id=\"1-内置对象\"><a href=\"#1-内置对象\" class=\"headerlink\" title=\"1.内置对象\"></a>1.内置对象</h2><p><code>JavaScript</code> 中的对象分为 4 种：内置对象、浏览器对象、自定义对象、DOM 对象。<br><code>JavaScript</code> 提供多个内置对象：Math/Array/Number/String/Boolean …<br>对象只是带有属性和方法的特殊数据类型。学习一个内置对象的使用，只要学会其常用的成员的使用(通过查文档学习)。内置对象的方法很多，我们只需要知道内置对象提供的常用方法，使用的时候查询文档。</p>\n<h2 id=\"2-Math-对象\"><a href=\"#2-Math-对象\" class=\"headerlink\" title=\"2. Math 对象\"></a>2. Math 对象</h2><p><code>Math</code> 对象不是构造函数，它具有数学常数和函数的属性和方法，都以静态成员的方式提供。<br>跟数学相关的运算来找 <code>Math</code> 中的成员(求绝对值，取整)。</p>\n<h3 id=\"1-常用属性\"><a href=\"#1-常用属性\" class=\"headerlink\" title=\"(1) 常用属性\"></a>(1) 常用属性</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Math</span>.PI; <span class=\"comment\">// 圆周率</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-常用方法\"><a href=\"#2-常用方法\" class=\"headerlink\" title=\"(2) 常用方法\"></a>(2) 常用方法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Math</span>.random(); <span class=\"comment\">// 生成随机数</span></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.floor(); <span class=\"comment\">// 向下取整</span></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.ceil(); <span class=\"comment\">// 向上取整</span></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.round(); <span class=\"comment\">// 取整，四舍五入</span></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.abs(); <span class=\"comment\">// 绝对值</span></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.max(); <span class=\"comment\">// 最大值</span></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.min(); <span class=\"comment\">// 最小值</span></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.sin(); <span class=\"comment\">// 正弦</span></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.cos(); <span class=\"comment\">// 余弦</span></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.pow(); <span class=\"comment\">// 求指数次幂</span></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.sqrt(); <span class=\"comment\">// 求平方根</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-Date-对象\"><a href=\"#3-Date-对象\" class=\"headerlink\" title=\"3. Date 对象\"></a>3. Date 对象</h2><p>创建 <code>Date</code> 实例用来处理日期和时间。<code>Date</code> 对象基于 1970 年 1 月 1 日（世界标准时间）起的毫秒数。</p>\n<h3 id=\"1-创建日期对象\"><a href=\"#1-创建日期对象\" class=\"headerlink\" title=\"(1) 创建日期对象\"></a>(1) 创建日期对象</h3><p><code>Date()</code> 是构造函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(); <span class=\"comment\">// 获取到的是 1970 年 1 月 1 日至今的毫秒数</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-日期原始值\"><a href=\"#2-日期原始值\" class=\"headerlink\" title=\"(2) 日期原始值\"></a>(2) 日期原始值</h3><p>getTime()：获取 1970 年 1 月 1 日至今的毫秒数<br>valueOf();原始值，获取 1970 年 1 月 1 日至今的毫秒数</p>\n<h3 id=\"3-获取日期指定部分\"><a href=\"#3-获取日期指定部分\" class=\"headerlink\" title=\"(3) 获取日期指定部分\"></a>(3) 获取日期指定部分</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getMilliseconds();</span><br><span class=\"line\">getSeconds(); <span class=\"comment\">// 返回 0-59</span></span><br><span class=\"line\">getMinutes(); <span class=\"comment\">// 返回 0-59</span></span><br><span class=\"line\">getHours(); <span class=\"comment\">// 返回 0-23</span></span><br><span class=\"line\">getDay(); <span class=\"comment\">// 返回星期几 0 周日   6 周 6</span></span><br><span class=\"line\">getDate(); <span class=\"comment\">// 返回当前月的第几天</span></span><br><span class=\"line\">getMonth(); <span class=\"comment\">// 返回月份，从 0 开始</span></span><br><span class=\"line\">getFullYear(); <span class=\"comment\">//返回 4 位的年份 如 2016</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-Array-对象\"><a href=\"#4-Array-对象\" class=\"headerlink\" title=\"4. Array 对象\"></a>4. Array 对象</h2><h3 id=\"1-创建数组对象的两种方式\"><a href=\"#1-创建数组对象的两种方式\" class=\"headerlink\" title=\"(1) 创建数组对象的两种方式\"></a>(1) 创建数组对象的两种方式</h3><p>1、字面量方式<br>2、new Array()</p>\n<h3 id=\"2-检测一个对象是否是数组\"><a href=\"#2-检测一个对象是否是数组\" class=\"headerlink\" title=\"(2) 检测一个对象是否是数组\"></a>(2) 检测一个对象是否是数组</h3><p><code>instanceof</code> 如果返回 <code>true</code> 就是数组，<code>false</code> 是非数组 ( 这玩意儿很少用 )<br><code>Array.isArray()</code> 如果返回 <code>true</code> 就是数组，<code>false</code> 是非数组 ( 常用 )<br><code>valueOf()</code> 返回数组对象本身</p>\n<h3 id=\"3-栈操作-先进后出\"><a href=\"#3-栈操作-先进后出\" class=\"headerlink\" title=\"(3) 栈操作 (先进后出)\"></a>(3) 栈操作 (先进后出)</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">push(); <span class=\"comment\">// 添加元素</span></span><br><span class=\"line\">pop(); <span class=\"comment\">// 删除元素</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/js/stack.png\" alt=\"stack\"></p>\n<h3 id=\"4-队列操作-先进先出\"><a href=\"#4-队列操作-先进先出\" class=\"headerlink\" title=\"(4) 队列操作 (先进先出)\"></a>(4) 队列操作 (先进先出)</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shift(); <span class=\"comment\">// 删除元素</span></span><br><span class=\"line\">unshift(); <span class=\"comment\">// 添加元素</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-排序方法\"><a href=\"#5-排序方法\" class=\"headerlink\" title=\"(5) 排序方法\"></a>(5) 排序方法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reverse(); <span class=\"comment\">// 翻转数组</span></span><br><span class=\"line\">sort(); <span class=\"comment\">// 只看第一位数来排序</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//   var arr = [1, 2, 3, 4, 9, 8, 7, 6, 5];</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"number\">100</span>, <span class=\"number\">200</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">9</span>, <span class=\"number\">8</span>, <span class=\"number\">7</span>, <span class=\"number\">6</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr1.sort()); <span class=\"comment\">// 然而排序后的结果不是咱想要的</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>可以这样</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr1.sort(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a - b; <span class=\"comment\">// 从小到大排序</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> b - a; <span class=\"comment\">// 从大到小排序</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-操作方法\"><a href=\"#6-操作方法\" class=\"headerlink\" title=\"(6) 操作方法\"></a>(6) 操作方法</h3><h4 id=\"concat-把参数拼接到当前数组、-或者用于连接两个或多个数组\"><a href=\"#concat-把参数拼接到当前数组、-或者用于连接两个或多个数组\" class=\"headerlink\" title=\"concat() 把参数拼接到当前数组、  或者用于连接两个或多个数组\"></a><code>concat()</code> 把参数拼接到当前数组、  或者用于连接两个或多个数组</h4><h4 id=\"slice-start-end\"><a href=\"#slice-start-end\" class=\"headerlink\" title=\"slice(start,end)\"></a><code>slice(start,end)</code></h4><p>1、从 <code>start</code> 开始截取元素，到 <code>end</code> 结束，包括 <code>start</code>,不包括 <code>end</code>,返回新数组，<code>start</code>,<code>end</code> 是索引,<br>2、不会改变原始数组</p>\n<h4 id=\"splice\"><a href=\"#splice\" class=\"headerlink\" title=\"splice()\"></a><code>splice()</code></h4><p><code>splice(start,length)</code><br>1、从 <code>start</code> 开始截取元素，截取 <code>length</code> 个，,<code>返回新数组，start</code> 是索引,<code>length</code> 是个数, <strong>如果不写<code>length</code>参数,会从<code>start</code>一直删到最后</strong><br>2、会改变元素的数组</p>\n<h3 id=\"7-位置方法\"><a href=\"#7-位置方法\" class=\"headerlink\" title=\"(7) 位置方法\"></a>(7) 位置方法</h3><p><code>indexOf()</code> 寻找元素位置,返回第一次出现的位置的索引值,没有找到返回 -1，<br><code>lastIndexOf()</code>   从后往前找<br>上述方法只是查找顺序不一样 结果都是索引值</p>\n<h3 id=\"8-数组迭代方法\"><a href=\"#8-数组迭代方法\" class=\"headerlink\" title=\"(8) 数组迭代方法\"></a>(8) 数组迭代方法</h3><p>1、<code>forEach()</code> 方法用于调用数组的每个元素，并将元素传递给回调函数</p>\n<p>可以拿到每个数组中的值，没有返回值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">array.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index</span>))</span></span><br><span class=\"line\"><span class=\"function\">// <span class=\"title\">value</span> 必需,当前元素</span></span><br><span class=\"line\"><span class=\"function\">// <span class=\"title\">Index</span> 可选,当前元素索引值</span></span><br></pre></td></tr></table></figure>\n\n<p>2、<code>every()</code>, <code>some()</code> 方法用于检测数组所有元素是否都符合指定条件（通过函数提供）<br><code>some()</code>,<code>every()</code> 方法的参数是一个回调函数，回调函数中的第一个参数是数组的元素，第二个参数是数组的索引<br><code>some()</code>,<code>every()</code> 方法都会返回新的数组</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> flag1 = arr3.every(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value, index</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> value &gt; <span class=\"number\">55</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(flag1);</span><br><span class=\"line\"><span class=\"keyword\">var</span> flag2 = arr3.some(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value, index</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> value &gt;= <span class=\"number\">88</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(flag2);</span><br></pre></td></tr></table></figure>\n\n<p><code>every()</code> :判断回调函数中的表达式是否全部满足，如果满足，返回值就是 <code>true</code>,只要有一个不满足就是 <code>false</code></p>\n<p><code>some</code> 判断回调函数中的表达式是否有一个满足，如果至少一个满足，返回值就是 <code>true</code></p>\n<h3 id=\"9-清空数组\"><a href=\"#9-清空数组\" class=\"headerlink\" title=\"(9) 清空数组\"></a>(9) 清空数组</h3><h4 id=\"方式-1-推荐\"><a href=\"#方式-1-推荐\" class=\"headerlink\" title=\"方式 1 推荐\"></a>方式 1 推荐</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr = [];</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"方式-2\"><a href=\"#方式-2\" class=\"headerlink\" title=\"方式 2\"></a>方式 2</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.length = <span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"方式-3\"><a href=\"#方式-3\" class=\"headerlink\" title=\"方式 3\"></a>方式 3</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.splice(<span class=\"number\">0</span>, arr.length);</span><br><span class=\"line\"><span class=\"comment\">// 或者,不写 length ,会一直删到最后</span></span><br><span class=\"line\">arr.splice(<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"10-数组转化字符串\"><a href=\"#10-数组转化字符串\" class=\"headerlink\" title=\"(10) 数组转化字符串\"></a>(10) 数组转化字符串</h3><p><code>join()</code> 将数组转化为字符串，以参数分割</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&quot;31423412&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.split(<span class=\"string\">&quot;&quot;</span>).join()); <span class=\"comment\">// 3,1,4,2,3,4,1,2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.split(<span class=\"string\">&quot;&quot;</span>).join(<span class=\"string\">&quot;&quot;</span>)); <span class=\"comment\">// 31423412</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.split(<span class=\"string\">&quot;&quot;</span>).join(<span class=\"string\">&quot;-&quot;</span>)); <span class=\"comment\">// 3-1-4-2-3-4-1-2</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-基本包装类型\"><a href=\"#5-基本包装类型\" class=\"headerlink\" title=\"5. 基本包装类型\"></a>5. 基本包装类型</h2><p>为了方便操作基本数据类型，<code>JavaScript</code> 还提供了三个特殊的引用类型：<code>String</code>,<code>Number</code>,<code>Boolean</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// s1是基本类型，基本类型是没有方法来操作的</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> s1 = <span class=\"string\">&#x27;zhangsan&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> s2 = s1.substring(<span class=\"number\">5</span>);</span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"comment\">// 当调用 s1.substring(5) 的时候，先把 s1 包装成 String 类型的临时对象，再调用 substring 方法，最后销毁临时对象, 相当于：</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> s1 = <span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(<span class=\"string\">&#x27;zhangsan&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> s2 = s1.substring(<span class=\"number\">5</span>);</span><br><span class=\"line\">s1 = <span class=\"literal\">null</span>;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建基本包装类型的对象</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">18</span>; <span class=\"comment\">//数值，基本类型</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"built_in\">Number</span>(<span class=\"string\">&quot;18&quot;</span>); <span class=\"comment\">//类型转换</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"keyword\">new</span> <span class=\"built_in\">Number</span>(<span class=\"number\">18</span>); <span class=\"comment\">//基本包装类型，对象</span></span><br><span class=\"line\"><span class=\"comment\">// Number 和 Boolean 基本包装类型基本不用，使用的话可能会引起歧义。例如：</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Boolean</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> b2 = b1 &amp;&amp; <span class=\"literal\">true</span>; <span class=\"comment\">// 结果是 true, 因为 object &amp;&amp; true = true</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-String-对象\"><a href=\"#6-String-对象\" class=\"headerlink\" title=\"6. String 对象\"></a>6. String 对象</h2><h3 id=\"1-字符串的不可变\"><a href=\"#1-字符串的不可变\" class=\"headerlink\" title=\"(1) 字符串的不可变\"></a>(1) 字符串的不可变</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&quot;abc&quot;</span>;</span><br><span class=\"line\">str = <span class=\"string\">&quot;hello&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 当重新给 str 赋值的时候，常量 &#x27;abc&#x27;不会被修改，依然在内存中</span></span><br><span class=\"line\"><span class=\"comment\">// 重新给字符串赋值，会重新在内存中开辟空间，这个特点就是字符串的不可变</span></span><br><span class=\"line\"><span class=\"comment\">// 由于字符串的不可变，在大量拼接字符串的时候会有效率问题</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-创建字符串对象\"><a href=\"#2-创建字符串对象\" class=\"headerlink\" title=\"(2) 创建字符串对象\"></a>(2) 创建字符串对象</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(<span class=\"string\">&quot;Hello World&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 获取字符串中字符的个数</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.length);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-字符串对象的常用方法\"><a href=\"#3-字符串对象的常用方法\" class=\"headerlink\" title=\"(3) 字符串对象的常用方法\"></a>(3) 字符串对象的常用方法</h3><p>字符串所有的方法，都不会修改字符串本身(字符串是不可变的)，操作完成会返回一个新的字符串</p>\n<h4 id=\"1-字符方法\"><a href=\"#1-字符方法\" class=\"headerlink\" title=\"1. 字符方法\"></a>1. 字符方法</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">charAt(); <span class=\"comment\">//获取指定位置处字符</span></span><br><span class=\"line\">charCodeAt(); <span class=\"comment\">//获取指定位置处字符的 ASCII 码</span></span><br><span class=\"line\">str[<span class=\"number\">0</span>]; <span class=\"comment\">//HTML5，IE8+支持 和 charAt()等效</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-字符串操作方法\"><a href=\"#2-字符串操作方法\" class=\"headerlink\" title=\"2. 字符串操作方法\"></a>2. 字符串操作方法</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">concat()   <span class=\"comment\">//拼接字符串，等效于+，+更常用</span></span><br><span class=\"line\">slice(start,end)   <span class=\"comment\">//从 start 位置开始，截取到 end 位置，end 取不到</span></span><br><span class=\"line\">substring(start,end) <span class=\"comment\">//从 start 位置开始，截取到 end 位置，end 取不到</span></span><br><span class=\"line\">substr(start,length)   <span class=\"comment\">//// 从 start 位置开始，截取 length 个字符</span></span><br><span class=\"line\">indexOf()   <span class=\"comment\">//返回指定内容在元字符串中的位置,,如果没有，返回-1；(从前往后，检索到第一个就结束)</span></span><br><span class=\"line\">lastIndexOf() <span class=\"comment\">//返回指定内容在元字符串中的位置,,如果没有，返回-1；(从后往前，检索到第一个就结束)</span></span><br><span class=\"line\">trim() <span class=\"comment\">//只能去除字符串前后的空白</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 大小写转换方法</span></span><br><span class=\"line\">toUpperCase() <span class=\"comment\">//转换大写</span></span><br><span class=\"line\">toLowerCase() <span class=\"comment\">//转换小写</span></span><br><span class=\"line\">search()<span class=\"comment\">//方法用于检索字符串中指定的子字符串，返回子字符串的起始位置</span></span><br><span class=\"line\">replace(old,<span class=\"keyword\">new</span>) <span class=\"comment\">//替换字符串替换字符串 new 替换 old</span></span><br><span class=\"line\">split() <span class=\"comment\">//分割字符串 返回的是一个数组。。数组的元素就是以参数的分割的</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>演示</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&quot;uy weiu ryqi w-u-q-wey82374192739    &quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.charAt(<span class=\"number\">0</span>)); <span class=\"comment\">// //获取指定位置处字符</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.charCodeAt(<span class=\"number\">0</span>)); <span class=\"comment\">//获取指定位置处字符的ASCII码</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str[<span class=\"number\">0</span>]); <span class=\"comment\">//HTML5，IE8+支持 和charAt()等效</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> str2 = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">str2 = str.concat(str); <span class=\"comment\">//拼接字符串，等效于+，+更常用</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str2);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.slice(<span class=\"number\">0</span>, <span class=\"number\">1</span>)); <span class=\"comment\">//从start位置开始，截取到end位置，end取不到</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.slice(<span class=\"number\">2</span>, <span class=\"number\">4</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.substring(<span class=\"number\">2</span>, <span class=\"number\">4</span>)); <span class=\"comment\">//从start位置开始，截取到end位置，end取不到</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.substr(<span class=\"number\">2</span>, <span class=\"number\">4</span>)); <span class=\"comment\">// 从start位置开始，截取 length 个字符</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.indexOf(<span class=\"string\">&quot;u&quot;</span>)); <span class=\"comment\">//返回指定内容在元字符串中的位置,,如果没有，返回-1；(从前往后，检索到第一个就结束)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.lastIndexOf(<span class=\"string\">&quot;u&quot;</span>)); <span class=\"comment\">//返回指定内容在元字符串中的位置,,如果没有，返回-1；(从后往前，检索到第一个就结束)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.trim()); <span class=\"comment\">//只能去除字符串前后的空白</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 大小写转换方法</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.charAt(<span class=\"number\">0</span>).toUpperCase()); <span class=\"comment\">//转换大写</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.charAt(<span class=\"number\">0</span>).toLowerCase()); <span class=\"comment\">//转换小写</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.search(<span class=\"string\">&quot;u&quot;</span>)); <span class=\"comment\">//方法用于检索字符串中指定的子字符串，返回子字符串的起始位置</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.replace(<span class=\"string\">&quot;u&quot;</span>, <span class=\"string\">&quot;new&quot;</span>)); <span class=\"comment\">//替换字符串替换字符串 new替换old</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.split()); <span class=\"comment\">//分割字符串 返回的是一个数组。。数组的元素就是以参数的分割的</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.split(<span class=\"string\">&quot;&quot;</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.split(<span class=\"string\">&quot; &quot;</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.split(<span class=\"string\">&quot;-&quot;</span>));</span><br></pre></td></tr></table></figure>\n\n<p><strong>作业</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//   -------------------------</span></span><br><span class=\"line\"><span class=\"comment\">// Wechat收购 Baidu，电话号码相同的人当作是同一个人，合并后salary相加，其他属性保留Wechat的数据，新的Baidu的员工重新生成id,salary涨幅20%</span></span><br><span class=\"line\"><span class=\"comment\">// 统计收购后的员工平均工资，最高工资，最低工资，male的平均工资，female的平均工资</span></span><br><span class=\"line\"><span class=\"comment\">// 找出收购后工资高于8000的员工姓名和电话号码，按薪水从高到低排序</span></span><br><span class=\"line\"><span class=\"comment\">// 找出收购前后工资涨幅最高的员工姓名和电话号码，以及涨幅的百分比</span></span><br><span class=\"line\"><span class=\"comment\">// 找出收购后重名最多的三个姓名，统一出他们的平均年龄</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> BaiduUsers = [],</span><br><span class=\"line\">  WechatUsers = [];</span><br><span class=\"line\"><span class=\"keyword\">var</span> User = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">id, name, phone, gender, age, salary</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.id = id;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.phone = phone;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.gender = gender;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.salary = salary;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">User.create = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">id, name, phone, gender, age, salary</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> User(id, name, phone, gender, age, salary);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">BaiduUsers.push(User.create(<span class=\"number\">1</span>, <span class=\"string\">&quot;tommy&quot;</span>, <span class=\"string\">&quot;1111&quot;</span>, <span class=\"string\">&quot;male&quot;</span>, <span class=\"number\">18</span>, <span class=\"number\">10000</span>));</span><br><span class=\"line\">BaiduUsers.push(User.create(<span class=\"number\">2</span>, <span class=\"string\">&quot;jerry&quot;</span>, <span class=\"string\">&quot;2222&quot;</span>, <span class=\"string\">&quot;male&quot;</span>, <span class=\"number\">28</span>, <span class=\"number\">10000</span>));</span><br><span class=\"line\">BaiduUsers.push(User.create(<span class=\"number\">3</span>, <span class=\"string\">&quot;raobin&quot;</span>, <span class=\"string\">&quot;3333&quot;</span>, <span class=\"string\">&quot;female&quot;</span>, <span class=\"number\">14</span>, <span class=\"number\">1200</span>));</span><br><span class=\"line\">BaiduUsers.push(User.create(<span class=\"number\">4</span>, <span class=\"string\">&quot;binbin&quot;</span>, <span class=\"string\">&quot;4444&quot;</span>, <span class=\"string\">&quot;male&quot;</span>, <span class=\"number\">23</span>, <span class=\"number\">9800</span>));</span><br><span class=\"line\">BaiduUsers.push(User.create(<span class=\"number\">5</span>, <span class=\"string\">&quot;arthur&quot;</span>, <span class=\"string\">&quot;5555&quot;</span>, <span class=\"string\">&quot;female&quot;</span>, <span class=\"number\">22</span>, <span class=\"number\">10000</span>));</span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\">WechatUsers.push(User.create(<span class=\"number\">1</span>, <span class=\"string\">&quot;tommy&quot;</span>, <span class=\"string\">&quot;1111&quot;</span>, <span class=\"string\">&quot;male&quot;</span>, <span class=\"number\">20</span>, <span class=\"number\">40000</span>));</span><br><span class=\"line\">WechatUsers.push(User.create(<span class=\"number\">2</span>, <span class=\"string\">&quot;allen&quot;</span>, <span class=\"string\">&quot;6666&quot;</span>, <span class=\"string\">&quot;male&quot;</span>, <span class=\"number\">34</span>, <span class=\"number\">15800</span>));</span><br><span class=\"line\">WechatUsers.push(User.create(<span class=\"number\">3</span>, <span class=\"string\">&quot;raobin&quot;</span>, <span class=\"string\">&quot;3333&quot;</span>, <span class=\"string\">&quot;female&quot;</span>, <span class=\"number\">16</span>, <span class=\"number\">2300</span>));</span><br><span class=\"line\">WechatUsers.push(User.create(<span class=\"number\">4</span>, <span class=\"string\">&quot;harvey&quot;</span>, <span class=\"string\">&quot;7777&quot;</span>, <span class=\"string\">&quot;male&quot;</span>, <span class=\"number\">30</span>, <span class=\"number\">29800</span>));</span><br><span class=\"line\">WechatUsers.push(User.create(<span class=\"number\">5</span>, <span class=\"string\">&quot;yuyu&quot;</span>, <span class=\"string\">&quot;8888&quot;</span>, <span class=\"string\">&quot;female&quot;</span>, <span class=\"number\">27</span>, <span class=\"number\">7000</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 电话号码相同的人当作是同一个人，合并后salary相加，其他属性保留Wechat的数据</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> b = <span class=\"number\">0</span>; b &lt; BaiduUsers.length; b++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> w = <span class=\"number\">0</span>; w &lt; WechatUsers.length; w++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (BaiduUsers[b].phone == WechatUsers[w].phone) &#123;</span><br><span class=\"line\">      WechatUsers[w].oldsalary = WechatUsers[w].salary;</span><br><span class=\"line\">      WechatUsers[w].salary = WechatUsers[w].oldsalary + BaiduUsers[b].salary;</span><br><span class=\"line\">      BaiduUsers.splice(b, <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 新的Baidu的员工重新生成id,salary涨幅20%</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; BaiduUsers.length; i++) &#123;</span><br><span class=\"line\">  BaiduUsers[i].oldsalary = BaiduUsers[i].salary;</span><br><span class=\"line\">  BaiduUsers[i].salary = BaiduUsers[i].salary * <span class=\"number\">1.2</span>;</span><br><span class=\"line\">  BaiduUsers[i].id = WechatUsers.length + <span class=\"number\">1</span> + i;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 所有 weChat 员工</span></span><br><span class=\"line\">newWechatUsers = WechatUsers.concat(BaiduUsers);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 统计收购后的员工平均工资，最高工资，最低工资，male的平均工资，female的平均工资</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> sumSalary = <span class=\"number\">0</span>, <span class=\"comment\">// 所有员工薪资和</span></span><br><span class=\"line\">  usersSalary = [], <span class=\"comment\">// 所有员工薪资</span></span><br><span class=\"line\">  averageSalary = <span class=\"number\">0</span>, <span class=\"comment\">// 平均薪资</span></span><br><span class=\"line\">  max = <span class=\"number\">0</span>, <span class=\"comment\">// 最高薪资</span></span><br><span class=\"line\">  min = <span class=\"number\">0</span>, <span class=\"comment\">// 最低薪资</span></span><br><span class=\"line\">  maleSalary = [], <span class=\"comment\">// 男员工薪资集合</span></span><br><span class=\"line\">  femaleSalary = [], <span class=\"comment\">// 女员工薪资集合</span></span><br><span class=\"line\">  sumMaleSalary = <span class=\"number\">0</span>,</span><br><span class=\"line\">  sumFemaleSalary = <span class=\"number\">0</span>;</span><br><span class=\"line\">newWechatUsers.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">user, userIndex</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 把所有员工薪资放到一个新数组里</span></span><br><span class=\"line\">  usersSalary.push(newWechatUsers[userIndex].salary);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 把所有男员工薪资放到一个新数组里</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (user.gender == <span class=\"string\">&quot;male&quot;</span>) &#123;</span><br><span class=\"line\">    maleSalary.push(newWechatUsers[userIndex].salary);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 把所有女员工薪资放到一个新数组里</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (user.gender == <span class=\"string\">&quot;female&quot;</span>) &#123;</span><br><span class=\"line\">    femaleSalary.push(newWechatUsers[userIndex].salary);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 所有员工的薪资</span></span><br><span class=\"line\">usersSalary.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">userSalary</span>) </span>&#123;</span><br><span class=\"line\">  sumSalary += userSalary;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 平均薪资</span></span><br><span class=\"line\">averageSalary = sumSalary / newWechatUsers.length;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(averageSalary);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 最高工资，最低工资</span></span><br><span class=\"line\">max = usersSalary[<span class=\"number\">0</span>];</span><br><span class=\"line\">min = usersSalary[<span class=\"number\">0</span>];</span><br><span class=\"line\">usersSalary.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (max &lt; value) &#123;</span><br><span class=\"line\">    max = value;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (min &gt; value) &#123;</span><br><span class=\"line\">    min = value;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(max, min);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// male的平均工资</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; maleSalary.length; i++) &#123;</span><br><span class=\"line\">  sumMaleSalary += maleSalary[i];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sumMaleSalary / maleSalary.length);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// female的平均工资</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; femaleSalary.length; i++) &#123;</span><br><span class=\"line\">  sumFemaleSalary += femaleSalary[i];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sumFemaleSalary / femaleSalary.length);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 找出收购后工资高于8000的员工姓名和电话号码，按薪水从高到低排序</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 先把整体重新排序</span></span><br><span class=\"line\">newWechatUsers.sort(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> b[<span class=\"string\">&quot;salary&quot;</span>] - a[<span class=\"string\">&quot;salary&quot;</span>];</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> more8000 = [];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">UserList</span>(<span class=\"params\">name, phone</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.phone = phone;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123; name, phone &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; newWechatUsers.length; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (newWechatUsers[i].salary &gt; <span class=\"number\">8000</span>) &#123;</span><br><span class=\"line\">    more8000.push(UserList(newWechatUsers[i].name, newWechatUsers[i].phone));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 找出收购前后工资涨幅最高的员工姓名和电话号码，以及涨幅的百分比</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; newWechatUsers.length; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (newWechatUsers[i].oldsalary != <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">    newWechatUsers[i].riseSalary =</span><br><span class=\"line\">      newWechatUsers[i].salary - newWechatUsers[i].oldsalary;</span><br><span class=\"line\">    newWechatUsers[i].percentRise =</span><br><span class=\"line\">      (newWechatUsers[i].riseSalary / newWechatUsers[i].oldsalary) * <span class=\"number\">100</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 因为有的员工薪资没有合并，也没有涨薪，所以 oldsalary 会是 undefined</span></span><br><span class=\"line\">  <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    newWechatUsers.splice(i, <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">newWechatUsers.sort(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> b[<span class=\"string\">&quot;percentRise&quot;</span>] - a[<span class=\"string\">&quot;percentRise&quot;</span>];</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">  newWechatUsers[<span class=\"number\">0</span>].name,</span><br><span class=\"line\">  newWechatUsers[<span class=\"number\">0</span>].phone,</span><br><span class=\"line\">  <span class=\"string\">&quot;涨幅百分比 :&quot;</span> + newWechatUsers[<span class=\"number\">0</span>].percentRise + <span class=\"string\">&quot;%&quot;</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;-------------------------------------&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&quot;abaasdffggghhjjkkgfddsssss3444343&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1、 字符串的长度</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.length);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2、 取出指定位置的字符，如：0,3,5,9等</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.slice(<span class=\"number\">0</span>, <span class=\"number\">1</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.slice(<span class=\"number\">2</span>, <span class=\"number\">3</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.slice(<span class=\"number\">4</span>, <span class=\"number\">5</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.slice(<span class=\"number\">8</span>, <span class=\"number\">9</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3、 查找指定字符是否在以上字符串中存在，如：i，c ，b等</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">searchStr</span>(<span class=\"params\">string, element</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (string.search(element) == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;没找到&quot;</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;存在&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">searchStr(str, <span class=\"string\">&quot;i&quot;</span>);</span><br><span class=\"line\">searchStr(str, <span class=\"string\">&quot;c&quot;</span>);</span><br><span class=\"line\">searchStr(str, <span class=\"string\">&quot;b&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 4、 替换指定的字符，如：g替换为22,ss替换为b等操作方法</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str2 = str;</span><br><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">  str2 = str2.replace(<span class=\"string\">&quot;g&quot;</span>, <span class=\"number\">22</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">while</span> (str2.search(<span class=\"string\">&quot;g&quot;</span>) != -<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str2);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> str3 = str;</span><br><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">  str3 = str3.replace(<span class=\"string\">&quot;ss&quot;</span>, <span class=\"string\">&quot;b&quot;</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">while</span> (str3.search(<span class=\"string\">&quot;ss&quot;</span>) != -<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str3);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 5、 截取指定开始位置到结束位置的字符串，如：取得1-5的字符串</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.substring(<span class=\"number\">0</span>, <span class=\"number\">5</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 6、 找出以上字符串中出现次数最多的字符和出现的次数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;,</span><br><span class=\"line\">  count = <span class=\"number\">0</span>,</span><br><span class=\"line\">  s = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; str.split(<span class=\"string\">&quot;&quot;</span>).length; i++) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果不存在,记录一次</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!obj[str.charAt(i)]) &#123;</span><br><span class=\"line\">    obj[str.charAt(i)] = <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 如果存在，则 +1</span></span><br><span class=\"line\">  <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    obj[str.charAt(i)]++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (obj[key] &gt; count) &#123;</span><br><span class=\"line\">    count = obj[key];</span><br><span class=\"line\">    s = key;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;出现次数最多的字符 : &quot;</span> + s + <span class=\"string\">&quot; ; &quot;</span> + <span class=\"string\">&quot;次数 : &quot;</span> + count);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 7、 遍历字符串，并将遍历出的字符两头添加符号“@”输出至当前的文档页面</span></span><br><span class=\"line\">str.split(<span class=\"string\">&quot;&quot;</span>).forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value, index</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.write(<span class=\"string\">&quot;@&quot;</span> + value + <span class=\"string\">&quot;@&quot;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.write(<span class=\"string\">&quot;&lt;br /&gt;&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"The-End\"><a href=\"#The-End\" class=\"headerlink\" title=\"The_End\"></a>The_End</h1>","site":{"data":{"link":{"class1":{"class_name":"舍友","link_list":{"1":{"name":"codeAntg","link":"https://blog.csdn.net/weixin_44745147","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/fjh.jpg","descr":"那家刀削面不错","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class2":{"class_name":"致谢","link_list":{"1":{"name":"JerrC","link":"https://immyw.com","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/immyw.png","descr":"今日事,今日毕","width":"1px","style":"solid","color":"#60d0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/hexo.svg","descr":"A fast, simple & powerful blog framework","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class3":{"class_name":"友人","link_list":{"1":{"name":"Chester","link":"http://chesterlds.cn","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/chester.jpg","descr":null,"width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Wangs","link":"https://wangsss.cn/","avatar":"https://wangsss.cn/img/avatar.png","descr":"不疯魔，不成活 ~","width":"1px","style":"solid","color":"#9d9d9d","custom":"link_custom1","time":"4s","namecolor":"0094ff","descolor":"#ff9191"}}}}}},"excerpt":"","more":"<h1 id=\"一-JavaScript-介绍\"><a href=\"#一-JavaScript-介绍\" class=\"headerlink\" title=\"一. JavaScript 介绍\"></a>一. JavaScript 介绍</h1><h2 id=\"1-、JavaScript-是什么\"><a href=\"#1-、JavaScript-是什么\" class=\"headerlink\" title=\"(1) 、JavaScript 是什么\"></a>(1) 、JavaScript 是什么</h2><h3 id=\"1-JavaScript-的历史\"><a href=\"#1-JavaScript-的历史\" class=\"headerlink\" title=\"1. JavaScript 的历史\"></a>1. JavaScript 的历史</h3><p>Netscape（网景）在最初将其脚本语言命名为 LiveScript，是布兰登.艾克发明的。后来 Netscape 在与 Sun 合作之后将其改名为 JavaScript。JavaScript 最初受 Java 启发而开始设计的，目的之一就是“看上去像 Java”，因此语法上有类似之处，一些名称和命名规范也借自 Java。JavaScript 与 Java 名称上的近似，是当时 Netscape 为了营销考虑与 Sun 微系统达成协议的结果。</p>\n<h3 id=\"2-JavaScript-是什么语言\"><a href=\"#2-JavaScript-是什么语言\" class=\"headerlink\" title=\"2. JavaScript 是什么语言\"></a>2. JavaScript 是什么语言</h3><p>可以说：Java 服务器端的编程语言，JavaScript 运行在客户端(浏览器)的编程语言<br>JavaScript(简称 JS)是一种运行在客户端的脚本语言，JavaScript 的解释器被称为 JavaScript 引擎，为浏览器的一部分，广泛用于客户端的脚本语言，最早是在 HTML（标准通用标记语言下的一个应用）网页上使用，用来给 HTML 网页增加动态功能。<br>也可以说，是一门脚本语言、是一门解释性语言、是一门动态类型的语言、是一门基于<br>对象的语言。（不是面向对象）、是一门弱性语言</p>\n<h3 id=\"3-JavaScript-的发展和意义\"><a href=\"#3-JavaScript-的发展和意义\" class=\"headerlink\" title=\"3. JavaScript 的发展和意义\"></a>3. JavaScript 的发展和意义</h3><p>最初的目的是为了处理表单的验证操作。JavaScript 发展到现在几乎无所不能，例如：做网页特效、与交互（表单的提交），比如：轮播图、tab 切换、返回顶部。。。<br>例如：网页特效、服务端开发(Node.js)、命令行工具(Node.js)、桌面程序(Electron)、App(Cordova)、控制硬件-物联网(Ruff)、游戏开发(cocos2d-js)</p>\n<h3 id=\"4-JavaScript-和-HTML、CSS-的区别\"><a href=\"#4-JavaScript-和-HTML、CSS-的区别\" class=\"headerlink\" title=\"4. JavaScript 和 HTML、CSS 的区别\"></a>4. JavaScript 和 HTML、CSS 的区别</h3><p><code>HTML</code> - 提供网页的结构，提供网页中的内容<br><code>CSS</code> - 用来美化网页<br><code>JavaScript</code> - 可以用来控制网页内容，给网页增加动态的效果</p>\n<h3 id=\"5-JavaScript-的组成\"><a href=\"#5-JavaScript-的组成\" class=\"headerlink\" title=\"5. JavaScript 的组成\"></a>5. JavaScript 的组成</h3><p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/js/jscontent.png\" alt=\"js\"></p>\n<h4 id=\"（1）ECMAScript-JavaScript-的核心\"><a href=\"#（1）ECMAScript-JavaScript-的核心\" class=\"headerlink\" title=\"（1）ECMAScript - JavaScript 的核心\"></a>（1）ECMAScript - JavaScript 的核心</h4><p>ECMA 欧洲计算机制造联合会。JavaScript 的核心，描述了语言的基本语法和数据类型，ECMAScript 是一套标准，定义了一种语言的标准与具体实现无关。</p>\n<h4 id=\"（2）BOM-浏览器对象模型\"><a href=\"#（2）BOM-浏览器对象模型\" class=\"headerlink\" title=\"（2）BOM - 浏览器对象模型\"></a>（2）BOM - 浏览器对象模型</h4><p>一套操作浏览器功能的 API。通过 BOM 可以操作浏览器窗口，比如：弹出框、控制浏览器跳转、获取分辨率等。Borswer object model</p>\n<h4 id=\"（3）DOM-文档对象模型\"><a href=\"#（3）DOM-文档对象模型\" class=\"headerlink\" title=\"（3）DOM - 文档对象模型\"></a>（3）DOM - 文档对象模型</h4><p>一套操作页面元素的 API。DOM 可以把 HTML 看做是文档树，通过 DOM 提供的 API 可以对树上的节点进行操作。Document object model</p>\n<h2 id=\"2-JavaScript-代码写法\"><a href=\"#2-JavaScript-代码写法\" class=\"headerlink\" title=\"(2) JavaScript 代码写法\"></a>(2) JavaScript 代码写法</h2><p>CSS 代码写法分为行内样式、嵌入样式（内部）、外部样式、控制台书写。那么，js 的代码可以分四个地方写：<br>1.在 html 的文件中,script 的标签中写 js 代码<br>2.js 代码可以在 html 的标签中写<br>3.在 js 文件中可以写 js 代码,但是需要在 html 页面中引入 script 的标签中的 src=”js 的路径”<br>4.还可以在控制台直接书写 js 代码</p>\n<h3 id=\"3-JavaScript-问题总结\"><a href=\"#3-JavaScript-问题总结\" class=\"headerlink\" title=\"(3) JavaScript 问题总结\"></a>(3) JavaScript 问题总结</h3><ol>\n<li>在一对 script 的标签中有错误的 js 代码,那么该错误的代码后面的 js 代码不会执行</li>\n<li>如果第一对的 script 标签中有错误,不会影响后面的 script 标签中的 js 代码执行</li>\n<li>script 的标签中可以写 type=”text/javascript”标准写法或者写 language=”JavaScript”都可以。但是，目前在我们的 html 页面中，type 和 language 都可以省略，原因：html 是遵循 h5 的标准。</li>\n<li>有可能会出现这种情况：script 标签中可能同时出现 type 和 language 的写法。</li>\n<li>script 标签在页面中可以出现多对。</li>\n<li>script 标签一般是放在 body 的标签的最后的，有的时候会在 head 标签中，目前讲课的时候都在 body 标签的后面(body 中的最后)。</li>\n<li>如果 script 标签是引入外部 js 文件的作用，那么这对标签中不要写任何的 js 代码，如果要写，重新写一对 script 标签，里面写代码。</li>\n</ol>\n<h3 id=\"4-注释\"><a href=\"#4-注释\" class=\"headerlink\" title=\"(4) 注释\"></a>(4) 注释</h3><p>单行注释</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// var a;</span></span><br></pre></td></tr></table></figure>\n\n<p>多行注释</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">var a = 1</span></span><br><span class=\"line\"><span class=\"comment\">var b = 1</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"二-JavaScript-变量\"><a href=\"#二-JavaScript-变量\" class=\"headerlink\" title=\"二. JavaScript 变量\"></a>二. JavaScript 变量</h1><h2 id=\"1-变量引入\"><a href=\"#1-变量引入\" class=\"headerlink\" title=\"(1) 变量引入\"></a>(1) 变量引入</h2><p><strong>什么是变量</strong><br>变量是计算机内存中存储数据的标识符，根据变量名称可以获取到内存中存储的数据<br><strong>为什么要使用变量</strong><br>使用变量可以方便的获取或者修改内存中的数据</p>\n<h2 id=\"2-变量声明和初始化\"><a href=\"#2-变量声明和初始化\" class=\"headerlink\" title=\"(2) 变量声明和初始化\"></a>(2) 变量声明和初始化</h2><p><code>var</code> 声明变量</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> age;</span><br></pre></td></tr></table></figure>\n\n<p>变量的赋值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> age;</span><br><span class=\"line\">age = <span class=\"number\">18</span>;</span><br></pre></td></tr></table></figure>\n\n<p>同时声明多个变量</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> age, name, sex;</span><br><span class=\"line\">age = <span class=\"number\">10</span>;</span><br><span class=\"line\">name = <span class=\"string\">&quot;zs&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>同时声明多个变量并赋值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> age = <span class=\"number\">10</span>,</span><br><span class=\"line\">  name = <span class=\"string\">&quot;zs&quot;</span>;</span><br></pre></td></tr></table></figure>\n\n<p>变量在内存中的存储</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> age = <span class=\"number\">18</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-变量的命名规则和规范\"><a href=\"#3-变量的命名规则和规范\" class=\"headerlink\" title=\"(3) 变量的命名规则和规范\"></a>(3) 变量的命名规则和规范</h2><p><strong>规则 - 必须遵守的，不遵守会报错</strong><br>1、由字母、数字、下划线、$符号组成，不能以数字开头<br>2、不能是关键字和保留字，例如：for、while。<br>3、区分大小写<br><strong>规范 - 建议遵守的，不遵守不会报错</strong><br>1、变量名必须有意义<br>2、遵守驼峰命名法。首字母小写，后面单词的首字母需要大写。</p>\n<h2 id=\"4-字面量\"><a href=\"#4-字面量\" class=\"headerlink\" title=\"(4) 字面量\"></a>(4) 字面量</h2><p>在源代码中一个固定值的表示法，也叫字面量。<br>数值字面量：8, 9, 10<br>字符串字面量：<code>&#39;程序员&#39;</code>, <code>&quot;大前端&quot;</code><br>布尔字面量：<code>true</code>，<code>false</code></p>\n<h1 id=\"三-JavaScript-数据类型\"><a href=\"#三-JavaScript-数据类型\" class=\"headerlink\" title=\"三. JavaScript 数据类型\"></a>三. JavaScript 数据类型</h1><h2 id=\"1-基本数据类型\"><a href=\"#1-基本数据类型\" class=\"headerlink\" title=\"(1) 基本数据类型\"></a>(1) 基本数据类型</h2><p><code>Number</code>、<code>String</code>、<code>Boolean</code>、<code>Undefined</code>、<code>Null</code></p>\n<h3 id=\"1-Number-类型\"><a href=\"#1-Number-类型\" class=\"headerlink\" title=\"1. Number 类型\"></a>1. Number 类型</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 十进制</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">9</span>;</span><br><span class=\"line\"><span class=\"comment\">//进行算数计算时，八进制和十六进制表示的数值最终都被转换成十进制数值。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 十六进制</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">0xA</span>;<span class=\"comment\">//数字序列范围：0~9 以及 A~F</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 八进制</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> num1 = <span class=\"number\">07</span>;  <span class=\"comment\">// 对应十进制的 7</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> num2 = <span class=\"number\">011</span>; <span class=\"comment\">// 对应十进制的 9</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> num3 = <span class=\"number\">021</span>; <span class=\"comment\">// 对应十进制的 17 //数字序列范围：0~7</span></span><br><span class=\"line\"><span class=\"comment\">// 如果字面值中的数值超出了范围，那么前导零将被忽略，后面的数值将被当作十进制数值解析</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 浮点数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> n = <span class=\"number\">5e-5</span>;   <span class=\"comment\">// 科学计数法 5 乘以 10 的-5 次方  </span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 浮点数值的最高精度是 17 位小数，但在进行算术计算时其精确度远远不如整数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> result = <span class=\"number\">0.1</span> + <span class=\"number\">0.2</span>; <span class=\"comment\">// 结果不是 0.3，而是：0.30000000000000004</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">0.07</span> * <span class=\"number\">100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 注意：不要判断两个浮点数是否相等</span></span><br><span class=\"line\"><span class=\"comment\">// 就是说由于 0.1 转换成二进制时是无限循环的，所以在计算机中 0.1 只能存储成一个近似值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 最小值：</span></span><br><span class=\"line\"><span class=\"comment\">// 这个值为： 5e-324</span></span><br><span class=\"line\"><span class=\"built_in\">Number</span>.MIN_VALUE</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 最大值：</span></span><br><span class=\"line\"><span class=\"comment\">// 这个值为： 1.7976931348623157e+308</span></span><br><span class=\"line\"><span class=\"built_in\">Number</span>.MAX_VALUE</span><br><span class=\"line\"></span><br><span class=\"line\">无穷大：<span class=\"literal\">Infinity</span></span><br><span class=\"line\">无穷小：-<span class=\"literal\">Infinity</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"数值判断\"><a href=\"#数值判断\" class=\"headerlink\" title=\"数值判断\"></a>数值判断</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//可以通过 Number()方法判断</span></span><br><span class=\"line\"><span class=\"literal\">NaN</span>：not a number</span><br><span class=\"line\"><span class=\"literal\">NaN</span> 与任何值都不相等，包括他本身</span><br><span class=\"line\"><span class=\"built_in\">isNaN</span>(): is not a number</span><br><span class=\"line\"><span class=\"comment\">// 如果 x 是特殊的非数字值 NaN (或者能被转换为这样的值 )，返回的值就是 true。如果 x 是其他值,则返回 false</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2、String-类型\"><a href=\"#2、String-类型\" class=\"headerlink\" title=\"2、String 类型\"></a>2、String 类型</h3><p>字符串可以使用单引号,也可以使用双引号，例如：<code>&#39;abc&#39;</code>、<code>&quot;abc&quot;</code><br>字符串字面量：<code>&#39;I am Happy&#39;</code>、<code>&quot;Hello World&quot;</code></p>\n<h4 id=\"转义符\"><a href=\"#转义符\" class=\"headerlink\" title=\"转义符\"></a>转义符</h4><p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/js/striingtranslate.png\" alt=\"striingtranslate\"></p>\n<h4 id=\"字符串长度\"><a href=\"#字符串长度\" class=\"headerlink\" title=\"字符串长度\"></a>字符串长度</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// length属性用来获取字符串的长度;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&quot;Hello World&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.length);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"字符串拼接\"><a href=\"#字符串拼接\" class=\"headerlink\" title=\"字符串拼接\"></a>字符串拼接</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 字符串拼接使用 + 连接;</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">11</span> + <span class=\"number\">11</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;hello&quot;</span> + <span class=\"string\">&quot; world&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;100&quot;</span> + <span class=\"string\">&quot;100&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;11&quot;</span> + <span class=\"number\">11</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;male:&quot;</span> + <span class=\"literal\">true</span>);</span><br><span class=\"line\"><span class=\"comment\">// 两边只要有一个是字符串，那么+就是字符串拼接功能</span></span><br><span class=\"line\"><span class=\"comment\">// 两边如果都是数字，那么就是算术功能。</span></span><br></pre></td></tr></table></figure>\n\n<p>语言具有隐式转换 ( 隐式类型转换就是指，数据的类型在不用人工干预的情况下进行转换的行为，原因：<code>js</code> 是一门弱类型（动态类型）的语言，他在声明变量的时候不需要指定类型，对变量赋值也没有类型的检测，所以 <code>js</code> 是非常的灵活的，)</p>\n<h3 id=\"3-Boolean-类型\"><a href=\"#3-Boolean-类型\" class=\"headerlink\" title=\"3. Boolean 类型\"></a>3. Boolean 类型</h3><p><code>Boolean</code> 字面量： <code>true</code> 和 <code>false</code>，区分大小写<br>计算机内部存储：<code>true</code> 为 <code>1</code>，<code>false</code> 为 <code>0</code></p>\n<h3 id=\"4-Undefined-和-Null\"><a href=\"#4-Undefined-和-Null\" class=\"headerlink\" title=\"4. Undefined 和 Null\"></a>4. Undefined 和 Null</h3><p><code>undefined</code> 表示一个声明了没有赋值的变量，变量只声明的时候值默认是 <code>undefined</code><br><code>null</code> 表示一个空，变量的值如果想为 <code>null</code>，必须手动设置</p>\n<h2 id=\"2-复杂数据类型\"><a href=\"#2-复杂数据类型\" class=\"headerlink\" title=\"(2) 复杂数据类型\"></a>(2) 复杂数据类型</h2><p><code>Object</code></p>\n<h2 id=\"3-数据类型转换\"><a href=\"#3-数据类型转换\" class=\"headerlink\" title=\"(3) 数据类型转换\"></a>(3) 数据类型转换</h2><h3 id=\"typeof-关键字\"><a href=\"#typeof-关键字\" class=\"headerlink\" title=\"typeof 关键字\"></a><code>typeof</code> 关键字</h3><p>获取变量的类型</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> age = <span class=\"number\">18</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> age); <span class=\"comment\">// number</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> <span class=\"literal\">null</span>); <span class=\"comment\">// Object</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>一个 bug，<code>null</code> 为什么是引用类型（复杂类型）？</strong></p>\n<p>在 JS 的最初版本中使用的是 32 位系统，为了性能考虑使用低位存储变量的类型信息，000 开头的是对象，<code>null</code> 是全 0，所以将 <code>null</code> 误判为 <code>Object</code> 了，虽然现在的内部类型判断代码已经改变了，但 bug 永久的遗留下来了</p>\n<h3 id=\"toString-NaN\"><a href=\"#toString-NaN\" class=\"headerlink\" title=\"toString()\"></a>toString()</h3><p>转换成字符串类型</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(num.toString()); <span class=\"comment\">// String(&quot;5&quot;)</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"String\"><a href=\"#String\" class=\"headerlink\" title=\"String()\"></a>String()</h3><p><code>String()</code> 函数存在的意义：有些值没有 <code>toString()</code>, 这个时候可以使用 <code>String()</code>.比如：<code>undefined</code> 和 <code>null</code></p>\n<h3 id=\"拼接字符串方式\"><a href=\"#拼接字符串方式\" class=\"headerlink\" title=\"拼接字符串方式\"></a>拼接字符串方式</h3><p><code>num + &quot;&quot;</code>，当 + 两边一个操作符是字符串类型，一个操作符是其它类型的时候，会先把其它类型转换成字符串再进行字符串拼接，返回字符串</p>\n<h3 id=\"转换成数值类型\"><a href=\"#转换成数值类型\" class=\"headerlink\" title=\"转换成数值类型\"></a>转换成数值类型</h3><p><code>Number()</code> 可以把任意值转换成数值，如果要转换的字符串中有一个不是数值的字符，返回 <code>NaN</code><br>#### Number()转化规则<br>a. 如果字符串中只包含数字时，将其转换为十进制数值，忽略前导 0<br>b. 如果字符串中包含有效浮点格式，如“1.1”，将其转换为对应的浮点数字，忽略前导 0<br>c. 如果字符串中包含有效的十六进制格式，如“0xf”，将其转换为相同大小的十进制数值<br>d. 如果字符串为空，或者是空内容，将其转换为 0<br>e. 如果字符串中包含除上述格式之外的字符，则将其转换为 NaN</p>\n<h4 id=\"parseInt\"><a href=\"#parseInt\" class=\"headerlink\" title=\"parseInt()\"></a>parseInt()</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 返回 12，如果第一个字符是数字会解析知道遇到第一个小数点结束</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> num1 = <span class=\"built_in\">parseInt</span>(<span class=\"string\">&quot;12.3abc&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 返回 NaN，如果第一个字符不是数字或者符号就返回 NaN</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> num2 = <span class=\"built_in\">parseInt</span>(<span class=\"string\">&quot;abc123&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"parseFloat\"><a href=\"#parseFloat\" class=\"headerlink\" title=\"parseFloat()\"></a>parseFloat()</h4><p><code>parseFloat()</code> 把字符串转换成浮点数，<code>parseFloat()</code> 和 <code>parseInt()</code> 非常相似，不同之处在与<br><code>parseFloat()</code> 会解析第一个<code>.</code> 遇到第二个 <code>.</code> 或者非数字结束<br>如果解析的内容里只有整数，解析成整数</p>\n<h4 id=\"正负运算\"><a href=\"#正负运算\" class=\"headerlink\" title=\"正负运算\"></a>正负运算</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&quot;500&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(+str); <span class=\"comment\">// 取正</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(-str); <span class=\"comment\">// 取负</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"转换成布尔类型\"><a href=\"#转换成布尔类型\" class=\"headerlink\" title=\"转换成布尔类型\"></a>转换成布尔类型</h3><p><strong><code>Boolean()</code></strong><br><code>0</code>, <code>&#39;&#39;</code>, <code>null</code>, <code>undefined</code>, <code>NaN</code>, 会转换成 <code>false</code>,其它都会转换成 <code>true</code></p>\n<h1 id=\"四-JavaScript-运算\"><a href=\"#四-JavaScript-运算\" class=\"headerlink\" title=\"四. JavaScript 运算\"></a>四. JavaScript 运算</h1><h2 id=\"1-算术运算符\"><a href=\"#1-算术运算符\" class=\"headerlink\" title=\"(1) 算术运算符\"></a>(1) 算术运算符</h2><p><code>+ - * / %</code></p>\n<h2 id=\"2-一元运算符\"><a href=\"#2-一元运算符\" class=\"headerlink\" title=\"(2) 一元运算符\"></a>(2) 一元运算符</h2><p>一元运算符：只有一个操作数的运算符<br><code>5 + 6</code> 两个操作数的运算符是二元运算符<br><code>++</code> 自身加 1, <code>--</code> 自身减 1</p>\n<p><strong>前置 <code>++</code> 先将自身的值自增 1，再将自增后的值赋值给变量</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> num1 = <span class=\"number\">5</span>;</span><br><span class=\"line\">++num1;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(num1); <span class=\"comment\">// 6</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>后置 <code>++</code> 先将自身的值赋值给变量，然后再自增 1</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> num2 = <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(num2++); <span class=\"comment\">// 5</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(num2); <span class=\"comment\">// 6</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>总结：</strong><br>前置 <code>++</code>： 先加后输出<br>后置 <code>++</code>： 先输出后加</p>\n<h2 id=\"3-逻辑运算符-布尔运算符\"><a href=\"#3-逻辑运算符-布尔运算符\" class=\"headerlink\" title=\"(3) 逻辑运算符 (布尔运算符)\"></a>(3) 逻辑运算符 (布尔运算符)</h2><p><code>&amp;&amp;</code> (与) 两个操作数同时为 <code>true</code>，结果为 <code>true</code>，否则都是 <code>false</code><br><code>||</code> (或) 两个操作数有一个为 <code>true</code>，结果为 <code>true</code>，否则为 <code>false</code><br><code>!</code> (非) 取反</p>\n<h2 id=\"4-关系运算符-比较运算符\"><a href=\"#4-关系运算符-比较运算符\" class=\"headerlink\" title=\"(4) 关系运算符(比较运算符)\"></a>(4) 关系运算符(比较运算符)</h2><p><code>&lt; &gt; &gt;= &lt;= == != === !==</code><br><code>==</code> 与 <code>===</code> 的区别：<code>==</code> 只进行值得比较，<code>===</code> 类型和值同时相等，则相等</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> result = <span class=\"string\">&quot;55&quot;</span> == <span class=\"number\">55</span>; <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> result = <span class=\"string\">&quot;55&quot;</span> === <span class=\"number\">55</span>; <span class=\"comment\">// false 值相等，类型不相等</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> result = <span class=\"number\">55</span> === <span class=\"number\">55</span>; <span class=\"comment\">// true 值和类型都相等</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-赋值运算符\"><a href=\"#5-赋值运算符\" class=\"headerlink\" title=\"(5) 赋值运算符\"></a>(5) 赋值运算符</h2><p><code>= += -= *= /= %=</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">num += <span class=\"number\">5</span>; <span class=\"comment\">//相当于 num = num + 5;</span></span><br><span class=\"line\">num *= <span class=\"number\">5</span>; <span class=\"comment\">//相当于 num = num * 5;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-运算符的优先级\"><a href=\"#6-运算符的优先级\" class=\"headerlink\" title=\"(6) 运算符的优先级\"></a>(6) 运算符的优先级</h2><p><strong>优先级从高到底如下：</strong></p>\n<p>括号&gt;点运算符&gt;一元运算符&gt; 算数运算符 &gt;关系运算符&gt;逻辑运算符 &gt;赋值运算符</p>\n<p><strong>注意：同级运算符先后顺序如下：</strong><br>一元运算符 <code>++</code> <code>--</code> <code>!</code><br>算数运算符 先 <code>*</code> <code>/</code> <code>%</code> 后 <code>+</code> <code>-</code><br>关系运算符 <code>&gt;</code> <code>&gt;=</code> <code>&lt;</code> <code>&lt;=</code> <code>==</code> <code>!=</code> <code>===</code> <code>!==</code><br>逻辑运算符 先 <code>&amp;&amp;</code> 后 <code>||</code></p>\n<h2 id=\"运算优先级练习\"><a href=\"#运算优先级练习\" class=\"headerlink\" title=\"运算优先级练习\"></a>运算优先级练习</h2><p><strong>优先级： 括号&gt;点运算符&gt;一元运算符&gt; 算数运算符 &gt;关系运算符&gt;逻辑运算符 &gt;赋值运算符</strong><br>(1)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">4</span> &gt;= <span class=\"number\">6</span> || (<span class=\"string\">&quot;人&quot;</span> != <span class=\"string\">&quot;阿凡达&quot;</span> &amp;&amp; !(<span class=\"number\">12</span> * <span class=\"number\">2</span> == <span class=\"number\">144</span>) &amp;&amp; <span class=\"literal\">true</span>);</span><br><span class=\"line\"><span class=\"comment\">// 第一轮 4 &gt;= 6 || (&quot;人&quot; != &quot;阿凡达&quot; &amp;&amp; !(false) &amp;&amp; true)</span></span><br><span class=\"line\"><span class=\"comment\">// 第二轮 4 &gt;= 6 || (&quot;人&quot; != &quot;阿凡达&quot; &amp;&amp; true &amp;&amp; true)</span></span><br><span class=\"line\"><span class=\"comment\">// 第三轮 false || (true &amp;&amp; true &amp;&amp; true)</span></span><br><span class=\"line\"><span class=\"comment\">// 第四轮 false || true</span></span><br><span class=\"line\"><span class=\"comment\">// 结果为 true</span></span><br></pre></td></tr></table></figure>\n\n<p>(2)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">100.2</span> &gt;= <span class=\"number\">52</span> || (<span class=\"string\">&quot;蛇&quot;</span> != <span class=\"string\">&quot;眼镜蛇&quot;</span> &amp;&amp; !(<span class=\"number\">25</span> * <span class=\"number\">4</span> == <span class=\"number\">120</span>)) || <span class=\"literal\">true</span>;</span><br><span class=\"line\"><span class=\"comment\">// 结果为 true</span></span><br><span class=\"line\"><span class=\"comment\">// 第一轮 : 100.2 &gt;= 52 || (&quot;蛇&quot; != &quot;眼镜蛇&quot; &amp;&amp; !false) || true</span></span><br><span class=\"line\"><span class=\"comment\">// 第二轮 : 100.2 &gt;= 52 || (&quot;蛇&quot; != &quot;眼镜蛇&quot; &amp;&amp; true) || true</span></span><br><span class=\"line\"><span class=\"comment\">// 第三轮 : true || (true &amp;&amp; true) || true</span></span><br><span class=\"line\"><span class=\"comment\">// 第四轮 : true</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"五-流程控制\"><a href=\"#五-流程控制\" class=\"headerlink\" title=\"五. 流程控制\"></a>五. 流程控制</h1><p>程序的三种基本结构<br>顺序结构：从上到下执行的代码就是顺序结构(程序默认就是由上到下顺序执行的)<br>分支结构：根据不同的情况，执行对应代码<br>循环结构：重复做一件事情</p>\n<h2 id=\"1-分支结构\"><a href=\"#1-分支结构\" class=\"headerlink\" title=\"1. 分支结构\"></a>1. 分支结构</h2><h3 id=\"1-if-语句\"><a href=\"#1-if-语句\" class=\"headerlink\" title=\"(1) if 语句\"></a>(1) if 语句</h3><p><code>if</code> 语句  - 只有当指定条件为 true 时，使用该语句来执行代码<br><code>if...else</code> 语句  - 当条件为 true 时执行代码，当条件为 false 时执行其他代码<br><code>if...else if....else</code> 语句- 使用该语句来选择多个代码块之一来执行</p>\n<p><strong>if 案例判断一个人的年龄是否满 18 岁(是否成年)</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"comment\">// 判断</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"comment\">// (条件) &#123;执行语句&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> age = <span class=\"number\">19</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (age &gt;= <span class=\"number\">18</span>) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;成年了&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (age &lt; <span class=\"number\">18</span>) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;未成年&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 弹出输入框</span></span><br><span class=\"line\">prompt(<span class=\"string\">&quot;参数会展示在页面上&quot;</span>) <span class=\"comment\">// 点击确认会返回输入内容，点击取消会返回 null</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = prompt();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> age = prompt();</span><br><span class=\"line\"><span class=\"keyword\">if</span> (age &gt;= <span class=\"number\">18</span>) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;成年了&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (age &lt; <span class=\"number\">18</span>) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;未成年&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>if 案例百分制转换成等级制</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> grade = prompt(<span class=\"string\">&quot;请输入成绩&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">if</span> (grade &gt; <span class=\"number\">0</span> &amp;&amp; grade &lt; <span class=\"number\">60</span>) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;不及格&quot;</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (grade &lt; <span class=\"number\">70</span>) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;及格&quot;</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (grade &lt; <span class=\"number\">80</span>) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;良&quot;</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (grade &lt; <span class=\"number\">90</span>) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;良好&quot;</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (grade &lt;= <span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;优秀&quot;</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;请输入0-100&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-三元运算符\"><a href=\"#2-三元运算符\" class=\"headerlink\" title=\"(2) 三元运算符\"></a>(2) 三元运算符</h3><p><code>表达式 1</code> ? <code>表达式 2</code> : <code>表达式 3</code><br>是对 <code>if ... else</code> 语句的一种简化写法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">age &gt;= <span class=\"number\">18</span> ? <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;成年&quot;</span>) : <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;未成年&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-switch-语句\"><a href=\"#3-switch-语句\" class=\"headerlink\" title=\"(3) switch 语句\"></a>(3) switch 语句</h3><p><code>switch</code> 语句<br><code>break</code> 可以省略，如果省略，代码会继续执行下一个 <code>case</code><br><code>default</code> 关键词来规定匹配不存在时做的事情。<br><code>switch case</code> 使用严格比较（===），值必须与要匹配的类型相同</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> day = prompt(<span class=\"string\">&quot;请输入数字&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// prompt 返回类型为字符串</span></span><br><span class=\"line\"><span class=\"keyword\">switch</span> (<span class=\"built_in\">Number</span>(day)) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">1</span>:</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;周一&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">2</span>:</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;周二&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">3</span>:</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;周三&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">4</span>:</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;周四&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">5</span>:</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;周五&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">6</span>:</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;周六&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">7</span>:</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;周日&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">default</span>:</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;666&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>百分制转换成等级制</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> grade = prompt();</span><br><span class=\"line\"><span class=\"keyword\">var</span> g = <span class=\"built_in\">parseInt</span>(grade / <span class=\"number\">10</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(g);</span><br><span class=\"line\"><span class=\"keyword\">switch</span> (g) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">10</span>:</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;NB&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">9</span>:</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;优秀&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">8</span>:</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;良好&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">7</span>:</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;良&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"number\">6</span>:</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;及格&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">default</span>:</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;不及格&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>能用 <code>switch</code> 语句实现的就一定可以使用 <code>if</code> 实现，但是反之不一定，如果是区间范围就采用 <code>if</code> .如果是等值判断使用 <code>switch</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// If 语句会把后面的值隐式转换成布尔类型</span></span><br><span class=\"line\"><span class=\"comment\">// 转换为 true ： 非空字符串 非 0 数字 true 任何对象</span></span><br><span class=\"line\"><span class=\"comment\">// 转换成 false ： 空字符串, 0, false, null, undefined</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;OK&quot;</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;NO&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-循环结构\"><a href=\"#2-循环结构\" class=\"headerlink\" title=\"2. 循环结构\"></a>2. 循环结构</h2><p>在 <code>javascript</code> 中，循环语句有三种，<code>while</code>、<code>do..while</code>、<code>for</code> 循环。</p>\n<h3 id=\"1-while-语句\"><a href=\"#1-while-语句\" class=\"headerlink\" title=\"(1) while 语句\"></a>(1) while 语句</h3><p>while 循环会在指定条件为真时循环执行代码块</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//   死循环</span></span><br><span class=\"line\"><span class=\"comment\">// while (true) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//   console.log();</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印 1-100</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (a &lt;= <span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\">  a++;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a++);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印 1-100 的和</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (b &lt;= <span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">  sum += b;</span><br><span class=\"line\">  b++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印 100 以内 7 的倍数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> c = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (c &lt;= <span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (c % <span class=\"number\">7</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(c);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  c++;</span><br><span class=\"line\">  <span class=\"comment\">// ++c;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 100 以内偶数及和</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> d = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> sum2 = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (d &lt;= <span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (d % <span class=\"number\">2</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(d + <span class=\"string\">&quot;是偶数&quot;</span>);</span><br><span class=\"line\">    sum2 += d;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  d++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum2);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 100 以内奇数及和</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> e = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> sum3 = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">while</span> (e &lt;= <span class=\"number\">100</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (e % <span class=\"number\">2</span> != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(e + <span class=\"string\">&quot;是奇数&quot;</span>);</span><br><span class=\"line\">    sum3 += e;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  e++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum3);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-do…while-语句\"><a href=\"#2-do…while-语句\" class=\"headerlink\" title=\"(2) do…while 语句\"></a>(2) do…while 语句</h3><p><code>do..while</code> 循环和 <code>while</code> 循环非常像，二者经常可以相互替代，但是 <code>do..while</code> 的特点是不管条件成不成立，都会执行一次。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// do ... while</span></span><br><span class=\"line\"><span class=\"comment\">// 打印 1-100 之间所有数的和</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> sum4 = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(f);</span><br><span class=\"line\">  sum4 += f;</span><br><span class=\"line\">  f++;</span><br><span class=\"line\">&#125; <span class=\"keyword\">while</span> (f &lt;= <span class=\"number\">100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印 100 以内 7的倍数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> g = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (g % <span class=\"number\">7</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(g);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  g++;</span><br><span class=\"line\">&#125; <span class=\"keyword\">while</span> (g &lt;= <span class=\"number\">100</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 打印 100 以内所有偶数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> i = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (i % <span class=\"number\">2</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(i + <span class=\"string\">&quot;是偶数&quot;</span>);</span><br><span class=\"line\">    sum += i;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  i++;</span><br><span class=\"line\">&#125; <span class=\"keyword\">while</span> (i &lt;= <span class=\"number\">100</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-for-语句\"><a href=\"#3-for-语句\" class=\"headerlink\" title=\"(3) for 语句\"></a>(3) for 语句</h3><p><code>while</code> 和 <code>do...while</code> 一般用来解决无法确认次数的循环。<code>for</code> 循环一般在循环次数确定的时候比较方便</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// for 循环</span></span><br><span class=\"line\"><span class=\"comment\">// 1-100 和</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">1</span>; j &lt; <span class=\"number\">101</span>; j++) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(j);</span><br><span class=\"line\">  sum += j;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1-100 偶数和</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (i % <span class=\"number\">2</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    sum += i;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 双层 for 循环</span></span><br><span class=\"line\"><span class=\"comment\">// 正方形</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">10</span>; j++) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.write(<span class=\"string\">&quot;*&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.write(<span class=\"string\">&quot;&lt;br /&gt;&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 三角形</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; i; j++) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.write(<span class=\"string\">&quot;#&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.write(<span class=\"string\">&quot;&lt;br /&gt;&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-continue-和-break\"><a href=\"#4-continue-和-break\" class=\"headerlink\" title=\"(4) continue 和 break\"></a>(4) continue 和 break</h3><p><code>break</code> :立即跳出整个循环，即循环结束，开始执行循环后面的内容（直接跳到大括号）<br><code>continue</code> :立即跳出当前循环，继续下一次循环（跳到 <code>i++</code> 的地方）</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// break</span></span><br><span class=\"line\"><span class=\"comment\">// continue</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (i % <span class=\"number\">10</span> == <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">    <span class=\"comment\">// continue;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">sum += i;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-循环语句区别\"><a href=\"#5-循环语句区别\" class=\"headerlink\" title=\"(5) 循环语句区别\"></a>(5) 循环语句区别</h3><h4 id=\"1-循环结构的表达式不同\"><a href=\"#1-循环结构的表达式不同\" class=\"headerlink\" title=\"1. 循环结构的表达式不同\"></a>1. 循环结构的表达式不同</h4><p><code>do-while</code> 循环结构表达式为：<code>do</code>{循环体;}<br><code>for</code> 循环的结构表达式为：<code>for</code>（单次表达式;条件表达式;末尾循环体）{中间循环体；}。<br><code>while</code> 循环的结构表达式为：<code>while</code>（表达式）{循环体}</p>\n<h4 id=\"2-执行时判断方式不同\"><a href=\"#2-执行时判断方式不同\" class=\"headerlink\" title=\"2. 执行时判断方式不同\"></a>2. 执行时判断方式不同</h4><p><code>do-while</code> 循环将先运行一次，因为经过第一次 <code>do</code> 循环后，当检查条件表达式的值时，其值为   不成立时而会退出循环。保证了至少执行 <code>do</code>{ }内的语句一次。<br><code>for</code> 循环执行的中间循环体可以为一个语句，也可以为多个语句，当中间循环体只有一个语句时，其大括号{}可以省略，执行完中间循环体后接着执行末尾循环体。<br><code>while</code> 循环执行时当满足条件时进入循环，进入循环后，当条件不满足时，执行完循环体内全部语句后再跳出（而不是立即跳出循环）。</p>\n<h4 id=\"3-执行次数不同\"><a href=\"#3-执行次数不同\" class=\"headerlink\" title=\"3. 执行次数不同\"></a>3. 执行次数不同</h4><p><code>do-while</code> 循环是先执行后判断，执行次数至少为一次。<br><code>for</code> 循环是先判断后执行，可以不执行中间循环体。<br><code>while</code> 循环先判断后执行，可以不执行中间循环体。</p>\n<h4 id=\"4-执行末尾循环体的顺序不同\"><a href=\"#4-执行末尾循环体的顺序不同\" class=\"headerlink\" title=\"4. 执行末尾循环体的顺序不同\"></a>4. 执行末尾循环体的顺序不同</h4><p><code>do-while</code> 循环是在中间循环体中加入末尾循环体，并在执行中间循环体时执行末尾循环体。<br><code>for</code> 循环的中间循环体在条件判断语句里，执行末尾循环体后自动执行中间循环体。<br><code>while</code> 循环的末尾循环体也是在中间循环体里，并在中间循环体中执行。</p>\n<h2 id=\"作业\"><a href=\"#作业\" class=\"headerlink\" title=\"作业\"></a>作业</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 作业 1</span></span><br><span class=\"line\"><span class=\"comment\">// 求 1-100 所有数的乘积</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> sum1 = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> a = <span class=\"number\">1</span>; a &lt;= <span class=\"number\">100</span>; a++) &#123;</span><br><span class=\"line\">  sum1 *= a;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum1);</span><br><span class=\"line\"><span class=\"comment\">// ---------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">// 作业 2</span></span><br><span class=\"line\"><span class=\"comment\">// 求 1-100 之间所有奇数的和</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> sum2 = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> b = <span class=\"number\">1</span>; b &lt;= <span class=\"number\">100</span>; b++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (b % <span class=\"number\">2</span> == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    sum2 += b;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum2);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ---------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">// 作业 3</span></span><br><span class=\"line\"><span class=\"comment\">// 计算 1-100 之间能被 3 整除的数的和</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> sum3 = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> c = <span class=\"number\">1</span>; c &lt;= <span class=\"number\">100</span>; c++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (c % <span class=\"number\">3</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    sum3 += c;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum3);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ---------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">// 作业 4</span></span><br><span class=\"line\"><span class=\"comment\">// 计算 1-100 之间不能被7整除的数的和</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> sum4 = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> d = <span class=\"number\">1</span>; d &lt;= <span class=\"number\">100</span>; d++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (d % <span class=\"number\">7</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    sum4 += d;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum4);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ---------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">// 作业 5</span></span><br><span class=\"line\"><span class=\"comment\">// 本金10000元存入银行，年利率是千分之三，每过1年，将本金和利息相加作为新的本金。计算5年后，获得的本金是多少？</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> money = <span class=\"number\">10000</span>,</span><br><span class=\"line\">  rate = <span class=\"number\">0.003</span>,</span><br><span class=\"line\">  years = <span class=\"number\">5</span>,</span><br><span class=\"line\">  sum5 = <span class=\"number\">0</span>;</span><br><span class=\"line\">sum5 += money;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> year = <span class=\"number\">1</span>; year &lt;= years; year++) &#123;</span><br><span class=\"line\">  sum5 *= <span class=\"number\">1</span> + rate;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum5);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ---------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">// 作业 6</span></span><br><span class=\"line\"><span class=\"comment\">// 有个人想知道，一年之内一对兔子能繁殖多少对？</span></span><br><span class=\"line\"><span class=\"comment\">// 于是就筑了一道围墙把一对兔子关在里面。已知一对兔子每个月可以生一对小兔子，而一对兔子从出生后第3个月起每月生一对小兔子。假如一年内没有发生死亡现象，那么，一对兔子一年内（12个月）能繁殖成多少对？</span></span><br><span class=\"line\"><span class=\"comment\">// (兔子的规律为数列，1，1，2，3，5，8，13，21)</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> sum6,</span><br><span class=\"line\">  r1 = <span class=\"number\">1</span>,</span><br><span class=\"line\">  r2 = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> month = <span class=\"number\">1</span>; month &lt;= <span class=\"number\">12</span>; month++) &#123;</span><br><span class=\"line\">  sum6 = r1 + r2;</span><br><span class=\"line\">  r1 = r2;</span><br><span class=\"line\">  r2 = sum6;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;第&quot;</span> + month + <span class=\"string\">&quot;个月 : &quot;</span> + sum6 + <span class=\"string\">&quot; 只&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// ---------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">// 作业 7</span></span><br><span class=\"line\"><span class=\"comment\">// 求 1-100 之间不能被 7 整除的整数的和（用continue）</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> sum7 = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> e = <span class=\"number\">1</span>; e &lt;= <span class=\"number\">100</span>; e++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (e % <span class=\"number\">7</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    sum7 += e;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum7);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ---------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">// 作业 8</span></span><br><span class=\"line\"><span class=\"comment\">// 求 200-300 之间所有的奇数的和（用continue）</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> sum8 = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">200</span>; i &lt;= <span class=\"number\">300</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (i % <span class=\"number\">2</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    sum8 += i;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum8);</span><br><span class=\"line\"><span class=\"comment\">// ---------------------------------------------</span></span><br><span class=\"line\"><span class=\"comment\">// 作业 9</span></span><br><span class=\"line\"><span class=\"comment\">// 求 200-300之间第一个能被7整数的数（break）</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">200</span>; j &lt;= <span class=\"number\">300</span>; j++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (j % <span class=\"number\">7</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(j);</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-调试\"><a href=\"#2-调试\" class=\"headerlink\" title=\"2. 调试\"></a>2. 调试</h2><h3 id=\"1-alert\"><a href=\"#1-alert\" class=\"headerlink\" title=\"(1) alert()\"></a>(1) alert()</h3><h3 id=\"2-console-log\"><a href=\"#2-console-log\" class=\"headerlink\" title=\"(2) console.log()\"></a>(2) console.log()</h3><h3 id=\"3-debugger-关键字\"><a href=\"#3-debugger-关键字\" class=\"headerlink\" title=\"(3) debugger 关键字\"></a>(3) debugger 关键字</h3><p>debugger  关键字用于停止执行 JavaScript，并调用调试函数。这个关键字与在调试工具中设置断点的效果是一样的</p>\n<h3 id=\"4-断点调试\"><a href=\"#4-断点调试\" class=\"headerlink\" title=\"(4) 断点调试\"></a>(4) 断点调试</h3><h1 id=\"六-数组\"><a href=\"#六-数组\" class=\"headerlink\" title=\"六. 数组\"></a>六. 数组</h1><h2 id=\"1-为什么要学习数组\"><a href=\"#1-为什么要学习数组\" class=\"headerlink\" title=\"(1) 为什么要学习数组\"></a>(1) 为什么要学习数组</h2><p>之前学习的数据类型，只能存储一个值,比如：<code>Number</code>,<code>String</code></p>\n<h2 id=\"2-数组的定义\"><a href=\"#2-数组的定义\" class=\"headerlink\" title=\"(2) 数组的定义\"></a>(2) 数组的定义</h2><p>所谓数组，就是将多个元素（通常是同一类型）按一定顺序排列放到一个集合中，那么这个集合我们就称之为数组。<br>数组是一个有序的列表，可以在数组中存放任意的数据，并且数组的长度可以动态的调整</p>\n<h2 id=\"3-通过数组字面量创建数组\"><a href=\"#3-通过数组字面量创建数组\" class=\"headerlink\" title=\"(3) 通过数组字面量创建数组\"></a>(3) 通过数组字面量创建数组</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建一个空数组</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr1 = [];</span><br><span class=\"line\"><span class=\"comment\">// 创建一个包含3个数值的数组，多个数组项以逗号隔开</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = [<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"comment\">// 创建一个包含2个字符串的数组</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr3 = [<span class=\"string\">&quot;a&quot;</span>, <span class=\"string\">&quot;c&quot;</span>];</span><br><span class=\"line\"><span class=\"comment\">// 可以通过数组的length属性获取数组的长度</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr3.length);</span><br><span class=\"line\"><span class=\"comment\">// 可以设置length属性改变数组中元素的个数</span></span><br><span class=\"line\">arr3.length = <span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-获取数组元素\"><a href=\"#4-获取数组元素\" class=\"headerlink\" title=\"(4) 获取数组元素\"></a>(4) 获取数组元素</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取数组元素</span></span><br><span class=\"line\"><span class=\"comment\">// 按下标取值,从0开始</span></span><br><span class=\"line\"><span class=\"comment\">// 取值未定义的下标，值为 undefined</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2[<span class=\"number\">0</span>]);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2[<span class=\"number\">10</span>]); <span class=\"comment\">// undefined</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-遍历数组\"><a href=\"#5-遍历数组\" class=\"headerlink\" title=\"(5) 遍历数组\"></a>(5) 遍历数组</h2><p>遍历：遍及所有，对数组的每一个元素都访问一次就叫遍历。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(arr[i]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-数组中新增元素\"><a href=\"#6-数组中新增元素\" class=\"headerlink\" title=\"(6) 数组中新增元素\"></a>(6) 数组中新增元素</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 数组中新增元素</span></span><br><span class=\"line\"><span class=\"comment\">// 赋值</span></span><br><span class=\"line\">arr2[arr2.length] = <span class=\"number\">100</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// push()</span></span><br><span class=\"line\"><span class=\"comment\">// 在数组末尾添加，返回数组长度</span></span><br><span class=\"line\">arr2.push(<span class=\"number\">101</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// unshift()</span></span><br><span class=\"line\"><span class=\"comment\">// 在数组开始添加任意元素,返回数组长度</span></span><br><span class=\"line\">arr2.unshift(<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// shift()</span></span><br><span class=\"line\"><span class=\"comment\">// 从数组中删除第一个元元素，并返回该元素的值.此方法会更改数组的长度</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> r = arr2.shift();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(r);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"数组练习案例\"><a href=\"#数组练习案例\" class=\"headerlink\" title=\"数组练习案例\"></a>数组练习案例</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 求数组所有数平均值</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr1.length; i++) &#123;</span><br><span class=\"line\">  sum += arr1[i];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum / arr1.length);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 数组最大值，最小值 (第一种)</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = [<span class=\"number\">0</span>, <span class=\"number\">1</span>, , <span class=\"number\">32</span>, <span class=\"number\">0</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> min = arr2[<span class=\"number\">0</span>], <span class=\"comment\">// 假设第一个元素是最小值</span></span><br><span class=\"line\">  max = arr2[<span class=\"number\">0</span>]; <span class=\"comment\">// 假设第一个元素是最大值</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr2.length; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (arr2[i] &gt; max) &#123;</span><br><span class=\"line\">    max = arr2[i];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (arr2[i] &lt; min) &#123;</span><br><span class=\"line\">    min = arr2[i];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(max);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(min);</span><br><span class=\"line\"><span class=\"comment\">// 数组最大值，最小值 (第二种)</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr2.length; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (arr2[i] &gt; arr2[i + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> temp = arr2[i + <span class=\"number\">1</span>];</span><br><span class=\"line\">    arr2[i + <span class=\"number\">1</span>] = arr2[i];</span><br><span class=\"line\">    arr2[i] = temp;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">max = arr2[arr2.length - <span class=\"number\">1</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(max);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// indexOf()</span></span><br><span class=\"line\"><span class=\"comment\">// 返回在数组中可以找到一个给定元素的第一个索引，如果不存在，则返回 -1</span></span><br><span class=\"line\"><span class=\"comment\">// 数组去重</span></span><br><span class=\"line\"><span class=\"comment\">// 第一种</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr3 = [<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">22</span>, <span class=\"number\">22</span>, <span class=\"number\">55</span>, <span class=\"number\">55</span>, <span class=\"number\">9</span>, <span class=\"number\">9</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> newArr = [];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr3.length; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (arr3.indexOf(arr3[i]) == i) &#123;</span><br><span class=\"line\">    newArr.push(arr3[i]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArr);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 第二种</span></span><br><span class=\"line\"><span class=\"comment\">// 遍历新数组,indexOf 返回判断 -1, 即不存在就 push()</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr3.length; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (newArr.indexOf(arr3[i]) == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    newArr.push(arr3[i]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(newArr);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"七-函数\"><a href=\"#七-函数\" class=\"headerlink\" title=\"七. 函数\"></a>七. 函数</h1><h2 id=\"1-为什么要有函数\"><a href=\"#1-为什么要有函数\" class=\"headerlink\" title=\"(1) 为什么要有函数\"></a>(1) 为什么要有函数</h2><p>如果要在多个地方求 1-100 之间所有数的和，应该怎么做？</p>\n<h2 id=\"2-什么是函数\"><a href=\"#2-什么是函数\" class=\"headerlink\" title=\"(2) 什么是函数\"></a>(2) 什么是函数</h2><p>把一段相对独立的具有特定功能的代码块封装起来，形成一个独立实体，就是函数。<br>起个名字（函数名），在后续开发中可以反复调用。<br>函数的作用就是封装一段代码，将来可以重复使用。</p>\n<h2 id=\"3-函数的定义\"><a href=\"#3-函数的定义\" class=\"headerlink\" title=\"(3) 函数的定义\"></a>(3) 函数的定义</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1.具名函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">name</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;name&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2.匿名函数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> fun = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;fun&quot;</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-函数的调用\"><a href=\"#4-函数的调用\" class=\"headerlink\" title=\"(4) 函数的调用\"></a>(4) 函数的调用</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 函数调用，加 (),即函数名();</span></span><br><span class=\"line\"><span class=\"comment\">// 特点：函数体只有在调用的时候才会执行，调用需要()进行调用。可以调用多次(重复使用)</span></span><br><span class=\"line\">name();</span><br><span class=\"line\">fun();</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 声明函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sayHi</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;吃了没？&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 调用函数</span></span><br><span class=\"line\">sayHi();</span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"comment\">// 求1-100之间所有数的和</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getSum</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span>  i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++) &#123;</span><br><span class=\"line\">    sum += i;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(sum);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 调用</span></span><br><span class=\"line\">getSum();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-函数的参数\"><a href=\"#5-函数的参数\" class=\"headerlink\" title=\"(5) 函数的参数\"></a>(5) 函数的参数</h2><p><strong>形参和实参</strong></p>\n<ol>\n<li>形式参数：在声明一个函数的时候，为了函数的功能更加灵活，有些值是固定不了的，对于这些固定不了的值。我们可以给函数设置参数。这个参数没有具体的值，仅仅起到一个占位置的作用，我们通常称之为形式参数，也叫形参</li>\n<li>实际参数：如果函数在声明时，设置了形参，那么在函数调用的时候就需要传入对应的参数，我们把传入的参数叫做实际参数，也叫实参。</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> x = <span class=\"number\">5</span>,</span><br><span class=\"line\">  y = <span class=\"number\">6</span>;</span><br><span class=\"line\">fn(x, y);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a + b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//x,y实参，有具体的值。函数执行的时候会把x,y复制一份给函数内部的a和b，函数内部的值是复制的新值，无法修改外部的x,y</span></span><br><span class=\"line\"><span class=\"comment\">// 不传值为 undefined;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-函数的返回值\"><a href=\"#6-函数的返回值\" class=\"headerlink\" title=\"(6) 函数的返回值\"></a>(6) 函数的返回值</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 函数通过return返回一个返回值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">re</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> e;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(re(<span class=\"number\">1</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回值总结</span></span><br><span class=\"line\"><span class=\"comment\">// 1.如果函数没有使用 return语句 ，那么函数有默认的返回值：undefined</span></span><br><span class=\"line\"><span class=\"comment\">// 2.如果函数使用 return语句，那么跟再 return 后面的值，就成了函数的返回值</span></span><br><span class=\"line\"><span class=\"comment\">// 3.如果函数使用 return语句，但是return后面没有任何值，那么函数的返回值也是：undefined</span></span><br><span class=\"line\"><span class=\"comment\">// 4.函数使用 return 语句后，这个函数会在执行完 return 语句之后停止并立即退出，也就是说 return 后面的所有其他代码都不会再执行</span></span><br><span class=\"line\"><span class=\"comment\">// 推荐的做法是要么让函数始终都返回一个值，要么永远都不要返回值</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 求阶乘</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">jieCh</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> j = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">      j *= i;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> j;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(jieCh(<span class=\"number\">4</span>));</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"函数案例\"><a href=\"#函数案例\" class=\"headerlink\" title=\"函数案例\"></a>函数案例</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 求 1-n 之间所有的和</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sumN</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">  sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">    sum += i;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(sum);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">sumN(<span class=\"number\">3</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 圆的面积</span></span><br><span class=\"line\"><span class=\"comment\">// toFixed : 四舍五入,指定小数位数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">circle</span>(<span class=\"params\">r</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log((<span class=\"built_in\">Math</span>.PI * r * r).toFixed(<span class=\"number\">2</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">circle(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 求俩数中的最大值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getMaxNum</span>(<span class=\"params\">numA, numB</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (numA &gt; numB) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;最大值 : &quot;</span> + numA);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (numA &lt; numB) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;最大值 : &quot;</span> + numB);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(numA + <span class=\"string\">&quot;=&quot;</span> + numB);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">getMaxNum(<span class=\"number\">2</span>, <span class=\"number\">3</span>);</span><br><span class=\"line\">getMaxNum(<span class=\"number\">2</span>, <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 求三个数的最大值</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getMaxNumInThreeNum</span>(<span class=\"params\">numX, numY, numZ</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (numX == numY) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (numX == numZ) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;三者相等&quot;</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (numX &gt; numZ) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;最大值 ：&quot;</span> + numX);</span><br><span class=\"line\">      <span class=\"comment\">// 或者: console.log(&quot;最大值 ：&quot; + numY);</span></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;最大值 : &quot;</span> + numZ);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (numX &gt; numY) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (numX &gt; numZ) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;最大值 : &quot;</span> + numX);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;最大值 : &quot;</span> + numZ);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (numY &gt; numZ) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;最大值 ：&quot;</span> + numY);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;最大值 ：&quot;</span> + numZ);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">getMaxNumInThreeNum(<span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 判断一个数是否为素数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isPrime</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (n == <span class=\"number\">0</span> || n == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(n + <span class=\"string\">&quot; 是素数&quot;</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (n == <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(n + <span class=\"string\">&quot; 不是素数&quot;</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">2</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (n % i != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(n + <span class=\"string\">&quot; 是素数&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(n + <span class=\"string\">&quot; 不是素数&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">break</span>;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">isPrime(<span class=\"number\">4</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"作业-1\"><a href=\"#作业-1\" class=\"headerlink\" title=\"作业\"></a>作业</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 作业1：</span></span><br><span class=\"line\"><span class=\"comment\">// 数组去重，返回一个新数组</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">duplicateRemoval</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> newArr = [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (newArr.indexOf(arr[i]) == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      newArr.push(arr[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> newArr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(duplicateRemoval(arr1));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 作业2：</span></span><br><span class=\"line\"><span class=\"comment\">// 将数组[10,1,35,61,89,36,55]冒泡排序，从小到大</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = [<span class=\"number\">10</span>, <span class=\"number\">1</span>, <span class=\"number\">35</span>, <span class=\"number\">61</span>, <span class=\"number\">89</span>, <span class=\"number\">36</span>, <span class=\"number\">55</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr2.length - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; arr2.length - <span class=\"number\">1</span> - i; j++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr2[j] &gt; arr2[j + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> temp = arr2[j];</span><br><span class=\"line\">      arr2[j] = arr2[j + <span class=\"number\">1</span>];</span><br><span class=\"line\">      arr2[j + <span class=\"number\">1</span>] = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 作业3：</span></span><br><span class=\"line\"><span class=\"comment\">// 求1!+2!+3!+....+n!</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sumJieCh</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> sumJie = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"comment\">// n 轮</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 每轮从 1 开始累乘</span></span><br><span class=\"line\">    jie = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">1</span>; j &lt;= i; j++) &#123;</span><br><span class=\"line\">      jie *= j;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sumJie += jie;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> sumJie;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sumJieCh(<span class=\"number\">1</span>), sumJieCh(<span class=\"number\">2</span>), sumJieCh(<span class=\"number\">3</span>), sumJieCh(<span class=\"number\">4</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 作业4：</span></span><br><span class=\"line\"><span class=\"comment\">// 输入一个年份，判断是否是闰年[闰年：能被4整数并且不能被100整数，或者能被400整数]</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isLeapYear</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> year = prompt(<span class=\"string\">&quot;请输入年份&quot;</span>);</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (year % <span class=\"number\">4</span> == <span class=\"number\">0</span> &amp;&amp; year % <span class=\"number\">100</span> != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(year + <span class=\"string\">&quot; 是闰年&quot;</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (year % <span class=\"number\">400</span> == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(year + <span class=\"string\">&quot; 是世纪闰年&quot;</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(year + <span class=\"string\">&quot; 不是闰年&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">isLeapYear();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 作业5：</span></span><br><span class=\"line\"><span class=\"comment\">// 输入某年某月某日，判断这一天是这一年的第几天？（不用做）</span></span><br><span class=\"line\"><span class=\"comment\">// 😁</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 作业6：</span></span><br><span class=\"line\"><span class=\"comment\">// 利用函数的返回值，求1+2+3+4+………+n</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> result = <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">    result += i;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum(<span class=\"number\">3</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 作业7：</span></span><br><span class=\"line\"><span class=\"comment\">// 斐波那契数列函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fibonacci</span>(<span class=\"params\">n</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> f = [<span class=\"number\">1</span>, <span class=\"number\">1</span>];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; n - <span class=\"number\">2</span>; i++) &#123;</span><br><span class=\"line\">    f.push(f[i] + f[i + <span class=\"number\">1</span>]);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> f;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(fibonacci(<span class=\"number\">5</span>));</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 冒泡排序</span></span><br><span class=\"line\"><span class=\"comment\">// 从小到大</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">6</span>, <span class=\"number\">0</span>, <span class=\"number\">3</span>, <span class=\"number\">8</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">9</span>, <span class=\"number\">7</span>];</span><br><span class=\"line\"><span class=\"comment\">// 第一层 for 循环是比较多少轮</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr1.length - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 第二层 for 循环是每轮比较多少次,递减</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; arr1.length - <span class=\"number\">1</span> - i; j++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr1[j] &gt; arr1[j + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> temp = arr1[j + <span class=\"number\">1</span>];</span><br><span class=\"line\">      arr1[j + <span class=\"number\">1</span>] = arr1[j];</span><br><span class=\"line\">      arr1[j] = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr1);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 从大到小</span></span><br><span class=\"line\"><span class=\"comment\">// 俩数判断后交换顺序改一下就行</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr2 = [<span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">6</span>, <span class=\"number\">0</span>, <span class=\"number\">3</span>, <span class=\"number\">8</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">9</span>, <span class=\"number\">7</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr2.length - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; arr2.length - <span class=\"number\">1</span> - i; j++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (arr2[j] &lt; arr2[j + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">var</span> temp = arr2[j + <span class=\"number\">1</span>];</span><br><span class=\"line\">      arr2[j + <span class=\"number\">1</span>] = arr2[j];</span><br><span class=\"line\">      arr2[j] = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr2);</span><br></pre></td></tr></table></figure>\n\n<!-- -------------------------------- -->\n\n<h1 id=\"八-预解析\"><a href=\"#八-预解析\" class=\"headerlink\" title=\"八. 预解析\"></a>八. 预解析</h1><p><code>JavaScript</code> 引擎在对 <code>JavaScript</code> 代码进行解释执行之前，会对 <code>JavaScript</code> 代码进行预解析，在预解析阶段，会将以关键字 <code>var</code> 和 <code>function</code> 开头的语句块提前进行处理。<br>当变量和函数的声明处在作用域比较靠后的位置的时候，变量和函数的声明会被提升到作用域的开头。</p>\n<h2 id=\"1-函数提升\"><a href=\"#1-函数提升\" class=\"headerlink\" title=\"(1) 函数提升\"></a>(1) 函数提升</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func();</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  alert(<span class=\"string\">&quot;fun&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 由于 JavaScript 的预解析机制，上面的代码就等效于：</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  alert(<span class=\"string\">&quot;fun&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-变量提升\"><a href=\"#2-变量提升\" class=\"headerlink\" title=\"(2) 变量提升\"></a>(2) 变量提升</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 变量声明被提升,赋值并没有提升</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(e); <span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> e = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"comment\">// 相当于</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> e;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(e);</span><br><span class=\"line\">e = <span class=\"number\">1</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-函数同名\"><a href=\"#3-函数同名\" class=\"headerlink\" title=\"(3) 函数同名\"></a>(3) 函数同名</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">func1();</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;func1&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func1();</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;func2&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 由于预解析机制，func1的声明会被提升，提升之后的代码为</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">func1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;func2&quot;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func1();</span><br><span class=\"line\">func1();</span><br><span class=\"line\"><span class=\"comment\">// 同名的函数，后面的会覆盖前面的，所以两次输出结果都是 func2</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-变量和函数同名\"><a href=\"#4-变量和函数同名\" class=\"headerlink\" title=\"(4) 变量和函数同名\"></a>(4) 变量和函数同名</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(f);</span><br><span class=\"line\"><span class=\"keyword\">var</span> f = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">f</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">// 当出现变量声明和函数同名的时候，只会对函数声明进行提升，变量会被忽略。所以上面的代码的输出结果为</span></span><br><span class=\"line\"><span class=\"comment\">// ƒ f() &#123;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">num</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  alert(num);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">num(); <span class=\"comment\">// num is not a function</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 当变量和函数同名时,只会对函数声明进行提升，变量会被忽略。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 同名的变量和函数，变量会覆盖函数，导致函数无法调用</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 通俗来讲就是只要出现同名的函数和变量，优先对函数进行提升。但没用，变量会覆盖函数，最终只有变量声明语句生效</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 按照常规的书写顺序，同名的函数与变量，变量会覆盖函数</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"练习\"><a href=\"#练习\" class=\"headerlink\" title=\"练习\"></a>练习</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 先提升</span></span><br><span class=\"line\"><span class=\"comment\">// 再看顺序</span></span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">3</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(b);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> b = <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"comment\">// 变量提升后的顺序:</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">b</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> b;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\">  a = <span class=\"number\">3</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(b);</span><br><span class=\"line\">  b = <span class=\"number\">2</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test(<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"comment\">// 所以结果为</span></span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// ƒ b() &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(b);</span><br><span class=\"line\">  <span class=\"keyword\">var</span> b = <span class=\"number\">234</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(b);</span><br><span class=\"line\">  a = <span class=\"number\">123</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a;</span><br><span class=\"line\">  b = <span class=\"number\">234</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> b = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test();</span><br><span class=\"line\"><span class=\"comment\">// 变量提升后的顺序:</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">test</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> b;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">a</span>(<span class=\"params\"></span>) </span>&#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(b);</span><br><span class=\"line\">  b = <span class=\"number\">234</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(b);</span><br><span class=\"line\">  a = <span class=\"number\">123</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\">  b = <span class=\"number\">234</span>;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> b = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;&#125;;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(b);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">test();</span><br><span class=\"line\"><span class=\"comment\">// 所以结果为:</span></span><br><span class=\"line\"><span class=\"comment\">// ƒ a() &#123;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">// undefined</span></span><br><span class=\"line\"><span class=\"comment\">// 234</span></span><br><span class=\"line\"><span class=\"comment\">// 123</span></span><br><span class=\"line\"><span class=\"comment\">// 123</span></span><br><span class=\"line\"><span class=\"comment\">// ƒ () &#123;&#125;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-预解析是分作用域的\"><a href=\"#5-预解析是分作用域的\" class=\"headerlink\" title=\"(5) 预解析是分作用域的\"></a>(5) 预解析是分作用域的</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">m</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> m = <span class=\"string\">&quot;m&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(m); <span class=\"comment\">// m 未定义</span></span><br><span class=\"line\"><span class=\"comment\">// 解析后的代码:</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">m</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> m;</span><br><span class=\"line\">  m = <span class=\"string\">&quot;m&quot;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(m); <span class=\"comment\">// m 未定义</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-函数表达式不会提升\"><a href=\"#6-函数表达式不会提升\" class=\"headerlink\" title=\"(6) 函数表达式不会提升\"></a>(6) 函数表达式不会提升</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fun1();</span><br><span class=\"line\"><span class=\"keyword\">var</span> fun1 = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;666&quot;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">// 结果是 : func1 is not a function，原因就是函数表达式，并不会被提升。只是简单地当做变量声明进行了处理，如下</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> fun1;</span><br><span class=\"line\">fun1();</span><br><span class=\"line\">fun1 = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;666&quot;</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"7-作用域\"><a href=\"#7-作用域\" class=\"headerlink\" title=\"(7)作用域\"></a>(7)作用域</h2><h3 id=\"1-全局作用域\"><a href=\"#1-全局作用域\" class=\"headerlink\" title=\"(1) 全局作用域\"></a>(1) 全局作用域</h3><p>直接编写在 <code>script</code> 标签之中的 <code>JS</code> 代码，都是全局作用域；或者是一个单独的 <code>JS</code> 文件中的。<br>全局作用域在页面打开时创建，页面关闭时销毁；<br>在全局作用域中有一个全局对象 <code>window</code>（代表的是一个浏览器的窗口，由浏览器创建），可以直接使用。<br>所有创建的变量都会作为 <code>window</code> 对象的属性保存。</p>\n<h3 id=\"2-局部作用域-函数作用域\"><a href=\"#2-局部作用域-函数作用域\" class=\"headerlink\" title=\"(2) 局部作用域 ( 函数作用域 )\"></a>(2) 局部作用域 ( 函数作用域 )</h3><p>在函数内部就是局部作用域，这个代码的名字只在函数的内部起作用</p>\n<h3 id=\"3-隐式全局变量\"><a href=\"#3-隐式全局变量\" class=\"headerlink\" title=\"(3) 隐式全局变量\"></a>(3) 隐式全局变量</h3><p>声明变量使用<code>var</code>, 如果不使用 <code>var</code> 声明的变量就是全局变量( 禁用 )<br>因为在任何代码结构中都可以使用该语法. 那么再代码维护的时候会有问题. 所以除非特殊原因不要这么用.</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fun2();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(c);</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fun2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\">  b = <span class=\"number\">1</span>;</span><br><span class=\"line\">  c = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(a);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(b);</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(c);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fun2 执行后获得隐式全局变量 <span class=\"string\">`b`</span> 和 <span class=\"string\">`c`</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"九-对象\"><a href=\"#九-对象\" class=\"headerlink\" title=\"九. 对象\"></a>九. 对象</h1><h2 id=\"1-为什么要有对象\"><a href=\"#1-为什么要有对象\" class=\"headerlink\" title=\"(1) 为什么要有对象\"></a>(1) 为什么要有对象</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">printPerson</span>(<span class=\"params\">name, age, sex....</span>) </span>&#123;&#125;</span><br><span class=\"line\"><span class=\"comment\">// 函数的参数如果特别多的话，可以使用对象简化</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">printPerson</span>(<span class=\"params\">person</span>) </span>&#123;  </span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(person.name);  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-什么是对象\"><a href=\"#2-什么是对象\" class=\"headerlink\" title=\"(2) 什么是对象\"></a>(2) 什么是对象</h2><p>现实生活中：万物皆对象，对象是一个具体的事物，一个具体的事物就会有行为和特征。<br>举例： 一辆车、一部手机、一台电脑、一张桌子<br>车是一类事物，门口停的那辆车才是对象。特征：红色、四个轮子，行为：驾驶、刹车</p>\n<h2 id=\"3-JavaScript-中的对象\"><a href=\"#3-JavaScript-中的对象\" class=\"headerlink\" title=\"(3) JavaScript 中的对象\"></a>(3) JavaScript 中的对象</h2><p>JavaScript 的对象是无序属性的集合。<br>其属性可以包含基本值、对象或函数。对象就是一组没有顺序的值。我们可以把 JavaScript 中的对象想象成键值对，其中值可以是数据和函数。<br><code>Key</code> = <code>value</code><br>对象的行为和特征<br>特征—属性<br>行为—方法<br>Tips：<br>事物的特征在对象中用属性来表示。<br>事物的行为在对象中用方法来表示。</p>\n<h2 id=\"4-对象创建方式\"><a href=\"#4-对象创建方式\" class=\"headerlink\" title=\"(4) 对象创建方式\"></a>(4) 对象创建方式</h2><h3 id=\"1-对象字面量\"><a href=\"#1-对象字面量\" class=\"headerlink\" title=\"1. 对象字面量\"></a>1. 对象字面量</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;zs&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">18</span>,</span><br><span class=\"line\">  <span class=\"attr\">sex</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  fun=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;fun&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-new-Object-创建对象\"><a href=\"#2-new-Object-创建对象\" class=\"headerlink\" title=\"2. new Object()创建对象\"></a>2. new Object()创建对象</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\">person.name = <span class=\"string\">&quot;lisi&quot;</span>;</span><br><span class=\"line\">person.age = <span class=\"number\">35</span>;</span><br><span class=\"line\">person.job = <span class=\"string\">&quot;codeman&quot;</span>;</span><br><span class=\"line\">person.say = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;Hello&quot;</span>);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-工厂函数创建对象\"><a href=\"#3-工厂函数创建对象\" class=\"headerlink\" title=\"3. 工厂函数创建对象\"></a>3. 工厂函数创建对象</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createPerson</span>(<span class=\"params\">name, age, job</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> person = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\">  person.name = name;</span><br><span class=\"line\">  person.age = age;</span><br><span class=\"line\">  person.job = job;</span><br><span class=\"line\">  person.say = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;Hello&quot;</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> person;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> p1 = createPerson(<span class=\"string\">&quot;张三&quot;</span>, <span class=\"number\">22</span>, <span class=\"string\">&quot;actor&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-自定义构造函数\"><a href=\"#4-自定义构造函数\" class=\"headerlink\" title=\"4. 自定义构造函数\"></a>4. 自定义构造函数</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age, job</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.job = job;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.say = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;Hello&quot;</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">&quot;张三&quot;</span>, <span class=\"number\">22</span>, <span class=\"string\">&quot;actor&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-属性和方法\"><a href=\"#5-属性和方法\" class=\"headerlink\" title=\"(5) 属性和方法\"></a>(5) 属性和方法</h2><ol>\n<li><p>如果一个变量属于一个对象所有，那么该变量就可以称之为该对象的一个属性</p>\n</li>\n<li><p>如果一个函数属于一个对象所有，那么该函数就可以称之为该对象的一个方法</p>\n</li>\n</ol>\n<h2 id=\"6-new-关键字\"><a href=\"#6-new-关键字\" class=\"headerlink\" title=\"(6) new 关键字\"></a>(6) new 关键字</h2><p>构造函数，是一种特殊的函数。主要用来在创建对象时初始化对象，即为对象成员变量赋初始值，总与 new 运算符一起使用在创建对象的语句中。</p>\n<ol>\n<li><p>构造函数用于创建一类对象，首字母要大写。</p>\n</li>\n<li><p>构造函数要和 <code>new</code> 一起使用才有意义。</p>\n</li>\n</ol>\n<p><strong><code>new</code> 在执行时会做四件事情：</strong></p>\n<p>1、new 会在内存中创建一个新的空对象<br>2、new 会让 this 指向这个新的对象<br>3、new 会返回这个新对象</p>\n<h2 id=\"7-this\"><a href=\"#7-this\" class=\"headerlink\" title=\"(7) this\"></a>(7) this</h2><p>函数内部的 <code>this</code> 几个特点：</p>\n<ol>\n<li>函数在定义的时候 <code>this</code> 是不确定的，只有在调用的时候才可以确定</li>\n<li>一般函数直接执行，内部 <code>this</code> 指向全局 window</li>\n<li>函数作为一个对象的方法，被该对象所调用，那么 <code>this</code> 指向的是该对象</li>\n<li>构造函数中的 <code>this</code> 其实是一个隐式对象，类似一个初始化的模型，所有方法和属性都挂载到了这个隐式对象身上，后续通过 new 关键字来调用，从而实现实例化</li>\n</ol>\n<h2 id=\"8-对象的使用\"><a href=\"#8-对象的使用\" class=\"headerlink\" title=\"(8) 对象的使用\"></a>(8) 对象的使用</h2><p>遍历对象的属性<br>通过 for..in 语法可以遍历一个对象<br>删除对象的属性</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 通过 for ... in 遍历对象的属性</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj1 = &#123;</span><br><span class=\"line\">  <span class=\"attr\">name</span>: <span class=\"string\">&quot;man&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">age</span>: <span class=\"number\">20</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> obj1) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(key);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 遍历对象的属性值</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> obj1) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(obj1[key]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 删除对象的属性</span></span><br><span class=\"line\"><span class=\"keyword\">delete</span> obj1.name;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"十-JavaScript-错误\"><a href=\"#十-JavaScript-错误\" class=\"headerlink\" title=\"十. JavaScript  错误\"></a>十. JavaScript  错误</h1><h2 id=\"1-JavaScript-try-和-catch\"><a href=\"#1-JavaScript-try-和-catch\" class=\"headerlink\" title=\"(1) JavaScript try 和 catch\"></a>(1) JavaScript <code>try</code> 和 <code>catch</code></h2><p><code>try</code>  语句允许我们定义在执行时进行错误测试的代码块。<br><code>catch</code>  语句允许我们定义当 <code>try</code> 代码块发生错误时，所执行的代码块。<br><code>JavaScript</code> 语句  <code>try</code>  和  <code>catch</code>  是成对出现的。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">t</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    alertt(<span class=\"string\">&quot;666&quot;</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(error.message); <span class=\"comment\">// alertt is not defined</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">t();</span><br><span class=\"line\"><span class=\"comment\">// catch 块会捕捉到 try 块中的错误，会执行 catch 里的部分</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-finally-语句\"><a href=\"#2-finally-语句\" class=\"headerlink\" title=\"(2) finally 语句\"></a>(2) finally 语句</h2><p><code>finally</code> 语句不论之前的 <code>try</code> 和 <code>catch</code> 中是否产生异常都会执行该代码块</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">t</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    alertt(<span class=\"string\">&quot;666&quot;</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(error.message); <span class=\"comment\">// alertt is not defined</span></span><br><span class=\"line\">  &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;finally&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">t();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-Throw-语句\"><a href=\"#3-Throw-语句\" class=\"headerlink\" title=\"(3) Throw 语句\"></a>(3) Throw 语句</h2><p><code>throw</code> 语句允许我们创建自定义错误。<br>正确的技术术语是：创建或抛出异常（exception）。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 检测输入变量的值。如果值是错误的，会抛出一个异常（错误）。catch 会捕捉到这个错误，并显示一段自定义的错误消息</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myFunction</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> x = prompt();</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x == <span class=\"string\">&quot;&quot;</span>) <span class=\"keyword\">throw</span> <span class=\"string\">&quot;值为空&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">isNaN</span>(x)) <span class=\"keyword\">throw</span> <span class=\"string\">&quot;请输入数字&quot;</span>;</span><br><span class=\"line\">    x = <span class=\"built_in\">Number</span>(x);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &lt; <span class=\"number\">5</span>) <span class=\"keyword\">throw</span> <span class=\"string\">&quot;太小&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (x &gt; <span class=\"number\">10</span>) <span class=\"keyword\">throw</span> <span class=\"string\">&quot;太大&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;good&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">myFunction();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"作业-2\"><a href=\"#作业-2\" class=\"headerlink\" title=\"作业\"></a>作业</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 作业1;</span></span><br><span class=\"line\"><span class=\"comment\">// 创建一个电脑对象,有颜色,有重量,有品牌,有型号,可以看电影,可以听音乐,可以打游戏,可以敲代码;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> computer = &#123;</span><br><span class=\"line\">  <span class=\"attr\">color</span>: <span class=\"string\">&quot;#494f5c&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">weight</span>: <span class=\"string\">&quot;120&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">brand</span>: <span class=\"string\">&quot;Brand&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">model</span>: <span class=\"string\">&quot;model&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">seeMovies</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;看电影&quot;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">listenMusics</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;听音乐&quot;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">gaming</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;打游戏&quot;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">coding</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;coding&quot;</span>);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(computer);</span><br><span class=\"line\">computer.gaming();</span><br><span class=\"line\">computer.coding();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 作业2;</span></span><br><span class=\"line\"><span class=\"comment\">// 创建一个按钮对象, 宽, 高, 背景颜色, 点击行为, 按钮有鼠标进入的行为;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> button = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\">button.width = <span class=\"string\">&quot;120px&quot;</span>;</span><br><span class=\"line\">button.height = <span class=\"string\">&quot;40px&quot;</span>;</span><br><span class=\"line\">button.backgroundColor = <span class=\"string\">&quot;#494f5c&quot;</span>;</span><br><span class=\"line\">button.click = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;click&quot;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">button.hover = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;hover&quot;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(button);</span><br><span class=\"line\">button.click();</span><br><span class=\"line\">button.hover();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 作业3;</span></span><br><span class=\"line\"><span class=\"comment\">// 创建一个车的对象, 有重量, 颜色, 牌子, 可以载人, 拉货;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">createCar</span>(<span class=\"params\">weight, color, brand, canBeManned, pickUpTheGoods</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> car = <span class=\"keyword\">new</span> <span class=\"built_in\">Object</span>();</span><br><span class=\"line\">  car.weight = weight;</span><br><span class=\"line\">  car.color = color;</span><br><span class=\"line\">  car.brand = brand;</span><br><span class=\"line\">  car.canBeManned = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;可以载人&quot;</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  car.pickUpTheGoods = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;可拉货&quot;</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> car;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> car1 = createCar(<span class=\"string\">&quot;2000kg&quot;</span>, <span class=\"string\">&quot;#494f5c&quot;</span>, <span class=\"string\">&quot;brand&quot;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(car1);</span><br><span class=\"line\">car1.canBeManned();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 作业4;</span></span><br><span class=\"line\"><span class=\"comment\">// 利用对象属性不能重复的特性给数组去重;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">9</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">duplicateRemoval</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> obj = &#123;&#125;;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> newArr = [];</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!obj[arr[i]]) &#123;</span><br><span class=\"line\">      newArr.push(arr[i]);</span><br><span class=\"line\">      obj[arr[i]] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> newArr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(duplicateRemoval(arr));</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"十一-js-内置对象\"><a href=\"#十一-js-内置对象\" class=\"headerlink\" title=\"十一. js 内置对象\"></a>十一. js 内置对象</h1><h2 id=\"1-内置对象\"><a href=\"#1-内置对象\" class=\"headerlink\" title=\"1.内置对象\"></a>1.内置对象</h2><p><code>JavaScript</code> 中的对象分为 4 种：内置对象、浏览器对象、自定义对象、DOM 对象。<br><code>JavaScript</code> 提供多个内置对象：Math/Array/Number/String/Boolean …<br>对象只是带有属性和方法的特殊数据类型。学习一个内置对象的使用，只要学会其常用的成员的使用(通过查文档学习)。内置对象的方法很多，我们只需要知道内置对象提供的常用方法，使用的时候查询文档。</p>\n<h2 id=\"2-Math-对象\"><a href=\"#2-Math-对象\" class=\"headerlink\" title=\"2. Math 对象\"></a>2. Math 对象</h2><p><code>Math</code> 对象不是构造函数，它具有数学常数和函数的属性和方法，都以静态成员的方式提供。<br>跟数学相关的运算来找 <code>Math</code> 中的成员(求绝对值，取整)。</p>\n<h3 id=\"1-常用属性\"><a href=\"#1-常用属性\" class=\"headerlink\" title=\"(1) 常用属性\"></a>(1) 常用属性</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Math</span>.PI; <span class=\"comment\">// 圆周率</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-常用方法\"><a href=\"#2-常用方法\" class=\"headerlink\" title=\"(2) 常用方法\"></a>(2) 常用方法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Math</span>.random(); <span class=\"comment\">// 生成随机数</span></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.floor(); <span class=\"comment\">// 向下取整</span></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.ceil(); <span class=\"comment\">// 向上取整</span></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.round(); <span class=\"comment\">// 取整，四舍五入</span></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.abs(); <span class=\"comment\">// 绝对值</span></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.max(); <span class=\"comment\">// 最大值</span></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.min(); <span class=\"comment\">// 最小值</span></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.sin(); <span class=\"comment\">// 正弦</span></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.cos(); <span class=\"comment\">// 余弦</span></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.pow(); <span class=\"comment\">// 求指数次幂</span></span><br><span class=\"line\"><span class=\"built_in\">Math</span>.sqrt(); <span class=\"comment\">// 求平方根</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-Date-对象\"><a href=\"#3-Date-对象\" class=\"headerlink\" title=\"3. Date 对象\"></a>3. Date 对象</h2><p>创建 <code>Date</code> 实例用来处理日期和时间。<code>Date</code> 对象基于 1970 年 1 月 1 日（世界标准时间）起的毫秒数。</p>\n<h3 id=\"1-创建日期对象\"><a href=\"#1-创建日期对象\" class=\"headerlink\" title=\"(1) 创建日期对象\"></a>(1) 创建日期对象</h3><p><code>Date()</code> 是构造函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(); <span class=\"comment\">// 获取到的是 1970 年 1 月 1 日至今的毫秒数</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-日期原始值\"><a href=\"#2-日期原始值\" class=\"headerlink\" title=\"(2) 日期原始值\"></a>(2) 日期原始值</h3><p>getTime()：获取 1970 年 1 月 1 日至今的毫秒数<br>valueOf();原始值，获取 1970 年 1 月 1 日至今的毫秒数</p>\n<h3 id=\"3-获取日期指定部分\"><a href=\"#3-获取日期指定部分\" class=\"headerlink\" title=\"(3) 获取日期指定部分\"></a>(3) 获取日期指定部分</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getMilliseconds();</span><br><span class=\"line\">getSeconds(); <span class=\"comment\">// 返回 0-59</span></span><br><span class=\"line\">getMinutes(); <span class=\"comment\">// 返回 0-59</span></span><br><span class=\"line\">getHours(); <span class=\"comment\">// 返回 0-23</span></span><br><span class=\"line\">getDay(); <span class=\"comment\">// 返回星期几 0 周日   6 周 6</span></span><br><span class=\"line\">getDate(); <span class=\"comment\">// 返回当前月的第几天</span></span><br><span class=\"line\">getMonth(); <span class=\"comment\">// 返回月份，从 0 开始</span></span><br><span class=\"line\">getFullYear(); <span class=\"comment\">//返回 4 位的年份 如 2016</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-Array-对象\"><a href=\"#4-Array-对象\" class=\"headerlink\" title=\"4. Array 对象\"></a>4. Array 对象</h2><h3 id=\"1-创建数组对象的两种方式\"><a href=\"#1-创建数组对象的两种方式\" class=\"headerlink\" title=\"(1) 创建数组对象的两种方式\"></a>(1) 创建数组对象的两种方式</h3><p>1、字面量方式<br>2、new Array()</p>\n<h3 id=\"2-检测一个对象是否是数组\"><a href=\"#2-检测一个对象是否是数组\" class=\"headerlink\" title=\"(2) 检测一个对象是否是数组\"></a>(2) 检测一个对象是否是数组</h3><p><code>instanceof</code> 如果返回 <code>true</code> 就是数组，<code>false</code> 是非数组 ( 这玩意儿很少用 )<br><code>Array.isArray()</code> 如果返回 <code>true</code> 就是数组，<code>false</code> 是非数组 ( 常用 )<br><code>valueOf()</code> 返回数组对象本身</p>\n<h3 id=\"3-栈操作-先进后出\"><a href=\"#3-栈操作-先进后出\" class=\"headerlink\" title=\"(3) 栈操作 (先进后出)\"></a>(3) 栈操作 (先进后出)</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">push(); <span class=\"comment\">// 添加元素</span></span><br><span class=\"line\">pop(); <span class=\"comment\">// 删除元素</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/js/stack.png\" alt=\"stack\"></p>\n<h3 id=\"4-队列操作-先进先出\"><a href=\"#4-队列操作-先进先出\" class=\"headerlink\" title=\"(4) 队列操作 (先进先出)\"></a>(4) 队列操作 (先进先出)</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">shift(); <span class=\"comment\">// 删除元素</span></span><br><span class=\"line\">unshift(); <span class=\"comment\">// 添加元素</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-排序方法\"><a href=\"#5-排序方法\" class=\"headerlink\" title=\"(5) 排序方法\"></a>(5) 排序方法</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reverse(); <span class=\"comment\">// 翻转数组</span></span><br><span class=\"line\">sort(); <span class=\"comment\">// 只看第一位数来排序</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//   var arr = [1, 2, 3, 4, 9, 8, 7, 6, 5];</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr1 = [<span class=\"number\">100</span>, <span class=\"number\">200</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">9</span>, <span class=\"number\">8</span>, <span class=\"number\">7</span>, <span class=\"number\">6</span>, <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr1.sort()); <span class=\"comment\">// 然而排序后的结果不是咱想要的</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>可以这样</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr1.sort(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a - b; <span class=\"comment\">// 从小到大排序</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> b - a; <span class=\"comment\">// 从大到小排序</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-操作方法\"><a href=\"#6-操作方法\" class=\"headerlink\" title=\"(6) 操作方法\"></a>(6) 操作方法</h3><h4 id=\"concat-把参数拼接到当前数组、-或者用于连接两个或多个数组\"><a href=\"#concat-把参数拼接到当前数组、-或者用于连接两个或多个数组\" class=\"headerlink\" title=\"concat() 把参数拼接到当前数组、  或者用于连接两个或多个数组\"></a><code>concat()</code> 把参数拼接到当前数组、  或者用于连接两个或多个数组</h4><h4 id=\"slice-start-end\"><a href=\"#slice-start-end\" class=\"headerlink\" title=\"slice(start,end)\"></a><code>slice(start,end)</code></h4><p>1、从 <code>start</code> 开始截取元素，到 <code>end</code> 结束，包括 <code>start</code>,不包括 <code>end</code>,返回新数组，<code>start</code>,<code>end</code> 是索引,<br>2、不会改变原始数组</p>\n<h4 id=\"splice\"><a href=\"#splice\" class=\"headerlink\" title=\"splice()\"></a><code>splice()</code></h4><p><code>splice(start,length)</code><br>1、从 <code>start</code> 开始截取元素，截取 <code>length</code> 个，,<code>返回新数组，start</code> 是索引,<code>length</code> 是个数, <strong>如果不写<code>length</code>参数,会从<code>start</code>一直删到最后</strong><br>2、会改变元素的数组</p>\n<h3 id=\"7-位置方法\"><a href=\"#7-位置方法\" class=\"headerlink\" title=\"(7) 位置方法\"></a>(7) 位置方法</h3><p><code>indexOf()</code> 寻找元素位置,返回第一次出现的位置的索引值,没有找到返回 -1，<br><code>lastIndexOf()</code>   从后往前找<br>上述方法只是查找顺序不一样 结果都是索引值</p>\n<h3 id=\"8-数组迭代方法\"><a href=\"#8-数组迭代方法\" class=\"headerlink\" title=\"(8) 数组迭代方法\"></a>(8) 数组迭代方法</h3><p>1、<code>forEach()</code> 方法用于调用数组的每个元素，并将元素传递给回调函数</p>\n<p>可以拿到每个数组中的值，没有返回值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">array.forEach(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">value, index</span>))</span></span><br><span class=\"line\"><span class=\"function\">// <span class=\"title\">value</span> 必需,当前元素</span></span><br><span class=\"line\"><span class=\"function\">// <span class=\"title\">Index</span> 可选,当前元素索引值</span></span><br></pre></td></tr></table></figure>\n\n<p>2、<code>every()</code>, <code>some()</code> 方法用于检测数组所有元素是否都符合指定条件（通过函数提供）<br><code>some()</code>,<code>every()</code> 方法的参数是一个回调函数，回调函数中的第一个参数是数组的元素，第二个参数是数组的索引<br><code>some()</code>,<code>every()</code> 方法都会返回新的数组</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> flag1 = arr3.every(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value, index</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> value &gt; <span class=\"number\">55</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(flag1);</span><br><span class=\"line\"><span class=\"keyword\">var</span> flag2 = arr3.some(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value, index</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> value &gt;= <span class=\"number\">88</span>;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(flag2);</span><br></pre></td></tr></table></figure>\n\n<p><code>every()</code> :判断回调函数中的表达式是否全部满足，如果满足，返回值就是 <code>true</code>,只要有一个不满足就是 <code>false</code></p>\n<p><code>some</code> 判断回调函数中的表达式是否有一个满足，如果至少一个满足，返回值就是 <code>true</code></p>\n<h3 id=\"9-清空数组\"><a href=\"#9-清空数组\" class=\"headerlink\" title=\"(9) 清空数组\"></a>(9) 清空数组</h3><h4 id=\"方式-1-推荐\"><a href=\"#方式-1-推荐\" class=\"headerlink\" title=\"方式 1 推荐\"></a>方式 1 推荐</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr = [];</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"方式-2\"><a href=\"#方式-2\" class=\"headerlink\" title=\"方式 2\"></a>方式 2</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.length = <span class=\"number\">0</span>;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"方式-3\"><a href=\"#方式-3\" class=\"headerlink\" title=\"方式 3\"></a>方式 3</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arr.splice(<span class=\"number\">0</span>, arr.length);</span><br><span class=\"line\"><span class=\"comment\">// 或者,不写 length ,会一直删到最后</span></span><br><span class=\"line\">arr.splice(<span class=\"number\">0</span>);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"10-数组转化字符串\"><a href=\"#10-数组转化字符串\" class=\"headerlink\" title=\"(10) 数组转化字符串\"></a>(10) 数组转化字符串</h3><p><code>join()</code> 将数组转化为字符串，以参数分割</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&quot;31423412&quot;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.split(<span class=\"string\">&quot;&quot;</span>).join()); <span class=\"comment\">// 3,1,4,2,3,4,1,2</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.split(<span class=\"string\">&quot;&quot;</span>).join(<span class=\"string\">&quot;&quot;</span>)); <span class=\"comment\">// 31423412</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.split(<span class=\"string\">&quot;&quot;</span>).join(<span class=\"string\">&quot;-&quot;</span>)); <span class=\"comment\">// 3-1-4-2-3-4-1-2</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-基本包装类型\"><a href=\"#5-基本包装类型\" class=\"headerlink\" title=\"5. 基本包装类型\"></a>5. 基本包装类型</h2><p>为了方便操作基本数据类型，<code>JavaScript</code> 还提供了三个特殊的引用类型：<code>String</code>,<code>Number</code>,<code>Boolean</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// s1是基本类型，基本类型是没有方法来操作的</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> s1 = <span class=\"string\">&#x27;zhangsan&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> s2 = s1.substring(<span class=\"number\">5</span>);</span><br><span class=\"line\">​</span><br><span class=\"line\"><span class=\"comment\">// 当调用 s1.substring(5) 的时候，先把 s1 包装成 String 类型的临时对象，再调用 substring 方法，最后销毁临时对象, 相当于：</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> s1 = <span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(<span class=\"string\">&#x27;zhangsan&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> s2 = s1.substring(<span class=\"number\">5</span>);</span><br><span class=\"line\">s1 = <span class=\"literal\">null</span>;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建基本包装类型的对象</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"number\">18</span>; <span class=\"comment\">//数值，基本类型</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"built_in\">Number</span>(<span class=\"string\">&quot;18&quot;</span>); <span class=\"comment\">//类型转换</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> num = <span class=\"keyword\">new</span> <span class=\"built_in\">Number</span>(<span class=\"number\">18</span>); <span class=\"comment\">//基本包装类型，对象</span></span><br><span class=\"line\"><span class=\"comment\">// Number 和 Boolean 基本包装类型基本不用，使用的话可能会引起歧义。例如：</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Boolean</span>(<span class=\"literal\">false</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> b2 = b1 &amp;&amp; <span class=\"literal\">true</span>; <span class=\"comment\">// 结果是 true, 因为 object &amp;&amp; true = true</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-String-对象\"><a href=\"#6-String-对象\" class=\"headerlink\" title=\"6. String 对象\"></a>6. String 对象</h2><h3 id=\"1-字符串的不可变\"><a href=\"#1-字符串的不可变\" class=\"headerlink\" title=\"(1) 字符串的不可变\"></a>(1) 字符串的不可变</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&quot;abc&quot;</span>;</span><br><span class=\"line\">str = <span class=\"string\">&quot;hello&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 当重新给 str 赋值的时候，常量 &#x27;abc&#x27;不会被修改，依然在内存中</span></span><br><span class=\"line\"><span class=\"comment\">// 重新给字符串赋值，会重新在内存中开辟空间，这个特点就是字符串的不可变</span></span><br><span class=\"line\"><span class=\"comment\">// 由于字符串的不可变，在大量拼接字符串的时候会有效率问题</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-创建字符串对象\"><a href=\"#2-创建字符串对象\" class=\"headerlink\" title=\"(2) 创建字符串对象\"></a>(2) 创建字符串对象</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"keyword\">new</span> <span class=\"built_in\">String</span>(<span class=\"string\">&quot;Hello World&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">// 获取字符串中字符的个数</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.length);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-字符串对象的常用方法\"><a href=\"#3-字符串对象的常用方法\" class=\"headerlink\" title=\"(3) 字符串对象的常用方法\"></a>(3) 字符串对象的常用方法</h3><p>字符串所有的方法，都不会修改字符串本身(字符串是不可变的)，操作完成会返回一个新的字符串</p>\n<h4 id=\"1-字符方法\"><a href=\"#1-字符方法\" class=\"headerlink\" title=\"1. 字符方法\"></a>1. 字符方法</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">charAt(); <span class=\"comment\">//获取指定位置处字符</span></span><br><span class=\"line\">charCodeAt(); <span class=\"comment\">//获取指定位置处字符的 ASCII 码</span></span><br><span class=\"line\">str[<span class=\"number\">0</span>]; <span class=\"comment\">//HTML5，IE8+支持 和 charAt()等效</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-字符串操作方法\"><a href=\"#2-字符串操作方法\" class=\"headerlink\" title=\"2. 字符串操作方法\"></a>2. 字符串操作方法</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">concat()   <span class=\"comment\">//拼接字符串，等效于+，+更常用</span></span><br><span class=\"line\">slice(start,end)   <span class=\"comment\">//从 start 位置开始，截取到 end 位置，end 取不到</span></span><br><span class=\"line\">substring(start,end) <span class=\"comment\">//从 start 位置开始，截取到 end 位置，end 取不到</span></span><br><span class=\"line\">substr(start,length)   <span class=\"comment\">//// 从 start 位置开始，截取 length 个字符</span></span><br><span class=\"line\">indexOf()   <span class=\"comment\">//返回指定内容在元字符串中的位置,,如果没有，返回-1；(从前往后，检索到第一个就结束)</span></span><br><span class=\"line\">lastIndexOf() <span class=\"comment\">//返回指定内容在元字符串中的位置,,如果没有，返回-1；(从后往前，检索到第一个就结束)</span></span><br><span class=\"line\">trim() <span class=\"comment\">//只能去除字符串前后的空白</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 大小写转换方法</span></span><br><span class=\"line\">toUpperCase() <span class=\"comment\">//转换大写</span></span><br><span class=\"line\">toLowerCase() <span class=\"comment\">//转换小写</span></span><br><span class=\"line\">search()<span class=\"comment\">//方法用于检索字符串中指定的子字符串，返回子字符串的起始位置</span></span><br><span class=\"line\">replace(old,<span class=\"keyword\">new</span>) <span class=\"comment\">//替换字符串替换字符串 new 替换 old</span></span><br><span class=\"line\">split() <span class=\"comment\">//分割字符串 返回的是一个数组。。数组的元素就是以参数的分割的</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>演示</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&quot;uy weiu ryqi w-u-q-wey82374192739    &quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.charAt(<span class=\"number\">0</span>)); <span class=\"comment\">// //获取指定位置处字符</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.charCodeAt(<span class=\"number\">0</span>)); <span class=\"comment\">//获取指定位置处字符的ASCII码</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str[<span class=\"number\">0</span>]); <span class=\"comment\">//HTML5，IE8+支持 和charAt()等效</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> str2 = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">str2 = str.concat(str); <span class=\"comment\">//拼接字符串，等效于+，+更常用</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str2);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.slice(<span class=\"number\">0</span>, <span class=\"number\">1</span>)); <span class=\"comment\">//从start位置开始，截取到end位置，end取不到</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.slice(<span class=\"number\">2</span>, <span class=\"number\">4</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.substring(<span class=\"number\">2</span>, <span class=\"number\">4</span>)); <span class=\"comment\">//从start位置开始，截取到end位置，end取不到</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.substr(<span class=\"number\">2</span>, <span class=\"number\">4</span>)); <span class=\"comment\">// 从start位置开始，截取 length 个字符</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.indexOf(<span class=\"string\">&quot;u&quot;</span>)); <span class=\"comment\">//返回指定内容在元字符串中的位置,,如果没有，返回-1；(从前往后，检索到第一个就结束)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.lastIndexOf(<span class=\"string\">&quot;u&quot;</span>)); <span class=\"comment\">//返回指定内容在元字符串中的位置,,如果没有，返回-1；(从后往前，检索到第一个就结束)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.trim()); <span class=\"comment\">//只能去除字符串前后的空白</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 大小写转换方法</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.charAt(<span class=\"number\">0</span>).toUpperCase()); <span class=\"comment\">//转换大写</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.charAt(<span class=\"number\">0</span>).toLowerCase()); <span class=\"comment\">//转换小写</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.search(<span class=\"string\">&quot;u&quot;</span>)); <span class=\"comment\">//方法用于检索字符串中指定的子字符串，返回子字符串的起始位置</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.replace(<span class=\"string\">&quot;u&quot;</span>, <span class=\"string\">&quot;new&quot;</span>)); <span class=\"comment\">//替换字符串替换字符串 new替换old</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.split()); <span class=\"comment\">//分割字符串 返回的是一个数组。。数组的元素就是以参数的分割的</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.split(<span class=\"string\">&quot;&quot;</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.split(<span class=\"string\">&quot; &quot;</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.split(<span class=\"string\">&quot;-&quot;</span>));</span><br></pre></td></tr></table></figure>\n\n<p><strong>作业</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//   -------------------------</span></span><br><span class=\"line\"><span class=\"comment\">// Wechat收购 Baidu，电话号码相同的人当作是同一个人，合并后salary相加，其他属性保留Wechat的数据，新的Baidu的员工重新生成id,salary涨幅20%</span></span><br><span class=\"line\"><span class=\"comment\">// 统计收购后的员工平均工资，最高工资，最低工资，male的平均工资，female的平均工资</span></span><br><span class=\"line\"><span class=\"comment\">// 找出收购后工资高于8000的员工姓名和电话号码，按薪水从高到低排序</span></span><br><span class=\"line\"><span class=\"comment\">// 找出收购前后工资涨幅最高的员工姓名和电话号码，以及涨幅的百分比</span></span><br><span class=\"line\"><span class=\"comment\">// 找出收购后重名最多的三个姓名，统一出他们的平均年龄</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> BaiduUsers = [],</span><br><span class=\"line\">  WechatUsers = [];</span><br><span class=\"line\"><span class=\"keyword\">var</span> User = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">id, name, phone, gender, age, salary</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.id = id;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.phone = phone;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.gender = gender;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.salary = salary;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">User.create = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">id, name, phone, gender, age, salary</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> User(id, name, phone, gender, age, salary);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">BaiduUsers.push(User.create(<span class=\"number\">1</span>, <span class=\"string\">&quot;tommy&quot;</span>, <span class=\"string\">&quot;1111&quot;</span>, <span class=\"string\">&quot;male&quot;</span>, <span class=\"number\">18</span>, <span class=\"number\">10000</span>));</span><br><span class=\"line\">BaiduUsers.push(User.create(<span class=\"number\">2</span>, <span class=\"string\">&quot;jerry&quot;</span>, <span class=\"string\">&quot;2222&quot;</span>, <span class=\"string\">&quot;male&quot;</span>, <span class=\"number\">28</span>, <span class=\"number\">10000</span>));</span><br><span class=\"line\">BaiduUsers.push(User.create(<span class=\"number\">3</span>, <span class=\"string\">&quot;raobin&quot;</span>, <span class=\"string\">&quot;3333&quot;</span>, <span class=\"string\">&quot;female&quot;</span>, <span class=\"number\">14</span>, <span class=\"number\">1200</span>));</span><br><span class=\"line\">BaiduUsers.push(User.create(<span class=\"number\">4</span>, <span class=\"string\">&quot;binbin&quot;</span>, <span class=\"string\">&quot;4444&quot;</span>, <span class=\"string\">&quot;male&quot;</span>, <span class=\"number\">23</span>, <span class=\"number\">9800</span>));</span><br><span class=\"line\">BaiduUsers.push(User.create(<span class=\"number\">5</span>, <span class=\"string\">&quot;arthur&quot;</span>, <span class=\"string\">&quot;5555&quot;</span>, <span class=\"string\">&quot;female&quot;</span>, <span class=\"number\">22</span>, <span class=\"number\">10000</span>));</span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\">WechatUsers.push(User.create(<span class=\"number\">1</span>, <span class=\"string\">&quot;tommy&quot;</span>, <span class=\"string\">&quot;1111&quot;</span>, <span class=\"string\">&quot;male&quot;</span>, <span class=\"number\">20</span>, <span class=\"number\">40000</span>));</span><br><span class=\"line\">WechatUsers.push(User.create(<span class=\"number\">2</span>, <span class=\"string\">&quot;allen&quot;</span>, <span class=\"string\">&quot;6666&quot;</span>, <span class=\"string\">&quot;male&quot;</span>, <span class=\"number\">34</span>, <span class=\"number\">15800</span>));</span><br><span class=\"line\">WechatUsers.push(User.create(<span class=\"number\">3</span>, <span class=\"string\">&quot;raobin&quot;</span>, <span class=\"string\">&quot;3333&quot;</span>, <span class=\"string\">&quot;female&quot;</span>, <span class=\"number\">16</span>, <span class=\"number\">2300</span>));</span><br><span class=\"line\">WechatUsers.push(User.create(<span class=\"number\">4</span>, <span class=\"string\">&quot;harvey&quot;</span>, <span class=\"string\">&quot;7777&quot;</span>, <span class=\"string\">&quot;male&quot;</span>, <span class=\"number\">30</span>, <span class=\"number\">29800</span>));</span><br><span class=\"line\">WechatUsers.push(User.create(<span class=\"number\">5</span>, <span class=\"string\">&quot;yuyu&quot;</span>, <span class=\"string\">&quot;8888&quot;</span>, <span class=\"string\">&quot;female&quot;</span>, <span class=\"number\">27</span>, <span class=\"number\">7000</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 电话号码相同的人当作是同一个人，合并后salary相加，其他属性保留Wechat的数据</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> b = <span class=\"number\">0</span>; b &lt; BaiduUsers.length; b++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> w = <span class=\"number\">0</span>; w &lt; WechatUsers.length; w++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (BaiduUsers[b].phone == WechatUsers[w].phone) &#123;</span><br><span class=\"line\">      WechatUsers[w].oldsalary = WechatUsers[w].salary;</span><br><span class=\"line\">      WechatUsers[w].salary = WechatUsers[w].oldsalary + BaiduUsers[b].salary;</span><br><span class=\"line\">      BaiduUsers.splice(b, <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 新的Baidu的员工重新生成id,salary涨幅20%</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; BaiduUsers.length; i++) &#123;</span><br><span class=\"line\">  BaiduUsers[i].oldsalary = BaiduUsers[i].salary;</span><br><span class=\"line\">  BaiduUsers[i].salary = BaiduUsers[i].salary * <span class=\"number\">1.2</span>;</span><br><span class=\"line\">  BaiduUsers[i].id = WechatUsers.length + <span class=\"number\">1</span> + i;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 所有 weChat 员工</span></span><br><span class=\"line\">newWechatUsers = WechatUsers.concat(BaiduUsers);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 统计收购后的员工平均工资，最高工资，最低工资，male的平均工资，female的平均工资</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> sumSalary = <span class=\"number\">0</span>, <span class=\"comment\">// 所有员工薪资和</span></span><br><span class=\"line\">  usersSalary = [], <span class=\"comment\">// 所有员工薪资</span></span><br><span class=\"line\">  averageSalary = <span class=\"number\">0</span>, <span class=\"comment\">// 平均薪资</span></span><br><span class=\"line\">  max = <span class=\"number\">0</span>, <span class=\"comment\">// 最高薪资</span></span><br><span class=\"line\">  min = <span class=\"number\">0</span>, <span class=\"comment\">// 最低薪资</span></span><br><span class=\"line\">  maleSalary = [], <span class=\"comment\">// 男员工薪资集合</span></span><br><span class=\"line\">  femaleSalary = [], <span class=\"comment\">// 女员工薪资集合</span></span><br><span class=\"line\">  sumMaleSalary = <span class=\"number\">0</span>,</span><br><span class=\"line\">  sumFemaleSalary = <span class=\"number\">0</span>;</span><br><span class=\"line\">newWechatUsers.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">user, userIndex</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 把所有员工薪资放到一个新数组里</span></span><br><span class=\"line\">  usersSalary.push(newWechatUsers[userIndex].salary);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 把所有男员工薪资放到一个新数组里</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (user.gender == <span class=\"string\">&quot;male&quot;</span>) &#123;</span><br><span class=\"line\">    maleSalary.push(newWechatUsers[userIndex].salary);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 把所有女员工薪资放到一个新数组里</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (user.gender == <span class=\"string\">&quot;female&quot;</span>) &#123;</span><br><span class=\"line\">    femaleSalary.push(newWechatUsers[userIndex].salary);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 所有员工的薪资</span></span><br><span class=\"line\">usersSalary.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">userSalary</span>) </span>&#123;</span><br><span class=\"line\">  sumSalary += userSalary;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 平均薪资</span></span><br><span class=\"line\">averageSalary = sumSalary / newWechatUsers.length;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(averageSalary);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 最高工资，最低工资</span></span><br><span class=\"line\">max = usersSalary[<span class=\"number\">0</span>];</span><br><span class=\"line\">min = usersSalary[<span class=\"number\">0</span>];</span><br><span class=\"line\">usersSalary.forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (max &lt; value) &#123;</span><br><span class=\"line\">    max = value;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (min &gt; value) &#123;</span><br><span class=\"line\">    min = value;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(max, min);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// male的平均工资</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; maleSalary.length; i++) &#123;</span><br><span class=\"line\">  sumMaleSalary += maleSalary[i];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sumMaleSalary / maleSalary.length);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// female的平均工资</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; femaleSalary.length; i++) &#123;</span><br><span class=\"line\">  sumFemaleSalary += femaleSalary[i];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sumFemaleSalary / femaleSalary.length);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 找出收购后工资高于8000的员工姓名和电话号码，按薪水从高到低排序</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 先把整体重新排序</span></span><br><span class=\"line\">newWechatUsers.sort(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> b[<span class=\"string\">&quot;salary&quot;</span>] - a[<span class=\"string\">&quot;salary&quot;</span>];</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> more8000 = [];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">UserList</span>(<span class=\"params\">name, phone</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.phone = phone;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &#123; name, phone &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; newWechatUsers.length; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (newWechatUsers[i].salary &gt; <span class=\"number\">8000</span>) &#123;</span><br><span class=\"line\">    more8000.push(UserList(newWechatUsers[i].name, newWechatUsers[i].phone));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 找出收购前后工资涨幅最高的员工姓名和电话号码，以及涨幅的百分比</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; newWechatUsers.length; i++) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (newWechatUsers[i].oldsalary != <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">    newWechatUsers[i].riseSalary =</span><br><span class=\"line\">      newWechatUsers[i].salary - newWechatUsers[i].oldsalary;</span><br><span class=\"line\">    newWechatUsers[i].percentRise =</span><br><span class=\"line\">      (newWechatUsers[i].riseSalary / newWechatUsers[i].oldsalary) * <span class=\"number\">100</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 因为有的员工薪资没有合并，也没有涨薪，所以 oldsalary 会是 undefined</span></span><br><span class=\"line\">  <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    newWechatUsers.splice(i, <span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">newWechatUsers.sort(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">a, b</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> b[<span class=\"string\">&quot;percentRise&quot;</span>] - a[<span class=\"string\">&quot;percentRise&quot;</span>];</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">  newWechatUsers[<span class=\"number\">0</span>].name,</span><br><span class=\"line\">  newWechatUsers[<span class=\"number\">0</span>].phone,</span><br><span class=\"line\">  <span class=\"string\">&quot;涨幅百分比 :&quot;</span> + newWechatUsers[<span class=\"number\">0</span>].percentRise + <span class=\"string\">&quot;%&quot;</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;-------------------------------------&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> str = <span class=\"string\">&quot;abaasdffggghhjjkkgfddsssss3444343&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 1、 字符串的长度</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.length);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2、 取出指定位置的字符，如：0,3,5,9等</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.slice(<span class=\"number\">0</span>, <span class=\"number\">1</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.slice(<span class=\"number\">2</span>, <span class=\"number\">3</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.slice(<span class=\"number\">4</span>, <span class=\"number\">5</span>));</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.slice(<span class=\"number\">8</span>, <span class=\"number\">9</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3、 查找指定字符是否在以上字符串中存在，如：i，c ，b等</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">searchStr</span>(<span class=\"params\">string, element</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (string.search(element) == -<span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;没找到&quot;</span>);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;存在&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">searchStr(str, <span class=\"string\">&quot;i&quot;</span>);</span><br><span class=\"line\">searchStr(str, <span class=\"string\">&quot;c&quot;</span>);</span><br><span class=\"line\">searchStr(str, <span class=\"string\">&quot;b&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 4、 替换指定的字符，如：g替换为22,ss替换为b等操作方法</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> str2 = str;</span><br><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">  str2 = str2.replace(<span class=\"string\">&quot;g&quot;</span>, <span class=\"number\">22</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">while</span> (str2.search(<span class=\"string\">&quot;g&quot;</span>) != -<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str2);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> str3 = str;</span><br><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">  str3 = str3.replace(<span class=\"string\">&quot;ss&quot;</span>, <span class=\"string\">&quot;b&quot;</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">while</span> (str3.search(<span class=\"string\">&quot;ss&quot;</span>) != -<span class=\"number\">1</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str3);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 5、 截取指定开始位置到结束位置的字符串，如：取得1-5的字符串</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(str.substring(<span class=\"number\">0</span>, <span class=\"number\">5</span>));</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 6、 找出以上字符串中出现次数最多的字符和出现的次数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> obj = &#123;&#125;,</span><br><span class=\"line\">  count = <span class=\"number\">0</span>,</span><br><span class=\"line\">  s = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; str.split(<span class=\"string\">&quot;&quot;</span>).length; i++) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 如果不存在,记录一次</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!obj[str.charAt(i)]) &#123;</span><br><span class=\"line\">    obj[str.charAt(i)] = <span class=\"number\">1</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 如果存在，则 +1</span></span><br><span class=\"line\">  <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    obj[str.charAt(i)]++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> key <span class=\"keyword\">in</span> obj) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (obj[key] &gt; count) &#123;</span><br><span class=\"line\">    count = obj[key];</span><br><span class=\"line\">    s = key;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;出现次数最多的字符 : &quot;</span> + s + <span class=\"string\">&quot; ; &quot;</span> + <span class=\"string\">&quot;次数 : &quot;</span> + count);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 7、 遍历字符串，并将遍历出的字符两头添加符号“@”输出至当前的文档页面</span></span><br><span class=\"line\">str.split(<span class=\"string\">&quot;&quot;</span>).forEach(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">value, index</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.write(<span class=\"string\">&quot;@&quot;</span> + value + <span class=\"string\">&quot;@&quot;</span>);</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.write(<span class=\"string\">&quot;&lt;br /&gt;&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"The-End\"><a href=\"#The-End\" class=\"headerlink\" title=\"The_End\"></a>The_End</h1>"},{"title":"Kali 下用 swaks 发送邮件","top_img":"https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1591016903476&di=5e474f83fe10606ca99eae72563f2d17&imgtype=0&src=http%3A%2F%2Fwww.blackmoreops.com%2Fwp-content%2Fuploads%2F2015%2F11%2FChange-GRUB-background-in-Kali-Linux-blackMORE-OPs-10.jpg","cover":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/kali/kali.jpg","date":"2019-06-01T10:15:51.000Z","_content":"\n# kali 下的邮件发送工具 swaks\n\n![kali.jpg](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/kali/kali.jpg)\n\n```\nSwaks 是一个功能强大，灵活，可编写脚本，面向事务的 SMTP 测试工具，目前 Swaks 托管在私有 svn 存储库中。\n    官方项目 http：//jetmore.org/john/code/swaks/\n```\n\n## 1.测试邮箱的连通性\n\nkali 自带 swaks 工具，无需安装\n\n```bash\nswaks --to xxx@qq.com\n```\n\n拿我的 QQ 举例\n\n```bash\nroot@kali:~\n➤ swaks --to 1871973389@qq.com                                          01:59:06\n=== Trying mx3.qq.com:25...\n=== Connected to mx3.qq.com.\n<-  220 newxmmxsza22.qq.com MX QQ Mail Server.\n -> EHLO kali.lan\n<-  250-newxmmxsza22.qq.com\n<-  250-STARTTLS\n<-  250-SIZE 73400320\n<-  250 OK\n -> MAIL FROM:<root@kali.lan>\n<-  250 OK.\n -> RCPT TO:<1871973389@qq.com>\n<-  250 OK 1\n -> DATA\n<-  354 End data with <CR><LF>.<CR><LF>.\n -> Date: Sat, 07 Dec 2019 01:59:07 -0500\n -> To: 1871973389@qq.com\n -> From: root@kali.lan\n -> Subject: test Sat, 07 Dec 2019 01:59:07 -0500\n -> Message-Id: <20191207015907.007285@kali.lan>\n -> X-Mailer: swaks v20190914.0 jetmore.org/john/code/swaks/\n ->\n -> This is a test mailing\n ->\n ->\n -> .\n<-  250 Ok: queued as\n -> QUIT\n<-  221 Bye.\n=== Connection closed with remote host.\n```\n\n返回 250 Ok，说明该邮箱可以正常通信。\n\n---\n\n## 2.开启 SMTP 服务\n\nQQ 的 或 163 官网的都可以,个人感觉 163 的还方便些\n\n![SMTP_server](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/kali/screenshot_smtp.png)\n\n记住 smtp 的密码\n\n## 3.利用 SMTP 发送邮件\n\n```bash\nswaks --to 收件箱 --from 发件箱 --body 邮件内容 --header \"Subject:hello\" --server smtp.qq.com -p 25 -au 发件箱 -ap SMTP的密码\n```\n\n参数说明：\n\n```bash\n    --to //收件人邮箱;\n    --from //发件人邮箱;\n    --ehlo qq.com //伪造邮件的ehlo头，即发件人邮箱的域名，身法认证;\n    --body \"https://goobe.io\" //引号内为邮件正文;\n    --header \"Subject:hello\" //邮件头信息，Subject为邮件标题;\n    --data email.txt //将正常邮件内容保存成TXT文件，再作为正常邮件发出;\n    --help 显示命令帮助\n    --verison 显示版本信息\n\n\t输出内容的含义:\n    “===”:swaks输出的信息行\n    “*“:swaks中产生的错误\n    ” ->”:发送到目标的预期行(无错误)\n    “<- “:服务器的预期回复(无错误)\n    “<**”:服务器返回的错误信息\n```\n\n## 4.发送附件\n\n```bash\nswaks --to 收件箱 --from 发件箱  --body 邮件内容  --header \"Subject:hello\" --attach example.doc --server smtp.qq.com -p 25 -au 发件箱 -ap SMTP密码\n```\n\n## 5.伪造邮件\n\n```bash\n--data email.txt //将正常邮件内容保存成TXT文件，再作为正常邮件发出\n```\n\n发送内容为 email.txt (记得添加文件路经) 里的全部内容  \n= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n\n先找一分邮件，查看邮件原文，复制里面的内容，存为 .txt\n\n= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =  \n去掉 Received 和 To 两行 （发送时用 --from 和 --to 代替）  \n= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n\n```bash\nswaks --data ./email.txt --to 收件箱 --from 发件箱 --server smtp.qq.com -p 25 -au 发件箱 -ap SMTP密码\n```\n\n收件箱收到的是 email.txt 里的内容\n\n### 好了,到这就结束了,其实理论上 swaks 可以伪造邮件里的任何一个参数\n\n# The_End\n","source":"_posts/linux/linux-kaliSwaks.md","raw":"---\ntitle: Kali 下用 swaks 发送邮件\ntop_img: https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1591016903476&di=5e474f83fe10606ca99eae72563f2d17&imgtype=0&src=http%3A%2F%2Fwww.blackmoreops.com%2Fwp-content%2Fuploads%2F2015%2F11%2FChange-GRUB-background-in-Kali-Linux-blackMORE-OPs-10.jpg\ncover: https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/kali/kali.jpg\ndate: 2019-06-01 18:15:51\ntags:\n  - linux\n  - kali\n  - swaks\ncategories:\n  - linux\n  - kali\n---\n\n# kali 下的邮件发送工具 swaks\n\n![kali.jpg](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/kali/kali.jpg)\n\n```\nSwaks 是一个功能强大，灵活，可编写脚本，面向事务的 SMTP 测试工具，目前 Swaks 托管在私有 svn 存储库中。\n    官方项目 http：//jetmore.org/john/code/swaks/\n```\n\n## 1.测试邮箱的连通性\n\nkali 自带 swaks 工具，无需安装\n\n```bash\nswaks --to xxx@qq.com\n```\n\n拿我的 QQ 举例\n\n```bash\nroot@kali:~\n➤ swaks --to 1871973389@qq.com                                          01:59:06\n=== Trying mx3.qq.com:25...\n=== Connected to mx3.qq.com.\n<-  220 newxmmxsza22.qq.com MX QQ Mail Server.\n -> EHLO kali.lan\n<-  250-newxmmxsza22.qq.com\n<-  250-STARTTLS\n<-  250-SIZE 73400320\n<-  250 OK\n -> MAIL FROM:<root@kali.lan>\n<-  250 OK.\n -> RCPT TO:<1871973389@qq.com>\n<-  250 OK 1\n -> DATA\n<-  354 End data with <CR><LF>.<CR><LF>.\n -> Date: Sat, 07 Dec 2019 01:59:07 -0500\n -> To: 1871973389@qq.com\n -> From: root@kali.lan\n -> Subject: test Sat, 07 Dec 2019 01:59:07 -0500\n -> Message-Id: <20191207015907.007285@kali.lan>\n -> X-Mailer: swaks v20190914.0 jetmore.org/john/code/swaks/\n ->\n -> This is a test mailing\n ->\n ->\n -> .\n<-  250 Ok: queued as\n -> QUIT\n<-  221 Bye.\n=== Connection closed with remote host.\n```\n\n返回 250 Ok，说明该邮箱可以正常通信。\n\n---\n\n## 2.开启 SMTP 服务\n\nQQ 的 或 163 官网的都可以,个人感觉 163 的还方便些\n\n![SMTP_server](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/kali/screenshot_smtp.png)\n\n记住 smtp 的密码\n\n## 3.利用 SMTP 发送邮件\n\n```bash\nswaks --to 收件箱 --from 发件箱 --body 邮件内容 --header \"Subject:hello\" --server smtp.qq.com -p 25 -au 发件箱 -ap SMTP的密码\n```\n\n参数说明：\n\n```bash\n    --to //收件人邮箱;\n    --from //发件人邮箱;\n    --ehlo qq.com //伪造邮件的ehlo头，即发件人邮箱的域名，身法认证;\n    --body \"https://goobe.io\" //引号内为邮件正文;\n    --header \"Subject:hello\" //邮件头信息，Subject为邮件标题;\n    --data email.txt //将正常邮件内容保存成TXT文件，再作为正常邮件发出;\n    --help 显示命令帮助\n    --verison 显示版本信息\n\n\t输出内容的含义:\n    “===”:swaks输出的信息行\n    “*“:swaks中产生的错误\n    ” ->”:发送到目标的预期行(无错误)\n    “<- “:服务器的预期回复(无错误)\n    “<**”:服务器返回的错误信息\n```\n\n## 4.发送附件\n\n```bash\nswaks --to 收件箱 --from 发件箱  --body 邮件内容  --header \"Subject:hello\" --attach example.doc --server smtp.qq.com -p 25 -au 发件箱 -ap SMTP密码\n```\n\n## 5.伪造邮件\n\n```bash\n--data email.txt //将正常邮件内容保存成TXT文件，再作为正常邮件发出\n```\n\n发送内容为 email.txt (记得添加文件路经) 里的全部内容  \n= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n\n先找一分邮件，查看邮件原文，复制里面的内容，存为 .txt\n\n= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =  \n去掉 Received 和 To 两行 （发送时用 --from 和 --to 代替）  \n= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =\n\n```bash\nswaks --data ./email.txt --to 收件箱 --from 发件箱 --server smtp.qq.com -p 25 -au 发件箱 -ap SMTP密码\n```\n\n收件箱收到的是 email.txt 里的内容\n\n### 好了,到这就结束了,其实理论上 swaks 可以伪造邮件里的任何一个参数\n\n# The_End\n","slug":"linux/linux-kaliSwaks","published":1,"updated":"2021-07-18T07:19:27.951Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cksvxwnob003jgubq5ka9hmnw","content":"<h1 id=\"kali-下的邮件发送工具-swaks\"><a href=\"#kali-下的邮件发送工具-swaks\" class=\"headerlink\" title=\"kali 下的邮件发送工具 swaks\"></a>kali 下的邮件发送工具 swaks</h1><p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/kali/kali.jpg\" alt=\"kali.jpg\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Swaks 是一个功能强大，灵活，可编写脚本，面向事务的 SMTP 测试工具，目前 Swaks 托管在私有 svn 存储库中。</span><br><span class=\"line\">    官方项目 http：//jetmore.org/john/code/swaks/</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"1-测试邮箱的连通性\"><a href=\"#1-测试邮箱的连通性\" class=\"headerlink\" title=\"1.测试邮箱的连通性\"></a>1.测试邮箱的连通性</h2><p>kali 自带 swaks 工具，无需安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">swaks --to xxx@qq.com</span><br></pre></td></tr></table></figure>\n\n<p>拿我的 QQ 举例</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@kali:~</span><br><span class=\"line\">➤ swaks --to 1871973389@qq.com                                          01:59:06</span><br><span class=\"line\">=== Trying mx3.qq.com:25...</span><br><span class=\"line\">=== Connected to mx3.qq.com.</span><br><span class=\"line\">&lt;-  220 newxmmxsza22.qq.com MX QQ Mail Server.</span><br><span class=\"line\"> -&gt; EHLO kali.lan</span><br><span class=\"line\">&lt;-  250-newxmmxsza22.qq.com</span><br><span class=\"line\">&lt;-  250-STARTTLS</span><br><span class=\"line\">&lt;-  250-SIZE 73400320</span><br><span class=\"line\">&lt;-  250 OK</span><br><span class=\"line\"> -&gt; MAIL FROM:&lt;root@kali.lan&gt;</span><br><span class=\"line\">&lt;-  250 OK.</span><br><span class=\"line\"> -&gt; RCPT TO:&lt;1871973389@qq.com&gt;</span><br><span class=\"line\">&lt;-  250 OK 1</span><br><span class=\"line\"> -&gt; DATA</span><br><span class=\"line\">&lt;-  354 End data with &lt;CR&gt;&lt;LF&gt;.&lt;CR&gt;&lt;LF&gt;.</span><br><span class=\"line\"> -&gt; Date: Sat, 07 Dec 2019 01:59:07 -0500</span><br><span class=\"line\"> -&gt; To: 1871973389@qq.com</span><br><span class=\"line\"> -&gt; From: root@kali.lan</span><br><span class=\"line\"> -&gt; Subject: <span class=\"built_in\">test</span> Sat, 07 Dec 2019 01:59:07 -0500</span><br><span class=\"line\"> -&gt; Message-Id: &lt;20191207015907.007285@kali.lan&gt;</span><br><span class=\"line\"> -&gt; X-Mailer: swaks v20190914.0 jetmore.org/john/code/swaks/</span><br><span class=\"line\"> -&gt;</span><br><span class=\"line\"> -&gt; This is a <span class=\"built_in\">test</span> mailing</span><br><span class=\"line\"> -&gt;</span><br><span class=\"line\"> -&gt;</span><br><span class=\"line\"> -&gt; .</span><br><span class=\"line\">&lt;-  250 Ok: queued as</span><br><span class=\"line\"> -&gt; QUIT</span><br><span class=\"line\">&lt;-  221 Bye.</span><br><span class=\"line\">=== Connection closed with remote host.</span><br></pre></td></tr></table></figure>\n\n<p>返回 250 Ok，说明该邮箱可以正常通信。</p>\n<hr>\n<h2 id=\"2-开启-SMTP-服务\"><a href=\"#2-开启-SMTP-服务\" class=\"headerlink\" title=\"2.开启 SMTP 服务\"></a>2.开启 SMTP 服务</h2><p>QQ 的 或 163 官网的都可以,个人感觉 163 的还方便些</p>\n<p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/kali/screenshot_smtp.png\" alt=\"SMTP_server\"></p>\n<p>记住 smtp 的密码</p>\n<h2 id=\"3-利用-SMTP-发送邮件\"><a href=\"#3-利用-SMTP-发送邮件\" class=\"headerlink\" title=\"3.利用 SMTP 发送邮件\"></a>3.利用 SMTP 发送邮件</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">swaks --to 收件箱 --from 发件箱 --body 邮件内容 --header <span class=\"string\">&quot;Subject:hello&quot;</span> --server smtp.qq.com -p 25 -au 发件箱 -ap SMTP的密码</span><br></pre></td></tr></table></figure>\n\n<p>参数说明：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   --to //收件人邮箱;</span><br><span class=\"line\">   --from //发件人邮箱;</span><br><span class=\"line\">   --ehlo qq.com //伪造邮件的ehlo头，即发件人邮箱的域名，身法认证;</span><br><span class=\"line\">   --body <span class=\"string\">&quot;https://goobe.io&quot;</span> //引号内为邮件正文;</span><br><span class=\"line\">   --header <span class=\"string\">&quot;Subject:hello&quot;</span> //邮件头信息，Subject为邮件标题;</span><br><span class=\"line\">   --data email.txt //将正常邮件内容保存成TXT文件，再作为正常邮件发出;</span><br><span class=\"line\">   --<span class=\"built_in\">help</span> 显示命令帮助</span><br><span class=\"line\">   --verison 显示版本信息</span><br><span class=\"line\"></span><br><span class=\"line\">输出内容的含义:</span><br><span class=\"line\">   “===”:swaks输出的信息行</span><br><span class=\"line\">   “*“:swaks中产生的错误</span><br><span class=\"line\">   ” -&gt;”:发送到目标的预期行(无错误)</span><br><span class=\"line\">   “&lt;- “:服务器的预期回复(无错误)</span><br><span class=\"line\">   “&lt;**”:服务器返回的错误信息</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-发送附件\"><a href=\"#4-发送附件\" class=\"headerlink\" title=\"4.发送附件\"></a>4.发送附件</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">swaks --to 收件箱 --from 发件箱  --body 邮件内容  --header <span class=\"string\">&quot;Subject:hello&quot;</span> --attach example.doc --server smtp.qq.com -p 25 -au 发件箱 -ap SMTP密码</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-伪造邮件\"><a href=\"#5-伪造邮件\" class=\"headerlink\" title=\"5.伪造邮件\"></a>5.伪造邮件</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--data email.txt //将正常邮件内容保存成TXT文件，再作为正常邮件发出</span><br></pre></td></tr></table></figure>\n\n<p>发送内容为 email.txt (记得添加文件路经) 里的全部内容<br>= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =</p>\n<p>先找一分邮件，查看邮件原文，复制里面的内容，存为 .txt</p>\n<p>= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =<br>去掉 Received 和 To 两行 （发送时用 –from 和 –to 代替）<br>= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">swaks --data ./email.txt --to 收件箱 --from 发件箱 --server smtp.qq.com -p 25 -au 发件箱 -ap SMTP密码</span><br></pre></td></tr></table></figure>\n\n<p>收件箱收到的是 email.txt 里的内容</p>\n<h3 id=\"好了-到这就结束了-其实理论上-swaks-可以伪造邮件里的任何一个参数\"><a href=\"#好了-到这就结束了-其实理论上-swaks-可以伪造邮件里的任何一个参数\" class=\"headerlink\" title=\"好了,到这就结束了,其实理论上 swaks 可以伪造邮件里的任何一个参数\"></a>好了,到这就结束了,其实理论上 swaks 可以伪造邮件里的任何一个参数</h3><h1 id=\"The-End\"><a href=\"#The-End\" class=\"headerlink\" title=\"The_End\"></a>The_End</h1>","site":{"data":{"link":{"class1":{"class_name":"舍友","link_list":{"1":{"name":"codeAntg","link":"https://blog.csdn.net/weixin_44745147","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/fjh.jpg","descr":"那家刀削面不错","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class2":{"class_name":"致谢","link_list":{"1":{"name":"JerrC","link":"https://immyw.com","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/immyw.png","descr":"今日事,今日毕","width":"1px","style":"solid","color":"#60d0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/hexo.svg","descr":"A fast, simple & powerful blog framework","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class3":{"class_name":"友人","link_list":{"1":{"name":"Chester","link":"http://chesterlds.cn","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/chester.jpg","descr":null,"width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Wangs","link":"https://wangsss.cn/","avatar":"https://wangsss.cn/img/avatar.png","descr":"不疯魔，不成活 ~","width":"1px","style":"solid","color":"#9d9d9d","custom":"link_custom1","time":"4s","namecolor":"0094ff","descolor":"#ff9191"}}}}}},"excerpt":"","more":"<h1 id=\"kali-下的邮件发送工具-swaks\"><a href=\"#kali-下的邮件发送工具-swaks\" class=\"headerlink\" title=\"kali 下的邮件发送工具 swaks\"></a>kali 下的邮件发送工具 swaks</h1><p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/kali/kali.jpg\" alt=\"kali.jpg\"></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Swaks 是一个功能强大，灵活，可编写脚本，面向事务的 SMTP 测试工具，目前 Swaks 托管在私有 svn 存储库中。</span><br><span class=\"line\">    官方项目 http：//jetmore.org/john/code/swaks/</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"1-测试邮箱的连通性\"><a href=\"#1-测试邮箱的连通性\" class=\"headerlink\" title=\"1.测试邮箱的连通性\"></a>1.测试邮箱的连通性</h2><p>kali 自带 swaks 工具，无需安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">swaks --to xxx@qq.com</span><br></pre></td></tr></table></figure>\n\n<p>拿我的 QQ 举例</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@kali:~</span><br><span class=\"line\">➤ swaks --to 1871973389@qq.com                                          01:59:06</span><br><span class=\"line\">=== Trying mx3.qq.com:25...</span><br><span class=\"line\">=== Connected to mx3.qq.com.</span><br><span class=\"line\">&lt;-  220 newxmmxsza22.qq.com MX QQ Mail Server.</span><br><span class=\"line\"> -&gt; EHLO kali.lan</span><br><span class=\"line\">&lt;-  250-newxmmxsza22.qq.com</span><br><span class=\"line\">&lt;-  250-STARTTLS</span><br><span class=\"line\">&lt;-  250-SIZE 73400320</span><br><span class=\"line\">&lt;-  250 OK</span><br><span class=\"line\"> -&gt; MAIL FROM:&lt;root@kali.lan&gt;</span><br><span class=\"line\">&lt;-  250 OK.</span><br><span class=\"line\"> -&gt; RCPT TO:&lt;1871973389@qq.com&gt;</span><br><span class=\"line\">&lt;-  250 OK 1</span><br><span class=\"line\"> -&gt; DATA</span><br><span class=\"line\">&lt;-  354 End data with &lt;CR&gt;&lt;LF&gt;.&lt;CR&gt;&lt;LF&gt;.</span><br><span class=\"line\"> -&gt; Date: Sat, 07 Dec 2019 01:59:07 -0500</span><br><span class=\"line\"> -&gt; To: 1871973389@qq.com</span><br><span class=\"line\"> -&gt; From: root@kali.lan</span><br><span class=\"line\"> -&gt; Subject: <span class=\"built_in\">test</span> Sat, 07 Dec 2019 01:59:07 -0500</span><br><span class=\"line\"> -&gt; Message-Id: &lt;20191207015907.007285@kali.lan&gt;</span><br><span class=\"line\"> -&gt; X-Mailer: swaks v20190914.0 jetmore.org/john/code/swaks/</span><br><span class=\"line\"> -&gt;</span><br><span class=\"line\"> -&gt; This is a <span class=\"built_in\">test</span> mailing</span><br><span class=\"line\"> -&gt;</span><br><span class=\"line\"> -&gt;</span><br><span class=\"line\"> -&gt; .</span><br><span class=\"line\">&lt;-  250 Ok: queued as</span><br><span class=\"line\"> -&gt; QUIT</span><br><span class=\"line\">&lt;-  221 Bye.</span><br><span class=\"line\">=== Connection closed with remote host.</span><br></pre></td></tr></table></figure>\n\n<p>返回 250 Ok，说明该邮箱可以正常通信。</p>\n<hr>\n<h2 id=\"2-开启-SMTP-服务\"><a href=\"#2-开启-SMTP-服务\" class=\"headerlink\" title=\"2.开启 SMTP 服务\"></a>2.开启 SMTP 服务</h2><p>QQ 的 或 163 官网的都可以,个人感觉 163 的还方便些</p>\n<p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/kali/screenshot_smtp.png\" alt=\"SMTP_server\"></p>\n<p>记住 smtp 的密码</p>\n<h2 id=\"3-利用-SMTP-发送邮件\"><a href=\"#3-利用-SMTP-发送邮件\" class=\"headerlink\" title=\"3.利用 SMTP 发送邮件\"></a>3.利用 SMTP 发送邮件</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">swaks --to 收件箱 --from 发件箱 --body 邮件内容 --header <span class=\"string\">&quot;Subject:hello&quot;</span> --server smtp.qq.com -p 25 -au 发件箱 -ap SMTP的密码</span><br></pre></td></tr></table></figure>\n\n<p>参数说明：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">   --to //收件人邮箱;</span><br><span class=\"line\">   --from //发件人邮箱;</span><br><span class=\"line\">   --ehlo qq.com //伪造邮件的ehlo头，即发件人邮箱的域名，身法认证;</span><br><span class=\"line\">   --body <span class=\"string\">&quot;https://goobe.io&quot;</span> //引号内为邮件正文;</span><br><span class=\"line\">   --header <span class=\"string\">&quot;Subject:hello&quot;</span> //邮件头信息，Subject为邮件标题;</span><br><span class=\"line\">   --data email.txt //将正常邮件内容保存成TXT文件，再作为正常邮件发出;</span><br><span class=\"line\">   --<span class=\"built_in\">help</span> 显示命令帮助</span><br><span class=\"line\">   --verison 显示版本信息</span><br><span class=\"line\"></span><br><span class=\"line\">输出内容的含义:</span><br><span class=\"line\">   “===”:swaks输出的信息行</span><br><span class=\"line\">   “*“:swaks中产生的错误</span><br><span class=\"line\">   ” -&gt;”:发送到目标的预期行(无错误)</span><br><span class=\"line\">   “&lt;- “:服务器的预期回复(无错误)</span><br><span class=\"line\">   “&lt;**”:服务器返回的错误信息</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-发送附件\"><a href=\"#4-发送附件\" class=\"headerlink\" title=\"4.发送附件\"></a>4.发送附件</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">swaks --to 收件箱 --from 发件箱  --body 邮件内容  --header <span class=\"string\">&quot;Subject:hello&quot;</span> --attach example.doc --server smtp.qq.com -p 25 -au 发件箱 -ap SMTP密码</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-伪造邮件\"><a href=\"#5-伪造邮件\" class=\"headerlink\" title=\"5.伪造邮件\"></a>5.伪造邮件</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--data email.txt //将正常邮件内容保存成TXT文件，再作为正常邮件发出</span><br></pre></td></tr></table></figure>\n\n<p>发送内容为 email.txt (记得添加文件路经) 里的全部内容<br>= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =</p>\n<p>先找一分邮件，查看邮件原文，复制里面的内容，存为 .txt</p>\n<p>= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =<br>去掉 Received 和 To 两行 （发送时用 –from 和 –to 代替）<br>= = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">swaks --data ./email.txt --to 收件箱 --from 发件箱 --server smtp.qq.com -p 25 -au 发件箱 -ap SMTP密码</span><br></pre></td></tr></table></figure>\n\n<p>收件箱收到的是 email.txt 里的内容</p>\n<h3 id=\"好了-到这就结束了-其实理论上-swaks-可以伪造邮件里的任何一个参数\"><a href=\"#好了-到这就结束了-其实理论上-swaks-可以伪造邮件里的任何一个参数\" class=\"headerlink\" title=\"好了,到这就结束了,其实理论上 swaks 可以伪造邮件里的任何一个参数\"></a>好了,到这就结束了,其实理论上 swaks 可以伪造邮件里的任何一个参数</h3><h1 id=\"The-End\"><a href=\"#The-End\" class=\"headerlink\" title=\"The_End\"></a>The_End</h1>"},{"title":"Manjaro安装后简单配置","top_img":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/manjaro/manjaro-top-img.png","cover":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/manjaro/manjaro_screenshot.png","date":"2019-06-01T10:00:29.000Z","_content":"\n## 一个相见恨晚的 Linux 操作系统\n\nManjaro 到底有多受欢迎?\n\n```\nDistroWatch是一个包含了各种Linux发行版及其他自由/开放源代码的类Unix操作系统。\n( 如OpenSolaris、MINIX及BSD等 ) 的新闻、人气排名、以及其他一般信息等的网站。\n它包含了数百种发行版的信息。\n原文链接：https://distrowatch.com/table.php?distribution=manjaro\n```\n\n---\n\n![screenshot](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/i3/i3.png)\n\n# Manjaro 安装后简单配置\n\n## 1. 添加 `archlinuxcn` 源\n\n编辑这个文件\n\n```bash\n/etc/pacman.conf\n```\n\n在文末添加以下内容,添加清华源,或者别的也行,里面有国内的一些软件\n\n```bash\n[archlinuxcn]\nSigLevel = Never\nServer = https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/$arch\n```\n\n保存退出\n\n#### 按照地区自动更新为最快最稳定的软件源镜像地址\n\n```bash\nsudo pacman-mirrors -c China\n```\n\n#### 强制更新一下 :\n\n```bash\nsudo pacman -Syyu\n```\n\n========================一路回车就行= = = = = = = = = = = = = = = = = = =\n\n## 2.安装软件\n\n需要安装的软件 `pacman` 里基本都有\n\n### 1.安装 vim\n\n```bash\nsudo pacman -S vim\n```\n\n### 2.更换 shell\n\n默认为 `bash`,我比较喜欢 `fish`,方便好用,配置也简单\n\n```bash\n安装fish\nsudo pacman -S fish\n---\n更改shell为fish\nchsh -s /usr/bin/fish\n---\n安装oh-my-fish(一个友好的shell)\ncurl -L https://get.oh-my.fish | fish\n```\n\n#### 可能国内原因,raw.githubusercontent.com 访问不了,安装 oh-my-fish 会失败,可以先尝试 clone 到本地再安装,或者添加 raw.githubusercontent 的 ip 到 hosts 文件\n\n```bash\ngit clone https://github.com/oh-my-fish/oh-my-fish\n# 如果你网不好,可以克隆镜像仓库(比如:https://github.com.cnpmjs.org/oh-my-fish/oh-my-fish)\ncd oh-my-fish\nbin/install --offline\n```\n\n#### 简单配置一下 fish\n\n终端输入：\n\n```bash\nfish_config\n```\n\n然后它会自动打开浏览器\n\n##### 选一个主题，然后点`set theme`\n\n在`promt`栏里选个提示符，然后点`promt set`\n然后就可以关闭浏览器了\n回到终端，回车即可\n\n### 3.安装 录屏软件（推荐`simplescreenrecorder`这个比较小）\n\n```bash\nsudo pacman -S simplescreenrecorder\n```\n\n### 4.安装 VScode\n\n```bash\nsudo pacman -S visual-studio-code-bin\n```\n\n或者\n\n```bash\nsudo pacman -S code\n```\n\n### 5.安装网易云音乐\n\n```bash\nsudo pacman -S netease-cloud-music\n```\n\n---\n\n### 6.安装中文输入法\n\n```bash\nsudo pacman -S fcitx5 fcitx5-im fcitx5-rime\nsudo pacman -S fcitx5-material-color # 主题\nsudo pacman -S fcitx5-configtool  # 图形化配置界面\n\n```\n\n##### 添加配置文件 `~/.xprofile` 填入以下几句\n\n```bash\nexport GTK_IM_MODULE=fcitx5\n\nexport QT_IM_MODULE=fcitx5\n\nexport XMODIFIERS=\"@im=fcitx5\"\n```\n\n##### 然后重启 ( 建议设置为开机让 `fcitx5` 自启 )\n\n##### 重启后你应该会看见一个小键盘的图标,右击选 `config`,添加 `rime` 输入法,默认应该是 `ctrl+space` 切换输入法\n\n![fcitx-configtool](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/manjaro/fcitx-configtool.png)\n\n![rime](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/manjaro/rime.png)\n\n# The_End\n","source":"_posts/linux/linux-manjaro.md","raw":"---\ntitle: Manjaro安装后简单配置\ntop_img: https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/manjaro/manjaro-top-img.png\ncover: https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/manjaro/manjaro_screenshot.png\ndate: 2019-06-01 18:00:29\ntags:\n  - linux\n  - manjaro\ncategories:\n  - linux\n  - manjaro\n---\n\n## 一个相见恨晚的 Linux 操作系统\n\nManjaro 到底有多受欢迎?\n\n```\nDistroWatch是一个包含了各种Linux发行版及其他自由/开放源代码的类Unix操作系统。\n( 如OpenSolaris、MINIX及BSD等 ) 的新闻、人气排名、以及其他一般信息等的网站。\n它包含了数百种发行版的信息。\n原文链接：https://distrowatch.com/table.php?distribution=manjaro\n```\n\n---\n\n![screenshot](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/i3/i3.png)\n\n# Manjaro 安装后简单配置\n\n## 1. 添加 `archlinuxcn` 源\n\n编辑这个文件\n\n```bash\n/etc/pacman.conf\n```\n\n在文末添加以下内容,添加清华源,或者别的也行,里面有国内的一些软件\n\n```bash\n[archlinuxcn]\nSigLevel = Never\nServer = https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/$arch\n```\n\n保存退出\n\n#### 按照地区自动更新为最快最稳定的软件源镜像地址\n\n```bash\nsudo pacman-mirrors -c China\n```\n\n#### 强制更新一下 :\n\n```bash\nsudo pacman -Syyu\n```\n\n========================一路回车就行= = = = = = = = = = = = = = = = = = =\n\n## 2.安装软件\n\n需要安装的软件 `pacman` 里基本都有\n\n### 1.安装 vim\n\n```bash\nsudo pacman -S vim\n```\n\n### 2.更换 shell\n\n默认为 `bash`,我比较喜欢 `fish`,方便好用,配置也简单\n\n```bash\n安装fish\nsudo pacman -S fish\n---\n更改shell为fish\nchsh -s /usr/bin/fish\n---\n安装oh-my-fish(一个友好的shell)\ncurl -L https://get.oh-my.fish | fish\n```\n\n#### 可能国内原因,raw.githubusercontent.com 访问不了,安装 oh-my-fish 会失败,可以先尝试 clone 到本地再安装,或者添加 raw.githubusercontent 的 ip 到 hosts 文件\n\n```bash\ngit clone https://github.com/oh-my-fish/oh-my-fish\n# 如果你网不好,可以克隆镜像仓库(比如:https://github.com.cnpmjs.org/oh-my-fish/oh-my-fish)\ncd oh-my-fish\nbin/install --offline\n```\n\n#### 简单配置一下 fish\n\n终端输入：\n\n```bash\nfish_config\n```\n\n然后它会自动打开浏览器\n\n##### 选一个主题，然后点`set theme`\n\n在`promt`栏里选个提示符，然后点`promt set`\n然后就可以关闭浏览器了\n回到终端，回车即可\n\n### 3.安装 录屏软件（推荐`simplescreenrecorder`这个比较小）\n\n```bash\nsudo pacman -S simplescreenrecorder\n```\n\n### 4.安装 VScode\n\n```bash\nsudo pacman -S visual-studio-code-bin\n```\n\n或者\n\n```bash\nsudo pacman -S code\n```\n\n### 5.安装网易云音乐\n\n```bash\nsudo pacman -S netease-cloud-music\n```\n\n---\n\n### 6.安装中文输入法\n\n```bash\nsudo pacman -S fcitx5 fcitx5-im fcitx5-rime\nsudo pacman -S fcitx5-material-color # 主题\nsudo pacman -S fcitx5-configtool  # 图形化配置界面\n\n```\n\n##### 添加配置文件 `~/.xprofile` 填入以下几句\n\n```bash\nexport GTK_IM_MODULE=fcitx5\n\nexport QT_IM_MODULE=fcitx5\n\nexport XMODIFIERS=\"@im=fcitx5\"\n```\n\n##### 然后重启 ( 建议设置为开机让 `fcitx5` 自启 )\n\n##### 重启后你应该会看见一个小键盘的图标,右击选 `config`,添加 `rime` 输入法,默认应该是 `ctrl+space` 切换输入法\n\n![fcitx-configtool](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/manjaro/fcitx-configtool.png)\n\n![rime](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/manjaro/rime.png)\n\n# The_End\n","slug":"linux/linux-manjaro","published":1,"updated":"2021-07-18T07:20:50.666Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cksvxwnoc003mgubq8bsa9boi","content":"<h2 id=\"一个相见恨晚的-Linux-操作系统\"><a href=\"#一个相见恨晚的-Linux-操作系统\" class=\"headerlink\" title=\"一个相见恨晚的 Linux 操作系统\"></a>一个相见恨晚的 Linux 操作系统</h2><p>Manjaro 到底有多受欢迎?</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DistroWatch是一个包含了各种Linux发行版及其他自由/开放源代码的类Unix操作系统。</span><br><span class=\"line\">( 如OpenSolaris、MINIX及BSD等 ) 的新闻、人气排名、以及其他一般信息等的网站。</span><br><span class=\"line\">它包含了数百种发行版的信息。</span><br><span class=\"line\">原文链接：https://distrowatch.com/table.php?distribution=manjaro</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/i3/i3.png\" alt=\"screenshot\"></p>\n<h1 id=\"Manjaro-安装后简单配置\"><a href=\"#Manjaro-安装后简单配置\" class=\"headerlink\" title=\"Manjaro 安装后简单配置\"></a>Manjaro 安装后简单配置</h1><h2 id=\"1-添加-archlinuxcn-源\"><a href=\"#1-添加-archlinuxcn-源\" class=\"headerlink\" title=\"1. 添加 archlinuxcn 源\"></a>1. 添加 <code>archlinuxcn</code> 源</h2><p>编辑这个文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/pacman.conf</span><br></pre></td></tr></table></figure>\n\n<p>在文末添加以下内容,添加清华源,或者别的也行,里面有国内的一些软件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[archlinuxcn]</span><br><span class=\"line\">SigLevel = Never</span><br><span class=\"line\">Server = https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/<span class=\"variable\">$arch</span></span><br></pre></td></tr></table></figure>\n\n<p>保存退出</p>\n<h4 id=\"按照地区自动更新为最快最稳定的软件源镜像地址\"><a href=\"#按照地区自动更新为最快最稳定的软件源镜像地址\" class=\"headerlink\" title=\"按照地区自动更新为最快最稳定的软件源镜像地址\"></a>按照地区自动更新为最快最稳定的软件源镜像地址</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman-mirrors -c China</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"强制更新一下\"><a href=\"#强制更新一下\" class=\"headerlink\" title=\"强制更新一下 :\"></a>强制更新一下 :</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -Syyu</span><br></pre></td></tr></table></figure>\n\n<p>========================一路回车就行= = = = = = = = = = = = = = = = = = =</p>\n<h2 id=\"2-安装软件\"><a href=\"#2-安装软件\" class=\"headerlink\" title=\"2.安装软件\"></a>2.安装软件</h2><p>需要安装的软件 <code>pacman</code> 里基本都有</p>\n<h3 id=\"1-安装-vim\"><a href=\"#1-安装-vim\" class=\"headerlink\" title=\"1.安装 vim\"></a>1.安装 vim</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -S vim</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-更换-shell\"><a href=\"#2-更换-shell\" class=\"headerlink\" title=\"2.更换 shell\"></a>2.更换 shell</h3><p>默认为 <code>bash</code>,我比较喜欢 <code>fish</code>,方便好用,配置也简单</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">安装fish</span><br><span class=\"line\">sudo pacman -S fish</span><br><span class=\"line\">---</span><br><span class=\"line\">更改shell为fish</span><br><span class=\"line\">chsh -s /usr/bin/fish</span><br><span class=\"line\">---</span><br><span class=\"line\">安装oh-my-fish(一个友好的shell)</span><br><span class=\"line\">curl -L https://get.oh-my.fish | fish</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"可能国内原因-raw-githubusercontent-com-访问不了-安装-oh-my-fish-会失败-可以先尝试-clone-到本地再安装-或者添加-raw-githubusercontent-的-ip-到-hosts-文件\"><a href=\"#可能国内原因-raw-githubusercontent-com-访问不了-安装-oh-my-fish-会失败-可以先尝试-clone-到本地再安装-或者添加-raw-githubusercontent-的-ip-到-hosts-文件\" class=\"headerlink\" title=\"可能国内原因,raw.githubusercontent.com 访问不了,安装 oh-my-fish 会失败,可以先尝试 clone 到本地再安装,或者添加 raw.githubusercontent 的 ip 到 hosts 文件\"></a>可能国内原因,raw.githubusercontent.com 访问不了,安装 oh-my-fish 会失败,可以先尝试 clone 到本地再安装,或者添加 raw.githubusercontent 的 ip 到 hosts 文件</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/oh-my-fish/oh-my-fish</span><br><span class=\"line\"><span class=\"comment\"># 如果你网不好,可以克隆镜像仓库(比如:https://github.com.cnpmjs.org/oh-my-fish/oh-my-fish)</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> oh-my-fish</span><br><span class=\"line\">bin/install --offline</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"简单配置一下-fish\"><a href=\"#简单配置一下-fish\" class=\"headerlink\" title=\"简单配置一下 fish\"></a>简单配置一下 fish</h4><p>终端输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fish_config</span><br></pre></td></tr></table></figure>\n\n<p>然后它会自动打开浏览器</p>\n<h5 id=\"选一个主题，然后点set-theme\"><a href=\"#选一个主题，然后点set-theme\" class=\"headerlink\" title=\"选一个主题，然后点set theme\"></a>选一个主题，然后点<code>set theme</code></h5><p>在<code>promt</code>栏里选个提示符，然后点<code>promt set</code><br>然后就可以关闭浏览器了<br>回到终端，回车即可</p>\n<h3 id=\"3-安装-录屏软件（推荐simplescreenrecorder这个比较小）\"><a href=\"#3-安装-录屏软件（推荐simplescreenrecorder这个比较小）\" class=\"headerlink\" title=\"3.安装 录屏软件（推荐simplescreenrecorder这个比较小）\"></a>3.安装 录屏软件（推荐<code>simplescreenrecorder</code>这个比较小）</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -S simplescreenrecorder</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-安装-VScode\"><a href=\"#4-安装-VScode\" class=\"headerlink\" title=\"4.安装 VScode\"></a>4.安装 VScode</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -S visual-studio-code-bin</span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -S code</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-安装网易云音乐\"><a href=\"#5-安装网易云音乐\" class=\"headerlink\" title=\"5.安装网易云音乐\"></a>5.安装网易云音乐</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -S netease-cloud-music</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"6-安装中文输入法\"><a href=\"#6-安装中文输入法\" class=\"headerlink\" title=\"6.安装中文输入法\"></a>6.安装中文输入法</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -S fcitx5 fcitx5-im fcitx5-rime</span><br><span class=\"line\">sudo pacman -S fcitx5-material-color <span class=\"comment\"># 主题</span></span><br><span class=\"line\">sudo pacman -S fcitx5-configtool  <span class=\"comment\"># 图形化配置界面</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"添加配置文件-xprofile-填入以下几句\"><a href=\"#添加配置文件-xprofile-填入以下几句\" class=\"headerlink\" title=\"添加配置文件 ~/.xprofile 填入以下几句\"></a>添加配置文件 <code>~/.xprofile</code> 填入以下几句</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> GTK_IM_MODULE=fcitx5</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">export</span> QT_IM_MODULE=fcitx5</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">export</span> XMODIFIERS=<span class=\"string\">&quot;@im=fcitx5&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"然后重启-建议设置为开机让-fcitx5-自启\"><a href=\"#然后重启-建议设置为开机让-fcitx5-自启\" class=\"headerlink\" title=\"然后重启 ( 建议设置为开机让 fcitx5 自启 )\"></a>然后重启 ( 建议设置为开机让 <code>fcitx5</code> 自启 )</h5><h5 id=\"重启后你应该会看见一个小键盘的图标-右击选-config-添加-rime-输入法-默认应该是-ctrl-space-切换输入法\"><a href=\"#重启后你应该会看见一个小键盘的图标-右击选-config-添加-rime-输入法-默认应该是-ctrl-space-切换输入法\" class=\"headerlink\" title=\"重启后你应该会看见一个小键盘的图标,右击选 config,添加 rime 输入法,默认应该是 ctrl+space 切换输入法\"></a>重启后你应该会看见一个小键盘的图标,右击选 <code>config</code>,添加 <code>rime</code> 输入法,默认应该是 <code>ctrl+space</code> 切换输入法</h5><p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/manjaro/fcitx-configtool.png\" alt=\"fcitx-configtool\"></p>\n<p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/manjaro/rime.png\" alt=\"rime\"></p>\n<h1 id=\"The-End\"><a href=\"#The-End\" class=\"headerlink\" title=\"The_End\"></a>The_End</h1>","site":{"data":{"link":{"class1":{"class_name":"舍友","link_list":{"1":{"name":"codeAntg","link":"https://blog.csdn.net/weixin_44745147","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/fjh.jpg","descr":"那家刀削面不错","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class2":{"class_name":"致谢","link_list":{"1":{"name":"JerrC","link":"https://immyw.com","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/immyw.png","descr":"今日事,今日毕","width":"1px","style":"solid","color":"#60d0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/hexo.svg","descr":"A fast, simple & powerful blog framework","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class3":{"class_name":"友人","link_list":{"1":{"name":"Chester","link":"http://chesterlds.cn","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/chester.jpg","descr":null,"width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Wangs","link":"https://wangsss.cn/","avatar":"https://wangsss.cn/img/avatar.png","descr":"不疯魔，不成活 ~","width":"1px","style":"solid","color":"#9d9d9d","custom":"link_custom1","time":"4s","namecolor":"0094ff","descolor":"#ff9191"}}}}}},"excerpt":"","more":"<h2 id=\"一个相见恨晚的-Linux-操作系统\"><a href=\"#一个相见恨晚的-Linux-操作系统\" class=\"headerlink\" title=\"一个相见恨晚的 Linux 操作系统\"></a>一个相见恨晚的 Linux 操作系统</h2><p>Manjaro 到底有多受欢迎?</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DistroWatch是一个包含了各种Linux发行版及其他自由/开放源代码的类Unix操作系统。</span><br><span class=\"line\">( 如OpenSolaris、MINIX及BSD等 ) 的新闻、人气排名、以及其他一般信息等的网站。</span><br><span class=\"line\">它包含了数百种发行版的信息。</span><br><span class=\"line\">原文链接：https://distrowatch.com/table.php?distribution=manjaro</span><br></pre></td></tr></table></figure>\n\n<hr>\n<p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/i3/i3.png\" alt=\"screenshot\"></p>\n<h1 id=\"Manjaro-安装后简单配置\"><a href=\"#Manjaro-安装后简单配置\" class=\"headerlink\" title=\"Manjaro 安装后简单配置\"></a>Manjaro 安装后简单配置</h1><h2 id=\"1-添加-archlinuxcn-源\"><a href=\"#1-添加-archlinuxcn-源\" class=\"headerlink\" title=\"1. 添加 archlinuxcn 源\"></a>1. 添加 <code>archlinuxcn</code> 源</h2><p>编辑这个文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/pacman.conf</span><br></pre></td></tr></table></figure>\n\n<p>在文末添加以下内容,添加清华源,或者别的也行,里面有国内的一些软件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[archlinuxcn]</span><br><span class=\"line\">SigLevel = Never</span><br><span class=\"line\">Server = https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/<span class=\"variable\">$arch</span></span><br></pre></td></tr></table></figure>\n\n<p>保存退出</p>\n<h4 id=\"按照地区自动更新为最快最稳定的软件源镜像地址\"><a href=\"#按照地区自动更新为最快最稳定的软件源镜像地址\" class=\"headerlink\" title=\"按照地区自动更新为最快最稳定的软件源镜像地址\"></a>按照地区自动更新为最快最稳定的软件源镜像地址</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman-mirrors -c China</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"强制更新一下\"><a href=\"#强制更新一下\" class=\"headerlink\" title=\"强制更新一下 :\"></a>强制更新一下 :</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -Syyu</span><br></pre></td></tr></table></figure>\n\n<p>========================一路回车就行= = = = = = = = = = = = = = = = = = =</p>\n<h2 id=\"2-安装软件\"><a href=\"#2-安装软件\" class=\"headerlink\" title=\"2.安装软件\"></a>2.安装软件</h2><p>需要安装的软件 <code>pacman</code> 里基本都有</p>\n<h3 id=\"1-安装-vim\"><a href=\"#1-安装-vim\" class=\"headerlink\" title=\"1.安装 vim\"></a>1.安装 vim</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -S vim</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-更换-shell\"><a href=\"#2-更换-shell\" class=\"headerlink\" title=\"2.更换 shell\"></a>2.更换 shell</h3><p>默认为 <code>bash</code>,我比较喜欢 <code>fish</code>,方便好用,配置也简单</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">安装fish</span><br><span class=\"line\">sudo pacman -S fish</span><br><span class=\"line\">---</span><br><span class=\"line\">更改shell为fish</span><br><span class=\"line\">chsh -s /usr/bin/fish</span><br><span class=\"line\">---</span><br><span class=\"line\">安装oh-my-fish(一个友好的shell)</span><br><span class=\"line\">curl -L https://get.oh-my.fish | fish</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"可能国内原因-raw-githubusercontent-com-访问不了-安装-oh-my-fish-会失败-可以先尝试-clone-到本地再安装-或者添加-raw-githubusercontent-的-ip-到-hosts-文件\"><a href=\"#可能国内原因-raw-githubusercontent-com-访问不了-安装-oh-my-fish-会失败-可以先尝试-clone-到本地再安装-或者添加-raw-githubusercontent-的-ip-到-hosts-文件\" class=\"headerlink\" title=\"可能国内原因,raw.githubusercontent.com 访问不了,安装 oh-my-fish 会失败,可以先尝试 clone 到本地再安装,或者添加 raw.githubusercontent 的 ip 到 hosts 文件\"></a>可能国内原因,raw.githubusercontent.com 访问不了,安装 oh-my-fish 会失败,可以先尝试 clone 到本地再安装,或者添加 raw.githubusercontent 的 ip 到 hosts 文件</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/oh-my-fish/oh-my-fish</span><br><span class=\"line\"><span class=\"comment\"># 如果你网不好,可以克隆镜像仓库(比如:https://github.com.cnpmjs.org/oh-my-fish/oh-my-fish)</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> oh-my-fish</span><br><span class=\"line\">bin/install --offline</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"简单配置一下-fish\"><a href=\"#简单配置一下-fish\" class=\"headerlink\" title=\"简单配置一下 fish\"></a>简单配置一下 fish</h4><p>终端输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fish_config</span><br></pre></td></tr></table></figure>\n\n<p>然后它会自动打开浏览器</p>\n<h5 id=\"选一个主题，然后点set-theme\"><a href=\"#选一个主题，然后点set-theme\" class=\"headerlink\" title=\"选一个主题，然后点set theme\"></a>选一个主题，然后点<code>set theme</code></h5><p>在<code>promt</code>栏里选个提示符，然后点<code>promt set</code><br>然后就可以关闭浏览器了<br>回到终端，回车即可</p>\n<h3 id=\"3-安装-录屏软件（推荐simplescreenrecorder这个比较小）\"><a href=\"#3-安装-录屏软件（推荐simplescreenrecorder这个比较小）\" class=\"headerlink\" title=\"3.安装 录屏软件（推荐simplescreenrecorder这个比较小）\"></a>3.安装 录屏软件（推荐<code>simplescreenrecorder</code>这个比较小）</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -S simplescreenrecorder</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-安装-VScode\"><a href=\"#4-安装-VScode\" class=\"headerlink\" title=\"4.安装 VScode\"></a>4.安装 VScode</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -S visual-studio-code-bin</span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -S code</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-安装网易云音乐\"><a href=\"#5-安装网易云音乐\" class=\"headerlink\" title=\"5.安装网易云音乐\"></a>5.安装网易云音乐</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -S netease-cloud-music</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"6-安装中文输入法\"><a href=\"#6-安装中文输入法\" class=\"headerlink\" title=\"6.安装中文输入法\"></a>6.安装中文输入法</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -S fcitx5 fcitx5-im fcitx5-rime</span><br><span class=\"line\">sudo pacman -S fcitx5-material-color <span class=\"comment\"># 主题</span></span><br><span class=\"line\">sudo pacman -S fcitx5-configtool  <span class=\"comment\"># 图形化配置界面</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"添加配置文件-xprofile-填入以下几句\"><a href=\"#添加配置文件-xprofile-填入以下几句\" class=\"headerlink\" title=\"添加配置文件 ~/.xprofile 填入以下几句\"></a>添加配置文件 <code>~/.xprofile</code> 填入以下几句</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> GTK_IM_MODULE=fcitx5</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">export</span> QT_IM_MODULE=fcitx5</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">export</span> XMODIFIERS=<span class=\"string\">&quot;@im=fcitx5&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"然后重启-建议设置为开机让-fcitx5-自启\"><a href=\"#然后重启-建议设置为开机让-fcitx5-自启\" class=\"headerlink\" title=\"然后重启 ( 建议设置为开机让 fcitx5 自启 )\"></a>然后重启 ( 建议设置为开机让 <code>fcitx5</code> 自启 )</h5><h5 id=\"重启后你应该会看见一个小键盘的图标-右击选-config-添加-rime-输入法-默认应该是-ctrl-space-切换输入法\"><a href=\"#重启后你应该会看见一个小键盘的图标-右击选-config-添加-rime-输入法-默认应该是-ctrl-space-切换输入法\" class=\"headerlink\" title=\"重启后你应该会看见一个小键盘的图标,右击选 config,添加 rime 输入法,默认应该是 ctrl+space 切换输入法\"></a>重启后你应该会看见一个小键盘的图标,右击选 <code>config</code>,添加 <code>rime</code> 输入法,默认应该是 <code>ctrl+space</code> 切换输入法</h5><p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/manjaro/fcitx-configtool.png\" alt=\"fcitx-configtool\"></p>\n<p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/manjaro/rime.png\" alt=\"rime\"></p>\n<h1 id=\"The-End\"><a href=\"#The-End\" class=\"headerlink\" title=\"The_End\"></a>The_End</h1>"},{"title":"Linux安装node环境以及cnpm","top_img":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg","cover":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/node/node.jpg","date":"2020-02-28T13:14:58.000Z","_content":"\n### 其实我老早以前就发现 node 版本太高也不行\n\n#### 以往的版本下载地址: https://nodejs.org/zh-cn/download/releases/\n\n# 下载并解压到 `/usr/local/` 下\n\n![node](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/node/node.png)\n\n# 设置全局\n\n### 直接链接过,记得版本对应改一下\n\n```bash\n# node\n\nsudo ln -s /usr/local/node-v12.12.0-linux-x64/bin/node /usr/local/bin/node\n\n---\n\n# npm\n\nsudo ln -s /usr/local/node-v12.12.0-linux-x64/bin/npm /usr/local/bin/npm\n```\n\n### 安装 taobao 的 cnpm (更快)\n\n```bash\nsudo npm install -g cnpm --registry=https://registry.npm.taobao.org\n```\n\n### 添加到全局\n\n```bash\nsudo ln -s /usr/local/node-v12.12.0-linux-x64/bin/cnpm /usr/local/bin/cnpm\n```\n\n### 查看版本\n\n![version](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/node/version.png)\n\n# The_End\n","source":"_posts/linux/linux-node.md","raw":"---\ntitle: Linux安装node环境以及cnpm\ntop_img: https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg\ncover: https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/node/node.jpg\ndate: 2020-02-28 21:14:58\ntags:\n  - node\n  - cnpm\n  - npm\ncategories:\n  - node\n---\n\n### 其实我老早以前就发现 node 版本太高也不行\n\n#### 以往的版本下载地址: https://nodejs.org/zh-cn/download/releases/\n\n# 下载并解压到 `/usr/local/` 下\n\n![node](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/node/node.png)\n\n# 设置全局\n\n### 直接链接过,记得版本对应改一下\n\n```bash\n# node\n\nsudo ln -s /usr/local/node-v12.12.0-linux-x64/bin/node /usr/local/bin/node\n\n---\n\n# npm\n\nsudo ln -s /usr/local/node-v12.12.0-linux-x64/bin/npm /usr/local/bin/npm\n```\n\n### 安装 taobao 的 cnpm (更快)\n\n```bash\nsudo npm install -g cnpm --registry=https://registry.npm.taobao.org\n```\n\n### 添加到全局\n\n```bash\nsudo ln -s /usr/local/node-v12.12.0-linux-x64/bin/cnpm /usr/local/bin/cnpm\n```\n\n### 查看版本\n\n![version](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/node/version.png)\n\n# The_End\n","slug":"linux/linux-node","published":1,"updated":"2021-07-18T07:21:12.625Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cksvxwnoe003qgubqhp86havt","content":"<h3 id=\"其实我老早以前就发现-node-版本太高也不行\"><a href=\"#其实我老早以前就发现-node-版本太高也不行\" class=\"headerlink\" title=\"其实我老早以前就发现 node 版本太高也不行\"></a>其实我老早以前就发现 node 版本太高也不行</h3><h4 id=\"以往的版本下载地址-https-nodejs-org-zh-cn-download-releases\"><a href=\"#以往的版本下载地址-https-nodejs-org-zh-cn-download-releases\" class=\"headerlink\" title=\"以往的版本下载地址: https://nodejs.org/zh-cn/download/releases/\"></a>以往的版本下载地址: <a href=\"https://nodejs.org/zh-cn/download/releases/\">https://nodejs.org/zh-cn/download/releases/</a></h4><h1 id=\"下载并解压到-usr-local-下\"><a href=\"#下载并解压到-usr-local-下\" class=\"headerlink\" title=\"下载并解压到 /usr/local/ 下\"></a>下载并解压到 <code>/usr/local/</code> 下</h1><p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/node/node.png\" alt=\"node\"></p>\n<h1 id=\"设置全局\"><a href=\"#设置全局\" class=\"headerlink\" title=\"设置全局\"></a>设置全局</h1><h3 id=\"直接链接过-记得版本对应改一下\"><a href=\"#直接链接过-记得版本对应改一下\" class=\"headerlink\" title=\"直接链接过,记得版本对应改一下\"></a>直接链接过,记得版本对应改一下</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># node</span></span><br><span class=\"line\"></span><br><span class=\"line\">sudo ln -s /usr/<span class=\"built_in\">local</span>/node-v12.12.0-linux-x64/bin/node /usr/<span class=\"built_in\">local</span>/bin/node</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># npm</span></span><br><span class=\"line\"></span><br><span class=\"line\">sudo ln -s /usr/<span class=\"built_in\">local</span>/node-v12.12.0-linux-x64/bin/npm /usr/<span class=\"built_in\">local</span>/bin/npm</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装-taobao-的-cnpm-更快\"><a href=\"#安装-taobao-的-cnpm-更快\" class=\"headerlink\" title=\"安装 taobao 的 cnpm (更快)\"></a>安装 taobao 的 cnpm (更快)</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加到全局\"><a href=\"#添加到全局\" class=\"headerlink\" title=\"添加到全局\"></a>添加到全局</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ln -s /usr/<span class=\"built_in\">local</span>/node-v12.12.0-linux-x64/bin/cnpm /usr/<span class=\"built_in\">local</span>/bin/cnpm</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看版本\"><a href=\"#查看版本\" class=\"headerlink\" title=\"查看版本\"></a>查看版本</h3><p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/node/version.png\" alt=\"version\"></p>\n<h1 id=\"The-End\"><a href=\"#The-End\" class=\"headerlink\" title=\"The_End\"></a>The_End</h1>","site":{"data":{"link":{"class1":{"class_name":"舍友","link_list":{"1":{"name":"codeAntg","link":"https://blog.csdn.net/weixin_44745147","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/fjh.jpg","descr":"那家刀削面不错","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class2":{"class_name":"致谢","link_list":{"1":{"name":"JerrC","link":"https://immyw.com","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/immyw.png","descr":"今日事,今日毕","width":"1px","style":"solid","color":"#60d0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/hexo.svg","descr":"A fast, simple & powerful blog framework","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class3":{"class_name":"友人","link_list":{"1":{"name":"Chester","link":"http://chesterlds.cn","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/chester.jpg","descr":null,"width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Wangs","link":"https://wangsss.cn/","avatar":"https://wangsss.cn/img/avatar.png","descr":"不疯魔，不成活 ~","width":"1px","style":"solid","color":"#9d9d9d","custom":"link_custom1","time":"4s","namecolor":"0094ff","descolor":"#ff9191"}}}}}},"excerpt":"","more":"<h3 id=\"其实我老早以前就发现-node-版本太高也不行\"><a href=\"#其实我老早以前就发现-node-版本太高也不行\" class=\"headerlink\" title=\"其实我老早以前就发现 node 版本太高也不行\"></a>其实我老早以前就发现 node 版本太高也不行</h3><h4 id=\"以往的版本下载地址-https-nodejs-org-zh-cn-download-releases\"><a href=\"#以往的版本下载地址-https-nodejs-org-zh-cn-download-releases\" class=\"headerlink\" title=\"以往的版本下载地址: https://nodejs.org/zh-cn/download/releases/\"></a>以往的版本下载地址: <a href=\"https://nodejs.org/zh-cn/download/releases/\">https://nodejs.org/zh-cn/download/releases/</a></h4><h1 id=\"下载并解压到-usr-local-下\"><a href=\"#下载并解压到-usr-local-下\" class=\"headerlink\" title=\"下载并解压到 /usr/local/ 下\"></a>下载并解压到 <code>/usr/local/</code> 下</h1><p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/node/node.png\" alt=\"node\"></p>\n<h1 id=\"设置全局\"><a href=\"#设置全局\" class=\"headerlink\" title=\"设置全局\"></a>设置全局</h1><h3 id=\"直接链接过-记得版本对应改一下\"><a href=\"#直接链接过-记得版本对应改一下\" class=\"headerlink\" title=\"直接链接过,记得版本对应改一下\"></a>直接链接过,记得版本对应改一下</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># node</span></span><br><span class=\"line\"></span><br><span class=\"line\">sudo ln -s /usr/<span class=\"built_in\">local</span>/node-v12.12.0-linux-x64/bin/node /usr/<span class=\"built_in\">local</span>/bin/node</span><br><span class=\"line\"></span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># npm</span></span><br><span class=\"line\"></span><br><span class=\"line\">sudo ln -s /usr/<span class=\"built_in\">local</span>/node-v12.12.0-linux-x64/bin/npm /usr/<span class=\"built_in\">local</span>/bin/npm</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装-taobao-的-cnpm-更快\"><a href=\"#安装-taobao-的-cnpm-更快\" class=\"headerlink\" title=\"安装 taobao 的 cnpm (更快)\"></a>安装 taobao 的 cnpm (更快)</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加到全局\"><a href=\"#添加到全局\" class=\"headerlink\" title=\"添加到全局\"></a>添加到全局</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ln -s /usr/<span class=\"built_in\">local</span>/node-v12.12.0-linux-x64/bin/cnpm /usr/<span class=\"built_in\">local</span>/bin/cnpm</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查看版本\"><a href=\"#查看版本\" class=\"headerlink\" title=\"查看版本\"></a>查看版本</h3><p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/node/version.png\" alt=\"version\"></p>\n<h1 id=\"The-End\"><a href=\"#The-End\" class=\"headerlink\" title=\"The_End\"></a>The_End</h1>"},{"title":"ArchLinux 双显卡方案","top_img":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/linux/linux.jpg","cover":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/i3/archscreenshotcmin.png","date":"2021-04-28T15:08:38.000Z","_content":"\n![Fuck NVIDIA](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/nvidia/fuck-nvidia.jpeg)\n\n# So NVIDIA ~ Fuck You !\n\n之前因为装 `NVIDIA` 驱动 , `sddm` 进不去了 , 之后几经周折 , 我已把它拿下 , 即使他挂了 , 我也能让他起死回生 (开玩笑,开玩笑 ~ ~ ~ )\n\n# 1.如果你不打算折腾,只想用 `intel` 核显\n\n```bash\nsudo pacman -S xf86-video-intel\n```\n\n# 2.`intel` + `nvidia` 双显卡切换\n\n```bash\nsudo pacman -S nvidia bbswitch\nsudo pacman -S optimus-manager-qt-kde  (这个应该在 archlinuxcn 源里,我直接 `yay -S optimus-manager-qt`)\n```\n\n##### 如果安装 `optimus-manager-qt` 最后提示编译失败,重新安装 `base-devel` 就行,好像是在那里面,也没准是之前我少装了什么包,最后重启\n\n### 重启后打开`optimus-manager-qt`\n\n![optimus-manager-qt](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/nvidia/optimus-manager-qt.png)\n\n### 右击可以切换模式\n\n![optimus-manager-at-icon](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/nvidia/optimus-manager-qt-icon.png)\n\n# The_End\n","source":"_posts/linux/linux-nvidia.md","raw":"---\ntitle: ArchLinux 双显卡方案\ntop_img: https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/linux/linux.jpg\ncover: https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/i3/archscreenshotcmin.png\ndate: 2021-04-28 23:08:38\ntags:\n  - linux\n  - arch\n  - nvidia\n  - bbswitch\n  - optimus-manager\ncategories:\n  - linux\n  - arch\n---\n\n![Fuck NVIDIA](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/nvidia/fuck-nvidia.jpeg)\n\n# So NVIDIA ~ Fuck You !\n\n之前因为装 `NVIDIA` 驱动 , `sddm` 进不去了 , 之后几经周折 , 我已把它拿下 , 即使他挂了 , 我也能让他起死回生 (开玩笑,开玩笑 ~ ~ ~ )\n\n# 1.如果你不打算折腾,只想用 `intel` 核显\n\n```bash\nsudo pacman -S xf86-video-intel\n```\n\n# 2.`intel` + `nvidia` 双显卡切换\n\n```bash\nsudo pacman -S nvidia bbswitch\nsudo pacman -S optimus-manager-qt-kde  (这个应该在 archlinuxcn 源里,我直接 `yay -S optimus-manager-qt`)\n```\n\n##### 如果安装 `optimus-manager-qt` 最后提示编译失败,重新安装 `base-devel` 就行,好像是在那里面,也没准是之前我少装了什么包,最后重启\n\n### 重启后打开`optimus-manager-qt`\n\n![optimus-manager-qt](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/nvidia/optimus-manager-qt.png)\n\n### 右击可以切换模式\n\n![optimus-manager-at-icon](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/nvidia/optimus-manager-qt-icon.png)\n\n# The_End\n","slug":"linux/linux-nvidia","published":1,"updated":"2021-07-18T07:21:25.211Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cksvxwnof003tgubq03yggj2r","content":"<p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/nvidia/fuck-nvidia.jpeg\" alt=\"Fuck NVIDIA\"></p>\n<h1 id=\"So-NVIDIA-Fuck-You\"><a href=\"#So-NVIDIA-Fuck-You\" class=\"headerlink\" title=\"So NVIDIA ~ Fuck You !\"></a>So NVIDIA ~ Fuck You !</h1><p>之前因为装 <code>NVIDIA</code> 驱动 , <code>sddm</code> 进不去了 , 之后几经周折 , 我已把它拿下 , 即使他挂了 , 我也能让他起死回生 (开玩笑,开玩笑 ~ ~ ~ )</p>\n<h1 id=\"1-如果你不打算折腾-只想用-intel-核显\"><a href=\"#1-如果你不打算折腾-只想用-intel-核显\" class=\"headerlink\" title=\"1.如果你不打算折腾,只想用 intel 核显\"></a>1.如果你不打算折腾,只想用 <code>intel</code> 核显</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -S xf86-video-intel</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"2-intel-nvidia-双显卡切换\"><a href=\"#2-intel-nvidia-双显卡切换\" class=\"headerlink\" title=\"2.intel + nvidia 双显卡切换\"></a>2.<code>intel</code> + <code>nvidia</code> 双显卡切换</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -S nvidia bbswitch</span><br><span class=\"line\">sudo pacman -S optimus-manager-qt-kde  (这个应该在 archlinuxcn 源里,我直接 `yay -S optimus-manager-qt`)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"如果安装-optimus-manager-qt-最后提示编译失败-重新安装-base-devel-就行-好像是在那里面-也没准是之前我少装了什么包-最后重启\"><a href=\"#如果安装-optimus-manager-qt-最后提示编译失败-重新安装-base-devel-就行-好像是在那里面-也没准是之前我少装了什么包-最后重启\" class=\"headerlink\" title=\"如果安装 optimus-manager-qt 最后提示编译失败,重新安装 base-devel 就行,好像是在那里面,也没准是之前我少装了什么包,最后重启\"></a>如果安装 <code>optimus-manager-qt</code> 最后提示编译失败,重新安装 <code>base-devel</code> 就行,好像是在那里面,也没准是之前我少装了什么包,最后重启</h5><h3 id=\"重启后打开optimus-manager-qt\"><a href=\"#重启后打开optimus-manager-qt\" class=\"headerlink\" title=\"重启后打开optimus-manager-qt\"></a>重启后打开<code>optimus-manager-qt</code></h3><p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/nvidia/optimus-manager-qt.png\" alt=\"optimus-manager-qt\"></p>\n<h3 id=\"右击可以切换模式\"><a href=\"#右击可以切换模式\" class=\"headerlink\" title=\"右击可以切换模式\"></a>右击可以切换模式</h3><p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/nvidia/optimus-manager-qt-icon.png\" alt=\"optimus-manager-at-icon\"></p>\n<h1 id=\"The-End\"><a href=\"#The-End\" class=\"headerlink\" title=\"The_End\"></a>The_End</h1>","site":{"data":{"link":{"class1":{"class_name":"舍友","link_list":{"1":{"name":"codeAntg","link":"https://blog.csdn.net/weixin_44745147","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/fjh.jpg","descr":"那家刀削面不错","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class2":{"class_name":"致谢","link_list":{"1":{"name":"JerrC","link":"https://immyw.com","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/immyw.png","descr":"今日事,今日毕","width":"1px","style":"solid","color":"#60d0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/hexo.svg","descr":"A fast, simple & powerful blog framework","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class3":{"class_name":"友人","link_list":{"1":{"name":"Chester","link":"http://chesterlds.cn","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/chester.jpg","descr":null,"width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Wangs","link":"https://wangsss.cn/","avatar":"https://wangsss.cn/img/avatar.png","descr":"不疯魔，不成活 ~","width":"1px","style":"solid","color":"#9d9d9d","custom":"link_custom1","time":"4s","namecolor":"0094ff","descolor":"#ff9191"}}}}}},"excerpt":"","more":"<p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/nvidia/fuck-nvidia.jpeg\" alt=\"Fuck NVIDIA\"></p>\n<h1 id=\"So-NVIDIA-Fuck-You\"><a href=\"#So-NVIDIA-Fuck-You\" class=\"headerlink\" title=\"So NVIDIA ~ Fuck You !\"></a>So NVIDIA ~ Fuck You !</h1><p>之前因为装 <code>NVIDIA</code> 驱动 , <code>sddm</code> 进不去了 , 之后几经周折 , 我已把它拿下 , 即使他挂了 , 我也能让他起死回生 (开玩笑,开玩笑 ~ ~ ~ )</p>\n<h1 id=\"1-如果你不打算折腾-只想用-intel-核显\"><a href=\"#1-如果你不打算折腾-只想用-intel-核显\" class=\"headerlink\" title=\"1.如果你不打算折腾,只想用 intel 核显\"></a>1.如果你不打算折腾,只想用 <code>intel</code> 核显</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -S xf86-video-intel</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"2-intel-nvidia-双显卡切换\"><a href=\"#2-intel-nvidia-双显卡切换\" class=\"headerlink\" title=\"2.intel + nvidia 双显卡切换\"></a>2.<code>intel</code> + <code>nvidia</code> 双显卡切换</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pacman -S nvidia bbswitch</span><br><span class=\"line\">sudo pacman -S optimus-manager-qt-kde  (这个应该在 archlinuxcn 源里,我直接 `yay -S optimus-manager-qt`)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"如果安装-optimus-manager-qt-最后提示编译失败-重新安装-base-devel-就行-好像是在那里面-也没准是之前我少装了什么包-最后重启\"><a href=\"#如果安装-optimus-manager-qt-最后提示编译失败-重新安装-base-devel-就行-好像是在那里面-也没准是之前我少装了什么包-最后重启\" class=\"headerlink\" title=\"如果安装 optimus-manager-qt 最后提示编译失败,重新安装 base-devel 就行,好像是在那里面,也没准是之前我少装了什么包,最后重启\"></a>如果安装 <code>optimus-manager-qt</code> 最后提示编译失败,重新安装 <code>base-devel</code> 就行,好像是在那里面,也没准是之前我少装了什么包,最后重启</h5><h3 id=\"重启后打开optimus-manager-qt\"><a href=\"#重启后打开optimus-manager-qt\" class=\"headerlink\" title=\"重启后打开optimus-manager-qt\"></a>重启后打开<code>optimus-manager-qt</code></h3><p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/nvidia/optimus-manager-qt.png\" alt=\"optimus-manager-qt\"></p>\n<h3 id=\"右击可以切换模式\"><a href=\"#右击可以切换模式\" class=\"headerlink\" title=\"右击可以切换模式\"></a>右击可以切换模式</h3><p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/nvidia/optimus-manager-qt-icon.png\" alt=\"optimus-manager-at-icon\"></p>\n<h1 id=\"The-End\"><a href=\"#The-End\" class=\"headerlink\" title=\"The_End\"></a>The_End</h1>"},{"title":"更换 grub 主题","top_img":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/linux/linux.jpeg","cover":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/setGrubTheme/preview.gif","date":"2020-06-01T16:13:17.000Z","_content":"\n#### 默认的 grub 界面比较简陋\n\n![grubThemes](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/setGrubTheme/grub.jpeg)\n\n然后突然有想法了,想换个主题\n\n# 具体操作\n\n## 1.下载 grub 主题包\n\n> ### 去这个地址下载主题(应该是这个地址)： https://www.gnome-look.org/browse/cat/109/order/latest/\n\n![grubThemes](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/setGrubTheme/grubThemes.png)\n\n比如这个主题\n![grub](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/setGrubTheme/preview.gif)\n\n### 点击 `Files`\n\n![files](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/setGrubTheme/files.png)\n\n## 2.配置 grub\n\n### 自动安装\n\n每个主题包里应该都有 `README.md` 文件,当然你完全可以按照他说明的做\n\n把整个解压的文件夹放到：\n\n```bash\n/boot/grub/themes/\n```\n\n#### 好像大部分的主题包里都有一个 `install.sh` 文件 ,直接运行它也行 <span id=\"green-block\">推荐</span>\n\n```bash\n给它可执行权限\nsudo chmod +x install.sh\n---\n运行\nsudo ./install.sh\n```\n\n### 手动安装\n\n#### 如果是 Debian 系的，直接安装 grub-customizer：\n\n```bash\nsudo apt install grub-customizer\n```\n\n#### 或者编辑这个文件 <span id=\"green-block\">推荐</span> ：\n\n```bash\n/etc/default/grub\n```\n\n#### 添加下面一行：\n\n```bash\nGRUB_THEME=\"/boot/grub/themes/主题包名/theme.txt\"\n```\n\n### 3.更新 grub\n\n#### 执行\n\n```bash\nsudo update-grub\n```\n\n#### 或者\n\n```bash\nsudo grub-mkconfig -o /boot/grub/grub.cfg\n```\n\n主题包里面的背景图片和图标可自定义\n\n完事~\n\n# The_End\n","source":"_posts/linux/linux-setGrubTheme.md","raw":"---\ntitle: 更换 grub 主题\ntop_img: https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/linux/linux.jpeg\ncover: https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/setGrubTheme/preview.gif\ndate: 2020-06-02 00:13:17\ntags:\n  - linux\n  - grub\ncategories:\n  - linux\n---\n\n#### 默认的 grub 界面比较简陋\n\n![grubThemes](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/setGrubTheme/grub.jpeg)\n\n然后突然有想法了,想换个主题\n\n# 具体操作\n\n## 1.下载 grub 主题包\n\n> ### 去这个地址下载主题(应该是这个地址)： https://www.gnome-look.org/browse/cat/109/order/latest/\n\n![grubThemes](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/setGrubTheme/grubThemes.png)\n\n比如这个主题\n![grub](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/setGrubTheme/preview.gif)\n\n### 点击 `Files`\n\n![files](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/setGrubTheme/files.png)\n\n## 2.配置 grub\n\n### 自动安装\n\n每个主题包里应该都有 `README.md` 文件,当然你完全可以按照他说明的做\n\n把整个解压的文件夹放到：\n\n```bash\n/boot/grub/themes/\n```\n\n#### 好像大部分的主题包里都有一个 `install.sh` 文件 ,直接运行它也行 <span id=\"green-block\">推荐</span>\n\n```bash\n给它可执行权限\nsudo chmod +x install.sh\n---\n运行\nsudo ./install.sh\n```\n\n### 手动安装\n\n#### 如果是 Debian 系的，直接安装 grub-customizer：\n\n```bash\nsudo apt install grub-customizer\n```\n\n#### 或者编辑这个文件 <span id=\"green-block\">推荐</span> ：\n\n```bash\n/etc/default/grub\n```\n\n#### 添加下面一行：\n\n```bash\nGRUB_THEME=\"/boot/grub/themes/主题包名/theme.txt\"\n```\n\n### 3.更新 grub\n\n#### 执行\n\n```bash\nsudo update-grub\n```\n\n#### 或者\n\n```bash\nsudo grub-mkconfig -o /boot/grub/grub.cfg\n```\n\n主题包里面的背景图片和图标可自定义\n\n完事~\n\n# The_End\n","slug":"linux/linux-setGrubTheme","published":1,"updated":"2021-07-18T07:22:02.819Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cksvxwnog003xgubqbphng1hx","content":"<h4 id=\"默认的-grub-界面比较简陋\"><a href=\"#默认的-grub-界面比较简陋\" class=\"headerlink\" title=\"默认的 grub 界面比较简陋\"></a>默认的 grub 界面比较简陋</h4><p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/setGrubTheme/grub.jpeg\" alt=\"grubThemes\"></p>\n<p>然后突然有想法了,想换个主题</p>\n<h1 id=\"具体操作\"><a href=\"#具体操作\" class=\"headerlink\" title=\"具体操作\"></a>具体操作</h1><h2 id=\"1-下载-grub-主题包\"><a href=\"#1-下载-grub-主题包\" class=\"headerlink\" title=\"1.下载 grub 主题包\"></a>1.下载 grub 主题包</h2><blockquote>\n<h3 id=\"去这个地址下载主题-应该是这个地址-：-https-www-gnome-look-org-browse-cat-109-order-latest\"><a href=\"#去这个地址下载主题-应该是这个地址-：-https-www-gnome-look-org-browse-cat-109-order-latest\" class=\"headerlink\" title=\"去这个地址下载主题(应该是这个地址)： https://www.gnome-look.org/browse/cat/109/order/latest/\"></a>去这个地址下载主题(应该是这个地址)： <a href=\"https://www.gnome-look.org/browse/cat/109/order/latest/\">https://www.gnome-look.org/browse/cat/109/order/latest/</a></h3></blockquote>\n<p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/setGrubTheme/grubThemes.png\" alt=\"grubThemes\"></p>\n<p>比如这个主题<br><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/setGrubTheme/preview.gif\" alt=\"grub\"></p>\n<h3 id=\"点击-Files\"><a href=\"#点击-Files\" class=\"headerlink\" title=\"点击 Files\"></a>点击 <code>Files</code></h3><p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/setGrubTheme/files.png\" alt=\"files\"></p>\n<h2 id=\"2-配置-grub\"><a href=\"#2-配置-grub\" class=\"headerlink\" title=\"2.配置 grub\"></a>2.配置 grub</h2><h3 id=\"自动安装\"><a href=\"#自动安装\" class=\"headerlink\" title=\"自动安装\"></a>自动安装</h3><p>每个主题包里应该都有 <code>README.md</code> 文件,当然你完全可以按照他说明的做</p>\n<p>把整个解压的文件夹放到：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/boot/grub/themes/</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"好像大部分的主题包里都有一个-install-sh-文件-直接运行它也行-推荐\"><a href=\"#好像大部分的主题包里都有一个-install-sh-文件-直接运行它也行-推荐\" class=\"headerlink\" title=\"好像大部分的主题包里都有一个 install.sh 文件 ,直接运行它也行 推荐\"></a>好像大部分的主题包里都有一个 <code>install.sh</code> 文件 ,直接运行它也行 <span id=\"green-block\">推荐</span></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">给它可执行权限</span><br><span class=\"line\">sudo chmod +x install.sh</span><br><span class=\"line\">---</span><br><span class=\"line\">运行</span><br><span class=\"line\">sudo ./install.sh</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"手动安装\"><a href=\"#手动安装\" class=\"headerlink\" title=\"手动安装\"></a>手动安装</h3><h4 id=\"如果是-Debian-系的，直接安装-grub-customizer：\"><a href=\"#如果是-Debian-系的，直接安装-grub-customizer：\" class=\"headerlink\" title=\"如果是 Debian 系的，直接安装 grub-customizer：\"></a>如果是 Debian 系的，直接安装 grub-customizer：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install grub-customizer</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"或者编辑这个文件-推荐-：\"><a href=\"#或者编辑这个文件-推荐-：\" class=\"headerlink\" title=\"或者编辑这个文件 推荐 ：\"></a>或者编辑这个文件 <span id=\"green-block\">推荐</span> ：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/default/grub</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"添加下面一行：\"><a href=\"#添加下面一行：\" class=\"headerlink\" title=\"添加下面一行：\"></a>添加下面一行：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GRUB_THEME=<span class=\"string\">&quot;/boot/grub/themes/主题包名/theme.txt&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-更新-grub\"><a href=\"#3-更新-grub\" class=\"headerlink\" title=\"3.更新 grub\"></a>3.更新 grub</h3><h4 id=\"执行\"><a href=\"#执行\" class=\"headerlink\" title=\"执行\"></a>执行</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo update-grub</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"或者\"><a href=\"#或者\" class=\"headerlink\" title=\"或者\"></a>或者</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo grub-mkconfig -o /boot/grub/grub.cfg</span><br></pre></td></tr></table></figure>\n\n<p>主题包里面的背景图片和图标可自定义</p>\n<p>完事~</p>\n<h1 id=\"The-End\"><a href=\"#The-End\" class=\"headerlink\" title=\"The_End\"></a>The_End</h1>","site":{"data":{"link":{"class1":{"class_name":"舍友","link_list":{"1":{"name":"codeAntg","link":"https://blog.csdn.net/weixin_44745147","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/fjh.jpg","descr":"那家刀削面不错","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class2":{"class_name":"致谢","link_list":{"1":{"name":"JerrC","link":"https://immyw.com","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/immyw.png","descr":"今日事,今日毕","width":"1px","style":"solid","color":"#60d0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/hexo.svg","descr":"A fast, simple & powerful blog framework","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class3":{"class_name":"友人","link_list":{"1":{"name":"Chester","link":"http://chesterlds.cn","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/chester.jpg","descr":null,"width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Wangs","link":"https://wangsss.cn/","avatar":"https://wangsss.cn/img/avatar.png","descr":"不疯魔，不成活 ~","width":"1px","style":"solid","color":"#9d9d9d","custom":"link_custom1","time":"4s","namecolor":"0094ff","descolor":"#ff9191"}}}}}},"excerpt":"","more":"<h4 id=\"默认的-grub-界面比较简陋\"><a href=\"#默认的-grub-界面比较简陋\" class=\"headerlink\" title=\"默认的 grub 界面比较简陋\"></a>默认的 grub 界面比较简陋</h4><p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/setGrubTheme/grub.jpeg\" alt=\"grubThemes\"></p>\n<p>然后突然有想法了,想换个主题</p>\n<h1 id=\"具体操作\"><a href=\"#具体操作\" class=\"headerlink\" title=\"具体操作\"></a>具体操作</h1><h2 id=\"1-下载-grub-主题包\"><a href=\"#1-下载-grub-主题包\" class=\"headerlink\" title=\"1.下载 grub 主题包\"></a>1.下载 grub 主题包</h2><blockquote>\n<h3 id=\"去这个地址下载主题-应该是这个地址-：-https-www-gnome-look-org-browse-cat-109-order-latest\"><a href=\"#去这个地址下载主题-应该是这个地址-：-https-www-gnome-look-org-browse-cat-109-order-latest\" class=\"headerlink\" title=\"去这个地址下载主题(应该是这个地址)： https://www.gnome-look.org/browse/cat/109/order/latest/\"></a>去这个地址下载主题(应该是这个地址)： <a href=\"https://www.gnome-look.org/browse/cat/109/order/latest/\">https://www.gnome-look.org/browse/cat/109/order/latest/</a></h3></blockquote>\n<p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/setGrubTheme/grubThemes.png\" alt=\"grubThemes\"></p>\n<p>比如这个主题<br><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/setGrubTheme/preview.gif\" alt=\"grub\"></p>\n<h3 id=\"点击-Files\"><a href=\"#点击-Files\" class=\"headerlink\" title=\"点击 Files\"></a>点击 <code>Files</code></h3><p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/setGrubTheme/files.png\" alt=\"files\"></p>\n<h2 id=\"2-配置-grub\"><a href=\"#2-配置-grub\" class=\"headerlink\" title=\"2.配置 grub\"></a>2.配置 grub</h2><h3 id=\"自动安装\"><a href=\"#自动安装\" class=\"headerlink\" title=\"自动安装\"></a>自动安装</h3><p>每个主题包里应该都有 <code>README.md</code> 文件,当然你完全可以按照他说明的做</p>\n<p>把整个解压的文件夹放到：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/boot/grub/themes/</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"好像大部分的主题包里都有一个-install-sh-文件-直接运行它也行-推荐\"><a href=\"#好像大部分的主题包里都有一个-install-sh-文件-直接运行它也行-推荐\" class=\"headerlink\" title=\"好像大部分的主题包里都有一个 install.sh 文件 ,直接运行它也行 推荐\"></a>好像大部分的主题包里都有一个 <code>install.sh</code> 文件 ,直接运行它也行 <span id=\"green-block\">推荐</span></h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">给它可执行权限</span><br><span class=\"line\">sudo chmod +x install.sh</span><br><span class=\"line\">---</span><br><span class=\"line\">运行</span><br><span class=\"line\">sudo ./install.sh</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"手动安装\"><a href=\"#手动安装\" class=\"headerlink\" title=\"手动安装\"></a>手动安装</h3><h4 id=\"如果是-Debian-系的，直接安装-grub-customizer：\"><a href=\"#如果是-Debian-系的，直接安装-grub-customizer：\" class=\"headerlink\" title=\"如果是 Debian 系的，直接安装 grub-customizer：\"></a>如果是 Debian 系的，直接安装 grub-customizer：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install grub-customizer</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"或者编辑这个文件-推荐-：\"><a href=\"#或者编辑这个文件-推荐-：\" class=\"headerlink\" title=\"或者编辑这个文件 推荐 ：\"></a>或者编辑这个文件 <span id=\"green-block\">推荐</span> ：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/default/grub</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"添加下面一行：\"><a href=\"#添加下面一行：\" class=\"headerlink\" title=\"添加下面一行：\"></a>添加下面一行：</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GRUB_THEME=<span class=\"string\">&quot;/boot/grub/themes/主题包名/theme.txt&quot;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-更新-grub\"><a href=\"#3-更新-grub\" class=\"headerlink\" title=\"3.更新 grub\"></a>3.更新 grub</h3><h4 id=\"执行\"><a href=\"#执行\" class=\"headerlink\" title=\"执行\"></a>执行</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo update-grub</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"或者\"><a href=\"#或者\" class=\"headerlink\" title=\"或者\"></a>或者</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo grub-mkconfig -o /boot/grub/grub.cfg</span><br></pre></td></tr></table></figure>\n\n<p>主题包里面的背景图片和图标可自定义</p>\n<p>完事~</p>\n<h1 id=\"The-End\"><a href=\"#The-End\" class=\"headerlink\" title=\"The_End\"></a>The_End</h1>"},{"title":"Node","date":"2021-07-12T11:57:44.000Z","top_img":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg","cover":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/node/node.jpg","comments":1,"_content":"\n# Node\n\n![node](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/node/nodeall.png)\n\n# Node.js 介绍\n\n`Node.js` 不是一门语言 , 不是库或者框架 , `Node.js` 是一个 `JavaScript` 运行时的环境 , `Node.js` 可以解析和执行 `JavaScript` 代码\n\n## 浏览器中 JavaScript 由什么组成\n\n- `EcmaScript` : 基本语法 , `if` , `var` , `function` , `Object` , `Array`\n- `DOM`\n- `BOM`\n\n## Node.js 中的 JavaScript\n\n- **没有 `BOM` 和 `DOM` , 只有 `EcmaScript`**\n- 在 `Node.js` 这个 `JavaScript` 执行环境中为 `JavaScript` 提供了一些服务器级别的操作 `API` , 例如 : 文件读写 , 网络服务构建 , 网络请求与响应等 , 其实 `node` 学习相当于在学习后台服务处理开发 , 只不过后台服务编程使用的是 `JavaScript` 语言而已\n- **特性 : 事件驱动 , 非阻塞 `I/O` 模型 ( 简单说就是异步操作 ) , 轻量高效 , 随着学习的深入大家会明白这些特性的**\n- `npm` 是世界上最大的 `Node.js` 开源库生态系统 , 用来管理 `JavaScript` 相关的包 , 这样的目的是为了更方便的让开发人员使用它\n\n### 使用 `npm` 安装相关包的命令 ( 以 `jquery` 为例 , 先了解即可 ) :\n\n```bash\nnpm install jquery\n```\n\n**包名后面加 `@` 可指定版本号**\n\n```bash\nnpm install jquery@2\n```\n\n## Node.js 能够做什么\n\n- `Web` 服务器后台\n- 命令行工具 , 例如 : `npm` , `git` , `webpack` 等\n- 前端工程师接触 `node` 最多的是命令行工具 , 一般很少自己写 , 主要使用别人写好的第三方包\n\n## 小结\n\n- `B/S` 编程模型\n  - `Browser - Server`\n  - `back-end` ( 后台开发 )\n  - 任何服务端技术这种 `BS` 编程模型都一样 , 与语言无关\n  - `Node` 只是我们学习 `BS` 编程模型的一个工具而已\n- 模块化编程\n  **模块化**就是将不同功能的函数封装起来 , 并提供使用接口 , 他们彼此之间互不影响\n  - `RequireJS`\n  - `SeaJs`\n  - 简单的来说 , 以前在我们 `JavaScript` 中只能通过`<script>`标签来引入 `js` 脚本文件 , 在 `node` 中可以更多方式来引入加载 `JavaScript` 脚本\n- `Node` 常用 `API`\n\n# Node 起步\n\n## 安装 Node 环境\n\n安装依赖 : `npm install 依赖名字` , `install` 可简写为 `i`\n后面加 `@` 可指定版本号 , 比如\n\n```bash\nnpm i jquery@2.2\n```\n\n**参数 :**\n\n- `-g` 表示全局安装\n- `--save` 表示生产环境 , 简写是 `-S`\n- `-dev` 是开发环境 , 简写是 `-D`\n\n**国内 npm 比较慢 , 可安装淘宝镜像版的 cnpm**\n\n```bash\nnpm install cnpm --registry=https://registry.npm.taobao.org\n```\n\n## Hello World\n\n- 第一步 : 创建编写 `JavaScript` 脚本文件\n\n```js\nconsole.log(\"Hello World\");\n```\n\n- 第二步 : 打开终端 , 定位到脚本文件所属目录\n- 第三步 : 输入 `node 文件名` 执行对应的文件\n\n```bash\nnode HelloWorld.js\n```\n\n## 读写文件\n\n浏览器中 `JavaScript` 是没有文件操作能力的 , 但是 `Node` 中的 `JavaScript` 具有文件操作的能力 , `Node` 中有一个 `fs` 模块 , `fs` 是 `file-system` 的简写 , 就是文件系统的意思 , 在 `Node` 中如果想要进行文件操作 , 就必须引入 `fs` 这个核心模块\n\n- 引入 `fs` 核心模块\n\n```js\nlet fs = require(\"fs\");\n```\n\n- 用来读取文件的方法\n\n```js\nfs.readFile();\n```\n\n- 用来写文件的方法\n\n```js\nfs.writeFile();\n```\n\n## http 服务\n\n服务器是干嘛的 ?\n\n- 提供服务：对数据的服务\n- 发请求\n- 接收请求\n- 处理请求\n- 给个响应\n\n我们可以使用 `Node` 非常轻松的构建一个 `Web` 服务器 , 在 `Node` 中 , `专门有个核心模块：http`\n思路 :\n\n- 加载 `http` 核心模块\n\n```js\n// 1. 加载 http 核心模块\nlet http = require(\"http\");\n```\n\n- 创建一个 `Web` 服务器\n\n```js\n// 2.使用 http.createServer() 方法创建一个Web服务器 , 返回一个 Server 实例\nlet server = http.createServer();\n```\n\n- 注册 `request` 请求事件\n\n```js\n// 3. 注册 request 请求事件\n// 还记得刚才说的 node.js 的特性 : 事件驱动么 , 就是这种用法\n// 还记得刚才说的 node.js 的特性 : 回调函数么 , 就是第二个参数的用法\n\nserver.on(\"request\", function () {\n  console.log(\"收到客户端的请求了啊\");\n});\n```\n\n- 绑定端口号 , 启动服务器\n\n```js\n// 4. 绑定端口号 , 启动服务器\nserver.listen(3000, function () {\n  console.log(\n    \"服务器启动成功了 , 可以通过浏览器访问http:localhost:3000发请求了\"\n  );\n});\n```\n","source":"_posts/node/node-fs-http.md","raw":"---\ntitle: Node\ndate: 2021-07-12 19:57:44\ntop_img: https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg\ncover: https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/node/node.jpg\ntags:\n  - node\n  - js\n  - javascript\n  - fs\n  - http\ncategories:\n  - node\ncomments:\n---\n\n# Node\n\n![node](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/node/nodeall.png)\n\n# Node.js 介绍\n\n`Node.js` 不是一门语言 , 不是库或者框架 , `Node.js` 是一个 `JavaScript` 运行时的环境 , `Node.js` 可以解析和执行 `JavaScript` 代码\n\n## 浏览器中 JavaScript 由什么组成\n\n- `EcmaScript` : 基本语法 , `if` , `var` , `function` , `Object` , `Array`\n- `DOM`\n- `BOM`\n\n## Node.js 中的 JavaScript\n\n- **没有 `BOM` 和 `DOM` , 只有 `EcmaScript`**\n- 在 `Node.js` 这个 `JavaScript` 执行环境中为 `JavaScript` 提供了一些服务器级别的操作 `API` , 例如 : 文件读写 , 网络服务构建 , 网络请求与响应等 , 其实 `node` 学习相当于在学习后台服务处理开发 , 只不过后台服务编程使用的是 `JavaScript` 语言而已\n- **特性 : 事件驱动 , 非阻塞 `I/O` 模型 ( 简单说就是异步操作 ) , 轻量高效 , 随着学习的深入大家会明白这些特性的**\n- `npm` 是世界上最大的 `Node.js` 开源库生态系统 , 用来管理 `JavaScript` 相关的包 , 这样的目的是为了更方便的让开发人员使用它\n\n### 使用 `npm` 安装相关包的命令 ( 以 `jquery` 为例 , 先了解即可 ) :\n\n```bash\nnpm install jquery\n```\n\n**包名后面加 `@` 可指定版本号**\n\n```bash\nnpm install jquery@2\n```\n\n## Node.js 能够做什么\n\n- `Web` 服务器后台\n- 命令行工具 , 例如 : `npm` , `git` , `webpack` 等\n- 前端工程师接触 `node` 最多的是命令行工具 , 一般很少自己写 , 主要使用别人写好的第三方包\n\n## 小结\n\n- `B/S` 编程模型\n  - `Browser - Server`\n  - `back-end` ( 后台开发 )\n  - 任何服务端技术这种 `BS` 编程模型都一样 , 与语言无关\n  - `Node` 只是我们学习 `BS` 编程模型的一个工具而已\n- 模块化编程\n  **模块化**就是将不同功能的函数封装起来 , 并提供使用接口 , 他们彼此之间互不影响\n  - `RequireJS`\n  - `SeaJs`\n  - 简单的来说 , 以前在我们 `JavaScript` 中只能通过`<script>`标签来引入 `js` 脚本文件 , 在 `node` 中可以更多方式来引入加载 `JavaScript` 脚本\n- `Node` 常用 `API`\n\n# Node 起步\n\n## 安装 Node 环境\n\n安装依赖 : `npm install 依赖名字` , `install` 可简写为 `i`\n后面加 `@` 可指定版本号 , 比如\n\n```bash\nnpm i jquery@2.2\n```\n\n**参数 :**\n\n- `-g` 表示全局安装\n- `--save` 表示生产环境 , 简写是 `-S`\n- `-dev` 是开发环境 , 简写是 `-D`\n\n**国内 npm 比较慢 , 可安装淘宝镜像版的 cnpm**\n\n```bash\nnpm install cnpm --registry=https://registry.npm.taobao.org\n```\n\n## Hello World\n\n- 第一步 : 创建编写 `JavaScript` 脚本文件\n\n```js\nconsole.log(\"Hello World\");\n```\n\n- 第二步 : 打开终端 , 定位到脚本文件所属目录\n- 第三步 : 输入 `node 文件名` 执行对应的文件\n\n```bash\nnode HelloWorld.js\n```\n\n## 读写文件\n\n浏览器中 `JavaScript` 是没有文件操作能力的 , 但是 `Node` 中的 `JavaScript` 具有文件操作的能力 , `Node` 中有一个 `fs` 模块 , `fs` 是 `file-system` 的简写 , 就是文件系统的意思 , 在 `Node` 中如果想要进行文件操作 , 就必须引入 `fs` 这个核心模块\n\n- 引入 `fs` 核心模块\n\n```js\nlet fs = require(\"fs\");\n```\n\n- 用来读取文件的方法\n\n```js\nfs.readFile();\n```\n\n- 用来写文件的方法\n\n```js\nfs.writeFile();\n```\n\n## http 服务\n\n服务器是干嘛的 ?\n\n- 提供服务：对数据的服务\n- 发请求\n- 接收请求\n- 处理请求\n- 给个响应\n\n我们可以使用 `Node` 非常轻松的构建一个 `Web` 服务器 , 在 `Node` 中 , `专门有个核心模块：http`\n思路 :\n\n- 加载 `http` 核心模块\n\n```js\n// 1. 加载 http 核心模块\nlet http = require(\"http\");\n```\n\n- 创建一个 `Web` 服务器\n\n```js\n// 2.使用 http.createServer() 方法创建一个Web服务器 , 返回一个 Server 实例\nlet server = http.createServer();\n```\n\n- 注册 `request` 请求事件\n\n```js\n// 3. 注册 request 请求事件\n// 还记得刚才说的 node.js 的特性 : 事件驱动么 , 就是这种用法\n// 还记得刚才说的 node.js 的特性 : 回调函数么 , 就是第二个参数的用法\n\nserver.on(\"request\", function () {\n  console.log(\"收到客户端的请求了啊\");\n});\n```\n\n- 绑定端口号 , 启动服务器\n\n```js\n// 4. 绑定端口号 , 启动服务器\nserver.listen(3000, function () {\n  console.log(\n    \"服务器启动成功了 , 可以通过浏览器访问http:localhost:3000发请求了\"\n  );\n});\n```\n","slug":"node/node-fs-http","published":1,"updated":"2021-07-18T09:29:59.938Z","layout":"post","photos":[],"link":"","_id":"cksvxwnoh003zgubq31fsg68h","content":"<h1 id=\"Node\"><a href=\"#Node\" class=\"headerlink\" title=\"Node\"></a>Node</h1><p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/node/nodeall.png\" alt=\"node\"></p>\n<h1 id=\"Node-js-介绍\"><a href=\"#Node-js-介绍\" class=\"headerlink\" title=\"Node.js 介绍\"></a>Node.js 介绍</h1><p><code>Node.js</code> 不是一门语言 , 不是库或者框架 , <code>Node.js</code> 是一个 <code>JavaScript</code> 运行时的环境 , <code>Node.js</code> 可以解析和执行 <code>JavaScript</code> 代码</p>\n<h2 id=\"浏览器中-JavaScript-由什么组成\"><a href=\"#浏览器中-JavaScript-由什么组成\" class=\"headerlink\" title=\"浏览器中 JavaScript 由什么组成\"></a>浏览器中 JavaScript 由什么组成</h2><ul>\n<li><code>EcmaScript</code> : 基本语法 , <code>if</code> , <code>var</code> , <code>function</code> , <code>Object</code> , <code>Array</code></li>\n<li><code>DOM</code></li>\n<li><code>BOM</code></li>\n</ul>\n<h2 id=\"Node-js-中的-JavaScript\"><a href=\"#Node-js-中的-JavaScript\" class=\"headerlink\" title=\"Node.js 中的 JavaScript\"></a>Node.js 中的 JavaScript</h2><ul>\n<li><strong>没有 <code>BOM</code> 和 <code>DOM</code> , 只有 <code>EcmaScript</code></strong></li>\n<li>在 <code>Node.js</code> 这个 <code>JavaScript</code> 执行环境中为 <code>JavaScript</code> 提供了一些服务器级别的操作 <code>API</code> , 例如 : 文件读写 , 网络服务构建 , 网络请求与响应等 , 其实 <code>node</code> 学习相当于在学习后台服务处理开发 , 只不过后台服务编程使用的是 <code>JavaScript</code> 语言而已</li>\n<li><strong>特性 : 事件驱动 , 非阻塞 <code>I/O</code> 模型 ( 简单说就是异步操作 ) , 轻量高效 , 随着学习的深入大家会明白这些特性的</strong></li>\n<li><code>npm</code> 是世界上最大的 <code>Node.js</code> 开源库生态系统 , 用来管理 <code>JavaScript</code> 相关的包 , 这样的目的是为了更方便的让开发人员使用它</li>\n</ul>\n<h3 id=\"使用-npm-安装相关包的命令-以-jquery-为例-先了解即可\"><a href=\"#使用-npm-安装相关包的命令-以-jquery-为例-先了解即可\" class=\"headerlink\" title=\"使用 npm 安装相关包的命令 ( 以 jquery 为例 , 先了解即可 ) :\"></a>使用 <code>npm</code> 安装相关包的命令 ( 以 <code>jquery</code> 为例 , 先了解即可 ) :</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install jquery</span><br></pre></td></tr></table></figure>\n\n<p><strong>包名后面加 <code>@</code> 可指定版本号</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install jquery@2</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Node-js-能够做什么\"><a href=\"#Node-js-能够做什么\" class=\"headerlink\" title=\"Node.js 能够做什么\"></a>Node.js 能够做什么</h2><ul>\n<li><code>Web</code> 服务器后台</li>\n<li>命令行工具 , 例如 : <code>npm</code> , <code>git</code> , <code>webpack</code> 等</li>\n<li>前端工程师接触 <code>node</code> 最多的是命令行工具 , 一般很少自己写 , 主要使用别人写好的第三方包</li>\n</ul>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><ul>\n<li><code>B/S</code> 编程模型<ul>\n<li><code>Browser - Server</code></li>\n<li><code>back-end</code> ( 后台开发 )</li>\n<li>任何服务端技术这种 <code>BS</code> 编程模型都一样 , 与语言无关</li>\n<li><code>Node</code> 只是我们学习 <code>BS</code> 编程模型的一个工具而已</li>\n</ul>\n</li>\n<li>模块化编程<br><strong>模块化</strong>就是将不同功能的函数封装起来 , 并提供使用接口 , 他们彼此之间互不影响<ul>\n<li><code>RequireJS</code></li>\n<li><code>SeaJs</code></li>\n<li>简单的来说 , 以前在我们 <code>JavaScript</code> 中只能通过<code>&lt;script&gt;</code>标签来引入 <code>js</code> 脚本文件 , 在 <code>node</code> 中可以更多方式来引入加载 <code>JavaScript</code> 脚本</li>\n</ul>\n</li>\n<li><code>Node</code> 常用 <code>API</code></li>\n</ul>\n<h1 id=\"Node-起步\"><a href=\"#Node-起步\" class=\"headerlink\" title=\"Node 起步\"></a>Node 起步</h1><h2 id=\"安装-Node-环境\"><a href=\"#安装-Node-环境\" class=\"headerlink\" title=\"安装 Node 环境\"></a>安装 Node 环境</h2><p>安装依赖 : <code>npm install 依赖名字</code> , <code>install</code> 可简写为 <code>i</code><br>后面加 <code>@</code> 可指定版本号 , 比如</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i jquery@2.2</span><br></pre></td></tr></table></figure>\n\n<p><strong>参数 :</strong></p>\n<ul>\n<li><code>-g</code> 表示全局安装</li>\n<li><code>--save</code> 表示生产环境 , 简写是 <code>-S</code></li>\n<li><code>-dev</code> 是开发环境 , 简写是 <code>-D</code></li>\n</ul>\n<p><strong>国内 npm 比较慢 , 可安装淘宝镜像版的 cnpm</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Hello-World\"><a href=\"#Hello-World\" class=\"headerlink\" title=\"Hello World\"></a>Hello World</h2><ul>\n<li>第一步 : 创建编写 <code>JavaScript</code> 脚本文件</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;Hello World&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>第二步 : 打开终端 , 定位到脚本文件所属目录</li>\n<li>第三步 : 输入 <code>node 文件名</code> 执行对应的文件</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node HelloWorld.js</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"读写文件\"><a href=\"#读写文件\" class=\"headerlink\" title=\"读写文件\"></a>读写文件</h2><p>浏览器中 <code>JavaScript</code> 是没有文件操作能力的 , 但是 <code>Node</code> 中的 <code>JavaScript</code> 具有文件操作的能力 , <code>Node</code> 中有一个 <code>fs</code> 模块 , <code>fs</code> 是 <code>file-system</code> 的简写 , 就是文件系统的意思 , 在 <code>Node</code> 中如果想要进行文件操作 , 就必须引入 <code>fs</code> 这个核心模块</p>\n<ul>\n<li>引入 <code>fs</code> 核心模块</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;fs&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>用来读取文件的方法</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fs.readFile();</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>用来写文件的方法</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fs.writeFile();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"http-服务\"><a href=\"#http-服务\" class=\"headerlink\" title=\"http 服务\"></a>http 服务</h2><p>服务器是干嘛的 ?</p>\n<ul>\n<li>提供服务：对数据的服务</li>\n<li>发请求</li>\n<li>接收请求</li>\n<li>处理请求</li>\n<li>给个响应</li>\n</ul>\n<p>我们可以使用 <code>Node</code> 非常轻松的构建一个 <code>Web</code> 服务器 , 在 <code>Node</code> 中 , <code>专门有个核心模块：http</code><br>思路 :</p>\n<ul>\n<li>加载 <code>http</code> 核心模块</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. 加载 http 核心模块</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;http&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建一个 <code>Web</code> 服务器</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 2.使用 http.createServer() 方法创建一个Web服务器 , 返回一个 Server 实例</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> server = http.createServer();</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>注册 <code>request</code> 请求事件</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 3. 注册 request 请求事件</span></span><br><span class=\"line\"><span class=\"comment\">// 还记得刚才说的 node.js 的特性 : 事件驱动么 , 就是这种用法</span></span><br><span class=\"line\"><span class=\"comment\">// 还记得刚才说的 node.js 的特性 : 回调函数么 , 就是第二个参数的用法</span></span><br><span class=\"line\"></span><br><span class=\"line\">server.on(<span class=\"string\">&quot;request&quot;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;收到客户端的请求了啊&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>绑定端口号 , 启动服务器</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 4. 绑定端口号 , 启动服务器</span></span><br><span class=\"line\">server.listen(<span class=\"number\">3000</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">    <span class=\"string\">&quot;服务器启动成功了 , 可以通过浏览器访问http:localhost:3000发请求了&quot;</span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n","site":{"data":{"link":{"class1":{"class_name":"舍友","link_list":{"1":{"name":"codeAntg","link":"https://blog.csdn.net/weixin_44745147","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/fjh.jpg","descr":"那家刀削面不错","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class2":{"class_name":"致谢","link_list":{"1":{"name":"JerrC","link":"https://immyw.com","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/immyw.png","descr":"今日事,今日毕","width":"1px","style":"solid","color":"#60d0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/hexo.svg","descr":"A fast, simple & powerful blog framework","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class3":{"class_name":"友人","link_list":{"1":{"name":"Chester","link":"http://chesterlds.cn","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/chester.jpg","descr":null,"width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Wangs","link":"https://wangsss.cn/","avatar":"https://wangsss.cn/img/avatar.png","descr":"不疯魔，不成活 ~","width":"1px","style":"solid","color":"#9d9d9d","custom":"link_custom1","time":"4s","namecolor":"0094ff","descolor":"#ff9191"}}}}}},"excerpt":"","more":"<h1 id=\"Node\"><a href=\"#Node\" class=\"headerlink\" title=\"Node\"></a>Node</h1><p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/node/nodeall.png\" alt=\"node\"></p>\n<h1 id=\"Node-js-介绍\"><a href=\"#Node-js-介绍\" class=\"headerlink\" title=\"Node.js 介绍\"></a>Node.js 介绍</h1><p><code>Node.js</code> 不是一门语言 , 不是库或者框架 , <code>Node.js</code> 是一个 <code>JavaScript</code> 运行时的环境 , <code>Node.js</code> 可以解析和执行 <code>JavaScript</code> 代码</p>\n<h2 id=\"浏览器中-JavaScript-由什么组成\"><a href=\"#浏览器中-JavaScript-由什么组成\" class=\"headerlink\" title=\"浏览器中 JavaScript 由什么组成\"></a>浏览器中 JavaScript 由什么组成</h2><ul>\n<li><code>EcmaScript</code> : 基本语法 , <code>if</code> , <code>var</code> , <code>function</code> , <code>Object</code> , <code>Array</code></li>\n<li><code>DOM</code></li>\n<li><code>BOM</code></li>\n</ul>\n<h2 id=\"Node-js-中的-JavaScript\"><a href=\"#Node-js-中的-JavaScript\" class=\"headerlink\" title=\"Node.js 中的 JavaScript\"></a>Node.js 中的 JavaScript</h2><ul>\n<li><strong>没有 <code>BOM</code> 和 <code>DOM</code> , 只有 <code>EcmaScript</code></strong></li>\n<li>在 <code>Node.js</code> 这个 <code>JavaScript</code> 执行环境中为 <code>JavaScript</code> 提供了一些服务器级别的操作 <code>API</code> , 例如 : 文件读写 , 网络服务构建 , 网络请求与响应等 , 其实 <code>node</code> 学习相当于在学习后台服务处理开发 , 只不过后台服务编程使用的是 <code>JavaScript</code> 语言而已</li>\n<li><strong>特性 : 事件驱动 , 非阻塞 <code>I/O</code> 模型 ( 简单说就是异步操作 ) , 轻量高效 , 随着学习的深入大家会明白这些特性的</strong></li>\n<li><code>npm</code> 是世界上最大的 <code>Node.js</code> 开源库生态系统 , 用来管理 <code>JavaScript</code> 相关的包 , 这样的目的是为了更方便的让开发人员使用它</li>\n</ul>\n<h3 id=\"使用-npm-安装相关包的命令-以-jquery-为例-先了解即可\"><a href=\"#使用-npm-安装相关包的命令-以-jquery-为例-先了解即可\" class=\"headerlink\" title=\"使用 npm 安装相关包的命令 ( 以 jquery 为例 , 先了解即可 ) :\"></a>使用 <code>npm</code> 安装相关包的命令 ( 以 <code>jquery</code> 为例 , 先了解即可 ) :</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install jquery</span><br></pre></td></tr></table></figure>\n\n<p><strong>包名后面加 <code>@</code> 可指定版本号</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install jquery@2</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Node-js-能够做什么\"><a href=\"#Node-js-能够做什么\" class=\"headerlink\" title=\"Node.js 能够做什么\"></a>Node.js 能够做什么</h2><ul>\n<li><code>Web</code> 服务器后台</li>\n<li>命令行工具 , 例如 : <code>npm</code> , <code>git</code> , <code>webpack</code> 等</li>\n<li>前端工程师接触 <code>node</code> 最多的是命令行工具 , 一般很少自己写 , 主要使用别人写好的第三方包</li>\n</ul>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><ul>\n<li><code>B/S</code> 编程模型<ul>\n<li><code>Browser - Server</code></li>\n<li><code>back-end</code> ( 后台开发 )</li>\n<li>任何服务端技术这种 <code>BS</code> 编程模型都一样 , 与语言无关</li>\n<li><code>Node</code> 只是我们学习 <code>BS</code> 编程模型的一个工具而已</li>\n</ul>\n</li>\n<li>模块化编程<br><strong>模块化</strong>就是将不同功能的函数封装起来 , 并提供使用接口 , 他们彼此之间互不影响<ul>\n<li><code>RequireJS</code></li>\n<li><code>SeaJs</code></li>\n<li>简单的来说 , 以前在我们 <code>JavaScript</code> 中只能通过<code>&lt;script&gt;</code>标签来引入 <code>js</code> 脚本文件 , 在 <code>node</code> 中可以更多方式来引入加载 <code>JavaScript</code> 脚本</li>\n</ul>\n</li>\n<li><code>Node</code> 常用 <code>API</code></li>\n</ul>\n<h1 id=\"Node-起步\"><a href=\"#Node-起步\" class=\"headerlink\" title=\"Node 起步\"></a>Node 起步</h1><h2 id=\"安装-Node-环境\"><a href=\"#安装-Node-环境\" class=\"headerlink\" title=\"安装 Node 环境\"></a>安装 Node 环境</h2><p>安装依赖 : <code>npm install 依赖名字</code> , <code>install</code> 可简写为 <code>i</code><br>后面加 <code>@</code> 可指定版本号 , 比如</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i jquery@2.2</span><br></pre></td></tr></table></figure>\n\n<p><strong>参数 :</strong></p>\n<ul>\n<li><code>-g</code> 表示全局安装</li>\n<li><code>--save</code> 表示生产环境 , 简写是 <code>-S</code></li>\n<li><code>-dev</code> 是开发环境 , 简写是 <code>-D</code></li>\n</ul>\n<p><strong>国内 npm 比较慢 , 可安装淘宝镜像版的 cnpm</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Hello-World\"><a href=\"#Hello-World\" class=\"headerlink\" title=\"Hello World\"></a>Hello World</h2><ul>\n<li>第一步 : 创建编写 <code>JavaScript</code> 脚本文件</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;Hello World&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>第二步 : 打开终端 , 定位到脚本文件所属目录</li>\n<li>第三步 : 输入 <code>node 文件名</code> 执行对应的文件</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node HelloWorld.js</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"读写文件\"><a href=\"#读写文件\" class=\"headerlink\" title=\"读写文件\"></a>读写文件</h2><p>浏览器中 <code>JavaScript</code> 是没有文件操作能力的 , 但是 <code>Node</code> 中的 <code>JavaScript</code> 具有文件操作的能力 , <code>Node</code> 中有一个 <code>fs</code> 模块 , <code>fs</code> 是 <code>file-system</code> 的简写 , 就是文件系统的意思 , 在 <code>Node</code> 中如果想要进行文件操作 , 就必须引入 <code>fs</code> 这个核心模块</p>\n<ul>\n<li>引入 <code>fs</code> 核心模块</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;fs&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>用来读取文件的方法</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fs.readFile();</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>用来写文件的方法</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fs.writeFile();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"http-服务\"><a href=\"#http-服务\" class=\"headerlink\" title=\"http 服务\"></a>http 服务</h2><p>服务器是干嘛的 ?</p>\n<ul>\n<li>提供服务：对数据的服务</li>\n<li>发请求</li>\n<li>接收请求</li>\n<li>处理请求</li>\n<li>给个响应</li>\n</ul>\n<p>我们可以使用 <code>Node</code> 非常轻松的构建一个 <code>Web</code> 服务器 , 在 <code>Node</code> 中 , <code>专门有个核心模块：http</code><br>思路 :</p>\n<ul>\n<li>加载 <code>http</code> 核心模块</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. 加载 http 核心模块</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;http&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建一个 <code>Web</code> 服务器</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 2.使用 http.createServer() 方法创建一个Web服务器 , 返回一个 Server 实例</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> server = http.createServer();</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>注册 <code>request</code> 请求事件</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 3. 注册 request 请求事件</span></span><br><span class=\"line\"><span class=\"comment\">// 还记得刚才说的 node.js 的特性 : 事件驱动么 , 就是这种用法</span></span><br><span class=\"line\"><span class=\"comment\">// 还记得刚才说的 node.js 的特性 : 回调函数么 , 就是第二个参数的用法</span></span><br><span class=\"line\"></span><br><span class=\"line\">server.on(<span class=\"string\">&quot;request&quot;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;收到客户端的请求了啊&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>绑定端口号 , 启动服务器</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 4. 绑定端口号 , 启动服务器</span></span><br><span class=\"line\">server.listen(<span class=\"number\">3000</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(</span><br><span class=\"line\">    <span class=\"string\">&quot;服务器启动成功了 , 可以通过浏览器访问http:localhost:3000发请求了&quot;</span></span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n"},{"title":"node 连接 MySQL","date":"2021-07-16T03:46:10.000Z","top_img":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg","cover":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/node/mysql.jpg","comments":1,"_content":"\n{% btn 'https://github.com/codehhr/Message-board/',留言版案例,far fa-hand-point-right,green larger %}\n# 安装 mysql 驱动\n\n可以用淘宝镜像的 `cnpm` 安装\n\n```bash\nnpm install mysql --save\n```\n\n# 引入 mysql 模块\n\n```js\nlet mysql = require(\"mysql\");\n```\n\n# 链接 MySQL\n\n相应的修改`主机名` , `用户名` , `密码` 和 `数据库名`\n\n```js\nlet mysql = require(\"mysql\");\nlet connection = mysql.createConnection({\n  host: \"localhost\",\n  user: \"root\",\n  password: \"12345678\",\n  database: \"test\",\n});\nconnection.connect();\nconnection.query(\n  \"SELECT * from comment_list\",\n  function (error, results, fields) {\n    if (error) throw error;\n    console.log(results);\n  }\n);\n```\n\n## 把这几个步骤封装成函数\n\n```js\n/*\n    sql: 要执行的 sql 语句\n    fun: 拿到数据库返回的 results 后执行的函数\n*/\nfunction interactingWithDatabase(sql, fun) {\n  let connection = mysql.createConnection({\n    host: \"localhost\",\n    user: \"root\",\n    password: \"12345678\",\n    database: \"comment_list\",\n  });\n  connection.connect();\n  connection.query(sql, function (err, results) {\n    if (err) {\n      throw err;\n    } else {\n      fun(results);\n    }\n  });\n  connection.end();\n}\n```\n\n# 数据库操作 ( CURD )\n\n## sql 语句\n\n```sql\n增 : insert into 表名 ( 字段 , 字段 ) values ( 值 , 值 )\n删 : delete from 表名 where 条件\n改 : update 表名 set 字段 = 值 where 条件\n查 : select 字段 from 表名 (where 条件)\n```\n\n## 示例\n\n```sql\n增 : INSERT INTO comment_list (name , comment) VALUES ('name' ,'comment')\n删 : DELETE FROM comment_list WHERE id = 'userid'\n改 : UPDATE comment_list SET comment = \"newcomment\" WHERE id = \"userid\"\n查 : SELECT * FROM comment_list WHERE comment LIKE '%value%' or name LIKE '%value%'\n```\n\n# The_End\n","source":"_posts/node/node-mysql.md","raw":"---\ntitle: node 连接 MySQL\ndate: 2021-07-16 11:46:10\ntop_img: https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg\ncover: https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/node/mysql.jpg\ntags:\ncategories:\ncomments:\n---\n\n{% btn 'https://github.com/codehhr/Message-board/',留言版案例,far fa-hand-point-right,green larger %}\n# 安装 mysql 驱动\n\n可以用淘宝镜像的 `cnpm` 安装\n\n```bash\nnpm install mysql --save\n```\n\n# 引入 mysql 模块\n\n```js\nlet mysql = require(\"mysql\");\n```\n\n# 链接 MySQL\n\n相应的修改`主机名` , `用户名` , `密码` 和 `数据库名`\n\n```js\nlet mysql = require(\"mysql\");\nlet connection = mysql.createConnection({\n  host: \"localhost\",\n  user: \"root\",\n  password: \"12345678\",\n  database: \"test\",\n});\nconnection.connect();\nconnection.query(\n  \"SELECT * from comment_list\",\n  function (error, results, fields) {\n    if (error) throw error;\n    console.log(results);\n  }\n);\n```\n\n## 把这几个步骤封装成函数\n\n```js\n/*\n    sql: 要执行的 sql 语句\n    fun: 拿到数据库返回的 results 后执行的函数\n*/\nfunction interactingWithDatabase(sql, fun) {\n  let connection = mysql.createConnection({\n    host: \"localhost\",\n    user: \"root\",\n    password: \"12345678\",\n    database: \"comment_list\",\n  });\n  connection.connect();\n  connection.query(sql, function (err, results) {\n    if (err) {\n      throw err;\n    } else {\n      fun(results);\n    }\n  });\n  connection.end();\n}\n```\n\n# 数据库操作 ( CURD )\n\n## sql 语句\n\n```sql\n增 : insert into 表名 ( 字段 , 字段 ) values ( 值 , 值 )\n删 : delete from 表名 where 条件\n改 : update 表名 set 字段 = 值 where 条件\n查 : select 字段 from 表名 (where 条件)\n```\n\n## 示例\n\n```sql\n增 : INSERT INTO comment_list (name , comment) VALUES ('name' ,'comment')\n删 : DELETE FROM comment_list WHERE id = 'userid'\n改 : UPDATE comment_list SET comment = \"newcomment\" WHERE id = \"userid\"\n查 : SELECT * FROM comment_list WHERE comment LIKE '%value%' or name LIKE '%value%'\n```\n\n# The_End\n","slug":"node/node-mysql","published":1,"updated":"2021-07-21T15:58:16.222Z","layout":"post","photos":[],"link":"","_id":"cksvxwnoi0042gubqdpgm0c73","content":"<a class=\"btn-beautify button--animated green larger\" href=\"https://github.com/codehhr/Message-board/\" \n  title=\"留言版案例\"><i class=\"far fa-hand-point-right\"></i><span>留言版案例</span></a>\n<h1 id=\"安装-mysql-驱动\"><a href=\"#安装-mysql-驱动\" class=\"headerlink\" title=\"安装 mysql 驱动\"></a>安装 mysql 驱动</h1><p>可以用淘宝镜像的 <code>cnpm</code> 安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install mysql --save</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"引入-mysql-模块\"><a href=\"#引入-mysql-模块\" class=\"headerlink\" title=\"引入 mysql 模块\"></a>引入 mysql 模块</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> mysql = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;mysql&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"链接-MySQL\"><a href=\"#链接-MySQL\" class=\"headerlink\" title=\"链接 MySQL\"></a>链接 MySQL</h1><p>相应的修改<code>主机名</code> , <code>用户名</code> , <code>密码</code> 和 <code>数据库名</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> mysql = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;mysql&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> connection = mysql.createConnection(&#123;</span><br><span class=\"line\">  <span class=\"attr\">host</span>: <span class=\"string\">&quot;localhost&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">user</span>: <span class=\"string\">&quot;root&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">password</span>: <span class=\"string\">&quot;12345678&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">database</span>: <span class=\"string\">&quot;test&quot;</span>,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">connection.connect();</span><br><span class=\"line\">connection.query(</span><br><span class=\"line\">  <span class=\"string\">&quot;SELECT * from comment_list&quot;</span>,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error, results, fields</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (error) <span class=\"keyword\">throw</span> error;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(results);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"把这几个步骤封装成函数\"><a href=\"#把这几个步骤封装成函数\" class=\"headerlink\" title=\"把这几个步骤封装成函数\"></a>把这几个步骤封装成函数</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    sql: 要执行的 sql 语句</span></span><br><span class=\"line\"><span class=\"comment\">    fun: 拿到数据库返回的 results 后执行的函数</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">interactingWithDatabase</span>(<span class=\"params\">sql, fun</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> connection = mysql.createConnection(&#123;</span><br><span class=\"line\">    <span class=\"attr\">host</span>: <span class=\"string\">&quot;localhost&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">user</span>: <span class=\"string\">&quot;root&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">password</span>: <span class=\"string\">&quot;12345678&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">database</span>: <span class=\"string\">&quot;comment_list&quot;</span>,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  connection.connect();</span><br><span class=\"line\">  connection.query(sql, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, results</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      fun(results);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  connection.end();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"数据库操作-CURD\"><a href=\"#数据库操作-CURD\" class=\"headerlink\" title=\"数据库操作 ( CURD )\"></a>数据库操作 ( CURD )</h1><h2 id=\"sql-语句\"><a href=\"#sql-语句\" class=\"headerlink\" title=\"sql 语句\"></a>sql 语句</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">增 : <span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> 表名 ( 字段 , 字段 ) <span class=\"keyword\">values</span> ( 值 , 值 )</span><br><span class=\"line\">删 : <span class=\"keyword\">delete</span> <span class=\"keyword\">from</span> 表名 <span class=\"keyword\">where</span> 条件</span><br><span class=\"line\">改 : update 表名 <span class=\"keyword\">set</span> 字段 <span class=\"operator\">=</span> 值 <span class=\"keyword\">where</span> 条件</span><br><span class=\"line\">查 : <span class=\"keyword\">select</span> 字段 <span class=\"keyword\">from</span> 表名 (<span class=\"keyword\">where</span> 条件)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">增 : <span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> comment_list (name , comment) <span class=\"keyword\">VALUES</span> (<span class=\"string\">&#x27;name&#x27;</span> ,<span class=\"string\">&#x27;comment&#x27;</span>)</span><br><span class=\"line\">删 : <span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> comment_list <span class=\"keyword\">WHERE</span> id <span class=\"operator\">=</span> <span class=\"string\">&#x27;userid&#x27;</span></span><br><span class=\"line\">改 : UPDATE comment_list <span class=\"keyword\">SET</span> comment <span class=\"operator\">=</span> &quot;newcomment&quot; <span class=\"keyword\">WHERE</span> id <span class=\"operator\">=</span> &quot;userid&quot;</span><br><span class=\"line\">查 : <span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> comment_list <span class=\"keyword\">WHERE</span> comment <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;%value%&#x27;</span> <span class=\"keyword\">or</span> name <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;%value%&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"The-End\"><a href=\"#The-End\" class=\"headerlink\" title=\"The_End\"></a>The_End</h1>","site":{"data":{"link":{"class1":{"class_name":"舍友","link_list":{"1":{"name":"codeAntg","link":"https://blog.csdn.net/weixin_44745147","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/fjh.jpg","descr":"那家刀削面不错","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class2":{"class_name":"致谢","link_list":{"1":{"name":"JerrC","link":"https://immyw.com","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/immyw.png","descr":"今日事,今日毕","width":"1px","style":"solid","color":"#60d0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/hexo.svg","descr":"A fast, simple & powerful blog framework","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class3":{"class_name":"友人","link_list":{"1":{"name":"Chester","link":"http://chesterlds.cn","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/chester.jpg","descr":null,"width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Wangs","link":"https://wangsss.cn/","avatar":"https://wangsss.cn/img/avatar.png","descr":"不疯魔，不成活 ~","width":"1px","style":"solid","color":"#9d9d9d","custom":"link_custom1","time":"4s","namecolor":"0094ff","descolor":"#ff9191"}}}}}},"excerpt":"","more":"<a class=\"btn-beautify button--animated green larger\" href=\"https://github.com/codehhr/Message-board/\" \n  title=\"留言版案例\"><i class=\"far fa-hand-point-right\"></i><span>留言版案例</span></a>\n<h1 id=\"安装-mysql-驱动\"><a href=\"#安装-mysql-驱动\" class=\"headerlink\" title=\"安装 mysql 驱动\"></a>安装 mysql 驱动</h1><p>可以用淘宝镜像的 <code>cnpm</code> 安装</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install mysql --save</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"引入-mysql-模块\"><a href=\"#引入-mysql-模块\" class=\"headerlink\" title=\"引入 mysql 模块\"></a>引入 mysql 模块</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> mysql = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;mysql&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"链接-MySQL\"><a href=\"#链接-MySQL\" class=\"headerlink\" title=\"链接 MySQL\"></a>链接 MySQL</h1><p>相应的修改<code>主机名</code> , <code>用户名</code> , <code>密码</code> 和 <code>数据库名</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> mysql = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;mysql&quot;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> connection = mysql.createConnection(&#123;</span><br><span class=\"line\">  <span class=\"attr\">host</span>: <span class=\"string\">&quot;localhost&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">user</span>: <span class=\"string\">&quot;root&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">password</span>: <span class=\"string\">&quot;12345678&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">database</span>: <span class=\"string\">&quot;test&quot;</span>,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">connection.connect();</span><br><span class=\"line\">connection.query(</span><br><span class=\"line\">  <span class=\"string\">&quot;SELECT * from comment_list&quot;</span>,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error, results, fields</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (error) <span class=\"keyword\">throw</span> error;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(results);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"把这几个步骤封装成函数\"><a href=\"#把这几个步骤封装成函数\" class=\"headerlink\" title=\"把这几个步骤封装成函数\"></a>把这几个步骤封装成函数</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    sql: 要执行的 sql 语句</span></span><br><span class=\"line\"><span class=\"comment\">    fun: 拿到数据库返回的 results 后执行的函数</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">interactingWithDatabase</span>(<span class=\"params\">sql, fun</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> connection = mysql.createConnection(&#123;</span><br><span class=\"line\">    <span class=\"attr\">host</span>: <span class=\"string\">&quot;localhost&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">user</span>: <span class=\"string\">&quot;root&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">password</span>: <span class=\"string\">&quot;12345678&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">database</span>: <span class=\"string\">&quot;comment_list&quot;</span>,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  connection.connect();</span><br><span class=\"line\">  connection.query(sql, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, results</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">throw</span> err;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      fun(results);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  connection.end();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"数据库操作-CURD\"><a href=\"#数据库操作-CURD\" class=\"headerlink\" title=\"数据库操作 ( CURD )\"></a>数据库操作 ( CURD )</h1><h2 id=\"sql-语句\"><a href=\"#sql-语句\" class=\"headerlink\" title=\"sql 语句\"></a>sql 语句</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">增 : <span class=\"keyword\">insert</span> <span class=\"keyword\">into</span> 表名 ( 字段 , 字段 ) <span class=\"keyword\">values</span> ( 值 , 值 )</span><br><span class=\"line\">删 : <span class=\"keyword\">delete</span> <span class=\"keyword\">from</span> 表名 <span class=\"keyword\">where</span> 条件</span><br><span class=\"line\">改 : update 表名 <span class=\"keyword\">set</span> 字段 <span class=\"operator\">=</span> 值 <span class=\"keyword\">where</span> 条件</span><br><span class=\"line\">查 : <span class=\"keyword\">select</span> 字段 <span class=\"keyword\">from</span> 表名 (<span class=\"keyword\">where</span> 条件)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">增 : <span class=\"keyword\">INSERT</span> <span class=\"keyword\">INTO</span> comment_list (name , comment) <span class=\"keyword\">VALUES</span> (<span class=\"string\">&#x27;name&#x27;</span> ,<span class=\"string\">&#x27;comment&#x27;</span>)</span><br><span class=\"line\">删 : <span class=\"keyword\">DELETE</span> <span class=\"keyword\">FROM</span> comment_list <span class=\"keyword\">WHERE</span> id <span class=\"operator\">=</span> <span class=\"string\">&#x27;userid&#x27;</span></span><br><span class=\"line\">改 : UPDATE comment_list <span class=\"keyword\">SET</span> comment <span class=\"operator\">=</span> &quot;newcomment&quot; <span class=\"keyword\">WHERE</span> id <span class=\"operator\">=</span> &quot;userid&quot;</span><br><span class=\"line\">查 : <span class=\"keyword\">SELECT</span> <span class=\"operator\">*</span> <span class=\"keyword\">FROM</span> comment_list <span class=\"keyword\">WHERE</span> comment <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;%value%&#x27;</span> <span class=\"keyword\">or</span> name <span class=\"keyword\">LIKE</span> <span class=\"string\">&#x27;%value%&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"The-End\"><a href=\"#The-End\" class=\"headerlink\" title=\"The_End\"></a>The_End</h1>"},{"title":"Vue 中的动画","date":"2021-07-22T13:24:20.000Z","updated":"2021-07-22T14:21:29.115Z","keywords":null,"description":null,"top_img":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg","cover":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vue/animate-cover.jpg","comments":1,"copyright":null,"copyright_author":null,"copyright_author_href":null,"copyright_url":null,"copyright_info":null,"_content":"\n# 推荐使用第三方 css 动画库\n\n{% tabs animate %}\n\n<!-- tab 使用过渡类名 -->\n\n## 使用过渡类名\n\n{% btn 'https://codehhr.github.io/vue-daily/vue-transition-class.html',在线预览,far fa-hand-point-right,green larger %}\n\n![transition](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vue/transition.png)\n\n```html\n<script src=\"https://cdn.bootcdn.net/ajax/libs/vue/2.6.13/vue.min.js\"></script>\n\n<div id=\"app\">\n  <button @click=\"myAnimate\">按钮</button>\n  <transition name=\"fade\">\n    <div class=\"div\" v-show=\"isShow\">动画</div>\n  </transition>\n</div>\n\n<script>\n  let vm = new Vue({\n    el: \"#app\",\n    data: {\n      isShow: false,\n    },\n    methods: {\n      myAnimate() {\n        this.isShow = !this.isShow;\n      },\n    },\n  });\n</script>\n```\n\n**定义两组类样式**\n\n```css\n#app {\n  margin: 100px auto;\n  width: 600px;\n}\nbutton {\n  padding: 10px 20px;\n  outline: none;\n}\n.div {\n  margin: 20px 0;\n  padding: 20px;\n  width: 200px;\n  text-align: center;\n  color: #ffffff;\n  background-color: #494f5c;\n  font-size: 24px;\n}\n/* 入场动画开始和出场动画结束 */\n.fade-enter {\n  opacity: 0;\n  transform: translateX(-200px);\n}\n/* 整个入场动画和出场动画过程 */\n.fade-enter-active,\n.fade-leave-active {\n  transition: all 0.6s;\n}\n```\n\n<!-- endtab -->\n\n<!-- tab 第三方css动画库 -->\n\n## 使用第三方 css 动画库\n\n{% btn 'https://codehhr.github.io/vue-daily/vue-animate.css.html',在线预览,far fa-hand-point-right,green larger %}\n\nVue 官网推荐的是 `Animate.css`\n\n{% btn 'https://animate.style/',Animate 官网,far fa-hand-point-right,orange larger %}\n\n![animate.style](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vue/animate.style.png)\n\n### 引入动画类库\n\n```html\n<link\n  rel=\"stylesheet\"\n  href=\"https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css\"\n/>\n```\n\n### 给标签加入 animate 类名\n\n```html\n<h1 class=\"animate__animated animate__bounce\">Animate</h1>\n```\n\n<!-- endtab -->\n\n<!-- tab 使用动画钩子函数 -->\n\n## 使用动画钩子函数\n\n{% btn 'https://codehhr.github.io/vue-daily/vue-animation-hook-function.html',在线预览,far fa-hand-point-right,green larger %}\n\n### 定义 transition 组件以及三个钩子函数\n\n```html\n<div id=\"app\">\n  <button @click=\"isShow = !isShow\">点我</button>  \n  <transition\n    @before-enter=\"beforeEnter\"\n    @enter=\"enter\"\n    @after-enter=\"afterEnter\"\n  >\n    <div v-if=\"isShow\" class=\"show\">OK</div>\n  </transition>\n</div>\n```\n\n### 定义三个 methods 钩子方法\n\n**注意 : `enter` 函数里的 `el.offsetHeight` 和 `el.offsetWidth` 至少要有一个**\n\n```js\nlet vm = new Vue({\n  el: \"#app\",\n  data: {\n    isShow: false,\n  },\n  methods: {\n    beforeEnter(el) {\n      // 动画进入之前的回调函数\n      el.style.transform = \"translateX(500px)\";\n    },\n    enter(el, done) {\n      // 动画进入完成时候的回调函数\n      el.offsetWidth;\n      // el.offsetHeight;\n      el.style.transform = \"translateX(0px)\";\n      done();\n    },\n    afterEnter(el) {\n      // 动画进入完成之后的回调函数\n      this.isShow = !this.isShow;\n      // el.style.opacity = 0;\n    },\n  },\n});\n```\n\n<!-- endtab -->\n\n<!-- tab v-for的列表过渡 -->\n\n## v-for 的列表过渡\n\n{% btn 'https://codehhr.github.io/vue-daily/v-for-list-transition-animation.html',在线预览,far fa-hand-point-right,green larger %}\n\n### 定义过渡样式\n\n```css\n.list-enter,\n.list-leave-to {\n  opacity: 0;\n  transform: translateY(10px);\n}\n.list-enter-active,\n.list-leave-active {\n  transition: all 0.6s;\n}\n```\n\n### 使用 transition-group 组件把 v-for 循环的列表包裹起来\n\n```html\n<div id=\"app\">\n    <input type=\"text\" v-model=\"text\" @keyup.enter=\"add\" />  \n  <transition-group tag=\"ul\" name=\"list\">\n    <li v-for=\"(item, index) in list\" :key=\"index\">{{item}}</li>\n  </transition-group>\n</div>\n```\n\n### 创建 Vue 实例\n\n```js\nlet vm = new Vue({\n  el: \"#app\",\n  data: {\n    text: \"\",\n    list: [1, 2, 3, 4],\n  },\n  methods: {\n    add() {\n      this.list.push(this.text);\n      this.text = \"\";\n    },\n  },\n});\n```\n\n<!-- endtab -->\n\n{% endtabs %}\n","source":"_posts/vue/vue-animate.md","raw":"---\ntitle: Vue 中的动画\ndate: 2021-07-22 21:24:20\nupdated:\ntags:\n  - Vue\n  - Vue 过渡动画\ncategories:\n  - Vue\n  - Vue基础\nkeywords:\ndescription:\ntop_img: https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg\ncover: https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vue/animate-cover.jpg\ncomments:\ncopyright:\ncopyright_author:\ncopyright_author_href:\ncopyright_url:\ncopyright_info:\n---\n\n# 推荐使用第三方 css 动画库\n\n{% tabs animate %}\n\n<!-- tab 使用过渡类名 -->\n\n## 使用过渡类名\n\n{% btn 'https://codehhr.github.io/vue-daily/vue-transition-class.html',在线预览,far fa-hand-point-right,green larger %}\n\n![transition](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vue/transition.png)\n\n```html\n<script src=\"https://cdn.bootcdn.net/ajax/libs/vue/2.6.13/vue.min.js\"></script>\n\n<div id=\"app\">\n  <button @click=\"myAnimate\">按钮</button>\n  <transition name=\"fade\">\n    <div class=\"div\" v-show=\"isShow\">动画</div>\n  </transition>\n</div>\n\n<script>\n  let vm = new Vue({\n    el: \"#app\",\n    data: {\n      isShow: false,\n    },\n    methods: {\n      myAnimate() {\n        this.isShow = !this.isShow;\n      },\n    },\n  });\n</script>\n```\n\n**定义两组类样式**\n\n```css\n#app {\n  margin: 100px auto;\n  width: 600px;\n}\nbutton {\n  padding: 10px 20px;\n  outline: none;\n}\n.div {\n  margin: 20px 0;\n  padding: 20px;\n  width: 200px;\n  text-align: center;\n  color: #ffffff;\n  background-color: #494f5c;\n  font-size: 24px;\n}\n/* 入场动画开始和出场动画结束 */\n.fade-enter {\n  opacity: 0;\n  transform: translateX(-200px);\n}\n/* 整个入场动画和出场动画过程 */\n.fade-enter-active,\n.fade-leave-active {\n  transition: all 0.6s;\n}\n```\n\n<!-- endtab -->\n\n<!-- tab 第三方css动画库 -->\n\n## 使用第三方 css 动画库\n\n{% btn 'https://codehhr.github.io/vue-daily/vue-animate.css.html',在线预览,far fa-hand-point-right,green larger %}\n\nVue 官网推荐的是 `Animate.css`\n\n{% btn 'https://animate.style/',Animate 官网,far fa-hand-point-right,orange larger %}\n\n![animate.style](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vue/animate.style.png)\n\n### 引入动画类库\n\n```html\n<link\n  rel=\"stylesheet\"\n  href=\"https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css\"\n/>\n```\n\n### 给标签加入 animate 类名\n\n```html\n<h1 class=\"animate__animated animate__bounce\">Animate</h1>\n```\n\n<!-- endtab -->\n\n<!-- tab 使用动画钩子函数 -->\n\n## 使用动画钩子函数\n\n{% btn 'https://codehhr.github.io/vue-daily/vue-animation-hook-function.html',在线预览,far fa-hand-point-right,green larger %}\n\n### 定义 transition 组件以及三个钩子函数\n\n```html\n<div id=\"app\">\n  <button @click=\"isShow = !isShow\">点我</button>  \n  <transition\n    @before-enter=\"beforeEnter\"\n    @enter=\"enter\"\n    @after-enter=\"afterEnter\"\n  >\n    <div v-if=\"isShow\" class=\"show\">OK</div>\n  </transition>\n</div>\n```\n\n### 定义三个 methods 钩子方法\n\n**注意 : `enter` 函数里的 `el.offsetHeight` 和 `el.offsetWidth` 至少要有一个**\n\n```js\nlet vm = new Vue({\n  el: \"#app\",\n  data: {\n    isShow: false,\n  },\n  methods: {\n    beforeEnter(el) {\n      // 动画进入之前的回调函数\n      el.style.transform = \"translateX(500px)\";\n    },\n    enter(el, done) {\n      // 动画进入完成时候的回调函数\n      el.offsetWidth;\n      // el.offsetHeight;\n      el.style.transform = \"translateX(0px)\";\n      done();\n    },\n    afterEnter(el) {\n      // 动画进入完成之后的回调函数\n      this.isShow = !this.isShow;\n      // el.style.opacity = 0;\n    },\n  },\n});\n```\n\n<!-- endtab -->\n\n<!-- tab v-for的列表过渡 -->\n\n## v-for 的列表过渡\n\n{% btn 'https://codehhr.github.io/vue-daily/v-for-list-transition-animation.html',在线预览,far fa-hand-point-right,green larger %}\n\n### 定义过渡样式\n\n```css\n.list-enter,\n.list-leave-to {\n  opacity: 0;\n  transform: translateY(10px);\n}\n.list-enter-active,\n.list-leave-active {\n  transition: all 0.6s;\n}\n```\n\n### 使用 transition-group 组件把 v-for 循环的列表包裹起来\n\n```html\n<div id=\"app\">\n    <input type=\"text\" v-model=\"text\" @keyup.enter=\"add\" />  \n  <transition-group tag=\"ul\" name=\"list\">\n    <li v-for=\"(item, index) in list\" :key=\"index\">{{item}}</li>\n  </transition-group>\n</div>\n```\n\n### 创建 Vue 实例\n\n```js\nlet vm = new Vue({\n  el: \"#app\",\n  data: {\n    text: \"\",\n    list: [1, 2, 3, 4],\n  },\n  methods: {\n    add() {\n      this.list.push(this.text);\n      this.text = \"\";\n    },\n  },\n});\n```\n\n<!-- endtab -->\n\n{% endtabs %}\n","slug":"vue/vue-animate","published":1,"layout":"post","photos":[],"link":"","_id":"cksvxwnoj0043gubq4k216sck","content":"<h1 id=\"推荐使用第三方-css-动画库\"><a href=\"#推荐使用第三方-css-动画库\" class=\"headerlink\" title=\"推荐使用第三方 css 动画库\"></a>推荐使用第三方 css 动画库</h1><div class=\"tabs\" id=\"animate\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button type=\"button\" data-href=\"#animate-1\">使用过渡类名</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#animate-2\">第三方css动画库</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#animate-3\">使用动画钩子函数</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#animate-4\">v-for的列表过渡</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"animate-1\"><h2 id=\"使用过渡类名\"><a href=\"#使用过渡类名\" class=\"headerlink\" title=\"使用过渡类名\"></a>使用过渡类名</h2><p><a class=\"btn-beautify button--animated green larger\" href=\"https://codehhr.github.io/vue-daily/vue-transition-class.html\" \n  title=\"在线预览\"><i class=\"far fa-hand-point-right\"></i><span>在线预览</span></a></p>\n<p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vue/transition.png\" alt=\"transition\"></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.13/vue.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;myAnimate&quot;</span>&gt;</span>按钮<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">transition</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;fade&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;div&quot;</span> <span class=\"attr\">v-show</span>=<span class=\"string\">&quot;isShow&quot;</span>&gt;</span>动画<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">transition</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">let</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">el</span>: <span class=\"string\">&quot;#app&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">data</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"attr\">isShow</span>: <span class=\"literal\">false</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">methods</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"function\"><span class=\"title\">myAnimate</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">this</span>.isShow = !<span class=\"built_in\">this</span>.isShow;</span></span><br><span class=\"line\"><span class=\"javascript\">      &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">  &#125;);</span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>定义两组类样式</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#app</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">100px</span> auto;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">600px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">button</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span> <span class=\"number\">20px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">outline</span>: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.div</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">20px</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#ffffff</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#494f5c</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">24px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* 入场动画开始和出场动画结束 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.fade-enter</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">transform</span>: <span class=\"built_in\">translateX</span>(-<span class=\"number\">200px</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* 整个入场动画和出场动画过程 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.fade-enter-active</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.fade-leave-active</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">transition</span>: all <span class=\"number\">0.6s</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"animate-2\"><h2 id=\"使用第三方-css-动画库\"><a href=\"#使用第三方-css-动画库\" class=\"headerlink\" title=\"使用第三方 css 动画库\"></a>使用第三方 css 动画库</h2><p><a class=\"btn-beautify button--animated green larger\" href=\"https://codehhr.github.io/vue-daily/vue-animate.css.html\" \n  title=\"在线预览\"><i class=\"far fa-hand-point-right\"></i><span>在线预览</span></a></p>\n<p>Vue 官网推荐的是 <code>Animate.css</code></p>\n<p><a class=\"btn-beautify button--animated orange larger\" href=\"https://animate.style/\" \n  title=\"Animate 官网\"><i class=\"far fa-hand-point-right\"></i><span>Animate 官网</span></a></p>\n<p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vue/animate.style.png\" alt=\"animate.style\"></p>\n<h3 id=\"引入动画类库\"><a href=\"#引入动画类库\" class=\"headerlink\" title=\"引入动画类库\"></a>引入动画类库</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"给标签加入-animate-类名\"><a href=\"#给标签加入-animate-类名\" class=\"headerlink\" title=\"给标签加入 animate 类名\"></a>给标签加入 animate 类名</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;animate__animated animate__bounce&quot;</span>&gt;</span>Animate<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"animate-3\"><h2 id=\"使用动画钩子函数\"><a href=\"#使用动画钩子函数\" class=\"headerlink\" title=\"使用动画钩子函数\"></a>使用动画钩子函数</h2><p><a class=\"btn-beautify button--animated green larger\" href=\"https://codehhr.github.io/vue-daily/vue-animation-hook-function.html\" \n  title=\"在线预览\"><i class=\"far fa-hand-point-right\"></i><span>在线预览</span></a></p>\n<h3 id=\"定义-transition-组件以及三个钩子函数\"><a href=\"#定义-transition-组件以及三个钩子函数\" class=\"headerlink\" title=\"定义 transition 组件以及三个钩子函数\"></a>定义 transition 组件以及三个钩子函数</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;isShow = !isShow&quot;</span>&gt;</span>点我<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span>  </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">transition</span></span></span><br><span class=\"line\"><span class=\"tag\">    @<span class=\"attr\">before-enter</span>=<span class=\"string\">&quot;beforeEnter&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    @<span class=\"attr\">enter</span>=<span class=\"string\">&quot;enter&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    @<span class=\"attr\">after-enter</span>=<span class=\"string\">&quot;afterEnter&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  &gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;isShow&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;show&quot;</span>&gt;</span>OK<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">transition</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"定义三个-methods-钩子方法\"><a href=\"#定义三个-methods-钩子方法\" class=\"headerlink\" title=\"定义三个 methods 钩子方法\"></a>定义三个 methods 钩子方法</h3><p><strong>注意 : <code>enter</code> 函数里的 <code>el.offsetHeight</code> 和 <code>el.offsetWidth</code> 至少要有一个</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">&quot;#app&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">isShow</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">methods</span>: &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">beforeEnter</span>(<span class=\"params\">el</span>)</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 动画进入之前的回调函数</span></span><br><span class=\"line\">      el.style.transform = <span class=\"string\">&quot;translateX(500px)&quot;</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">enter</span>(<span class=\"params\">el, done</span>)</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 动画进入完成时候的回调函数</span></span><br><span class=\"line\">      el.offsetWidth;</span><br><span class=\"line\">      <span class=\"comment\">// el.offsetHeight;</span></span><br><span class=\"line\">      el.style.transform = <span class=\"string\">&quot;translateX(0px)&quot;</span>;</span><br><span class=\"line\">      done();</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">afterEnter</span>(<span class=\"params\">el</span>)</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 动画进入完成之后的回调函数</span></span><br><span class=\"line\">      <span class=\"built_in\">this</span>.isShow = !<span class=\"built_in\">this</span>.isShow;</span><br><span class=\"line\">      <span class=\"comment\">// el.style.opacity = 0;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"animate-4\"><h2 id=\"v-for-的列表过渡\"><a href=\"#v-for-的列表过渡\" class=\"headerlink\" title=\"v-for 的列表过渡\"></a>v-for 的列表过渡</h2><p><a class=\"btn-beautify button--animated green larger\" href=\"https://codehhr.github.io/vue-daily/v-for-list-transition-animation.html\" \n  title=\"在线预览\"><i class=\"far fa-hand-point-right\"></i><span>在线预览</span></a></p>\n<h3 id=\"定义过渡样式\"><a href=\"#定义过渡样式\" class=\"headerlink\" title=\"定义过渡样式\"></a>定义过渡样式</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.list-enter</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.list-leave-to</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">transform</span>: <span class=\"built_in\">translateY</span>(<span class=\"number\">10px</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.list-enter-active</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.list-leave-active</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">transition</span>: all <span class=\"number\">0.6s</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用-transition-group-组件把-v-for-循环的列表包裹起来\"><a href=\"#使用-transition-group-组件把-v-for-循环的列表包裹起来\" class=\"headerlink\" title=\"使用 transition-group 组件把 v-for 循环的列表包裹起来\"></a>使用 transition-group 组件把 v-for 循环的列表包裹起来</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;text&quot;</span> @<span class=\"attr\">keyup.enter</span>=<span class=\"string\">&quot;add&quot;</span> /&gt;</span>  </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">transition-group</span> <span class=\"attr\">tag</span>=<span class=\"string\">&quot;ul&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;list&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;(item, index) in list&quot;</span> <span class=\"attr\">:key</span>=<span class=\"string\">&quot;index&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">transition-group</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建-Vue-实例\"><a href=\"#创建-Vue-实例\" class=\"headerlink\" title=\"创建 Vue 实例\"></a>创建 Vue 实例</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">&quot;#app&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">text</span>: <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">list</span>: [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">methods</span>: &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">add</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.list.push(<span class=\"built_in\">this</span>.text);</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.text = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n","site":{"data":{"link":{"class1":{"class_name":"舍友","link_list":{"1":{"name":"codeAntg","link":"https://blog.csdn.net/weixin_44745147","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/fjh.jpg","descr":"那家刀削面不错","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class2":{"class_name":"致谢","link_list":{"1":{"name":"JerrC","link":"https://immyw.com","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/immyw.png","descr":"今日事,今日毕","width":"1px","style":"solid","color":"#60d0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/hexo.svg","descr":"A fast, simple & powerful blog framework","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class3":{"class_name":"友人","link_list":{"1":{"name":"Chester","link":"http://chesterlds.cn","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/chester.jpg","descr":null,"width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Wangs","link":"https://wangsss.cn/","avatar":"https://wangsss.cn/img/avatar.png","descr":"不疯魔，不成活 ~","width":"1px","style":"solid","color":"#9d9d9d","custom":"link_custom1","time":"4s","namecolor":"0094ff","descolor":"#ff9191"}}}}}},"excerpt":"","more":"<h1 id=\"推荐使用第三方-css-动画库\"><a href=\"#推荐使用第三方-css-动画库\" class=\"headerlink\" title=\"推荐使用第三方 css 动画库\"></a>推荐使用第三方 css 动画库</h1><div class=\"tabs\" id=\"animate\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button type=\"button\" data-href=\"#animate-1\">使用过渡类名</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#animate-2\">第三方css动画库</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#animate-3\">使用动画钩子函数</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#animate-4\">v-for的列表过渡</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"animate-1\"><h2 id=\"使用过渡类名\"><a href=\"#使用过渡类名\" class=\"headerlink\" title=\"使用过渡类名\"></a>使用过渡类名</h2><p><a class=\"btn-beautify button--animated green larger\" href=\"https://codehhr.github.io/vue-daily/vue-transition-class.html\" \n  title=\"在线预览\"><i class=\"far fa-hand-point-right\"></i><span>在线预览</span></a></p>\n<p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vue/transition.png\" alt=\"transition\"></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.13/vue.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;myAnimate&quot;</span>&gt;</span>按钮<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">transition</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;fade&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;div&quot;</span> <span class=\"attr\">v-show</span>=<span class=\"string\">&quot;isShow&quot;</span>&gt;</span>动画<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">transition</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">let</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">el</span>: <span class=\"string\">&quot;#app&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">data</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"attr\">isShow</span>: <span class=\"literal\">false</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">methods</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"function\"><span class=\"title\">myAnimate</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">this</span>.isShow = !<span class=\"built_in\">this</span>.isShow;</span></span><br><span class=\"line\"><span class=\"javascript\">      &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">  &#125;);</span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>定义两组类样式</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-id\">#app</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">100px</span> auto;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">600px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">button</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span> <span class=\"number\">20px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">outline</span>: none;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.div</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">20px</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">20px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#ffffff</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#494f5c</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">24px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* 入场动画开始和出场动画结束 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.fade-enter</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">transform</span>: <span class=\"built_in\">translateX</span>(-<span class=\"number\">200px</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/* 整个入场动画和出场动画过程 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.fade-enter-active</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.fade-leave-active</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">transition</span>: all <span class=\"number\">0.6s</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"animate-2\"><h2 id=\"使用第三方-css-动画库\"><a href=\"#使用第三方-css-动画库\" class=\"headerlink\" title=\"使用第三方 css 动画库\"></a>使用第三方 css 动画库</h2><p><a class=\"btn-beautify button--animated green larger\" href=\"https://codehhr.github.io/vue-daily/vue-animate.css.html\" \n  title=\"在线预览\"><i class=\"far fa-hand-point-right\"></i><span>在线预览</span></a></p>\n<p>Vue 官网推荐的是 <code>Animate.css</code></p>\n<p><a class=\"btn-beautify button--animated orange larger\" href=\"https://animate.style/\" \n  title=\"Animate 官网\"><i class=\"far fa-hand-point-right\"></i><span>Animate 官网</span></a></p>\n<p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vue/animate.style.png\" alt=\"animate.style\"></p>\n<h3 id=\"引入动画类库\"><a href=\"#引入动画类库\" class=\"headerlink\" title=\"引入动画类库\"></a>引入动画类库</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">/&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"给标签加入-animate-类名\"><a href=\"#给标签加入-animate-类名\" class=\"headerlink\" title=\"给标签加入 animate 类名\"></a>给标签加入 animate 类名</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;animate__animated animate__bounce&quot;</span>&gt;</span>Animate<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"animate-3\"><h2 id=\"使用动画钩子函数\"><a href=\"#使用动画钩子函数\" class=\"headerlink\" title=\"使用动画钩子函数\"></a>使用动画钩子函数</h2><p><a class=\"btn-beautify button--animated green larger\" href=\"https://codehhr.github.io/vue-daily/vue-animation-hook-function.html\" \n  title=\"在线预览\"><i class=\"far fa-hand-point-right\"></i><span>在线预览</span></a></p>\n<h3 id=\"定义-transition-组件以及三个钩子函数\"><a href=\"#定义-transition-组件以及三个钩子函数\" class=\"headerlink\" title=\"定义 transition 组件以及三个钩子函数\"></a>定义 transition 组件以及三个钩子函数</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;isShow = !isShow&quot;</span>&gt;</span>点我<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span>  </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">transition</span></span></span><br><span class=\"line\"><span class=\"tag\">    @<span class=\"attr\">before-enter</span>=<span class=\"string\">&quot;beforeEnter&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    @<span class=\"attr\">enter</span>=<span class=\"string\">&quot;enter&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    @<span class=\"attr\">after-enter</span>=<span class=\"string\">&quot;afterEnter&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  &gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;isShow&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;show&quot;</span>&gt;</span>OK<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">transition</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"定义三个-methods-钩子方法\"><a href=\"#定义三个-methods-钩子方法\" class=\"headerlink\" title=\"定义三个 methods 钩子方法\"></a>定义三个 methods 钩子方法</h3><p><strong>注意 : <code>enter</code> 函数里的 <code>el.offsetHeight</code> 和 <code>el.offsetWidth</code> 至少要有一个</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">&quot;#app&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">isShow</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">methods</span>: &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">beforeEnter</span>(<span class=\"params\">el</span>)</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 动画进入之前的回调函数</span></span><br><span class=\"line\">      el.style.transform = <span class=\"string\">&quot;translateX(500px)&quot;</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">enter</span>(<span class=\"params\">el, done</span>)</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 动画进入完成时候的回调函数</span></span><br><span class=\"line\">      el.offsetWidth;</span><br><span class=\"line\">      <span class=\"comment\">// el.offsetHeight;</span></span><br><span class=\"line\">      el.style.transform = <span class=\"string\">&quot;translateX(0px)&quot;</span>;</span><br><span class=\"line\">      done();</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">afterEnter</span>(<span class=\"params\">el</span>)</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 动画进入完成之后的回调函数</span></span><br><span class=\"line\">      <span class=\"built_in\">this</span>.isShow = !<span class=\"built_in\">this</span>.isShow;</span><br><span class=\"line\">      <span class=\"comment\">// el.style.opacity = 0;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"animate-4\"><h2 id=\"v-for-的列表过渡\"><a href=\"#v-for-的列表过渡\" class=\"headerlink\" title=\"v-for 的列表过渡\"></a>v-for 的列表过渡</h2><p><a class=\"btn-beautify button--animated green larger\" href=\"https://codehhr.github.io/vue-daily/v-for-list-transition-animation.html\" \n  title=\"在线预览\"><i class=\"far fa-hand-point-right\"></i><span>在线预览</span></a></p>\n<h3 id=\"定义过渡样式\"><a href=\"#定义过渡样式\" class=\"headerlink\" title=\"定义过渡样式\"></a>定义过渡样式</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.list-enter</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.list-leave-to</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">transform</span>: <span class=\"built_in\">translateY</span>(<span class=\"number\">10px</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.list-enter-active</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.list-leave-active</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">transition</span>: all <span class=\"number\">0.6s</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用-transition-group-组件把-v-for-循环的列表包裹起来\"><a href=\"#使用-transition-group-组件把-v-for-循环的列表包裹起来\" class=\"headerlink\" title=\"使用 transition-group 组件把 v-for 循环的列表包裹起来\"></a>使用 transition-group 组件把 v-for 循环的列表包裹起来</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;text&quot;</span> @<span class=\"attr\">keyup.enter</span>=<span class=\"string\">&quot;add&quot;</span> /&gt;</span>  </span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">transition-group</span> <span class=\"attr\">tag</span>=<span class=\"string\">&quot;ul&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;list&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">li</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;(item, index) in list&quot;</span> <span class=\"attr\">:key</span>=<span class=\"string\">&quot;index&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">transition-group</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建-Vue-实例\"><a href=\"#创建-Vue-实例\" class=\"headerlink\" title=\"创建 Vue 实例\"></a>创建 Vue 实例</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">&quot;#app&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">text</span>: <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">list</span>: [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">methods</span>: &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">add</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.list.push(<span class=\"built_in\">this</span>.text);</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.text = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n"},{"title":"Axios 的使用","date":"2021-07-21T14:28:53.000Z","updated":"2021-07-27T15:03:40.296Z","keywords":null,"description":null,"top_img":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg","cover":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vue/axios.png","comments":1,"copyright":null,"copyright_author":null,"copyright_author_href":null,"copyright_url":null,"copyright_info":null,"_content":"\n# 主要是 GET 和 POST 请求\n\n{% tabs axios %}\n\n<!-- tab GET 请求 -->\n\n# GET 请求\n\n```js\naxios\n  .get(\"/img?number=4\")\n  .then((res) => {\n    console.log(res);\n  })\n  .catch((err) => {\n    console.log(err);\n  });\n```\n\n或者\n\n```js\naxios\n  .get(\"/img\", {\n    params: {\n      number: 4,\n    },\n  })\n  .then((res) => {\n    console.log(res);\n  })\n  .catch((err) => {\n    console.log(err);\n  });\n```\n\n或者\n\n```js\naxios({\n  method: \"GET\",\n  url: \"https://img\",\n  // get 请求参数\n  params: {\n    name: \"zs\",\n    age: 20,\n  },\n}).then((res) => {\n  console.log(res);\n});\n```\n\n<!-- endtab -->\n\n<!-- tab POST 请求 -->\n\n# POST 请求\n\n传参方式大致用的有 `2` 种\n\n## ① Content-Type = multipart/form-data 和 Content-Type= application/x-www-form-urlencoded\n\n传参格式为 `formData`\n\n```js\nlet formData = new FormData();\nformData.append(\"type\", \"free\");\nformData.append(\"pageNum\", 1);\nformData.append(\"pageSize\", 10);\naxios\n  .post(\"/course\", formData)\n  .then((res) => {\n    console.log(res);\n  })\n  .catch((err) => {\n    console.log(err);\n  });\n```\n\n\n传参格式为 `query` 形式\n\n```js\naxios\n  .post(\n    \"/course\",\n    JSON.stringify({\n      type: \"free\",\n      pageNum: 1,\n      pageSize: 10,\n    })\n  )\n  .then((res) => {\n    console.log(\"res=>\", res);\n  })\n  .catch((err) => {\n    console.log(err);\n  });\n```\n\n## ② Content-Type= application/json\n\n传参格式为 `raw` ( `JSON` 格式)\n\n```js\naxios\n  .post(\"/course\", {\n    type: \"free\",\n    pageNum: 1,\n    pageSize: 10,\n  })\n  .then((res) => {\n    console.log(res);\n  });\n```\n\n或者\n\n```js\naxios\n  .post(\n    \"/course\",\n    JSON.stringify({\n      type: \"free\",\n      pageNum: 1,\n      pageSize: 10,\n    })\n  )\n  .then((res) => {\n    console.log(res);\n  })\n  .catch((err) => {\n    console.log(err);\n  });\n```\n\n<!-- endtab -->\n\n{% endtabs %}\n\n# The_End\n","source":"_posts/vue/vue-axios.md","raw":"---\ntitle: Axios 的使用\ndate: 2021-07-21 22:28:53\nupdated:\ntags:\n  - Vue\n  - axios\ncategories:\n  - Vue\n  - Vue基础\nkeywords:\ndescription:\ntop_img: https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg\ncover: https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vue/axios.png\ncomments:\ncopyright:\ncopyright_author:\ncopyright_author_href:\ncopyright_url:\ncopyright_info:\n---\n\n# 主要是 GET 和 POST 请求\n\n{% tabs axios %}\n\n<!-- tab GET 请求 -->\n\n# GET 请求\n\n```js\naxios\n  .get(\"/img?number=4\")\n  .then((res) => {\n    console.log(res);\n  })\n  .catch((err) => {\n    console.log(err);\n  });\n```\n\n或者\n\n```js\naxios\n  .get(\"/img\", {\n    params: {\n      number: 4,\n    },\n  })\n  .then((res) => {\n    console.log(res);\n  })\n  .catch((err) => {\n    console.log(err);\n  });\n```\n\n或者\n\n```js\naxios({\n  method: \"GET\",\n  url: \"https://img\",\n  // get 请求参数\n  params: {\n    name: \"zs\",\n    age: 20,\n  },\n}).then((res) => {\n  console.log(res);\n});\n```\n\n<!-- endtab -->\n\n<!-- tab POST 请求 -->\n\n# POST 请求\n\n传参方式大致用的有 `2` 种\n\n## ① Content-Type = multipart/form-data 和 Content-Type= application/x-www-form-urlencoded\n\n传参格式为 `formData`\n\n```js\nlet formData = new FormData();\nformData.append(\"type\", \"free\");\nformData.append(\"pageNum\", 1);\nformData.append(\"pageSize\", 10);\naxios\n  .post(\"/course\", formData)\n  .then((res) => {\n    console.log(res);\n  })\n  .catch((err) => {\n    console.log(err);\n  });\n```\n\n\n传参格式为 `query` 形式\n\n```js\naxios\n  .post(\n    \"/course\",\n    JSON.stringify({\n      type: \"free\",\n      pageNum: 1,\n      pageSize: 10,\n    })\n  )\n  .then((res) => {\n    console.log(\"res=>\", res);\n  })\n  .catch((err) => {\n    console.log(err);\n  });\n```\n\n## ② Content-Type= application/json\n\n传参格式为 `raw` ( `JSON` 格式)\n\n```js\naxios\n  .post(\"/course\", {\n    type: \"free\",\n    pageNum: 1,\n    pageSize: 10,\n  })\n  .then((res) => {\n    console.log(res);\n  });\n```\n\n或者\n\n```js\naxios\n  .post(\n    \"/course\",\n    JSON.stringify({\n      type: \"free\",\n      pageNum: 1,\n      pageSize: 10,\n    })\n  )\n  .then((res) => {\n    console.log(res);\n  })\n  .catch((err) => {\n    console.log(err);\n  });\n```\n\n<!-- endtab -->\n\n{% endtabs %}\n\n# The_End\n","slug":"vue/vue-axios","published":1,"layout":"post","photos":[],"link":"","_id":"cksvxwnol0046gubq85gpbmll","content":"<h1 id=\"主要是-GET-和-POST-请求\"><a href=\"#主要是-GET-和-POST-请求\" class=\"headerlink\" title=\"主要是 GET 和 POST 请求\"></a>主要是 GET 和 POST 请求</h1><div class=\"tabs\" id=\"axios\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button type=\"button\" data-href=\"#axios-1\">GET 请求</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#axios-2\">POST 请求</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"axios-1\"><h1 id=\"GET-请求\"><a href=\"#GET-请求\" class=\"headerlink\" title=\"GET 请求\"></a>GET 请求</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios</span><br><span class=\"line\">  .get(<span class=\"string\">&quot;/img?number=4&quot;</span>)</span><br><span class=\"line\">  .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .catch(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios</span><br><span class=\"line\">  .get(<span class=\"string\">&quot;/img&quot;</span>, &#123;</span><br><span class=\"line\">    <span class=\"attr\">params</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">number</span>: <span class=\"number\">4</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .catch(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios(&#123;</span><br><span class=\"line\">  <span class=\"attr\">method</span>: <span class=\"string\">&quot;GET&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">url</span>: <span class=\"string\">&quot;https://img&quot;</span>,</span><br><span class=\"line\">  <span class=\"comment\">// get 请求参数</span></span><br><span class=\"line\">  <span class=\"attr\">params</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&quot;zs&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">20</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;).then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"axios-2\"><h1 id=\"POST-请求\"><a href=\"#POST-请求\" class=\"headerlink\" title=\"POST 请求\"></a>POST 请求</h1><p>传参方式大致用的有 <code>2</code> 种</p>\n<h2 id=\"①-Content-Type-multipart-form-data-和-Content-Type-application-x-www-form-urlencoded\"><a href=\"#①-Content-Type-multipart-form-data-和-Content-Type-application-x-www-form-urlencoded\" class=\"headerlink\" title=\"① Content-Type = multipart/form-data 和 Content-Type= application/x-www-form-urlencoded\"></a>① Content-Type = multipart/form-data 和 Content-Type= application/x-www-form-urlencoded</h2><p>传参格式为 <code>formData</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> formData = <span class=\"keyword\">new</span> FormData();</span><br><span class=\"line\">formData.append(<span class=\"string\">&quot;type&quot;</span>, <span class=\"string\">&quot;free&quot;</span>);</span><br><span class=\"line\">formData.append(<span class=\"string\">&quot;pageNum&quot;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">formData.append(<span class=\"string\">&quot;pageSize&quot;</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">axios</span><br><span class=\"line\">  .post(<span class=\"string\">&quot;/course&quot;</span>, formData)</span><br><span class=\"line\">  .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .catch(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n\n\n<p>传参格式为 <code>query</code> 形式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios</span><br><span class=\"line\">  .post(</span><br><span class=\"line\">    <span class=\"string\">&quot;/course&quot;</span>,</span><br><span class=\"line\">    <span class=\"built_in\">JSON</span>.stringify(&#123;</span><br><span class=\"line\">      <span class=\"attr\">type</span>: <span class=\"string\">&quot;free&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">pageNum</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">      <span class=\"attr\">pageSize</span>: <span class=\"number\">10</span>,</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  )</span><br><span class=\"line\">  .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;res=&gt;&quot;</span>, res);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .catch(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"②-Content-Type-application-json\"><a href=\"#②-Content-Type-application-json\" class=\"headerlink\" title=\"② Content-Type= application/json\"></a>② Content-Type= application/json</h2><p>传参格式为 <code>raw</code> ( <code>JSON</code> 格式)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios</span><br><span class=\"line\">  .post(<span class=\"string\">&quot;/course&quot;</span>, &#123;</span><br><span class=\"line\">    <span class=\"attr\">type</span>: <span class=\"string\">&quot;free&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">pageNum</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"attr\">pageSize</span>: <span class=\"number\">10</span>,</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios</span><br><span class=\"line\">  .post(</span><br><span class=\"line\">    <span class=\"string\">&quot;/course&quot;</span>,</span><br><span class=\"line\">    <span class=\"built_in\">JSON</span>.stringify(&#123;</span><br><span class=\"line\">      <span class=\"attr\">type</span>: <span class=\"string\">&quot;free&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">pageNum</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">      <span class=\"attr\">pageSize</span>: <span class=\"number\">10</span>,</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  )</span><br><span class=\"line\">  .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .catch(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n\n<h1 id=\"The-End\"><a href=\"#The-End\" class=\"headerlink\" title=\"The_End\"></a>The_End</h1>","site":{"data":{"link":{"class1":{"class_name":"舍友","link_list":{"1":{"name":"codeAntg","link":"https://blog.csdn.net/weixin_44745147","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/fjh.jpg","descr":"那家刀削面不错","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class2":{"class_name":"致谢","link_list":{"1":{"name":"JerrC","link":"https://immyw.com","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/immyw.png","descr":"今日事,今日毕","width":"1px","style":"solid","color":"#60d0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/hexo.svg","descr":"A fast, simple & powerful blog framework","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class3":{"class_name":"友人","link_list":{"1":{"name":"Chester","link":"http://chesterlds.cn","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/chester.jpg","descr":null,"width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Wangs","link":"https://wangsss.cn/","avatar":"https://wangsss.cn/img/avatar.png","descr":"不疯魔，不成活 ~","width":"1px","style":"solid","color":"#9d9d9d","custom":"link_custom1","time":"4s","namecolor":"0094ff","descolor":"#ff9191"}}}}}},"excerpt":"","more":"<h1 id=\"主要是-GET-和-POST-请求\"><a href=\"#主要是-GET-和-POST-请求\" class=\"headerlink\" title=\"主要是 GET 和 POST 请求\"></a>主要是 GET 和 POST 请求</h1><div class=\"tabs\" id=\"axios\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button type=\"button\" data-href=\"#axios-1\">GET 请求</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#axios-2\">POST 请求</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"axios-1\"><h1 id=\"GET-请求\"><a href=\"#GET-请求\" class=\"headerlink\" title=\"GET 请求\"></a>GET 请求</h1><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios</span><br><span class=\"line\">  .get(<span class=\"string\">&quot;/img?number=4&quot;</span>)</span><br><span class=\"line\">  .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .catch(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios</span><br><span class=\"line\">  .get(<span class=\"string\">&quot;/img&quot;</span>, &#123;</span><br><span class=\"line\">    <span class=\"attr\">params</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">number</span>: <span class=\"number\">4</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .catch(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios(&#123;</span><br><span class=\"line\">  <span class=\"attr\">method</span>: <span class=\"string\">&quot;GET&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">url</span>: <span class=\"string\">&quot;https://img&quot;</span>,</span><br><span class=\"line\">  <span class=\"comment\">// get 请求参数</span></span><br><span class=\"line\">  <span class=\"attr\">params</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&quot;zs&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">20</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;).then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"axios-2\"><h1 id=\"POST-请求\"><a href=\"#POST-请求\" class=\"headerlink\" title=\"POST 请求\"></a>POST 请求</h1><p>传参方式大致用的有 <code>2</code> 种</p>\n<h2 id=\"①-Content-Type-multipart-form-data-和-Content-Type-application-x-www-form-urlencoded\"><a href=\"#①-Content-Type-multipart-form-data-和-Content-Type-application-x-www-form-urlencoded\" class=\"headerlink\" title=\"① Content-Type = multipart/form-data 和 Content-Type= application/x-www-form-urlencoded\"></a>① Content-Type = multipart/form-data 和 Content-Type= application/x-www-form-urlencoded</h2><p>传参格式为 <code>formData</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> formData = <span class=\"keyword\">new</span> FormData();</span><br><span class=\"line\">formData.append(<span class=\"string\">&quot;type&quot;</span>, <span class=\"string\">&quot;free&quot;</span>);</span><br><span class=\"line\">formData.append(<span class=\"string\">&quot;pageNum&quot;</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">formData.append(<span class=\"string\">&quot;pageSize&quot;</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\">axios</span><br><span class=\"line\">  .post(<span class=\"string\">&quot;/course&quot;</span>, formData)</span><br><span class=\"line\">  .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .catch(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n\n\n<p>传参格式为 <code>query</code> 形式</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios</span><br><span class=\"line\">  .post(</span><br><span class=\"line\">    <span class=\"string\">&quot;/course&quot;</span>,</span><br><span class=\"line\">    <span class=\"built_in\">JSON</span>.stringify(&#123;</span><br><span class=\"line\">      <span class=\"attr\">type</span>: <span class=\"string\">&quot;free&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">pageNum</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">      <span class=\"attr\">pageSize</span>: <span class=\"number\">10</span>,</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  )</span><br><span class=\"line\">  .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;res=&gt;&quot;</span>, res);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .catch(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"②-Content-Type-application-json\"><a href=\"#②-Content-Type-application-json\" class=\"headerlink\" title=\"② Content-Type= application/json\"></a>② Content-Type= application/json</h2><p>传参格式为 <code>raw</code> ( <code>JSON</code> 格式)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios</span><br><span class=\"line\">  .post(<span class=\"string\">&quot;/course&quot;</span>, &#123;</span><br><span class=\"line\">    <span class=\"attr\">type</span>: <span class=\"string\">&quot;free&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">pageNum</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"attr\">pageSize</span>: <span class=\"number\">10</span>,</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">axios</span><br><span class=\"line\">  .post(</span><br><span class=\"line\">    <span class=\"string\">&quot;/course&quot;</span>,</span><br><span class=\"line\">    <span class=\"built_in\">JSON</span>.stringify(&#123;</span><br><span class=\"line\">      <span class=\"attr\">type</span>: <span class=\"string\">&quot;free&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">pageNum</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">      <span class=\"attr\">pageSize</span>: <span class=\"number\">10</span>,</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  )</span><br><span class=\"line\">  .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .catch(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n\n<h1 id=\"The-End\"><a href=\"#The-End\" class=\"headerlink\" title=\"The_End\"></a>The_End</h1>"},{"title":"Vue 品牌管理小案例","date":"2021-07-21T06:45:50.000Z","updated":"2021-07-22T14:13:35.312Z","keywords":null,"description":null,"top_img":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg","cover":"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/desktop.png","comments":1,"copyright":null,"copyright_author":null,"copyright_author_href":null,"copyright_url":null,"copyright_info":null,"_content":"\n{% btn 'https://codehhr.github.io/vue-daily/brand-managment.html',在线预览,far fa-hand-point-right,green larger %}\n\n{% hideToggle Vue 简单的品牌管理案例 %}\n\n```html\n<script src=\"https://cdn.bootcdn.net/ajax/libs/vue/2.6.14/vue.js\"></script>\n<link\n  href=\"https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/3.4.1/css/bootstrap.css\"\n  rel=\"stylesheet\"\n/>\n\n<style>\n  .container {\n    margin: 60px auto;\n  }\n  .form-group {\n    margin: 0 20px;\n  }\n  th,\n  td {\n    text-align: center;\n    line-height: 50px !important;\n  }\n</style>\n\n<div id=\"app\">\n  <div class=\"container\">\n    <div class=\"panel panel-info\">\n      <div class=\"panel-heading\">\n        <h3 class=\"panel-title\">品牌管理</h3>\n      </div>\n      <div class=\"panel-body\">\n        <form action=\"\" method=\"POST\" class=\"form-inline\" role=\"form\">\n          <div class=\"form-group\">\n            <label for=\"search\">搜索</label>\n            <input\n              id=\"search\"\n              type=\"text\"\n              class=\"form-control\"\n              placeholder=\"请输入品牌关键字\"\n              v-model:value=\"keyword\"\n              @change=\"showBrandList\"\n            />\n          </div>\n          <div class=\"form-group\">\n            <label for=\"name\">名字</label>\n            <input\n              id=\"name\"\n              type=\"text\"\n              class=\"form-control\"\n              placeholder=\"请输入品牌名字\"\n              v-model:value=\"name\"\n            />\n          </div>\n\n          <button type=\"button\" class=\"btn btn-primary\" @click=\"addBrand\">\n            添加\n          </button>\n        </form>\n      </div>\n\n      <table class=\"table table-striped table-bordered\">\n        <thead>\n          <tr>\n            <th>ID</th>\n            <th>NAME</th>\n            <th>Time</th>\n            <th>OPTION</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr v-for=\"(item,index) in showBrandList()\">\n            <td>{{index+1}}</td>\n            <td>{{item.name}}</td>\n            <td>{{item.time | timeFilter(\"YYYY-MM-DD hh:mm:ss\")}}</td>\n            <td>\n              <button\n                type=\"button\"\n                class=\"btn btn-danger\"\n                @click=\"delBrand(index)\"\n              >\n                删除\n              </button>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  </div>\n</div>\n\n<script>\n  let vm = new Vue({\n    el: \"#app\",\n    data: {\n      name: \"\",\n      keyword: \"\",\n      brandList: JSON.parse(localStorage.getItem(\"brandList\")) || [\n        { name: \"迈凯轮\", time: new Date() },\n        { name: \"科尼赛格\", time: new Date() },\n        { name: \"兰博基尼\", time: new Date() },\n        { name: \"BMW\", time: new Date() },\n      ],\n    },\n    created() {},\n    methods: {\n      // 显示\n      showBrandList() {\n        // this.brandList = localStorage.getItem(\"brandList\");\n        return this.brandList.filter((item) => {\n          return item.name.includes(this.keyword);\n        });\n      },\n      // 添加\n      addBrand() {\n        if (this.name) {\n          this.brandList.push({\n            name: this.name,\n            time: new Date(),\n          });\n          localStorage.setItem(\"brandList\", JSON.stringify(this.brandList));\n          this.name = \"\";\n        } else {\n          alert(\"空\");\n        }\n      },\n      // 删除\n      delBrand(index) {\n        this.brandList.splice(index, 1);\n        localStorage.setItem(\"brandList\", JSON.stringify(this.brandList));\n      },\n    },\n    filters: {\n      //定义过滤器 , 格式化时间\n      timeFilter(nothing, dateFormat) {\n        let date = new Date();\n        return dateFormat\n          .replace(\"YYYY\", date.getFullYear())\n          .replace(\"MM\", (date.getMonth() + 1).toString().padStart(2, \"0\"))\n          .replace(\"DD\", date.getDate().toString().padStart(2, \"0\"))\n          .replace(\"hh\", date.getHours().toString().padStart(2, \"0\"))\n          .replace(\"mm\", date.getMinutes().toString().padStart(2, \"0\"))\n          .replace(\"ss\", date.getSeconds().toString().padStart(2, \"0\"));\n      },\n    },\n  });\n</script>\n```\n\n{% endhideToggle %}\n","source":"_posts/vue/vue-basic-brand-managment.md","raw":"---\ntitle: Vue 品牌管理小案例\ndate: 2021-07-21 14:45:50\nupdated:\ntags:\n  - Vue\ncategories:\n  - Vue\n  - Vue基础\nkeywords:\ndescription:\ntop_img: https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg\ncover:\ncomments:\ncopyright:\ncopyright_author:\ncopyright_author_href:\ncopyright_url:\ncopyright_info:\n---\n\n{% btn 'https://codehhr.github.io/vue-daily/brand-managment.html',在线预览,far fa-hand-point-right,green larger %}\n\n{% hideToggle Vue 简单的品牌管理案例 %}\n\n```html\n<script src=\"https://cdn.bootcdn.net/ajax/libs/vue/2.6.14/vue.js\"></script>\n<link\n  href=\"https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/3.4.1/css/bootstrap.css\"\n  rel=\"stylesheet\"\n/>\n\n<style>\n  .container {\n    margin: 60px auto;\n  }\n  .form-group {\n    margin: 0 20px;\n  }\n  th,\n  td {\n    text-align: center;\n    line-height: 50px !important;\n  }\n</style>\n\n<div id=\"app\">\n  <div class=\"container\">\n    <div class=\"panel panel-info\">\n      <div class=\"panel-heading\">\n        <h3 class=\"panel-title\">品牌管理</h3>\n      </div>\n      <div class=\"panel-body\">\n        <form action=\"\" method=\"POST\" class=\"form-inline\" role=\"form\">\n          <div class=\"form-group\">\n            <label for=\"search\">搜索</label>\n            <input\n              id=\"search\"\n              type=\"text\"\n              class=\"form-control\"\n              placeholder=\"请输入品牌关键字\"\n              v-model:value=\"keyword\"\n              @change=\"showBrandList\"\n            />\n          </div>\n          <div class=\"form-group\">\n            <label for=\"name\">名字</label>\n            <input\n              id=\"name\"\n              type=\"text\"\n              class=\"form-control\"\n              placeholder=\"请输入品牌名字\"\n              v-model:value=\"name\"\n            />\n          </div>\n\n          <button type=\"button\" class=\"btn btn-primary\" @click=\"addBrand\">\n            添加\n          </button>\n        </form>\n      </div>\n\n      <table class=\"table table-striped table-bordered\">\n        <thead>\n          <tr>\n            <th>ID</th>\n            <th>NAME</th>\n            <th>Time</th>\n            <th>OPTION</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr v-for=\"(item,index) in showBrandList()\">\n            <td>{{index+1}}</td>\n            <td>{{item.name}}</td>\n            <td>{{item.time | timeFilter(\"YYYY-MM-DD hh:mm:ss\")}}</td>\n            <td>\n              <button\n                type=\"button\"\n                class=\"btn btn-danger\"\n                @click=\"delBrand(index)\"\n              >\n                删除\n              </button>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  </div>\n</div>\n\n<script>\n  let vm = new Vue({\n    el: \"#app\",\n    data: {\n      name: \"\",\n      keyword: \"\",\n      brandList: JSON.parse(localStorage.getItem(\"brandList\")) || [\n        { name: \"迈凯轮\", time: new Date() },\n        { name: \"科尼赛格\", time: new Date() },\n        { name: \"兰博基尼\", time: new Date() },\n        { name: \"BMW\", time: new Date() },\n      ],\n    },\n    created() {},\n    methods: {\n      // 显示\n      showBrandList() {\n        // this.brandList = localStorage.getItem(\"brandList\");\n        return this.brandList.filter((item) => {\n          return item.name.includes(this.keyword);\n        });\n      },\n      // 添加\n      addBrand() {\n        if (this.name) {\n          this.brandList.push({\n            name: this.name,\n            time: new Date(),\n          });\n          localStorage.setItem(\"brandList\", JSON.stringify(this.brandList));\n          this.name = \"\";\n        } else {\n          alert(\"空\");\n        }\n      },\n      // 删除\n      delBrand(index) {\n        this.brandList.splice(index, 1);\n        localStorage.setItem(\"brandList\", JSON.stringify(this.brandList));\n      },\n    },\n    filters: {\n      //定义过滤器 , 格式化时间\n      timeFilter(nothing, dateFormat) {\n        let date = new Date();\n        return dateFormat\n          .replace(\"YYYY\", date.getFullYear())\n          .replace(\"MM\", (date.getMonth() + 1).toString().padStart(2, \"0\"))\n          .replace(\"DD\", date.getDate().toString().padStart(2, \"0\"))\n          .replace(\"hh\", date.getHours().toString().padStart(2, \"0\"))\n          .replace(\"mm\", date.getMinutes().toString().padStart(2, \"0\"))\n          .replace(\"ss\", date.getSeconds().toString().padStart(2, \"0\"));\n      },\n    },\n  });\n</script>\n```\n\n{% endhideToggle %}\n","slug":"vue/vue-basic-brand-managment","published":1,"layout":"post","photos":[],"link":"","_id":"cksvxwnon0047gubqbzuoel6a","content":"<a class=\"btn-beautify button--animated green larger\" href=\"https://codehhr.github.io/vue-daily/brand-managment.html\" \n  title=\"在线预览\"><i class=\"far fa-hand-point-right\"></i><span>在线预览</span></a>\n\n<div class=\"hide-toggle\" ><div class=\"hide-button toggle-title\" style=\"\"><i class=\"fas fa-caret-right fa-fw\"></i><span>Vue 简单的品牌管理案例</span></div>\n    <div class=\"hide-content\"><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.14/vue.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/3.4.1/css/bootstrap.css&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"css\"></span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.container</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"attribute\">margin</span>: <span class=\"number\">60px</span> auto;</span></span><br><span class=\"line\"><span class=\"css\">  &#125;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.form-group</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> <span class=\"number\">20px</span>;</span></span><br><span class=\"line\"><span class=\"css\">  &#125;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-tag\">th</span>,</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-tag\">td</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"attribute\">text-align</span>: center;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">50px</span> <span class=\"meta\">!important</span>;</span></span><br><span class=\"line\"><span class=\"css\">  &#125;</span></span><br><span class=\"line\"><span class=\"css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;panel panel-info&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;panel-heading&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h3</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;panel-title&quot;</span>&gt;</span>品牌管理<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;panel-body&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;POST&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-inline&quot;</span> <span class=\"attr\">role</span>=<span class=\"string\">&quot;form&quot;</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;search&quot;</span>&gt;</span>搜索<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">input</span></span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">id</span>=<span class=\"string\">&quot;search&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;请输入品牌关键字&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">v-model:value</span>=<span class=\"string\">&quot;keyword&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">              @<span class=\"attr\">change</span>=<span class=\"string\">&quot;showBrandList&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;name&quot;</span>&gt;</span>名字<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">input</span></span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">id</span>=<span class=\"string\">&quot;name&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;请输入品牌名字&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">v-model:value</span>=<span class=\"string\">&quot;name&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-primary&quot;</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;addBrand&quot;</span>&gt;</span></span><br><span class=\"line\">            添加</span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;table table-striped table-bordered&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">thead</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>ID<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>NAME<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>Time<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>OPTION<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">thead</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tbody</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">tr</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;(item,index) in showBrandList()&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123;index+1&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123;item.time | timeFilter(&quot;YYYY-MM-DD hh:mm:ss&quot;)&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">button</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-danger&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                @<span class=\"attr\">click</span>=<span class=\"string\">&quot;delBrand(index)&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">              &gt;</span></span><br><span class=\"line\">                删除</span><br><span class=\"line\">              <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">tbody</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">let</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">el</span>: <span class=\"string\">&quot;#app&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">data</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"attr\">name</span>: <span class=\"string\">&quot;&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"attr\">keyword</span>: <span class=\"string\">&quot;&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"attr\">brandList</span>: <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">localStorage</span>.getItem(<span class=\"string\">&quot;brandList&quot;</span>)) || [</span></span><br><span class=\"line\"><span class=\"javascript\">        &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;迈凯轮&quot;</span>, <span class=\"attr\">time</span>: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>() &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">        &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;科尼赛格&quot;</span>, <span class=\"attr\">time</span>: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>() &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">        &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;兰博基尼&quot;</span>, <span class=\"attr\">time</span>: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>() &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">        &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;BMW&quot;</span>, <span class=\"attr\">time</span>: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>() &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">      ],</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"title\">created</span>(<span class=\"params\"></span>)</span> &#123;&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">methods</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"comment\">// 显示</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"function\"><span class=\"title\">showBrandList</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// this.brandList = localStorage.getItem(&quot;brandList&quot;);</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.brandList.filter(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"keyword\">return</span> item.name.includes(<span class=\"built_in\">this</span>.keyword);</span></span><br><span class=\"line\"><span class=\"javascript\">        &#125;);</span></span><br><span class=\"line\"><span class=\"javascript\">      &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"comment\">// 添加</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"function\"><span class=\"title\">addBrand</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.name) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"built_in\">this</span>.brandList.push(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"attr\">name</span>: <span class=\"built_in\">this</span>.name,</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"attr\">time</span>: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(),</span></span><br><span class=\"line\"><span class=\"javascript\">          &#125;);</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"built_in\">localStorage</span>.setItem(<span class=\"string\">&quot;brandList&quot;</span>, <span class=\"built_in\">JSON</span>.stringify(<span class=\"built_in\">this</span>.brandList));</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"built_in\">this</span>.name = <span class=\"string\">&quot;&quot;</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">        &#125; <span class=\"keyword\">else</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          alert(<span class=\"string\">&quot;空&quot;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">      &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"comment\">// 删除</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"function\"><span class=\"title\">delBrand</span>(<span class=\"params\">index</span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">this</span>.brandList.splice(index, <span class=\"number\">1</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">localStorage</span>.setItem(<span class=\"string\">&quot;brandList&quot;</span>, <span class=\"built_in\">JSON</span>.stringify(<span class=\"built_in\">this</span>.brandList));</span></span><br><span class=\"line\"><span class=\"javascript\">      &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">filters</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"comment\">//定义过滤器 , 格式化时间</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"function\"><span class=\"title\">timeFilter</span>(<span class=\"params\">nothing, dateFormat</span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">let</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">return</span> dateFormat</span></span><br><span class=\"line\"><span class=\"javascript\">          .replace(<span class=\"string\">&quot;YYYY&quot;</span>, date.getFullYear())</span></span><br><span class=\"line\"><span class=\"javascript\">          .replace(<span class=\"string\">&quot;MM&quot;</span>, (date.getMonth() + <span class=\"number\">1</span>).toString().padStart(<span class=\"number\">2</span>, <span class=\"string\">&quot;0&quot;</span>))</span></span><br><span class=\"line\"><span class=\"javascript\">          .replace(<span class=\"string\">&quot;DD&quot;</span>, date.getDate().toString().padStart(<span class=\"number\">2</span>, <span class=\"string\">&quot;0&quot;</span>))</span></span><br><span class=\"line\"><span class=\"javascript\">          .replace(<span class=\"string\">&quot;hh&quot;</span>, date.getHours().toString().padStart(<span class=\"number\">2</span>, <span class=\"string\">&quot;0&quot;</span>))</span></span><br><span class=\"line\"><span class=\"javascript\">          .replace(<span class=\"string\">&quot;mm&quot;</span>, date.getMinutes().toString().padStart(<span class=\"number\">2</span>, <span class=\"string\">&quot;0&quot;</span>))</span></span><br><span class=\"line\"><span class=\"javascript\">          .replace(<span class=\"string\">&quot;ss&quot;</span>, date.getSeconds().toString().padStart(<span class=\"number\">2</span>, <span class=\"string\">&quot;0&quot;</span>));</span></span><br><span class=\"line\"><span class=\"javascript\">      &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">  &#125;);</span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</div></div>\n","site":{"data":{"link":{"class1":{"class_name":"舍友","link_list":{"1":{"name":"codeAntg","link":"https://blog.csdn.net/weixin_44745147","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/fjh.jpg","descr":"那家刀削面不错","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class2":{"class_name":"致谢","link_list":{"1":{"name":"JerrC","link":"https://immyw.com","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/immyw.png","descr":"今日事,今日毕","width":"1px","style":"solid","color":"#60d0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/hexo.svg","descr":"A fast, simple & powerful blog framework","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class3":{"class_name":"友人","link_list":{"1":{"name":"Chester","link":"http://chesterlds.cn","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/chester.jpg","descr":null,"width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Wangs","link":"https://wangsss.cn/","avatar":"https://wangsss.cn/img/avatar.png","descr":"不疯魔，不成活 ~","width":"1px","style":"solid","color":"#9d9d9d","custom":"link_custom1","time":"4s","namecolor":"0094ff","descolor":"#ff9191"}}}}}},"excerpt":"","more":"<a class=\"btn-beautify button--animated green larger\" href=\"https://codehhr.github.io/vue-daily/brand-managment.html\" \n  title=\"在线预览\"><i class=\"far fa-hand-point-right\"></i><span>在线预览</span></a>\n\n<div class=\"hide-toggle\" ><div class=\"hide-button toggle-title\" style=\"\"><i class=\"fas fa-caret-right fa-fw\"></i><span>Vue 简单的品牌管理案例</span></div>\n    <div class=\"hide-content\"><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.14/vue.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">link</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/3.4.1/css/bootstrap.css&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"css\"></span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.container</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"attribute\">margin</span>: <span class=\"number\">60px</span> auto;</span></span><br><span class=\"line\"><span class=\"css\">  &#125;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.form-group</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> <span class=\"number\">20px</span>;</span></span><br><span class=\"line\"><span class=\"css\">  &#125;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-tag\">th</span>,</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-tag\">td</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"attribute\">text-align</span>: center;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"attribute\">line-height</span>: <span class=\"number\">50px</span> <span class=\"meta\">!important</span>;</span></span><br><span class=\"line\"><span class=\"css\">  &#125;</span></span><br><span class=\"line\"><span class=\"css\"></span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;panel panel-info&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;panel-heading&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h3</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;panel-title&quot;</span>&gt;</span>品牌管理<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;panel-body&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">action</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">method</span>=<span class=\"string\">&quot;POST&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-inline&quot;</span> <span class=\"attr\">role</span>=<span class=\"string\">&quot;form&quot;</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;search&quot;</span>&gt;</span>搜索<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">input</span></span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">id</span>=<span class=\"string\">&quot;search&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;请输入品牌关键字&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">v-model:value</span>=<span class=\"string\">&quot;keyword&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">              @<span class=\"attr\">change</span>=<span class=\"string\">&quot;showBrandList&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;name&quot;</span>&gt;</span>名字<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">input</span></span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">id</span>=<span class=\"string\">&quot;name&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;请输入品牌名字&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">v-model:value</span>=<span class=\"string\">&quot;name&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-primary&quot;</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;addBrand&quot;</span>&gt;</span></span><br><span class=\"line\">            添加</span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;table table-striped table-bordered&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">thead</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>ID<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>NAME<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>Time<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">th</span>&gt;</span>OPTION<span class=\"tag\">&lt;/<span class=\"name\">th</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">thead</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">tbody</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">tr</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;(item,index) in showBrandList()&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123;index+1&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span>&#123;&#123;item.time | timeFilter(&quot;YYYY-MM-DD hh:mm:ss&quot;)&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">button</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">type</span>=<span class=\"string\">&quot;button&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-danger&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">                @<span class=\"attr\">click</span>=<span class=\"string\">&quot;delBrand(index)&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">              &gt;</span></span><br><span class=\"line\">                删除</span><br><span class=\"line\">              <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">tbody</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">let</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">el</span>: <span class=\"string\">&quot;#app&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">data</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"attr\">name</span>: <span class=\"string\">&quot;&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"attr\">keyword</span>: <span class=\"string\">&quot;&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"attr\">brandList</span>: <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">localStorage</span>.getItem(<span class=\"string\">&quot;brandList&quot;</span>)) || [</span></span><br><span class=\"line\"><span class=\"javascript\">        &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;迈凯轮&quot;</span>, <span class=\"attr\">time</span>: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>() &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">        &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;科尼赛格&quot;</span>, <span class=\"attr\">time</span>: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>() &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">        &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;兰博基尼&quot;</span>, <span class=\"attr\">time</span>: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>() &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">        &#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;BMW&quot;</span>, <span class=\"attr\">time</span>: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>() &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">      ],</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"title\">created</span>(<span class=\"params\"></span>)</span> &#123;&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">methods</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"comment\">// 显示</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"function\"><span class=\"title\">showBrandList</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// this.brandList = localStorage.getItem(&quot;brandList&quot;);</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.brandList.filter(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"keyword\">return</span> item.name.includes(<span class=\"built_in\">this</span>.keyword);</span></span><br><span class=\"line\"><span class=\"javascript\">        &#125;);</span></span><br><span class=\"line\"><span class=\"javascript\">      &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"comment\">// 添加</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"function\"><span class=\"title\">addBrand</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.name) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"built_in\">this</span>.brandList.push(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"attr\">name</span>: <span class=\"built_in\">this</span>.name,</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"attr\">time</span>: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>(),</span></span><br><span class=\"line\"><span class=\"javascript\">          &#125;);</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"built_in\">localStorage</span>.setItem(<span class=\"string\">&quot;brandList&quot;</span>, <span class=\"built_in\">JSON</span>.stringify(<span class=\"built_in\">this</span>.brandList));</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"built_in\">this</span>.name = <span class=\"string\">&quot;&quot;</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">        &#125; <span class=\"keyword\">else</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          alert(<span class=\"string\">&quot;空&quot;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">        &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">      &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"comment\">// 删除</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"function\"><span class=\"title\">delBrand</span>(<span class=\"params\">index</span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">this</span>.brandList.splice(index, <span class=\"number\">1</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">localStorage</span>.setItem(<span class=\"string\">&quot;brandList&quot;</span>, <span class=\"built_in\">JSON</span>.stringify(<span class=\"built_in\">this</span>.brandList));</span></span><br><span class=\"line\"><span class=\"javascript\">      &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">filters</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"comment\">//定义过滤器 , 格式化时间</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"function\"><span class=\"title\">timeFilter</span>(<span class=\"params\">nothing, dateFormat</span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">let</span> date = <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>();</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">return</span> dateFormat</span></span><br><span class=\"line\"><span class=\"javascript\">          .replace(<span class=\"string\">&quot;YYYY&quot;</span>, date.getFullYear())</span></span><br><span class=\"line\"><span class=\"javascript\">          .replace(<span class=\"string\">&quot;MM&quot;</span>, (date.getMonth() + <span class=\"number\">1</span>).toString().padStart(<span class=\"number\">2</span>, <span class=\"string\">&quot;0&quot;</span>))</span></span><br><span class=\"line\"><span class=\"javascript\">          .replace(<span class=\"string\">&quot;DD&quot;</span>, date.getDate().toString().padStart(<span class=\"number\">2</span>, <span class=\"string\">&quot;0&quot;</span>))</span></span><br><span class=\"line\"><span class=\"javascript\">          .replace(<span class=\"string\">&quot;hh&quot;</span>, date.getHours().toString().padStart(<span class=\"number\">2</span>, <span class=\"string\">&quot;0&quot;</span>))</span></span><br><span class=\"line\"><span class=\"javascript\">          .replace(<span class=\"string\">&quot;mm&quot;</span>, date.getMinutes().toString().padStart(<span class=\"number\">2</span>, <span class=\"string\">&quot;0&quot;</span>))</span></span><br><span class=\"line\"><span class=\"javascript\">          .replace(<span class=\"string\">&quot;ss&quot;</span>, date.getSeconds().toString().padStart(<span class=\"number\">2</span>, <span class=\"string\">&quot;0&quot;</span>));</span></span><br><span class=\"line\"><span class=\"javascript\">      &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">  &#125;);</span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</div></div>\n"},{"title":"Vue 基础","date":"2021-07-19T13:39:18.000Z","keywords":null,"description":null,"top_img":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg","cover":"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/desktop.png","comments":1,"copyright":null,"copyright_author":null,"copyright_author_href":null,"copyright_url":null,"copyright_info":null,"_content":"\n# Vue.js\n\n![vue.js](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vuebasic/vueall.png)\n\n# 什么是 `vue.js`\n\n- `Vue.js` 是一套`构建用户界面`的`渐进式` `框架` , 与其他重量级框架不同的是 , `Vue` 采用自底向上增量开发的设计 , `Vue` 的核心库只关注视图层 , 不仅易于上手 , 还便于与第三方库或既有项目整合 ,\n- `Vue.js` 是前端的主流框架之一 , 和 `Angular.js`、`React.js` 一起 , 并成为前端三大主流框架！\n\n## 为什么学习流行框架\n\n- 企业为了提高开发效率 : 在企业 `4E2D` , 时间就是效率 , 效率就是金钱 ;\n- 企业中 , 使用框架 , 能够提高开发的效率 ;\n- 提高开发效率的发展历程 : 原生 `JS` -> `Jquery` 之类的类库 -> 前端模板引擎 -> `Angular.js` / `Vue.js`\n- 能够帮助我们减少不必要的 DOM 操作 ;提高渲染效率 ;双向数据绑定的概念【通过框架提供的指令 , 我们前端程序员只需要关心数据的业务逻辑 , 不再关心 `DOM` 是如何渲染的了】\n- 在 `Vue` 中 , 一个核心的概念 , 就是让用户不再操作 `DOM` 元素 , 解放了用户的双手 , 让程序员可以更多的时间去关注业务逻辑 ;\n\n## 框架和库的区别\n\n- 框架 : 是一套完整的解决方案 , 对项目的侵入性较大 , 项目如果需要更换框架 , 则需要重新架构整个项目\n  - 例如 : `node` 中的 `express`\n- 库 ( 插件 ) : 提供某一个小功能 , 对项目的侵入性较小 , 如果某个库无法完成某些需求 , 可以很容易切换到其它库实现需求\n  - 例如 : 从 `Jquery` 切换到 `Zepto`\n  - 例如 : 从 `EJS` 切换到 `art-template`\n\n## MVC 与 MVVM 的区别\n\n- `MVC` 是后端的分层开发概念 ;\n- `MVVM` 是前端视图层的概念 , 主要关注于视图层分离 , 也就是说 : `MVVM` 把前端的视图层 , 分为了三部分 `Model`、`View`、`VM ViewModel` ;\n\n![vue.js](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vuebasic/MVVM.png)\n\n# 开始写 Vue.js 代码\n\n## 引入 vue.js\n\n```html\n<script src=\"https://cdn.bootcdn.net/ajax/libs/vue/2.6.14/vue.js\"></script>\n```\n\n## 写视图层 , 要展示的内容\n\n`Vue.js` 的核心是一个允许采用简洁的模板语法来声明式地将数据渲染进 `DOM` 的系统 :\n\n**示例**\n\n```html\n<div id=\"app\">\n  <!-- 插值表达式 , 可以读取变量 -->\n  {{ message }}\n</div>\n```\n\n## 实例化 Vue()\n\n{% hideToggle 实例化 Vue() %}\n\n```html\n<!-- 引入 vue.js , 引入 js 之后他为我们提供了 Vue 类 -->\n<script>\n  // 调度层\n  let vm = new Vue({\n    // vue 控制的区域\n    el: \"#app\",\n    // data 参数存放我们的数据 , 这一层就是 mvvm 里的 model 层\n    data: {\n      message: \"Hello Vue!\",\n    },\n    methods: {},\n  });\n</script>\n```\n\n{% endhideToggle %}\n\n页面展示内容:\n\n{% note simple %}\nHello Vue!\n{% endnote %}\n\n**注意 : 都是通过 `this` 对象去拿的 , 通过 `this` 也可以调用方法 , 写方法的时候我们需要注意 `this` 的指向问题**\n\n# 插值表达式 , v-cloak , v-text , v-html\n\n- 如何获取变量值呢?\n  - 插值表达式 : `{{ }}` , 可以在前后插一些内容;\n  - `v-text` : 会替换掉元素里的内容;\n  - `v-html` : 可以渲染 `html` 界面;\n\n{% hideToggle 插值表达式&sbquo;v-cloak&sbquo;v-text&sbquo;v-html %}\n\n```html\n<!-- 引入vue的js , 引入js之后他为我们提供了Vue类 -->\n<script src=\"https://cdn.bootcdn.net/ajax/libs/vue/2.6.14/vue.js\"></script>\n\n<!-- 视图层 start -->\n<div id=\"app\">\n  <!-- 在 vue 加载之前 v-cloak 存在 , vue 加载结束之后 v-cloak就隐藏了 , 利用这个特性可以实现 : 界面防止闪烁\n  如果网速够快的话也就看不出来了 -->\n  <p v-cloak>{{ message }}</p>\n  <!-- 使用 v-text 给界面元素赋值 -->\n  <!-- 如果我们想在变量之前或者后面加一些内容的话使用 插值表达式 -->\n  <!-- 如果我们想直接覆盖元素内容的话使用 v-text 指令 -->\n  <p v-text=\"message\"></p>\n  <p v-text=\"html\"></p>\n  <!-- 通过 v-html 指令把字符串解析成 html 的内容 -->\n  <p v-html=\"html\">1111</p>\n</div>\n<!-- 视图层 end -->\n\n<script>\n  // 调度层 start\n  var vm = new Vue({\n    // vue 控制的区域\n    el: \"#app\",\n    // data 参数存放我们的数据 , 这一层就是 mvvm 里的 model 层\n    data: {\n      message: \"Hello Vue!\",\n      html: \"<h1>这是一个很大的标题</h1>\",\n    },\n  });\n  // 调度层 end\n</script>\n```\n\n{% endhideToggle %}\n\n# v-bind\n\n- 界面元素属性值的绑定\n  - 括号里不加引号的都是 `data` 里的数据读取\n  - 如果想使用字符串需要再加上引号 ( `{{\"hello World\"}}` )\n  - 里面可以写表达式\n  - 里面也可以调用定义好的方法 , 拿到的是方法的返回值\n\n**示例**\n\n{% hideToggle v-bind %}\n\n```html\n<!-- 引入 vue 的js , 引入 js 之后他为我们提供了 Vue 类 -->\n<script src=\"https://cdn.bootcdn.net/ajax/libs/vue/2.6.14/vue.js\"></script>\n\n<!-- 视图层 start -->\n<div id=\"app\">\n  <!-- 插值表达式 , 可以读取变量 -->\n  {{ message }}\n  <!-- <button v-bind:title=\"nihao\">按钮</button> -->\n  <button :title=\"hello\">按钮</button>\n  <input type=\"text\" v-bind:value=\"message\" />\n</div>\n<!-- 视图层 end -->\n\n<script>\n  // 调度层 start\n  var vm = new Vue({\n    // vue 控制的区域\n    el: \"#app\",\n    // data 参数存放我们的数据 , 这一层就是 mvvm 里的 model 层\n    data: {\n      message: \"Hello Vue!\",\n      flag: false,\n      hello: \"你好世界\",\n    },\n  });\n  // 调度层 end\n</script>\n```\n\n{% endhideToggle %}\n\n# v-on\n\n- 进行事件的绑定 , 我们用的最多的是 `click` 事件绑定\n- 简写为 `@`\n- 实现跑马灯的效果\n\n**示例**\n\n{% hideToggle v-on %}\n\n```html\n<!-- 引入 vue 的js , 引入 js 之后他为我们提供了 Vue 类 -->\n<script src=\"https://cdn.bootcdn.net/ajax/libs/vue/2.6.14/vue.js\"></script>\n\n<div id=\"app\">\n  <!-- 跑马灯 start -->\n  <button @click=\"start\" :disabled=\"disabled\">开始</button>\n  <button @click=\"stop\" :disabled=\"!disabled\">暂停</button>\n  <h2>{{msg}}</h2>\n  <!-- 跑马灯 end -->\n</div>\n\n<script>\n  let vm = new Vue({\n    el: \"#app\",\n    data: {\n      msg: \"猥琐发育,别浪~\",\n      disabled: false,\n      lampTimer: null,\n    },\n    methods: {\n      start() {\n        console.log(\"start\");\n        this.disabled = !this.disabled;\n        clearInterval(this.lampTimer);\n        let msgList;\n        this.lampTimer = setInterval(() => {\n          msgList = this.msg.split(\"\");\n          msgList.push(msgList.shift());\n          this.msg = msgList.join(\"\");\n        }, 200);\n      },\n      stop() {\n        console.log(\"stop\");\n        this.disabled = !this.disabled;\n        clearInterval(this.lampTimer);\n      },\n    },\n  });\n</script>\n```\n\n{% endhideToggle %}\n\n# 事件修饰符\n\n- `.stop` 阻止冒泡\n- `.prevent` 阻止默认事件\n- `.capture` 添加事件侦听器时使用事件捕获模式\n- `.self` 只当事件在该元素本身 ( 比如不是子元素 ) 触发时触发回调\n- `.once` 事件只触发一次\n\n**示例**\n\n{% hideToggle 事件修饰符 %}\n\n```html\n<!-- 引入 vue 的js , 引入 js 之后他为我们提供了 Vue 类 -->\n<script src=\"https://cdn.bootcdn.net/ajax/libs/vue/2.6.14/vue.js\"></script>\n\n<div id=\"app\">\n  <div class=\"outer\" @click.capture=\"outer\">\n    <div class=\"inner\" @click.stop=\"inner\">\n      <div class=\"self\" @click.self=\"self\">\n        <button @click.once=\"button\">button</button>\n        <a href=\"https://codehhr.cn\" @click.prevent=\"clickA\">a-link-tag</a>\n      </div>\n    </div>\n  </div>\n</div>\n\n<script>\n  let vm = new Vue({\n    el: \"#app\",\n    data: {},\n    methods: {\n      outer() {\n        console.log(\"outer\");\n      },\n      inner() {\n        console.log(\"inner\");\n      },\n      self() {\n        console.log(\"self\");\n      },\n      button() {\n        console.log(\"button\");\n      },\n      clickA() {\n        console.log(\"a-link-tag\");\n      },\n    },\n  });\n</script>\n```\n\n{% endhideToggle %}\n\n# v-model 数据双向绑定\n\n- 作用 : 数据双向绑定\n- 注意 : 绑定的是表单控件\n\n**示例**\n\n{% hideToggle v-model 数据双向绑定 %}\n\n```html\n<!-- vue.js start -->\n<script src=\"https://cdn.bootcdn.net/ajax/libs/vue/2.6.14/vue.js\"></script>\n<!-- vue.js end -->\n\n<div id=\"app\">\n  <input type=\"text\" name=\"\" id=\"\" v-model:value=\"msg\" />\n  <h1>{{msg}}</h1>\n</div>\n<script>\n  let vm = new Vue({\n    el: \"#app\",\n    data: {\n      msg: \"\",\n    },\n    methods: {},\n  });\n</script>\n```\n\n{% endhideToggle %}\n\n# Vue 中样式的使用\n\n## 使用 class 样式 :\n\n{% tabs class %}\n\n<!-- tab 数组 -->\n\n使用 `vue` 设置多个样式的时候可以使用数组\n\n```html\n<div :class=\"[font20,blue]\">Text</div>\n```\n\n```json\ndata: {\n  font20: \"font20\",\n  blue: \"blue\"\n}\n```\n\n<!-- endtab -->\n\n<!-- tab 三木表达式 -->\n\n```html\n<div :class=\"flag?'class1':'class2'\">Text</div>\n```\n\n```json\ndata: {\n  flag: true,\n  class1: \"red\",\n  class1: \"blue\"\n}\n```\n\n<!-- endtab -->\n\n<!-- tab 数组内置对象 -->\n\n当我们根据某个条件显示某个样式的时候可以使用对象的方式 , 对象里的键就是我们显示的样式 , 值是个 `bool` 类型\n\n```html\n<div :class=\"[class1,{'class2':flag}]\">Text</div>\n```\n\n```json\ndata: {\n  flag: true,\n  class1: \"red\",\n  class1: \"blue\"\n}\n```\n\n<!-- endtab -->\n\n<!-- tab 直接通过对象 -->\n\n直接使用对象 , 对象里的键就是我们显示的样式 , 值是个 `bool` 类型\n\n```html\n<div :class=\"{'class1':false,'class2':true}\">Text</div>\n```\n\n或者\n\n```html\n<div :class=\"classObj\">Text</div>\n```\n\n```json\ndata: {\n  classObj: {\n    class1: true,\n    class2: true\n  }\n}\n```\n\n<!-- endtab -->\n\n{% endtabs %}\n\n## 使用行内样式\n\n{% tabs style %}\n\n<!-- tab :style 的形式 -->\n\n直接在元素上通过 `:style` 的形式 , 书写样式对象\n\n```html\n<div :style=\"{'color':color}\">Text</div>\n```\n\n```json\ndata: {\n  color: \"red\",\n}\n```\n\n<!-- endtab -->\n\n<!-- tab 在data中定义样式对象 -->\n\n- 在 `data` 上定义样式\n- 在元素中 , 通过属性绑定的形式 , 将样式对象应用到元素中\n\n```html\n<div :style=\"textStyle\">Text</div>\n```\n\n```json\ndata: {\n  textStyle: {\n    color: \"red\",\n    \"font-size\": \"50px\"\n  }\n}\n```\n\n<!-- endtab -->\n\n<!-- tab 数组引用多个样式对象 -->\n\n在 `:style` 中通过数组 , 引用多个 `data` 上的样式对象\n\n- 在 `data` 上定义样式\n- 在元素中 , 通过属性绑定的形式 , 将样式对象应用到元素中\n\n```html\n<div :style=\"[textStyle1,textStyle2]\">Text</div>\n```\n\n```json\ndata: {\n  textStyle1: {\n    color: \"red\",\n    \"font-size\": \"50px\"\n  },\n   textStyle2: {\n    \"font-weight\": \"600\"\n  }\n}\n```\n\n<!-- endtab -->\n\n<!-- tab 通过调用方法返回对象 -->\n\n```js\nmethods: {\n  getStyle(num) {\n    let obj = {\n      color: \"red\",\n      \"font-size\": \"50px\",\n    };\n    if (num == 1) {\n      obj.color = \"red\";\n    } else {\n      obj.color = \"green\";\n    }\n    return obj;\n  },\n}\n```\n\n<!-- endtab -->\n\n{% endtabs %}\n\n# V-for 和 key 属性\n\n- 遍历数组 , 参数 `(item,index) in list`\n- 遍历对象 , 参数 `(value,key,index) in list`\n- 遍历数字 , `num in 10 (1~10)`\n- `key` 在使用 `v-for` 的时候都需要去设置 `key`\n  - 让界面元素和数组里的每个记录进行绑定\n  - `key` 只能是字符串或者数字\n  - `key` 必须是唯一的\n\n**示例**\n\n{% hideToggle V-for和key %}\n\n```html\n<!-- 引入 vue 的js , 引入 js 之后他为我们提供了 Vue 类 -->\n<script src=\"https://cdn.bootcdn.net/ajax/libs/vue/2.6.14/vue.js\"></script>\n\n<div id=\"app\">\n  <div v-for=\"(value,key,index) in zhangsan\" :key=\"index\">\n    <h1>{{index}} - {{key}} : {{value}}</h1>\n    <br />\n  </div>\n\n  <div v-for=\"(item,index) in list\" :key=\"index\">\n    <h1>{{index}} : {{item}}</h1>\n  </div>\n\n  <div v-for=\"item in 6\">\n    <h1>🦌</h1>\n  </div>\n</div>\n\n<script>\n  let vm = new Vue({\n    el: \"#app\",\n    data: {\n      list: [\"github\", \"gitee\", \"coding\", \"gitlab\"],\n      zhangsan: {\n        name: \"张三\",\n        age: 35,\n        nickName: \"法外狂徒\",\n      },\n    },\n    methods: {},\n  });\n</script>\n```\n\n{% endhideToggle %}\n\n**注意:**\n`2.2.0+` 的版本里 , 当在组件中使用 `v-for` 时 , `key` 现在是必须的;\n当 `Vue.js` 用 `v-for` 正在更新已渲染过的元素列表时 , 它默认用 \"就地复用\" 策略 , 如果数据项的顺序被改变 , `Vue` 将不是移动 `DOM` 元素来匹配数据项的顺序 , 而是简单复用此处每个元素 , 并且确保它在特定索引下显示已被渲染过的每个元素\n为了给 `Vue` 一个提示 , 以便它能跟踪每个节点的身份 , 从而重用和重新排序现有元素 , 你需要为每项提供一个唯一 `key` 属性。\n\n# v-if 与 v-show 区别\n\n- 区别：\n  - `v-if` 删除 `dom` 元素\n  - `v-show` 设置 `display:none`\n- 应用场景：\n  - `v-if` 只修改一次的时候可以使用 `v-if`\n  - `v-show` 频繁切换的时候可以使用 `v-show`\n\n**示例**\n\n{% hideToggle v-if与v-show 区别 %}\n\n```html\n<!-- 引入 vue 的js , 引入 js 之后他为我们提供了 Vue 类 -->\n<script src=\"https://cdn.bootcdn.net/ajax/libs/vue/2.6.14/vue.js\"></script>\n\n<div id=\"app\">\n  <div v-if=\"flag\"><h1>张三</h1></div>\n  <div v-if=\"age>18?flag:!flag\"><h1>{{age}}</h1></div>\n  <div v-else><h1>未成年</h1></div>\n  <!--  -->\n  <div v-show=\"flag\"><h1>show</h1></div>\n  <div v-show=\"!flag\"><h1>show</h1></div>\n</div>\n\n<script>\n  let vm = new Vue({\n    el: \"#app\",\n    data: {\n      flag: true,\n      age: 20,\n    },\n    methods: {},\n  });\n</script>\n```\n\n{% endhideToggle %}\n","source":"_posts/vue/vue-basic.md","raw":"---\ntitle: Vue 基础\ndate: 2021-07-19 21:39:18\ntags:\n  - Vue\ncategories:\n  - Vue\n  - Vue基础\nkeywords:\ndescription:\ntop_img: https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg\ncover:\ncomments:\ncopyright:\ncopyright_author:\ncopyright_author_href:\ncopyright_url:\ncopyright_info:\n---\n\n# Vue.js\n\n![vue.js](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vuebasic/vueall.png)\n\n# 什么是 `vue.js`\n\n- `Vue.js` 是一套`构建用户界面`的`渐进式` `框架` , 与其他重量级框架不同的是 , `Vue` 采用自底向上增量开发的设计 , `Vue` 的核心库只关注视图层 , 不仅易于上手 , 还便于与第三方库或既有项目整合 ,\n- `Vue.js` 是前端的主流框架之一 , 和 `Angular.js`、`React.js` 一起 , 并成为前端三大主流框架！\n\n## 为什么学习流行框架\n\n- 企业为了提高开发效率 : 在企业 `4E2D` , 时间就是效率 , 效率就是金钱 ;\n- 企业中 , 使用框架 , 能够提高开发的效率 ;\n- 提高开发效率的发展历程 : 原生 `JS` -> `Jquery` 之类的类库 -> 前端模板引擎 -> `Angular.js` / `Vue.js`\n- 能够帮助我们减少不必要的 DOM 操作 ;提高渲染效率 ;双向数据绑定的概念【通过框架提供的指令 , 我们前端程序员只需要关心数据的业务逻辑 , 不再关心 `DOM` 是如何渲染的了】\n- 在 `Vue` 中 , 一个核心的概念 , 就是让用户不再操作 `DOM` 元素 , 解放了用户的双手 , 让程序员可以更多的时间去关注业务逻辑 ;\n\n## 框架和库的区别\n\n- 框架 : 是一套完整的解决方案 , 对项目的侵入性较大 , 项目如果需要更换框架 , 则需要重新架构整个项目\n  - 例如 : `node` 中的 `express`\n- 库 ( 插件 ) : 提供某一个小功能 , 对项目的侵入性较小 , 如果某个库无法完成某些需求 , 可以很容易切换到其它库实现需求\n  - 例如 : 从 `Jquery` 切换到 `Zepto`\n  - 例如 : 从 `EJS` 切换到 `art-template`\n\n## MVC 与 MVVM 的区别\n\n- `MVC` 是后端的分层开发概念 ;\n- `MVVM` 是前端视图层的概念 , 主要关注于视图层分离 , 也就是说 : `MVVM` 把前端的视图层 , 分为了三部分 `Model`、`View`、`VM ViewModel` ;\n\n![vue.js](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vuebasic/MVVM.png)\n\n# 开始写 Vue.js 代码\n\n## 引入 vue.js\n\n```html\n<script src=\"https://cdn.bootcdn.net/ajax/libs/vue/2.6.14/vue.js\"></script>\n```\n\n## 写视图层 , 要展示的内容\n\n`Vue.js` 的核心是一个允许采用简洁的模板语法来声明式地将数据渲染进 `DOM` 的系统 :\n\n**示例**\n\n```html\n<div id=\"app\">\n  <!-- 插值表达式 , 可以读取变量 -->\n  {{ message }}\n</div>\n```\n\n## 实例化 Vue()\n\n{% hideToggle 实例化 Vue() %}\n\n```html\n<!-- 引入 vue.js , 引入 js 之后他为我们提供了 Vue 类 -->\n<script>\n  // 调度层\n  let vm = new Vue({\n    // vue 控制的区域\n    el: \"#app\",\n    // data 参数存放我们的数据 , 这一层就是 mvvm 里的 model 层\n    data: {\n      message: \"Hello Vue!\",\n    },\n    methods: {},\n  });\n</script>\n```\n\n{% endhideToggle %}\n\n页面展示内容:\n\n{% note simple %}\nHello Vue!\n{% endnote %}\n\n**注意 : 都是通过 `this` 对象去拿的 , 通过 `this` 也可以调用方法 , 写方法的时候我们需要注意 `this` 的指向问题**\n\n# 插值表达式 , v-cloak , v-text , v-html\n\n- 如何获取变量值呢?\n  - 插值表达式 : `{{ }}` , 可以在前后插一些内容;\n  - `v-text` : 会替换掉元素里的内容;\n  - `v-html` : 可以渲染 `html` 界面;\n\n{% hideToggle 插值表达式&sbquo;v-cloak&sbquo;v-text&sbquo;v-html %}\n\n```html\n<!-- 引入vue的js , 引入js之后他为我们提供了Vue类 -->\n<script src=\"https://cdn.bootcdn.net/ajax/libs/vue/2.6.14/vue.js\"></script>\n\n<!-- 视图层 start -->\n<div id=\"app\">\n  <!-- 在 vue 加载之前 v-cloak 存在 , vue 加载结束之后 v-cloak就隐藏了 , 利用这个特性可以实现 : 界面防止闪烁\n  如果网速够快的话也就看不出来了 -->\n  <p v-cloak>{{ message }}</p>\n  <!-- 使用 v-text 给界面元素赋值 -->\n  <!-- 如果我们想在变量之前或者后面加一些内容的话使用 插值表达式 -->\n  <!-- 如果我们想直接覆盖元素内容的话使用 v-text 指令 -->\n  <p v-text=\"message\"></p>\n  <p v-text=\"html\"></p>\n  <!-- 通过 v-html 指令把字符串解析成 html 的内容 -->\n  <p v-html=\"html\">1111</p>\n</div>\n<!-- 视图层 end -->\n\n<script>\n  // 调度层 start\n  var vm = new Vue({\n    // vue 控制的区域\n    el: \"#app\",\n    // data 参数存放我们的数据 , 这一层就是 mvvm 里的 model 层\n    data: {\n      message: \"Hello Vue!\",\n      html: \"<h1>这是一个很大的标题</h1>\",\n    },\n  });\n  // 调度层 end\n</script>\n```\n\n{% endhideToggle %}\n\n# v-bind\n\n- 界面元素属性值的绑定\n  - 括号里不加引号的都是 `data` 里的数据读取\n  - 如果想使用字符串需要再加上引号 ( `{{\"hello World\"}}` )\n  - 里面可以写表达式\n  - 里面也可以调用定义好的方法 , 拿到的是方法的返回值\n\n**示例**\n\n{% hideToggle v-bind %}\n\n```html\n<!-- 引入 vue 的js , 引入 js 之后他为我们提供了 Vue 类 -->\n<script src=\"https://cdn.bootcdn.net/ajax/libs/vue/2.6.14/vue.js\"></script>\n\n<!-- 视图层 start -->\n<div id=\"app\">\n  <!-- 插值表达式 , 可以读取变量 -->\n  {{ message }}\n  <!-- <button v-bind:title=\"nihao\">按钮</button> -->\n  <button :title=\"hello\">按钮</button>\n  <input type=\"text\" v-bind:value=\"message\" />\n</div>\n<!-- 视图层 end -->\n\n<script>\n  // 调度层 start\n  var vm = new Vue({\n    // vue 控制的区域\n    el: \"#app\",\n    // data 参数存放我们的数据 , 这一层就是 mvvm 里的 model 层\n    data: {\n      message: \"Hello Vue!\",\n      flag: false,\n      hello: \"你好世界\",\n    },\n  });\n  // 调度层 end\n</script>\n```\n\n{% endhideToggle %}\n\n# v-on\n\n- 进行事件的绑定 , 我们用的最多的是 `click` 事件绑定\n- 简写为 `@`\n- 实现跑马灯的效果\n\n**示例**\n\n{% hideToggle v-on %}\n\n```html\n<!-- 引入 vue 的js , 引入 js 之后他为我们提供了 Vue 类 -->\n<script src=\"https://cdn.bootcdn.net/ajax/libs/vue/2.6.14/vue.js\"></script>\n\n<div id=\"app\">\n  <!-- 跑马灯 start -->\n  <button @click=\"start\" :disabled=\"disabled\">开始</button>\n  <button @click=\"stop\" :disabled=\"!disabled\">暂停</button>\n  <h2>{{msg}}</h2>\n  <!-- 跑马灯 end -->\n</div>\n\n<script>\n  let vm = new Vue({\n    el: \"#app\",\n    data: {\n      msg: \"猥琐发育,别浪~\",\n      disabled: false,\n      lampTimer: null,\n    },\n    methods: {\n      start() {\n        console.log(\"start\");\n        this.disabled = !this.disabled;\n        clearInterval(this.lampTimer);\n        let msgList;\n        this.lampTimer = setInterval(() => {\n          msgList = this.msg.split(\"\");\n          msgList.push(msgList.shift());\n          this.msg = msgList.join(\"\");\n        }, 200);\n      },\n      stop() {\n        console.log(\"stop\");\n        this.disabled = !this.disabled;\n        clearInterval(this.lampTimer);\n      },\n    },\n  });\n</script>\n```\n\n{% endhideToggle %}\n\n# 事件修饰符\n\n- `.stop` 阻止冒泡\n- `.prevent` 阻止默认事件\n- `.capture` 添加事件侦听器时使用事件捕获模式\n- `.self` 只当事件在该元素本身 ( 比如不是子元素 ) 触发时触发回调\n- `.once` 事件只触发一次\n\n**示例**\n\n{% hideToggle 事件修饰符 %}\n\n```html\n<!-- 引入 vue 的js , 引入 js 之后他为我们提供了 Vue 类 -->\n<script src=\"https://cdn.bootcdn.net/ajax/libs/vue/2.6.14/vue.js\"></script>\n\n<div id=\"app\">\n  <div class=\"outer\" @click.capture=\"outer\">\n    <div class=\"inner\" @click.stop=\"inner\">\n      <div class=\"self\" @click.self=\"self\">\n        <button @click.once=\"button\">button</button>\n        <a href=\"https://codehhr.cn\" @click.prevent=\"clickA\">a-link-tag</a>\n      </div>\n    </div>\n  </div>\n</div>\n\n<script>\n  let vm = new Vue({\n    el: \"#app\",\n    data: {},\n    methods: {\n      outer() {\n        console.log(\"outer\");\n      },\n      inner() {\n        console.log(\"inner\");\n      },\n      self() {\n        console.log(\"self\");\n      },\n      button() {\n        console.log(\"button\");\n      },\n      clickA() {\n        console.log(\"a-link-tag\");\n      },\n    },\n  });\n</script>\n```\n\n{% endhideToggle %}\n\n# v-model 数据双向绑定\n\n- 作用 : 数据双向绑定\n- 注意 : 绑定的是表单控件\n\n**示例**\n\n{% hideToggle v-model 数据双向绑定 %}\n\n```html\n<!-- vue.js start -->\n<script src=\"https://cdn.bootcdn.net/ajax/libs/vue/2.6.14/vue.js\"></script>\n<!-- vue.js end -->\n\n<div id=\"app\">\n  <input type=\"text\" name=\"\" id=\"\" v-model:value=\"msg\" />\n  <h1>{{msg}}</h1>\n</div>\n<script>\n  let vm = new Vue({\n    el: \"#app\",\n    data: {\n      msg: \"\",\n    },\n    methods: {},\n  });\n</script>\n```\n\n{% endhideToggle %}\n\n# Vue 中样式的使用\n\n## 使用 class 样式 :\n\n{% tabs class %}\n\n<!-- tab 数组 -->\n\n使用 `vue` 设置多个样式的时候可以使用数组\n\n```html\n<div :class=\"[font20,blue]\">Text</div>\n```\n\n```json\ndata: {\n  font20: \"font20\",\n  blue: \"blue\"\n}\n```\n\n<!-- endtab -->\n\n<!-- tab 三木表达式 -->\n\n```html\n<div :class=\"flag?'class1':'class2'\">Text</div>\n```\n\n```json\ndata: {\n  flag: true,\n  class1: \"red\",\n  class1: \"blue\"\n}\n```\n\n<!-- endtab -->\n\n<!-- tab 数组内置对象 -->\n\n当我们根据某个条件显示某个样式的时候可以使用对象的方式 , 对象里的键就是我们显示的样式 , 值是个 `bool` 类型\n\n```html\n<div :class=\"[class1,{'class2':flag}]\">Text</div>\n```\n\n```json\ndata: {\n  flag: true,\n  class1: \"red\",\n  class1: \"blue\"\n}\n```\n\n<!-- endtab -->\n\n<!-- tab 直接通过对象 -->\n\n直接使用对象 , 对象里的键就是我们显示的样式 , 值是个 `bool` 类型\n\n```html\n<div :class=\"{'class1':false,'class2':true}\">Text</div>\n```\n\n或者\n\n```html\n<div :class=\"classObj\">Text</div>\n```\n\n```json\ndata: {\n  classObj: {\n    class1: true,\n    class2: true\n  }\n}\n```\n\n<!-- endtab -->\n\n{% endtabs %}\n\n## 使用行内样式\n\n{% tabs style %}\n\n<!-- tab :style 的形式 -->\n\n直接在元素上通过 `:style` 的形式 , 书写样式对象\n\n```html\n<div :style=\"{'color':color}\">Text</div>\n```\n\n```json\ndata: {\n  color: \"red\",\n}\n```\n\n<!-- endtab -->\n\n<!-- tab 在data中定义样式对象 -->\n\n- 在 `data` 上定义样式\n- 在元素中 , 通过属性绑定的形式 , 将样式对象应用到元素中\n\n```html\n<div :style=\"textStyle\">Text</div>\n```\n\n```json\ndata: {\n  textStyle: {\n    color: \"red\",\n    \"font-size\": \"50px\"\n  }\n}\n```\n\n<!-- endtab -->\n\n<!-- tab 数组引用多个样式对象 -->\n\n在 `:style` 中通过数组 , 引用多个 `data` 上的样式对象\n\n- 在 `data` 上定义样式\n- 在元素中 , 通过属性绑定的形式 , 将样式对象应用到元素中\n\n```html\n<div :style=\"[textStyle1,textStyle2]\">Text</div>\n```\n\n```json\ndata: {\n  textStyle1: {\n    color: \"red\",\n    \"font-size\": \"50px\"\n  },\n   textStyle2: {\n    \"font-weight\": \"600\"\n  }\n}\n```\n\n<!-- endtab -->\n\n<!-- tab 通过调用方法返回对象 -->\n\n```js\nmethods: {\n  getStyle(num) {\n    let obj = {\n      color: \"red\",\n      \"font-size\": \"50px\",\n    };\n    if (num == 1) {\n      obj.color = \"red\";\n    } else {\n      obj.color = \"green\";\n    }\n    return obj;\n  },\n}\n```\n\n<!-- endtab -->\n\n{% endtabs %}\n\n# V-for 和 key 属性\n\n- 遍历数组 , 参数 `(item,index) in list`\n- 遍历对象 , 参数 `(value,key,index) in list`\n- 遍历数字 , `num in 10 (1~10)`\n- `key` 在使用 `v-for` 的时候都需要去设置 `key`\n  - 让界面元素和数组里的每个记录进行绑定\n  - `key` 只能是字符串或者数字\n  - `key` 必须是唯一的\n\n**示例**\n\n{% hideToggle V-for和key %}\n\n```html\n<!-- 引入 vue 的js , 引入 js 之后他为我们提供了 Vue 类 -->\n<script src=\"https://cdn.bootcdn.net/ajax/libs/vue/2.6.14/vue.js\"></script>\n\n<div id=\"app\">\n  <div v-for=\"(value,key,index) in zhangsan\" :key=\"index\">\n    <h1>{{index}} - {{key}} : {{value}}</h1>\n    <br />\n  </div>\n\n  <div v-for=\"(item,index) in list\" :key=\"index\">\n    <h1>{{index}} : {{item}}</h1>\n  </div>\n\n  <div v-for=\"item in 6\">\n    <h1>🦌</h1>\n  </div>\n</div>\n\n<script>\n  let vm = new Vue({\n    el: \"#app\",\n    data: {\n      list: [\"github\", \"gitee\", \"coding\", \"gitlab\"],\n      zhangsan: {\n        name: \"张三\",\n        age: 35,\n        nickName: \"法外狂徒\",\n      },\n    },\n    methods: {},\n  });\n</script>\n```\n\n{% endhideToggle %}\n\n**注意:**\n`2.2.0+` 的版本里 , 当在组件中使用 `v-for` 时 , `key` 现在是必须的;\n当 `Vue.js` 用 `v-for` 正在更新已渲染过的元素列表时 , 它默认用 \"就地复用\" 策略 , 如果数据项的顺序被改变 , `Vue` 将不是移动 `DOM` 元素来匹配数据项的顺序 , 而是简单复用此处每个元素 , 并且确保它在特定索引下显示已被渲染过的每个元素\n为了给 `Vue` 一个提示 , 以便它能跟踪每个节点的身份 , 从而重用和重新排序现有元素 , 你需要为每项提供一个唯一 `key` 属性。\n\n# v-if 与 v-show 区别\n\n- 区别：\n  - `v-if` 删除 `dom` 元素\n  - `v-show` 设置 `display:none`\n- 应用场景：\n  - `v-if` 只修改一次的时候可以使用 `v-if`\n  - `v-show` 频繁切换的时候可以使用 `v-show`\n\n**示例**\n\n{% hideToggle v-if与v-show 区别 %}\n\n```html\n<!-- 引入 vue 的js , 引入 js 之后他为我们提供了 Vue 类 -->\n<script src=\"https://cdn.bootcdn.net/ajax/libs/vue/2.6.14/vue.js\"></script>\n\n<div id=\"app\">\n  <div v-if=\"flag\"><h1>张三</h1></div>\n  <div v-if=\"age>18?flag:!flag\"><h1>{{age}}</h1></div>\n  <div v-else><h1>未成年</h1></div>\n  <!--  -->\n  <div v-show=\"flag\"><h1>show</h1></div>\n  <div v-show=\"!flag\"><h1>show</h1></div>\n</div>\n\n<script>\n  let vm = new Vue({\n    el: \"#app\",\n    data: {\n      flag: true,\n      age: 20,\n    },\n    methods: {},\n  });\n</script>\n```\n\n{% endhideToggle %}\n","slug":"vue/vue-basic","published":1,"updated":"2021-07-22T14:13:17.266Z","layout":"post","photos":[],"link":"","_id":"cksvxwnon0049gubq2f22hal6","content":"<h1 id=\"Vue-js\"><a href=\"#Vue-js\" class=\"headerlink\" title=\"Vue.js\"></a>Vue.js</h1><p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vuebasic/vueall.png\" alt=\"vue.js\"></p>\n<h1 id=\"什么是-vue-js\"><a href=\"#什么是-vue-js\" class=\"headerlink\" title=\"什么是 vue.js\"></a>什么是 <code>vue.js</code></h1><ul>\n<li><code>Vue.js</code> 是一套<code>构建用户界面</code>的<code>渐进式</code> <code>框架</code> , 与其他重量级框架不同的是 , <code>Vue</code> 采用自底向上增量开发的设计 , <code>Vue</code> 的核心库只关注视图层 , 不仅易于上手 , 还便于与第三方库或既有项目整合 ,</li>\n<li><code>Vue.js</code> 是前端的主流框架之一 , 和 <code>Angular.js</code>、<code>React.js</code> 一起 , 并成为前端三大主流框架！</li>\n</ul>\n<h2 id=\"为什么学习流行框架\"><a href=\"#为什么学习流行框架\" class=\"headerlink\" title=\"为什么学习流行框架\"></a>为什么学习流行框架</h2><ul>\n<li>企业为了提高开发效率 : 在企业 <code>4E2D</code> , 时间就是效率 , 效率就是金钱 ;</li>\n<li>企业中 , 使用框架 , 能够提高开发的效率 ;</li>\n<li>提高开发效率的发展历程 : 原生 <code>JS</code> -&gt; <code>Jquery</code> 之类的类库 -&gt; 前端模板引擎 -&gt; <code>Angular.js</code> / <code>Vue.js</code></li>\n<li>能够帮助我们减少不必要的 DOM 操作 ;提高渲染效率 ;双向数据绑定的概念【通过框架提供的指令 , 我们前端程序员只需要关心数据的业务逻辑 , 不再关心 <code>DOM</code> 是如何渲染的了】</li>\n<li>在 <code>Vue</code> 中 , 一个核心的概念 , 就是让用户不再操作 <code>DOM</code> 元素 , 解放了用户的双手 , 让程序员可以更多的时间去关注业务逻辑 ;</li>\n</ul>\n<h2 id=\"框架和库的区别\"><a href=\"#框架和库的区别\" class=\"headerlink\" title=\"框架和库的区别\"></a>框架和库的区别</h2><ul>\n<li>框架 : 是一套完整的解决方案 , 对项目的侵入性较大 , 项目如果需要更换框架 , 则需要重新架构整个项目<ul>\n<li>例如 : <code>node</code> 中的 <code>express</code></li>\n</ul>\n</li>\n<li>库 ( 插件 ) : 提供某一个小功能 , 对项目的侵入性较小 , 如果某个库无法完成某些需求 , 可以很容易切换到其它库实现需求<ul>\n<li>例如 : 从 <code>Jquery</code> 切换到 <code>Zepto</code></li>\n<li>例如 : 从 <code>EJS</code> 切换到 <code>art-template</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"MVC-与-MVVM-的区别\"><a href=\"#MVC-与-MVVM-的区别\" class=\"headerlink\" title=\"MVC 与 MVVM 的区别\"></a>MVC 与 MVVM 的区别</h2><ul>\n<li><code>MVC</code> 是后端的分层开发概念 ;</li>\n<li><code>MVVM</code> 是前端视图层的概念 , 主要关注于视图层分离 , 也就是说 : <code>MVVM</code> 把前端的视图层 , 分为了三部分 <code>Model</code>、<code>View</code>、<code>VM ViewModel</code> ;</li>\n</ul>\n<p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vuebasic/MVVM.png\" alt=\"vue.js\"></p>\n<h1 id=\"开始写-Vue-js-代码\"><a href=\"#开始写-Vue-js-代码\" class=\"headerlink\" title=\"开始写 Vue.js 代码\"></a>开始写 Vue.js 代码</h1><h2 id=\"引入-vue-js\"><a href=\"#引入-vue-js\" class=\"headerlink\" title=\"引入 vue.js\"></a>引入 vue.js</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.14/vue.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"写视图层-要展示的内容\"><a href=\"#写视图层-要展示的内容\" class=\"headerlink\" title=\"写视图层 , 要展示的内容\"></a>写视图层 , 要展示的内容</h2><p><code>Vue.js</code> 的核心是一个允许采用简洁的模板语法来声明式地将数据渲染进 <code>DOM</code> 的系统 :</p>\n<p><strong>示例</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 插值表达式 , 可以读取变量 --&gt;</span></span><br><span class=\"line\">  &#123;&#123; message &#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"实例化-Vue\"><a href=\"#实例化-Vue\" class=\"headerlink\" title=\"实例化 Vue()\"></a>实例化 Vue()</h2><div class=\"hide-toggle\" ><div class=\"hide-button toggle-title\" style=\"\"><i class=\"fas fa-caret-right fa-fw\"></i><span>实例化 Vue()</span></div>\n    <div class=\"hide-content\"><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 引入 vue.js , 引入 js 之后他为我们提供了 Vue 类 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"comment\">// 调度层</span></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">let</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// vue 控制的区域</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">el</span>: <span class=\"string\">&quot;#app&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// data 参数存放我们的数据 , 这一层就是 mvvm 里的 model 层</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">data</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"attr\">message</span>: <span class=\"string\">&quot;Hello Vue!&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">methods</span>: &#123;&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">  &#125;);</span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</div></div>\n\n<p>页面展示内容:</p>\n<div class=\"note simple\"><p>Hello Vue!</p>\n</div>\n\n<p><strong>注意 : 都是通过 <code>this</code> 对象去拿的 , 通过 <code>this</code> 也可以调用方法 , 写方法的时候我们需要注意 <code>this</code> 的指向问题</strong></p>\n<h1 id=\"插值表达式-v-cloak-v-text-v-html\"><a href=\"#插值表达式-v-cloak-v-text-v-html\" class=\"headerlink\" title=\"插值表达式 , v-cloak , v-text , v-html\"></a>插值表达式 , v-cloak , v-text , v-html</h1><ul>\n<li>如何获取变量值呢?<ul>\n<li>插值表达式 : <code>&#123;&#123; &#125;&#125;</code> , 可以在前后插一些内容;</li>\n<li><code>v-text</code> : 会替换掉元素里的内容;</li>\n<li><code>v-html</code> : 可以渲染 <code>html</code> 界面;</li>\n</ul>\n</li>\n</ul>\n<div class=\"hide-toggle\" ><div class=\"hide-button toggle-title\" style=\"\"><i class=\"fas fa-caret-right fa-fw\"></i><span>插值表达式&sbquo;v-cloak&sbquo;v-text&sbquo;v-html</span></div>\n    <div class=\"hide-content\"><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 引入vue的js , 引入js之后他为我们提供了Vue类 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.14/vue.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 视图层 start --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 在 vue 加载之前 v-cloak 存在 , vue 加载结束之后 v-cloak就隐藏了 , 利用这个特性可以实现 : 界面防止闪烁</span></span><br><span class=\"line\"><span class=\"comment\">  如果网速够快的话也就看不出来了 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-cloak</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 使用 v-text 给界面元素赋值 --&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 如果我们想在变量之前或者后面加一些内容的话使用 插值表达式 --&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 如果我们想直接覆盖元素内容的话使用 v-text 指令 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-text</span>=<span class=\"string\">&quot;message&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-text</span>=<span class=\"string\">&quot;html&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 通过 v-html 指令把字符串解析成 html 的内容 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-html</span>=<span class=\"string\">&quot;html&quot;</span>&gt;</span>1111<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 视图层 end --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"comment\">// 调度层 start</span></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// vue 控制的区域</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">el</span>: <span class=\"string\">&quot;#app&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// data 参数存放我们的数据 , 这一层就是 mvvm 里的 model 层</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">data</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"attr\">message</span>: <span class=\"string\">&quot;Hello Vue!&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"attr\">html</span>: <span class=\"string\">&quot;&lt;h1&gt;这是一个很大的标题&lt;/h1&gt;&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">  &#125;);</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"comment\">// 调度层 end</span></span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</div></div>\n\n<h1 id=\"v-bind\"><a href=\"#v-bind\" class=\"headerlink\" title=\"v-bind\"></a>v-bind</h1><ul>\n<li>界面元素属性值的绑定<ul>\n<li>括号里不加引号的都是 <code>data</code> 里的数据读取</li>\n<li>如果想使用字符串需要再加上引号 ( <code>&#123;&#123;\"hello World\"&#125;&#125;</code> )</li>\n<li>里面可以写表达式</li>\n<li>里面也可以调用定义好的方法 , 拿到的是方法的返回值</li>\n</ul>\n</li>\n</ul>\n<p><strong>示例</strong></p>\n<div class=\"hide-toggle\" ><div class=\"hide-button toggle-title\" style=\"\"><i class=\"fas fa-caret-right fa-fw\"></i><span>v-bind</span></div>\n    <div class=\"hide-content\"><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 引入 vue 的js , 引入 js 之后他为我们提供了 Vue 类 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.14/vue.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 视图层 start --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 插值表达式 , 可以读取变量 --&gt;</span></span><br><span class=\"line\">  &#123;&#123; message &#125;&#125;</span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- &lt;button v-bind:title=&quot;nihao&quot;&gt;按钮&lt;/button&gt; --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">:title</span>=<span class=\"string\">&quot;hello&quot;</span>&gt;</span>按钮<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">v-bind:value</span>=<span class=\"string\">&quot;message&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 视图层 end --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"comment\">// 调度层 start</span></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// vue 控制的区域</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">el</span>: <span class=\"string\">&quot;#app&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// data 参数存放我们的数据 , 这一层就是 mvvm 里的 model 层</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">data</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"attr\">message</span>: <span class=\"string\">&quot;Hello Vue!&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"attr\">flag</span>: <span class=\"literal\">false</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"attr\">hello</span>: <span class=\"string\">&quot;你好世界&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">  &#125;);</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"comment\">// 调度层 end</span></span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</div></div>\n\n<h1 id=\"v-on\"><a href=\"#v-on\" class=\"headerlink\" title=\"v-on\"></a>v-on</h1><ul>\n<li>进行事件的绑定 , 我们用的最多的是 <code>click</code> 事件绑定</li>\n<li>简写为 <code>@</code></li>\n<li>实现跑马灯的效果</li>\n</ul>\n<p><strong>示例</strong></p>\n<div class=\"hide-toggle\" ><div class=\"hide-button toggle-title\" style=\"\"><i class=\"fas fa-caret-right fa-fw\"></i><span>v-on</span></div>\n    <div class=\"hide-content\"><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 引入 vue 的js , 引入 js 之后他为我们提供了 Vue 类 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.14/vue.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 跑马灯 start --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;start&quot;</span> <span class=\"attr\">:disabled</span>=<span class=\"string\">&quot;disabled&quot;</span>&gt;</span>开始<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;stop&quot;</span> <span class=\"attr\">:disabled</span>=<span class=\"string\">&quot;!disabled&quot;</span>&gt;</span>暂停<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 跑马灯 end --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">let</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">el</span>: <span class=\"string\">&quot;#app&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">data</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"attr\">msg</span>: <span class=\"string\">&quot;猥琐发育,别浪~&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"attr\">disabled</span>: <span class=\"literal\">false</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"attr\">lampTimer</span>: <span class=\"literal\">null</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">methods</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"function\"><span class=\"title\">start</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;start&quot;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">this</span>.disabled = !<span class=\"built_in\">this</span>.disabled;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">clearInterval</span>(<span class=\"built_in\">this</span>.lampTimer);</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">let</span> msgList;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">this</span>.lampTimer = <span class=\"built_in\">setInterval</span>(<span class=\"function\">() =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          msgList = <span class=\"built_in\">this</span>.msg.split(<span class=\"string\">&quot;&quot;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">          msgList.push(msgList.shift());</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"built_in\">this</span>.msg = msgList.join(<span class=\"string\">&quot;&quot;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">        &#125;, <span class=\"number\">200</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">      &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"function\"><span class=\"title\">stop</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;stop&quot;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">this</span>.disabled = !<span class=\"built_in\">this</span>.disabled;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">clearInterval</span>(<span class=\"built_in\">this</span>.lampTimer);</span></span><br><span class=\"line\"><span class=\"javascript\">      &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">  &#125;);</span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</div></div>\n\n<h1 id=\"事件修饰符\"><a href=\"#事件修饰符\" class=\"headerlink\" title=\"事件修饰符\"></a>事件修饰符</h1><ul>\n<li><code>.stop</code> 阻止冒泡</li>\n<li><code>.prevent</code> 阻止默认事件</li>\n<li><code>.capture</code> 添加事件侦听器时使用事件捕获模式</li>\n<li><code>.self</code> 只当事件在该元素本身 ( 比如不是子元素 ) 触发时触发回调</li>\n<li><code>.once</code> 事件只触发一次</li>\n</ul>\n<p><strong>示例</strong></p>\n<div class=\"hide-toggle\" ><div class=\"hide-button toggle-title\" style=\"\"><i class=\"fas fa-caret-right fa-fw\"></i><span>事件修饰符</span></div>\n    <div class=\"hide-content\"><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 引入 vue 的js , 引入 js 之后他为我们提供了 Vue 类 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.14/vue.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;outer&quot;</span> @<span class=\"attr\">click.capture</span>=<span class=\"string\">&quot;outer&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;inner&quot;</span> @<span class=\"attr\">click.stop</span>=<span class=\"string\">&quot;inner&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;self&quot;</span> @<span class=\"attr\">click.self</span>=<span class=\"string\">&quot;self&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click.once</span>=<span class=\"string\">&quot;button&quot;</span>&gt;</span>button<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://codehhr.cn&quot;</span> @<span class=\"attr\">click.prevent</span>=<span class=\"string\">&quot;clickA&quot;</span>&gt;</span>a-link-tag<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">let</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">el</span>: <span class=\"string\">&quot;#app&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">data</span>: &#123;&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">methods</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"function\"><span class=\"title\">outer</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;outer&quot;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">      &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"function\"><span class=\"title\">inner</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;inner&quot;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">      &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"function\"><span class=\"title\">self</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;self&quot;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">      &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"function\"><span class=\"title\">button</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;button&quot;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">      &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"function\"><span class=\"title\">clickA</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;a-link-tag&quot;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">      &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">  &#125;);</span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</div></div>\n\n<h1 id=\"v-model-数据双向绑定\"><a href=\"#v-model-数据双向绑定\" class=\"headerlink\" title=\"v-model 数据双向绑定\"></a>v-model 数据双向绑定</h1><ul>\n<li>作用 : 数据双向绑定</li>\n<li>注意 : 绑定的是表单控件</li>\n</ul>\n<p><strong>示例</strong></p>\n<div class=\"hide-toggle\" ><div class=\"hide-button toggle-title\" style=\"\"><i class=\"fas fa-caret-right fa-fw\"></i><span>v-model 数据双向绑定</span></div>\n    <div class=\"hide-content\"><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- vue.js start --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.14/vue.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- vue.js end --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">v-model:value</span>=<span class=\"string\">&quot;msg&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">let</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">el</span>: <span class=\"string\">&quot;#app&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">data</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"attr\">msg</span>: <span class=\"string\">&quot;&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">methods</span>: &#123;&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">  &#125;);</span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</div></div>\n\n<h1 id=\"Vue-中样式的使用\"><a href=\"#Vue-中样式的使用\" class=\"headerlink\" title=\"Vue 中样式的使用\"></a>Vue 中样式的使用</h1><h2 id=\"使用-class-样式\"><a href=\"#使用-class-样式\" class=\"headerlink\" title=\"使用 class 样式 :\"></a>使用 class 样式 :</h2><div class=\"tabs\" id=\"class\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button type=\"button\" data-href=\"#class-1\">数组</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#class-2\">三木表达式</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#class-3\">数组内置对象</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#class-4\">直接通过对象</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"class-1\"><p>使用 <code>vue</code> 设置多个样式的时候可以使用数组</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">:class</span>=<span class=\"string\">&quot;[font20,blue]&quot;</span>&gt;</span>Text<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data: &#123;</span><br><span class=\"line\">  font20: <span class=\"string\">&quot;font20&quot;</span>,</span><br><span class=\"line\">  blue: <span class=\"string\">&quot;blue&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"class-2\"><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">:class</span>=<span class=\"string\">&quot;flag?&#x27;class1&#x27;:&#x27;class2&#x27;&quot;</span>&gt;</span>Text<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data: &#123;</span><br><span class=\"line\">  flag: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  class1: <span class=\"string\">&quot;red&quot;</span>,</span><br><span class=\"line\">  class1: <span class=\"string\">&quot;blue&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"class-3\"><p>当我们根据某个条件显示某个样式的时候可以使用对象的方式 , 对象里的键就是我们显示的样式 , 值是个 <code>bool</code> 类型</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">:class</span>=<span class=\"string\">&quot;[class1,&#123;&#x27;class2&#x27;:flag&#125;]&quot;</span>&gt;</span>Text<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data: &#123;</span><br><span class=\"line\">  flag: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  class1: <span class=\"string\">&quot;red&quot;</span>,</span><br><span class=\"line\">  class1: <span class=\"string\">&quot;blue&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"class-4\"><p>直接使用对象 , 对象里的键就是我们显示的样式 , 值是个 <code>bool</code> 类型</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">:class</span>=<span class=\"string\">&quot;&#123;&#x27;class1&#x27;:false,&#x27;class2&#x27;:true&#125;&quot;</span>&gt;</span>Text<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">:class</span>=<span class=\"string\">&quot;classObj&quot;</span>&gt;</span>Text<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data: &#123;</span><br><span class=\"line\">  classObj: &#123;</span><br><span class=\"line\">    class1: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    class2: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n\n<h2 id=\"使用行内样式\"><a href=\"#使用行内样式\" class=\"headerlink\" title=\"使用行内样式\"></a>使用行内样式</h2><div class=\"tabs\" id=\"style\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button type=\"button\" data-href=\"#style-1\">:style 的形式</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#style-2\">在data中定义样式对象</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#style-3\">数组引用多个样式对象</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#style-4\">通过调用方法返回对象</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"style-1\"><p>直接在元素上通过 <code>:style</code> 的形式 , 书写样式对象</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">:style</span>=<span class=\"string\">&quot;&#123;&#x27;color&#x27;:color&#125;&quot;</span>&gt;</span>Text<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data: &#123;</span><br><span class=\"line\">  color: <span class=\"string\">&quot;red&quot;</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"style-2\"><ul>\n<li>在 <code>data</code> 上定义样式</li>\n<li>在元素中 , 通过属性绑定的形式 , 将样式对象应用到元素中</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">:style</span>=<span class=\"string\">&quot;textStyle&quot;</span>&gt;</span>Text<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data: &#123;</span><br><span class=\"line\">  textStyle: &#123;</span><br><span class=\"line\">    color: <span class=\"string\">&quot;red&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;font-size&quot;</span>: <span class=\"string\">&quot;50px&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"style-3\"><p>在 <code>:style</code> 中通过数组 , 引用多个 <code>data</code> 上的样式对象</p>\n<ul>\n<li>在 <code>data</code> 上定义样式</li>\n<li>在元素中 , 通过属性绑定的形式 , 将样式对象应用到元素中</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">:style</span>=<span class=\"string\">&quot;[textStyle1,textStyle2]&quot;</span>&gt;</span>Text<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data: &#123;</span><br><span class=\"line\">  textStyle1: &#123;</span><br><span class=\"line\">    color: <span class=\"string\">&quot;red&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;font-size&quot;</span>: <span class=\"string\">&quot;50px&quot;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">   textStyle2: &#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;font-weight&quot;</span>: <span class=\"string\">&quot;600&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"style-4\"><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">methods: &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">getStyle</span>(<span class=\"params\">num</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">      <span class=\"attr\">color</span>: <span class=\"string\">&quot;red&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;font-size&quot;</span>: <span class=\"string\">&quot;50px&quot;</span>,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (num == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      obj.color = <span class=\"string\">&quot;red&quot;</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      obj.color = <span class=\"string\">&quot;green&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n\n<h1 id=\"V-for-和-key-属性\"><a href=\"#V-for-和-key-属性\" class=\"headerlink\" title=\"V-for 和 key 属性\"></a>V-for 和 key 属性</h1><ul>\n<li>遍历数组 , 参数 <code>(item,index) in list</code></li>\n<li>遍历对象 , 参数 <code>(value,key,index) in list</code></li>\n<li>遍历数字 , <code>num in 10 (1~10)</code></li>\n<li><code>key</code> 在使用 <code>v-for</code> 的时候都需要去设置 <code>key</code><ul>\n<li>让界面元素和数组里的每个记录进行绑定</li>\n<li><code>key</code> 只能是字符串或者数字</li>\n<li><code>key</code> 必须是唯一的</li>\n</ul>\n</li>\n</ul>\n<p><strong>示例</strong></p>\n<div class=\"hide-toggle\" ><div class=\"hide-button toggle-title\" style=\"\"><i class=\"fas fa-caret-right fa-fw\"></i><span>V-for和key</span></div>\n    <div class=\"hide-content\"><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 引入 vue 的js , 引入 js 之后他为我们提供了 Vue 类 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.14/vue.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;(value,key,index) in zhangsan&quot;</span> <span class=\"attr\">:key</span>=<span class=\"string\">&quot;index&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;&#123;index&#125;&#125; - &#123;&#123;key&#125;&#125; : &#123;&#123;value&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;(item,index) in list&quot;</span> <span class=\"attr\">:key</span>=<span class=\"string\">&quot;index&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;&#123;index&#125;&#125; : &#123;&#123;item&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;item in 6&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>🦌<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">let</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">el</span>: <span class=\"string\">&quot;#app&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">data</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"attr\">list</span>: [<span class=\"string\">&quot;github&quot;</span>, <span class=\"string\">&quot;gitee&quot;</span>, <span class=\"string\">&quot;coding&quot;</span>, <span class=\"string\">&quot;gitlab&quot;</span>],</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"attr\">zhangsan</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"attr\">name</span>: <span class=\"string\">&quot;张三&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"attr\">age</span>: <span class=\"number\">35</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"attr\">nickName</span>: <span class=\"string\">&quot;法外狂徒&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">      &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">methods</span>: &#123;&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">  &#125;);</span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</div></div>\n\n<p><strong>注意:</strong><br><code>2.2.0+</code> 的版本里 , 当在组件中使用 <code>v-for</code> 时 , <code>key</code> 现在是必须的;<br>当 <code>Vue.js</code> 用 <code>v-for</code> 正在更新已渲染过的元素列表时 , 它默认用 “就地复用” 策略 , 如果数据项的顺序被改变 , <code>Vue</code> 将不是移动 <code>DOM</code> 元素来匹配数据项的顺序 , 而是简单复用此处每个元素 , 并且确保它在特定索引下显示已被渲染过的每个元素<br>为了给 <code>Vue</code> 一个提示 , 以便它能跟踪每个节点的身份 , 从而重用和重新排序现有元素 , 你需要为每项提供一个唯一 <code>key</code> 属性。</p>\n<h1 id=\"v-if-与-v-show-区别\"><a href=\"#v-if-与-v-show-区别\" class=\"headerlink\" title=\"v-if 与 v-show 区别\"></a>v-if 与 v-show 区别</h1><ul>\n<li>区别：<ul>\n<li><code>v-if</code> 删除 <code>dom</code> 元素</li>\n<li><code>v-show</code> 设置 <code>display:none</code></li>\n</ul>\n</li>\n<li>应用场景：<ul>\n<li><code>v-if</code> 只修改一次的时候可以使用 <code>v-if</code></li>\n<li><code>v-show</code> 频繁切换的时候可以使用 <code>v-show</code></li>\n</ul>\n</li>\n</ul>\n<p><strong>示例</strong></p>\n<div class=\"hide-toggle\" ><div class=\"hide-button toggle-title\" style=\"\"><i class=\"fas fa-caret-right fa-fw\"></i><span>v-if与v-show 区别</span></div>\n    <div class=\"hide-content\"><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 引入 vue 的js , 引入 js 之后他为我们提供了 Vue 类 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.14/vue.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;flag&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>张三<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;age&gt;18?flag:!flag&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;&#123;age&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-else</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>未成年<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--  --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-show</span>=<span class=\"string\">&quot;flag&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>show<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-show</span>=<span class=\"string\">&quot;!flag&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>show<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">let</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">el</span>: <span class=\"string\">&quot;#app&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">data</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"attr\">flag</span>: <span class=\"literal\">true</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"attr\">age</span>: <span class=\"number\">20</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">methods</span>: &#123;&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">  &#125;);</span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</div></div>\n","site":{"data":{"link":{"class1":{"class_name":"舍友","link_list":{"1":{"name":"codeAntg","link":"https://blog.csdn.net/weixin_44745147","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/fjh.jpg","descr":"那家刀削面不错","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class2":{"class_name":"致谢","link_list":{"1":{"name":"JerrC","link":"https://immyw.com","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/immyw.png","descr":"今日事,今日毕","width":"1px","style":"solid","color":"#60d0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/hexo.svg","descr":"A fast, simple & powerful blog framework","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class3":{"class_name":"友人","link_list":{"1":{"name":"Chester","link":"http://chesterlds.cn","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/chester.jpg","descr":null,"width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Wangs","link":"https://wangsss.cn/","avatar":"https://wangsss.cn/img/avatar.png","descr":"不疯魔，不成活 ~","width":"1px","style":"solid","color":"#9d9d9d","custom":"link_custom1","time":"4s","namecolor":"0094ff","descolor":"#ff9191"}}}}}},"excerpt":"","more":"<h1 id=\"Vue-js\"><a href=\"#Vue-js\" class=\"headerlink\" title=\"Vue.js\"></a>Vue.js</h1><p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vuebasic/vueall.png\" alt=\"vue.js\"></p>\n<h1 id=\"什么是-vue-js\"><a href=\"#什么是-vue-js\" class=\"headerlink\" title=\"什么是 vue.js\"></a>什么是 <code>vue.js</code></h1><ul>\n<li><code>Vue.js</code> 是一套<code>构建用户界面</code>的<code>渐进式</code> <code>框架</code> , 与其他重量级框架不同的是 , <code>Vue</code> 采用自底向上增量开发的设计 , <code>Vue</code> 的核心库只关注视图层 , 不仅易于上手 , 还便于与第三方库或既有项目整合 ,</li>\n<li><code>Vue.js</code> 是前端的主流框架之一 , 和 <code>Angular.js</code>、<code>React.js</code> 一起 , 并成为前端三大主流框架！</li>\n</ul>\n<h2 id=\"为什么学习流行框架\"><a href=\"#为什么学习流行框架\" class=\"headerlink\" title=\"为什么学习流行框架\"></a>为什么学习流行框架</h2><ul>\n<li>企业为了提高开发效率 : 在企业 <code>4E2D</code> , 时间就是效率 , 效率就是金钱 ;</li>\n<li>企业中 , 使用框架 , 能够提高开发的效率 ;</li>\n<li>提高开发效率的发展历程 : 原生 <code>JS</code> -&gt; <code>Jquery</code> 之类的类库 -&gt; 前端模板引擎 -&gt; <code>Angular.js</code> / <code>Vue.js</code></li>\n<li>能够帮助我们减少不必要的 DOM 操作 ;提高渲染效率 ;双向数据绑定的概念【通过框架提供的指令 , 我们前端程序员只需要关心数据的业务逻辑 , 不再关心 <code>DOM</code> 是如何渲染的了】</li>\n<li>在 <code>Vue</code> 中 , 一个核心的概念 , 就是让用户不再操作 <code>DOM</code> 元素 , 解放了用户的双手 , 让程序员可以更多的时间去关注业务逻辑 ;</li>\n</ul>\n<h2 id=\"框架和库的区别\"><a href=\"#框架和库的区别\" class=\"headerlink\" title=\"框架和库的区别\"></a>框架和库的区别</h2><ul>\n<li>框架 : 是一套完整的解决方案 , 对项目的侵入性较大 , 项目如果需要更换框架 , 则需要重新架构整个项目<ul>\n<li>例如 : <code>node</code> 中的 <code>express</code></li>\n</ul>\n</li>\n<li>库 ( 插件 ) : 提供某一个小功能 , 对项目的侵入性较小 , 如果某个库无法完成某些需求 , 可以很容易切换到其它库实现需求<ul>\n<li>例如 : 从 <code>Jquery</code> 切换到 <code>Zepto</code></li>\n<li>例如 : 从 <code>EJS</code> 切换到 <code>art-template</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"MVC-与-MVVM-的区别\"><a href=\"#MVC-与-MVVM-的区别\" class=\"headerlink\" title=\"MVC 与 MVVM 的区别\"></a>MVC 与 MVVM 的区别</h2><ul>\n<li><code>MVC</code> 是后端的分层开发概念 ;</li>\n<li><code>MVVM</code> 是前端视图层的概念 , 主要关注于视图层分离 , 也就是说 : <code>MVVM</code> 把前端的视图层 , 分为了三部分 <code>Model</code>、<code>View</code>、<code>VM ViewModel</code> ;</li>\n</ul>\n<p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vuebasic/MVVM.png\" alt=\"vue.js\"></p>\n<h1 id=\"开始写-Vue-js-代码\"><a href=\"#开始写-Vue-js-代码\" class=\"headerlink\" title=\"开始写 Vue.js 代码\"></a>开始写 Vue.js 代码</h1><h2 id=\"引入-vue-js\"><a href=\"#引入-vue-js\" class=\"headerlink\" title=\"引入 vue.js\"></a>引入 vue.js</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.14/vue.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"写视图层-要展示的内容\"><a href=\"#写视图层-要展示的内容\" class=\"headerlink\" title=\"写视图层 , 要展示的内容\"></a>写视图层 , 要展示的内容</h2><p><code>Vue.js</code> 的核心是一个允许采用简洁的模板语法来声明式地将数据渲染进 <code>DOM</code> 的系统 :</p>\n<p><strong>示例</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 插值表达式 , 可以读取变量 --&gt;</span></span><br><span class=\"line\">  &#123;&#123; message &#125;&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"实例化-Vue\"><a href=\"#实例化-Vue\" class=\"headerlink\" title=\"实例化 Vue()\"></a>实例化 Vue()</h2><div class=\"hide-toggle\" ><div class=\"hide-button toggle-title\" style=\"\"><i class=\"fas fa-caret-right fa-fw\"></i><span>实例化 Vue()</span></div>\n    <div class=\"hide-content\"><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 引入 vue.js , 引入 js 之后他为我们提供了 Vue 类 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"comment\">// 调度层</span></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">let</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// vue 控制的区域</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">el</span>: <span class=\"string\">&quot;#app&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// data 参数存放我们的数据 , 这一层就是 mvvm 里的 model 层</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">data</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"attr\">message</span>: <span class=\"string\">&quot;Hello Vue!&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">methods</span>: &#123;&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">  &#125;);</span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</div></div>\n\n<p>页面展示内容:</p>\n<div class=\"note simple\"><p>Hello Vue!</p>\n</div>\n\n<p><strong>注意 : 都是通过 <code>this</code> 对象去拿的 , 通过 <code>this</code> 也可以调用方法 , 写方法的时候我们需要注意 <code>this</code> 的指向问题</strong></p>\n<h1 id=\"插值表达式-v-cloak-v-text-v-html\"><a href=\"#插值表达式-v-cloak-v-text-v-html\" class=\"headerlink\" title=\"插值表达式 , v-cloak , v-text , v-html\"></a>插值表达式 , v-cloak , v-text , v-html</h1><ul>\n<li>如何获取变量值呢?<ul>\n<li>插值表达式 : <code>&#123;&#123; &#125;&#125;</code> , 可以在前后插一些内容;</li>\n<li><code>v-text</code> : 会替换掉元素里的内容;</li>\n<li><code>v-html</code> : 可以渲染 <code>html</code> 界面;</li>\n</ul>\n</li>\n</ul>\n<div class=\"hide-toggle\" ><div class=\"hide-button toggle-title\" style=\"\"><i class=\"fas fa-caret-right fa-fw\"></i><span>插值表达式&sbquo;v-cloak&sbquo;v-text&sbquo;v-html</span></div>\n    <div class=\"hide-content\"><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 引入vue的js , 引入js之后他为我们提供了Vue类 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.14/vue.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 视图层 start --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 在 vue 加载之前 v-cloak 存在 , vue 加载结束之后 v-cloak就隐藏了 , 利用这个特性可以实现 : 界面防止闪烁</span></span><br><span class=\"line\"><span class=\"comment\">  如果网速够快的话也就看不出来了 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-cloak</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 使用 v-text 给界面元素赋值 --&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 如果我们想在变量之前或者后面加一些内容的话使用 插值表达式 --&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 如果我们想直接覆盖元素内容的话使用 v-text 指令 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-text</span>=<span class=\"string\">&quot;message&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-text</span>=<span class=\"string\">&quot;html&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 通过 v-html 指令把字符串解析成 html 的内容 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">p</span> <span class=\"attr\">v-html</span>=<span class=\"string\">&quot;html&quot;</span>&gt;</span>1111<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 视图层 end --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"comment\">// 调度层 start</span></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// vue 控制的区域</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">el</span>: <span class=\"string\">&quot;#app&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// data 参数存放我们的数据 , 这一层就是 mvvm 里的 model 层</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">data</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"attr\">message</span>: <span class=\"string\">&quot;Hello Vue!&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"attr\">html</span>: <span class=\"string\">&quot;&lt;h1&gt;这是一个很大的标题&lt;/h1&gt;&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">  &#125;);</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"comment\">// 调度层 end</span></span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</div></div>\n\n<h1 id=\"v-bind\"><a href=\"#v-bind\" class=\"headerlink\" title=\"v-bind\"></a>v-bind</h1><ul>\n<li>界面元素属性值的绑定<ul>\n<li>括号里不加引号的都是 <code>data</code> 里的数据读取</li>\n<li>如果想使用字符串需要再加上引号 ( <code>&#123;&#123;\"hello World\"&#125;&#125;</code> )</li>\n<li>里面可以写表达式</li>\n<li>里面也可以调用定义好的方法 , 拿到的是方法的返回值</li>\n</ul>\n</li>\n</ul>\n<p><strong>示例</strong></p>\n<div class=\"hide-toggle\" ><div class=\"hide-button toggle-title\" style=\"\"><i class=\"fas fa-caret-right fa-fw\"></i><span>v-bind</span></div>\n    <div class=\"hide-content\"><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 引入 vue 的js , 引入 js 之后他为我们提供了 Vue 类 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.14/vue.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 视图层 start --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 插值表达式 , 可以读取变量 --&gt;</span></span><br><span class=\"line\">  &#123;&#123; message &#125;&#125;</span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- &lt;button v-bind:title=&quot;nihao&quot;&gt;按钮&lt;/button&gt; --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">:title</span>=<span class=\"string\">&quot;hello&quot;</span>&gt;</span>按钮<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">v-bind:value</span>=<span class=\"string\">&quot;message&quot;</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 视图层 end --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"comment\">// 调度层 start</span></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">var</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// vue 控制的区域</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">el</span>: <span class=\"string\">&quot;#app&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// data 参数存放我们的数据 , 这一层就是 mvvm 里的 model 层</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">data</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"attr\">message</span>: <span class=\"string\">&quot;Hello Vue!&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"attr\">flag</span>: <span class=\"literal\">false</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"attr\">hello</span>: <span class=\"string\">&quot;你好世界&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">  &#125;);</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"comment\">// 调度层 end</span></span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</div></div>\n\n<h1 id=\"v-on\"><a href=\"#v-on\" class=\"headerlink\" title=\"v-on\"></a>v-on</h1><ul>\n<li>进行事件的绑定 , 我们用的最多的是 <code>click</code> 事件绑定</li>\n<li>简写为 <code>@</code></li>\n<li>实现跑马灯的效果</li>\n</ul>\n<p><strong>示例</strong></p>\n<div class=\"hide-toggle\" ><div class=\"hide-button toggle-title\" style=\"\"><i class=\"fas fa-caret-right fa-fw\"></i><span>v-on</span></div>\n    <div class=\"hide-content\"><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 引入 vue 的js , 引入 js 之后他为我们提供了 Vue 类 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.14/vue.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 跑马灯 start --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;start&quot;</span> <span class=\"attr\">:disabled</span>=<span class=\"string\">&quot;disabled&quot;</span>&gt;</span>开始<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;stop&quot;</span> <span class=\"attr\">:disabled</span>=<span class=\"string\">&quot;!disabled&quot;</span>&gt;</span>暂停<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 跑马灯 end --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">let</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">el</span>: <span class=\"string\">&quot;#app&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">data</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"attr\">msg</span>: <span class=\"string\">&quot;猥琐发育,别浪~&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"attr\">disabled</span>: <span class=\"literal\">false</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"attr\">lampTimer</span>: <span class=\"literal\">null</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">methods</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"function\"><span class=\"title\">start</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;start&quot;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">this</span>.disabled = !<span class=\"built_in\">this</span>.disabled;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">clearInterval</span>(<span class=\"built_in\">this</span>.lampTimer);</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">let</span> msgList;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">this</span>.lampTimer = <span class=\"built_in\">setInterval</span>(<span class=\"function\">() =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          msgList = <span class=\"built_in\">this</span>.msg.split(<span class=\"string\">&quot;&quot;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">          msgList.push(msgList.shift());</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"built_in\">this</span>.msg = msgList.join(<span class=\"string\">&quot;&quot;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">        &#125;, <span class=\"number\">200</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">      &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"function\"><span class=\"title\">stop</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;stop&quot;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">this</span>.disabled = !<span class=\"built_in\">this</span>.disabled;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">clearInterval</span>(<span class=\"built_in\">this</span>.lampTimer);</span></span><br><span class=\"line\"><span class=\"javascript\">      &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">  &#125;);</span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</div></div>\n\n<h1 id=\"事件修饰符\"><a href=\"#事件修饰符\" class=\"headerlink\" title=\"事件修饰符\"></a>事件修饰符</h1><ul>\n<li><code>.stop</code> 阻止冒泡</li>\n<li><code>.prevent</code> 阻止默认事件</li>\n<li><code>.capture</code> 添加事件侦听器时使用事件捕获模式</li>\n<li><code>.self</code> 只当事件在该元素本身 ( 比如不是子元素 ) 触发时触发回调</li>\n<li><code>.once</code> 事件只触发一次</li>\n</ul>\n<p><strong>示例</strong></p>\n<div class=\"hide-toggle\" ><div class=\"hide-button toggle-title\" style=\"\"><i class=\"fas fa-caret-right fa-fw\"></i><span>事件修饰符</span></div>\n    <div class=\"hide-content\"><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 引入 vue 的js , 引入 js 之后他为我们提供了 Vue 类 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.14/vue.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;outer&quot;</span> @<span class=\"attr\">click.capture</span>=<span class=\"string\">&quot;outer&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;inner&quot;</span> @<span class=\"attr\">click.stop</span>=<span class=\"string\">&quot;inner&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;self&quot;</span> @<span class=\"attr\">click.self</span>=<span class=\"string\">&quot;self&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click.once</span>=<span class=\"string\">&quot;button&quot;</span>&gt;</span>button<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://codehhr.cn&quot;</span> @<span class=\"attr\">click.prevent</span>=<span class=\"string\">&quot;clickA&quot;</span>&gt;</span>a-link-tag<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">let</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">el</span>: <span class=\"string\">&quot;#app&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">data</span>: &#123;&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">methods</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"function\"><span class=\"title\">outer</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;outer&quot;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">      &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"function\"><span class=\"title\">inner</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;inner&quot;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">      &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"function\"><span class=\"title\">self</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;self&quot;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">      &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"function\"><span class=\"title\">button</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;button&quot;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">      &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"function\"><span class=\"title\">clickA</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;a-link-tag&quot;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">      &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">  &#125;);</span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</div></div>\n\n<h1 id=\"v-model-数据双向绑定\"><a href=\"#v-model-数据双向绑定\" class=\"headerlink\" title=\"v-model 数据双向绑定\"></a>v-model 数据双向绑定</h1><ul>\n<li>作用 : 数据双向绑定</li>\n<li>注意 : 绑定的是表单控件</li>\n</ul>\n<p><strong>示例</strong></p>\n<div class=\"hide-toggle\" ><div class=\"hide-button toggle-title\" style=\"\"><i class=\"fas fa-caret-right fa-fw\"></i><span>v-model 数据双向绑定</span></div>\n    <div class=\"hide-content\"><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- vue.js start --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.14/vue.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- vue.js end --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">v-model:value</span>=<span class=\"string\">&quot;msg&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">let</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">el</span>: <span class=\"string\">&quot;#app&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">data</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"attr\">msg</span>: <span class=\"string\">&quot;&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">methods</span>: &#123;&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">  &#125;);</span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</div></div>\n\n<h1 id=\"Vue-中样式的使用\"><a href=\"#Vue-中样式的使用\" class=\"headerlink\" title=\"Vue 中样式的使用\"></a>Vue 中样式的使用</h1><h2 id=\"使用-class-样式\"><a href=\"#使用-class-样式\" class=\"headerlink\" title=\"使用 class 样式 :\"></a>使用 class 样式 :</h2><div class=\"tabs\" id=\"class\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button type=\"button\" data-href=\"#class-1\">数组</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#class-2\">三木表达式</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#class-3\">数组内置对象</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#class-4\">直接通过对象</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"class-1\"><p>使用 <code>vue</code> 设置多个样式的时候可以使用数组</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">:class</span>=<span class=\"string\">&quot;[font20,blue]&quot;</span>&gt;</span>Text<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data: &#123;</span><br><span class=\"line\">  font20: <span class=\"string\">&quot;font20&quot;</span>,</span><br><span class=\"line\">  blue: <span class=\"string\">&quot;blue&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"class-2\"><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">:class</span>=<span class=\"string\">&quot;flag?&#x27;class1&#x27;:&#x27;class2&#x27;&quot;</span>&gt;</span>Text<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data: &#123;</span><br><span class=\"line\">  flag: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  class1: <span class=\"string\">&quot;red&quot;</span>,</span><br><span class=\"line\">  class1: <span class=\"string\">&quot;blue&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"class-3\"><p>当我们根据某个条件显示某个样式的时候可以使用对象的方式 , 对象里的键就是我们显示的样式 , 值是个 <code>bool</code> 类型</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">:class</span>=<span class=\"string\">&quot;[class1,&#123;&#x27;class2&#x27;:flag&#125;]&quot;</span>&gt;</span>Text<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data: &#123;</span><br><span class=\"line\">  flag: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  class1: <span class=\"string\">&quot;red&quot;</span>,</span><br><span class=\"line\">  class1: <span class=\"string\">&quot;blue&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"class-4\"><p>直接使用对象 , 对象里的键就是我们显示的样式 , 值是个 <code>bool</code> 类型</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">:class</span>=<span class=\"string\">&quot;&#123;&#x27;class1&#x27;:false,&#x27;class2&#x27;:true&#125;&quot;</span>&gt;</span>Text<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>或者</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">:class</span>=<span class=\"string\">&quot;classObj&quot;</span>&gt;</span>Text<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data: &#123;</span><br><span class=\"line\">  classObj: &#123;</span><br><span class=\"line\">    class1: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    class2: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n\n<h2 id=\"使用行内样式\"><a href=\"#使用行内样式\" class=\"headerlink\" title=\"使用行内样式\"></a>使用行内样式</h2><div class=\"tabs\" id=\"style\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button type=\"button\" data-href=\"#style-1\">:style 的形式</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#style-2\">在data中定义样式对象</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#style-3\">数组引用多个样式对象</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#style-4\">通过调用方法返回对象</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"style-1\"><p>直接在元素上通过 <code>:style</code> 的形式 , 书写样式对象</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">:style</span>=<span class=\"string\">&quot;&#123;&#x27;color&#x27;:color&#125;&quot;</span>&gt;</span>Text<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data: &#123;</span><br><span class=\"line\">  color: <span class=\"string\">&quot;red&quot;</span>,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"style-2\"><ul>\n<li>在 <code>data</code> 上定义样式</li>\n<li>在元素中 , 通过属性绑定的形式 , 将样式对象应用到元素中</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">:style</span>=<span class=\"string\">&quot;textStyle&quot;</span>&gt;</span>Text<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data: &#123;</span><br><span class=\"line\">  textStyle: &#123;</span><br><span class=\"line\">    color: <span class=\"string\">&quot;red&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;font-size&quot;</span>: <span class=\"string\">&quot;50px&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"style-3\"><p>在 <code>:style</code> 中通过数组 , 引用多个 <code>data</code> 上的样式对象</p>\n<ul>\n<li>在 <code>data</code> 上定义样式</li>\n<li>在元素中 , 通过属性绑定的形式 , 将样式对象应用到元素中</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">:style</span>=<span class=\"string\">&quot;[textStyle1,textStyle2]&quot;</span>&gt;</span>Text<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data: &#123;</span><br><span class=\"line\">  textStyle1: &#123;</span><br><span class=\"line\">    color: <span class=\"string\">&quot;red&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;font-size&quot;</span>: <span class=\"string\">&quot;50px&quot;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">   textStyle2: &#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;font-weight&quot;</span>: <span class=\"string\">&quot;600&quot;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"style-4\"><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">methods: &#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">getStyle</span>(<span class=\"params\">num</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> obj = &#123;</span><br><span class=\"line\">      <span class=\"attr\">color</span>: <span class=\"string\">&quot;red&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;font-size&quot;</span>: <span class=\"string\">&quot;50px&quot;</span>,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (num == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">      obj.color = <span class=\"string\">&quot;red&quot;</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      obj.color = <span class=\"string\">&quot;green&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> obj;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n\n<h1 id=\"V-for-和-key-属性\"><a href=\"#V-for-和-key-属性\" class=\"headerlink\" title=\"V-for 和 key 属性\"></a>V-for 和 key 属性</h1><ul>\n<li>遍历数组 , 参数 <code>(item,index) in list</code></li>\n<li>遍历对象 , 参数 <code>(value,key,index) in list</code></li>\n<li>遍历数字 , <code>num in 10 (1~10)</code></li>\n<li><code>key</code> 在使用 <code>v-for</code> 的时候都需要去设置 <code>key</code><ul>\n<li>让界面元素和数组里的每个记录进行绑定</li>\n<li><code>key</code> 只能是字符串或者数字</li>\n<li><code>key</code> 必须是唯一的</li>\n</ul>\n</li>\n</ul>\n<p><strong>示例</strong></p>\n<div class=\"hide-toggle\" ><div class=\"hide-button toggle-title\" style=\"\"><i class=\"fas fa-caret-right fa-fw\"></i><span>V-for和key</span></div>\n    <div class=\"hide-content\"><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 引入 vue 的js , 引入 js 之后他为我们提供了 Vue 类 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.14/vue.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;(value,key,index) in zhangsan&quot;</span> <span class=\"attr\">:key</span>=<span class=\"string\">&quot;index&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;&#123;index&#125;&#125; - &#123;&#123;key&#125;&#125; : &#123;&#123;value&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">br</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;(item,index) in list&quot;</span> <span class=\"attr\">:key</span>=<span class=\"string\">&quot;index&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;&#123;index&#125;&#125; : &#123;&#123;item&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;item in 6&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>🦌<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">let</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">el</span>: <span class=\"string\">&quot;#app&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">data</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"attr\">list</span>: [<span class=\"string\">&quot;github&quot;</span>, <span class=\"string\">&quot;gitee&quot;</span>, <span class=\"string\">&quot;coding&quot;</span>, <span class=\"string\">&quot;gitlab&quot;</span>],</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"attr\">zhangsan</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"attr\">name</span>: <span class=\"string\">&quot;张三&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"attr\">age</span>: <span class=\"number\">35</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"attr\">nickName</span>: <span class=\"string\">&quot;法外狂徒&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">      &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">methods</span>: &#123;&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">  &#125;);</span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</div></div>\n\n<p><strong>注意:</strong><br><code>2.2.0+</code> 的版本里 , 当在组件中使用 <code>v-for</code> 时 , <code>key</code> 现在是必须的;<br>当 <code>Vue.js</code> 用 <code>v-for</code> 正在更新已渲染过的元素列表时 , 它默认用 “就地复用” 策略 , 如果数据项的顺序被改变 , <code>Vue</code> 将不是移动 <code>DOM</code> 元素来匹配数据项的顺序 , 而是简单复用此处每个元素 , 并且确保它在特定索引下显示已被渲染过的每个元素<br>为了给 <code>Vue</code> 一个提示 , 以便它能跟踪每个节点的身份 , 从而重用和重新排序现有元素 , 你需要为每项提供一个唯一 <code>key</code> 属性。</p>\n<h1 id=\"v-if-与-v-show-区别\"><a href=\"#v-if-与-v-show-区别\" class=\"headerlink\" title=\"v-if 与 v-show 区别\"></a>v-if 与 v-show 区别</h1><ul>\n<li>区别：<ul>\n<li><code>v-if</code> 删除 <code>dom</code> 元素</li>\n<li><code>v-show</code> 设置 <code>display:none</code></li>\n</ul>\n</li>\n<li>应用场景：<ul>\n<li><code>v-if</code> 只修改一次的时候可以使用 <code>v-if</code></li>\n<li><code>v-show</code> 频繁切换的时候可以使用 <code>v-show</code></li>\n</ul>\n</li>\n</ul>\n<p><strong>示例</strong></p>\n<div class=\"hide-toggle\" ><div class=\"hide-button toggle-title\" style=\"\"><i class=\"fas fa-caret-right fa-fw\"></i><span>v-if与v-show 区别</span></div>\n    <div class=\"hide-content\"><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 引入 vue 的js , 引入 js 之后他为我们提供了 Vue 类 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.14/vue.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;flag&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>张三<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;age&gt;18?flag:!flag&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;&#123;age&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-else</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>未成年<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!--  --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-show</span>=<span class=\"string\">&quot;flag&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>show<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">v-show</span>=<span class=\"string\">&quot;!flag&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>show<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">let</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">el</span>: <span class=\"string\">&quot;#app&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">data</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"attr\">flag</span>: <span class=\"literal\">true</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"attr\">age</span>: <span class=\"number\">20</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">methods</span>: &#123;&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">  &#125;);</span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</div></div>\n"},{"title":"Vue 路由守卫","date":"2021-07-31T12:27:13.000Z","updated":"2021-08-16T13:09:21.604Z","keywords":null,"description":null,"top_img":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg","cover":"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/desktop.png","comments":1,"copyright":null,"copyright_author":null,"copyright_author_href":null,"copyright_url":null,"copyright_info":null,"_content":"\n# 全局前置守卫\n\n你可以使用 `router.beforeEach` 注册一个全局前置守卫\n\n```js\nconst router = new VueRouter({ ... })\n\nrouter.beforeEach((to, from, next) => {\n  // ...\n})\n```\n\n当一个导航触发时 , 全局前置守卫按照创建顺序调用,守卫是异步解析执行 , 此时导航在所有守卫 `resolve` 完之前一直处于 等待中\n\n**每个守卫方法接收三个参数 :**\n\n- `to: Route`: 即将要进入的目标 `路由对象`\n- `from: Route`: 当前导航正要离开的路由\n- `next: Function`: 一定要调用该方法来 `resolve` 这个钩子,执行效果依赖 `next` 方法的调用参数\n- `next()`: 进行管道中的下一个钩子,如果全部钩子执行完了 , 则导航的状态就是 `confirmed` (确认的)\n  - `next(false)`: 中断当前的导航,如果浏览器的 `URL` 改变了 (可能是用户手动或者浏览器后退按钮) , 那么 `URL` 地址会重置到 `from` 路由对应的地址\n  - `next('/')` 或者 `next({ path: '/' })`: 跳转到一个不同的地址,当前的导航被中断 , 然后进行一个新的导航,你可以向 `next` 传递任意位置对象 , 且允许设置诸如 `replace: true`、`name: 'home'` 之类的选项以及任何用在 `router-link` 的 `to` `prop` 或 `router.push` 中的选项\n  - `next(error)`: `(2.4.0+)` 如果传入 `next` 的参数是一个 `Error` 实例 , 则导航会被终止且该错误会被传递给 `router.onError()` 注册过的回调\n\n**确保 `next` 函数在任何给定的导航守卫中都被严格调用一次 , 它可以出现多于一次 , 但是只能在所有的逻辑路径都不重叠的情况下，否则钩子永远都不会被解析或报错** , 这里用一个在用户未能验证身份时重定向到 `/login` 的示例\n\n**错误示范**\n\n```js\n// 错误示范\nrouter.beforeEach((to, from, next) => {\n  if (to.name !== \"Login\" && !isAuthenticated) next({ name: \"Login\" });\n  // 如果用户未能验证身份,则 next 会被调用两次,这是不对的\n  next();\n});\n```\n\n**正确示范**\n\n```js\n// 正确示范\nrouter.beforeEach((to, from, next) => {\n  if (to.name !== \"Login\" && !isAuthenticated) {\n    next({ name: \"Login\" });\n  } else {\n    next();\n  }\n});\n```\n\n# 路由独享的守卫\n\n你可以在路由配置上直接定义 `beforeEnter` 守卫 :\n这些守卫与全局前置守卫的方法参数是一样的\n\n```js\nconst router = new VueRouter({\n  routes: [\n    {\n      path: \"/foo\",\n      component: Foo,\n      beforeEnter: (to, from, next) => {\n        // ...\n      },\n    },\n  ],\n});\n```\n","source":"_posts/vue/vue-beforeEach.md","raw":"---\ntitle: Vue 路由守卫\ndate: 2021-07-31 20:27:13\nupdated:\ntags:\n  - Vue\n  - Vue-router\n  - beforeEach\ncategories:\n  - Vue\n  - Vue基础\nkeywords:\ndescription:\ntop_img: https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg\ncover:\ncomments:\ncopyright:\ncopyright_author:\ncopyright_author_href:\ncopyright_url:\ncopyright_info:\n---\n\n# 全局前置守卫\n\n你可以使用 `router.beforeEach` 注册一个全局前置守卫\n\n```js\nconst router = new VueRouter({ ... })\n\nrouter.beforeEach((to, from, next) => {\n  // ...\n})\n```\n\n当一个导航触发时 , 全局前置守卫按照创建顺序调用,守卫是异步解析执行 , 此时导航在所有守卫 `resolve` 完之前一直处于 等待中\n\n**每个守卫方法接收三个参数 :**\n\n- `to: Route`: 即将要进入的目标 `路由对象`\n- `from: Route`: 当前导航正要离开的路由\n- `next: Function`: 一定要调用该方法来 `resolve` 这个钩子,执行效果依赖 `next` 方法的调用参数\n- `next()`: 进行管道中的下一个钩子,如果全部钩子执行完了 , 则导航的状态就是 `confirmed` (确认的)\n  - `next(false)`: 中断当前的导航,如果浏览器的 `URL` 改变了 (可能是用户手动或者浏览器后退按钮) , 那么 `URL` 地址会重置到 `from` 路由对应的地址\n  - `next('/')` 或者 `next({ path: '/' })`: 跳转到一个不同的地址,当前的导航被中断 , 然后进行一个新的导航,你可以向 `next` 传递任意位置对象 , 且允许设置诸如 `replace: true`、`name: 'home'` 之类的选项以及任何用在 `router-link` 的 `to` `prop` 或 `router.push` 中的选项\n  - `next(error)`: `(2.4.0+)` 如果传入 `next` 的参数是一个 `Error` 实例 , 则导航会被终止且该错误会被传递给 `router.onError()` 注册过的回调\n\n**确保 `next` 函数在任何给定的导航守卫中都被严格调用一次 , 它可以出现多于一次 , 但是只能在所有的逻辑路径都不重叠的情况下，否则钩子永远都不会被解析或报错** , 这里用一个在用户未能验证身份时重定向到 `/login` 的示例\n\n**错误示范**\n\n```js\n// 错误示范\nrouter.beforeEach((to, from, next) => {\n  if (to.name !== \"Login\" && !isAuthenticated) next({ name: \"Login\" });\n  // 如果用户未能验证身份,则 next 会被调用两次,这是不对的\n  next();\n});\n```\n\n**正确示范**\n\n```js\n// 正确示范\nrouter.beforeEach((to, from, next) => {\n  if (to.name !== \"Login\" && !isAuthenticated) {\n    next({ name: \"Login\" });\n  } else {\n    next();\n  }\n});\n```\n\n# 路由独享的守卫\n\n你可以在路由配置上直接定义 `beforeEnter` 守卫 :\n这些守卫与全局前置守卫的方法参数是一样的\n\n```js\nconst router = new VueRouter({\n  routes: [\n    {\n      path: \"/foo\",\n      component: Foo,\n      beforeEnter: (to, from, next) => {\n        // ...\n      },\n    },\n  ],\n});\n```\n","slug":"vue/vue-beforeEach","published":1,"layout":"post","photos":[],"link":"","_id":"cksvxwnoo004bgubqeujk4foi","content":"<h1 id=\"全局前置守卫\"><a href=\"#全局前置守卫\" class=\"headerlink\" title=\"全局前置守卫\"></a>全局前置守卫</h1><p>你可以使用 <code>router.beforeEach</code> 注册一个全局前置守卫</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> VueRouter(&#123; ... &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">router.beforeEach(<span class=\"function\">(<span class=\"params\">to, <span class=\"keyword\">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>当一个导航触发时 , 全局前置守卫按照创建顺序调用,守卫是异步解析执行 , 此时导航在所有守卫 <code>resolve</code> 完之前一直处于 等待中</p>\n<p><strong>每个守卫方法接收三个参数 :</strong></p>\n<ul>\n<li><code>to: Route</code>: 即将要进入的目标 <code>路由对象</code></li>\n<li><code>from: Route</code>: 当前导航正要离开的路由</li>\n<li><code>next: Function</code>: 一定要调用该方法来 <code>resolve</code> 这个钩子,执行效果依赖 <code>next</code> 方法的调用参数</li>\n<li><code>next()</code>: 进行管道中的下一个钩子,如果全部钩子执行完了 , 则导航的状态就是 <code>confirmed</code> (确认的)<ul>\n<li><code>next(false)</code>: 中断当前的导航,如果浏览器的 <code>URL</code> 改变了 (可能是用户手动或者浏览器后退按钮) , 那么 <code>URL</code> 地址会重置到 <code>from</code> 路由对应的地址</li>\n<li><code>next(&#39;/&#39;)</code> 或者 <code>next(&#123; path: &#39;/&#39; &#125;)</code>: 跳转到一个不同的地址,当前的导航被中断 , 然后进行一个新的导航,你可以向 <code>next</code> 传递任意位置对象 , 且允许设置诸如 <code>replace: true</code>、<code>name: &#39;home&#39;</code> 之类的选项以及任何用在 <code>router-link</code> 的 <code>to</code> <code>prop</code> 或 <code>router.push</code> 中的选项</li>\n<li><code>next(error)</code>: <code>(2.4.0+)</code> 如果传入 <code>next</code> 的参数是一个 <code>Error</code> 实例 , 则导航会被终止且该错误会被传递给 <code>router.onError()</code> 注册过的回调</li>\n</ul>\n</li>\n</ul>\n<p><strong>确保 <code>next</code> 函数在任何给定的导航守卫中都被严格调用一次 , 它可以出现多于一次 , 但是只能在所有的逻辑路径都不重叠的情况下，否则钩子永远都不会被解析或报错</strong> , 这里用一个在用户未能验证身份时重定向到 <code>/login</code> 的示例</p>\n<p><strong>错误示范</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 错误示范</span></span><br><span class=\"line\">router.beforeEach(<span class=\"function\">(<span class=\"params\">to, <span class=\"keyword\">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (to.name !== <span class=\"string\">&quot;Login&quot;</span> &amp;&amp; !isAuthenticated) next(&#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;Login&quot;</span> &#125;);</span><br><span class=\"line\">  <span class=\"comment\">// 如果用户未能验证身份,则 next 会被调用两次,这是不对的</span></span><br><span class=\"line\">  next();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>正确示范</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 正确示范</span></span><br><span class=\"line\">router.beforeEach(<span class=\"function\">(<span class=\"params\">to, <span class=\"keyword\">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (to.name !== <span class=\"string\">&quot;Login&quot;</span> &amp;&amp; !isAuthenticated) &#123;</span><br><span class=\"line\">    next(&#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;Login&quot;</span> &#125;);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    next();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"路由独享的守卫\"><a href=\"#路由独享的守卫\" class=\"headerlink\" title=\"路由独享的守卫\"></a>路由独享的守卫</h1><p>你可以在路由配置上直接定义 <code>beforeEnter</code> 守卫 :<br>这些守卫与全局前置守卫的方法参数是一样的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> VueRouter(&#123;</span><br><span class=\"line\">  <span class=\"attr\">routes</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">path</span>: <span class=\"string\">&quot;/foo&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">component</span>: Foo,</span><br><span class=\"line\">      <span class=\"attr\">beforeEnter</span>: <span class=\"function\">(<span class=\"params\">to, <span class=\"keyword\">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n","site":{"data":{"link":{"class1":{"class_name":"舍友","link_list":{"1":{"name":"codeAntg","link":"https://blog.csdn.net/weixin_44745147","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/fjh.jpg","descr":"那家刀削面不错","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class2":{"class_name":"致谢","link_list":{"1":{"name":"JerrC","link":"https://immyw.com","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/immyw.png","descr":"今日事,今日毕","width":"1px","style":"solid","color":"#60d0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/hexo.svg","descr":"A fast, simple & powerful blog framework","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class3":{"class_name":"友人","link_list":{"1":{"name":"Chester","link":"http://chesterlds.cn","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/chester.jpg","descr":null,"width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Wangs","link":"https://wangsss.cn/","avatar":"https://wangsss.cn/img/avatar.png","descr":"不疯魔，不成活 ~","width":"1px","style":"solid","color":"#9d9d9d","custom":"link_custom1","time":"4s","namecolor":"0094ff","descolor":"#ff9191"}}}}}},"excerpt":"","more":"<h1 id=\"全局前置守卫\"><a href=\"#全局前置守卫\" class=\"headerlink\" title=\"全局前置守卫\"></a>全局前置守卫</h1><p>你可以使用 <code>router.beforeEach</code> 注册一个全局前置守卫</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> VueRouter(&#123; ... &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">router.beforeEach(<span class=\"function\">(<span class=\"params\">to, <span class=\"keyword\">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>当一个导航触发时 , 全局前置守卫按照创建顺序调用,守卫是异步解析执行 , 此时导航在所有守卫 <code>resolve</code> 完之前一直处于 等待中</p>\n<p><strong>每个守卫方法接收三个参数 :</strong></p>\n<ul>\n<li><code>to: Route</code>: 即将要进入的目标 <code>路由对象</code></li>\n<li><code>from: Route</code>: 当前导航正要离开的路由</li>\n<li><code>next: Function</code>: 一定要调用该方法来 <code>resolve</code> 这个钩子,执行效果依赖 <code>next</code> 方法的调用参数</li>\n<li><code>next()</code>: 进行管道中的下一个钩子,如果全部钩子执行完了 , 则导航的状态就是 <code>confirmed</code> (确认的)<ul>\n<li><code>next(false)</code>: 中断当前的导航,如果浏览器的 <code>URL</code> 改变了 (可能是用户手动或者浏览器后退按钮) , 那么 <code>URL</code> 地址会重置到 <code>from</code> 路由对应的地址</li>\n<li><code>next(&#39;/&#39;)</code> 或者 <code>next(&#123; path: &#39;/&#39; &#125;)</code>: 跳转到一个不同的地址,当前的导航被中断 , 然后进行一个新的导航,你可以向 <code>next</code> 传递任意位置对象 , 且允许设置诸如 <code>replace: true</code>、<code>name: &#39;home&#39;</code> 之类的选项以及任何用在 <code>router-link</code> 的 <code>to</code> <code>prop</code> 或 <code>router.push</code> 中的选项</li>\n<li><code>next(error)</code>: <code>(2.4.0+)</code> 如果传入 <code>next</code> 的参数是一个 <code>Error</code> 实例 , 则导航会被终止且该错误会被传递给 <code>router.onError()</code> 注册过的回调</li>\n</ul>\n</li>\n</ul>\n<p><strong>确保 <code>next</code> 函数在任何给定的导航守卫中都被严格调用一次 , 它可以出现多于一次 , 但是只能在所有的逻辑路径都不重叠的情况下，否则钩子永远都不会被解析或报错</strong> , 这里用一个在用户未能验证身份时重定向到 <code>/login</code> 的示例</p>\n<p><strong>错误示范</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 错误示范</span></span><br><span class=\"line\">router.beforeEach(<span class=\"function\">(<span class=\"params\">to, <span class=\"keyword\">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (to.name !== <span class=\"string\">&quot;Login&quot;</span> &amp;&amp; !isAuthenticated) next(&#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;Login&quot;</span> &#125;);</span><br><span class=\"line\">  <span class=\"comment\">// 如果用户未能验证身份,则 next 会被调用两次,这是不对的</span></span><br><span class=\"line\">  next();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>正确示范</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 正确示范</span></span><br><span class=\"line\">router.beforeEach(<span class=\"function\">(<span class=\"params\">to, <span class=\"keyword\">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (to.name !== <span class=\"string\">&quot;Login&quot;</span> &amp;&amp; !isAuthenticated) &#123;</span><br><span class=\"line\">    next(&#123; <span class=\"attr\">name</span>: <span class=\"string\">&quot;Login&quot;</span> &#125;);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    next();</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"路由独享的守卫\"><a href=\"#路由独享的守卫\" class=\"headerlink\" title=\"路由独享的守卫\"></a>路由独享的守卫</h1><p>你可以在路由配置上直接定义 <code>beforeEnter</code> 守卫 :<br>这些守卫与全局前置守卫的方法参数是一样的</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> VueRouter(&#123;</span><br><span class=\"line\">  <span class=\"attr\">routes</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">path</span>: <span class=\"string\">&quot;/foo&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">component</span>: Foo,</span><br><span class=\"line\">      <span class=\"attr\">beforeEnter</span>: <span class=\"function\">(<span class=\"params\">to, <span class=\"keyword\">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n"},{"title":"用脚手架搭建一个 vue 项目","top_img":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg","cover":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vue/vue.jpg","date":"2021-02-27T01:54:01.000Z","_content":"\n# 一、需要安装 node 环境\n\n> 下载地址: https://nodejs.org/en/\n> 中文网: http://nodejs.cn/\n\n#### 安装后为方便国内使用，可以把 npm 换成 taobao 的 cnpm (速度快)\n\n```bash\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\n```\n\n检查是否安装成功,查看版本号\n\n![node](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vue/node.png)\n\n# 二、全局安装 vue 脚手架\n\n全局安装可能需要管理员权限( Windows 以管理员身份运行; Linux 加 sudo )\n\n```bash\nnpm install -g @vue/cli\n或者用 cnpm\ncnpm install -g @vue/cli\n简写\ncnpm i -g @vue/cli\n```\n\n#### 安装成功后可查看版本\n\n```bash\nvue -V  (大写V)\n```\n\n![vueversion](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vue/vueversion.png)\n\n# 三、创建项目\n\n为方便编辑,我一般都在 `vscode` 里操作\n\n## 1.比如创建一个叫 project 的项目\n\n```bash\nvue create project\n```\n\n#### 如果安装了 cnpm 就会询问是否使用淘宝镜像(cnpm)\n\n![vuecreateusecnpm](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vue/vuecreateusecnpm.png)\n\n都可以,只是影响网速快慢,我装了 `cnpm`,这里我填 `Y`\n\n## 2. 选择配置方式\n\n![vuecreatechooseconf](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vue/vuecreatechooseconf.png)\n\n> #### 说明:\n>\n> - `Default (babel,eslint)`: 默认配置\n> - `Manually select features`: 手动选择配置\n\n键盘上下就可以选择,选 `Manually select features` (最下面那个),俺不用默认配置\n\n## 3. 手动选择项目所需要的包\n\n![vuecreateconf](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vue/vuecreateconf.png)\n\n> #### 说明:\n>\n> - `Babel`: Babel 编译,将 ES6 编译成 ES5,进行兼容\n> - `TypeScript`: 给 JavaScript 添加特性的语言扩展\n> - `Progressive Web App (PWA) Support`: 让网页渐进式变成 App\n> - `Router`: Vue 路由\n> - `Vuex`: Vue 状态管理\n> - `CSS Pre-processors`: CSS 预编译器 (包括 SCSS/Sass、Less、Stylus)\n> - `Linter / Formatter`: 代码检测和格式化\n> - `Unit Testing`: 单元测试\n> - `E2E Testing`: 端到端测试\n>\n> ##### 根据需求进行勾选,上下键选择,空格是取消或选中,选完最后回车\n\n#### 如图:\n\n![vuecreateconfafter](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vue/vuecreateconfafter.png)\n\n## 4. 选择版本\n\n![vuecreatechooseversion](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vue/vuecreatechooseversion.png)\n\n## 5. 路由是否采用 history 模式\n\n选啥都可以,之后可以改\n\n![vuecreateusehistoryforrouter](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vue/vuecreateusehistoryforrouter.png)\n\n## 6. 选择 CSS 编译方法\n\n![vuecreatepickcssway](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vue/vuecreatepickcssway.png)\n\n按需选择,我选的 `Less`\n\n## 7. 选择代码规范\n\n![vuecreatepickeslintway](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vue/vuecreatepickeslintway.png)\n\n我选的 `Standard config`\n\n> #### 说明:\n>\n> - `eslint with ...` : 只进行报错提醒;\n> - `eslint + A ...` : 不严谨模式;\n> - `eslint + S ...` : 正常模式;\n> - `eslint + P ...` : 严格模式;\n\n## 8. 选择合适代码检验规范\n\n![vuecreatelintonsave](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vue/vuecreatelintonsave.png)\n\n选 `lint on save`,也就是报存时检验\n\n## 9. 选择放置配置的文件\n\n![vuecreateconfplace](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vue/vuecreateconfplace.png)\n\n我选的第一个,放到一个独立文件里\n\n## 10. 是否保存配置为以后使用\n\n![vuecreatesaveconf](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vue/vuecreatesaveconf.png)\n\n先不保存 (`N`)\n\n## 11. 安装完成\n\n![vuecreatedone](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vue/vuecreatedone.png)\n\n## 12. 运行项目\n\n其实安装完成后有提示\n\n```bash\ncd project (进入项目根目录)\nnpm run serve\n```\n\n![vuenpmrunserve](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vue/vuenpmrunserve.png)\n\n会在本地 `8080` 端口运行\n\n#### 如图\n\n![vuerunning](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vue/vuerunning.png)\n\n# The_End\n","source":"_posts/vue/vue-cli-createvue.md","raw":"---\ntitle: 用脚手架搭建一个 vue 项目\ntop_img: https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg\ncover: https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vue/vue.jpg\ndate: 2021-02-27 09:54:01\ntags:\n  - Vue\n  - Vue脚手架\ncategories:\n  - Vue\n  - Vue脚手架\n---\n\n# 一、需要安装 node 环境\n\n> 下载地址: https://nodejs.org/en/\n> 中文网: http://nodejs.cn/\n\n#### 安装后为方便国内使用，可以把 npm 换成 taobao 的 cnpm (速度快)\n\n```bash\nnpm install -g cnpm --registry=https://registry.npm.taobao.org\n```\n\n检查是否安装成功,查看版本号\n\n![node](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vue/node.png)\n\n# 二、全局安装 vue 脚手架\n\n全局安装可能需要管理员权限( Windows 以管理员身份运行; Linux 加 sudo )\n\n```bash\nnpm install -g @vue/cli\n或者用 cnpm\ncnpm install -g @vue/cli\n简写\ncnpm i -g @vue/cli\n```\n\n#### 安装成功后可查看版本\n\n```bash\nvue -V  (大写V)\n```\n\n![vueversion](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vue/vueversion.png)\n\n# 三、创建项目\n\n为方便编辑,我一般都在 `vscode` 里操作\n\n## 1.比如创建一个叫 project 的项目\n\n```bash\nvue create project\n```\n\n#### 如果安装了 cnpm 就会询问是否使用淘宝镜像(cnpm)\n\n![vuecreateusecnpm](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vue/vuecreateusecnpm.png)\n\n都可以,只是影响网速快慢,我装了 `cnpm`,这里我填 `Y`\n\n## 2. 选择配置方式\n\n![vuecreatechooseconf](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vue/vuecreatechooseconf.png)\n\n> #### 说明:\n>\n> - `Default (babel,eslint)`: 默认配置\n> - `Manually select features`: 手动选择配置\n\n键盘上下就可以选择,选 `Manually select features` (最下面那个),俺不用默认配置\n\n## 3. 手动选择项目所需要的包\n\n![vuecreateconf](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vue/vuecreateconf.png)\n\n> #### 说明:\n>\n> - `Babel`: Babel 编译,将 ES6 编译成 ES5,进行兼容\n> - `TypeScript`: 给 JavaScript 添加特性的语言扩展\n> - `Progressive Web App (PWA) Support`: 让网页渐进式变成 App\n> - `Router`: Vue 路由\n> - `Vuex`: Vue 状态管理\n> - `CSS Pre-processors`: CSS 预编译器 (包括 SCSS/Sass、Less、Stylus)\n> - `Linter / Formatter`: 代码检测和格式化\n> - `Unit Testing`: 单元测试\n> - `E2E Testing`: 端到端测试\n>\n> ##### 根据需求进行勾选,上下键选择,空格是取消或选中,选完最后回车\n\n#### 如图:\n\n![vuecreateconfafter](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vue/vuecreateconfafter.png)\n\n## 4. 选择版本\n\n![vuecreatechooseversion](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vue/vuecreatechooseversion.png)\n\n## 5. 路由是否采用 history 模式\n\n选啥都可以,之后可以改\n\n![vuecreateusehistoryforrouter](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vue/vuecreateusehistoryforrouter.png)\n\n## 6. 选择 CSS 编译方法\n\n![vuecreatepickcssway](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vue/vuecreatepickcssway.png)\n\n按需选择,我选的 `Less`\n\n## 7. 选择代码规范\n\n![vuecreatepickeslintway](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vue/vuecreatepickeslintway.png)\n\n我选的 `Standard config`\n\n> #### 说明:\n>\n> - `eslint with ...` : 只进行报错提醒;\n> - `eslint + A ...` : 不严谨模式;\n> - `eslint + S ...` : 正常模式;\n> - `eslint + P ...` : 严格模式;\n\n## 8. 选择合适代码检验规范\n\n![vuecreatelintonsave](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vue/vuecreatelintonsave.png)\n\n选 `lint on save`,也就是报存时检验\n\n## 9. 选择放置配置的文件\n\n![vuecreateconfplace](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vue/vuecreateconfplace.png)\n\n我选的第一个,放到一个独立文件里\n\n## 10. 是否保存配置为以后使用\n\n![vuecreatesaveconf](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vue/vuecreatesaveconf.png)\n\n先不保存 (`N`)\n\n## 11. 安装完成\n\n![vuecreatedone](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vue/vuecreatedone.png)\n\n## 12. 运行项目\n\n其实安装完成后有提示\n\n```bash\ncd project (进入项目根目录)\nnpm run serve\n```\n\n![vuenpmrunserve](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vue/vuenpmrunserve.png)\n\n会在本地 `8080` 端口运行\n\n#### 如图\n\n![vuerunning](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vue/vuerunning.png)\n\n# The_End\n","slug":"vue/vue-cli-createvue","published":1,"updated":"2021-07-31T12:21:08.668Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cksvxwnop004dgubqeo6k25t6","content":"<h1 id=\"一、需要安装-node-环境\"><a href=\"#一、需要安装-node-环境\" class=\"headerlink\" title=\"一、需要安装 node 环境\"></a>一、需要安装 node 环境</h1><blockquote>\n<p>下载地址: <a href=\"https://nodejs.org/en/\">https://nodejs.org/en/</a><br>中文网: <a href=\"http://nodejs.cn/\">http://nodejs.cn/</a></p>\n</blockquote>\n<h4 id=\"安装后为方便国内使用，可以把-npm-换成-taobao-的-cnpm-速度快\"><a href=\"#安装后为方便国内使用，可以把-npm-换成-taobao-的-cnpm-速度快\" class=\"headerlink\" title=\"安装后为方便国内使用，可以把 npm 换成 taobao 的 cnpm (速度快)\"></a>安装后为方便国内使用，可以把 npm 换成 taobao 的 cnpm (速度快)</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n\n<p>检查是否安装成功,查看版本号</p>\n<p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vue/node.png\" alt=\"node\"></p>\n<h1 id=\"二、全局安装-vue-脚手架\"><a href=\"#二、全局安装-vue-脚手架\" class=\"headerlink\" title=\"二、全局安装 vue 脚手架\"></a>二、全局安装 vue 脚手架</h1><p>全局安装可能需要管理员权限( Windows 以管理员身份运行; Linux 加 sudo )</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g @vue/cli</span><br><span class=\"line\">或者用 cnpm</span><br><span class=\"line\">cnpm install -g @vue/cli</span><br><span class=\"line\">简写</span><br><span class=\"line\">cnpm i -g @vue/cli</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"安装成功后可查看版本\"><a href=\"#安装成功后可查看版本\" class=\"headerlink\" title=\"安装成功后可查看版本\"></a>安装成功后可查看版本</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vue -V  (大写V)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vue/vueversion.png\" alt=\"vueversion\"></p>\n<h1 id=\"三、创建项目\"><a href=\"#三、创建项目\" class=\"headerlink\" title=\"三、创建项目\"></a>三、创建项目</h1><p>为方便编辑,我一般都在 <code>vscode</code> 里操作</p>\n<h2 id=\"1-比如创建一个叫-project-的项目\"><a href=\"#1-比如创建一个叫-project-的项目\" class=\"headerlink\" title=\"1.比如创建一个叫 project 的项目\"></a>1.比如创建一个叫 project 的项目</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vue create project</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"如果安装了-cnpm-就会询问是否使用淘宝镜像-cnpm\"><a href=\"#如果安装了-cnpm-就会询问是否使用淘宝镜像-cnpm\" class=\"headerlink\" title=\"如果安装了 cnpm 就会询问是否使用淘宝镜像(cnpm)\"></a>如果安装了 cnpm 就会询问是否使用淘宝镜像(cnpm)</h4><p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vue/vuecreateusecnpm.png\" alt=\"vuecreateusecnpm\"></p>\n<p>都可以,只是影响网速快慢,我装了 <code>cnpm</code>,这里我填 <code>Y</code></p>\n<h2 id=\"2-选择配置方式\"><a href=\"#2-选择配置方式\" class=\"headerlink\" title=\"2. 选择配置方式\"></a>2. 选择配置方式</h2><p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vue/vuecreatechooseconf.png\" alt=\"vuecreatechooseconf\"></p>\n<blockquote>\n<h4 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明:\"></a>说明:</h4><ul>\n<li><code>Default (babel,eslint)</code>: 默认配置</li>\n<li><code>Manually select features</code>: 手动选择配置</li>\n</ul>\n</blockquote>\n<p>键盘上下就可以选择,选 <code>Manually select features</code> (最下面那个),俺不用默认配置</p>\n<h2 id=\"3-手动选择项目所需要的包\"><a href=\"#3-手动选择项目所需要的包\" class=\"headerlink\" title=\"3. 手动选择项目所需要的包\"></a>3. 手动选择项目所需要的包</h2><p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vue/vuecreateconf.png\" alt=\"vuecreateconf\"></p>\n<blockquote>\n<h4 id=\"说明-1\"><a href=\"#说明-1\" class=\"headerlink\" title=\"说明:\"></a>说明:</h4><ul>\n<li><code>Babel</code>: Babel 编译,将 ES6 编译成 ES5,进行兼容</li>\n<li><code>TypeScript</code>: 给 JavaScript 添加特性的语言扩展</li>\n<li><code>Progressive Web App (PWA) Support</code>: 让网页渐进式变成 App</li>\n<li><code>Router</code>: Vue 路由</li>\n<li><code>Vuex</code>: Vue 状态管理</li>\n<li><code>CSS Pre-processors</code>: CSS 预编译器 (包括 SCSS/Sass、Less、Stylus)</li>\n<li><code>Linter / Formatter</code>: 代码检测和格式化</li>\n<li><code>Unit Testing</code>: 单元测试</li>\n<li><code>E2E Testing</code>: 端到端测试</li>\n</ul>\n<h5 id=\"根据需求进行勾选-上下键选择-空格是取消或选中-选完最后回车\"><a href=\"#根据需求进行勾选-上下键选择-空格是取消或选中-选完最后回车\" class=\"headerlink\" title=\"根据需求进行勾选,上下键选择,空格是取消或选中,选完最后回车\"></a>根据需求进行勾选,上下键选择,空格是取消或选中,选完最后回车</h5></blockquote>\n<h4 id=\"如图\"><a href=\"#如图\" class=\"headerlink\" title=\"如图:\"></a>如图:</h4><p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vue/vuecreateconfafter.png\" alt=\"vuecreateconfafter\"></p>\n<h2 id=\"4-选择版本\"><a href=\"#4-选择版本\" class=\"headerlink\" title=\"4. 选择版本\"></a>4. 选择版本</h2><p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vue/vuecreatechooseversion.png\" alt=\"vuecreatechooseversion\"></p>\n<h2 id=\"5-路由是否采用-history-模式\"><a href=\"#5-路由是否采用-history-模式\" class=\"headerlink\" title=\"5. 路由是否采用 history 模式\"></a>5. 路由是否采用 history 模式</h2><p>选啥都可以,之后可以改</p>\n<p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vue/vuecreateusehistoryforrouter.png\" alt=\"vuecreateusehistoryforrouter\"></p>\n<h2 id=\"6-选择-CSS-编译方法\"><a href=\"#6-选择-CSS-编译方法\" class=\"headerlink\" title=\"6. 选择 CSS 编译方法\"></a>6. 选择 CSS 编译方法</h2><p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vue/vuecreatepickcssway.png\" alt=\"vuecreatepickcssway\"></p>\n<p>按需选择,我选的 <code>Less</code></p>\n<h2 id=\"7-选择代码规范\"><a href=\"#7-选择代码规范\" class=\"headerlink\" title=\"7. 选择代码规范\"></a>7. 选择代码规范</h2><p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vue/vuecreatepickeslintway.png\" alt=\"vuecreatepickeslintway\"></p>\n<p>我选的 <code>Standard config</code></p>\n<blockquote>\n<h4 id=\"说明-2\"><a href=\"#说明-2\" class=\"headerlink\" title=\"说明:\"></a>说明:</h4><ul>\n<li><code>eslint with ...</code> : 只进行报错提醒;</li>\n<li><code>eslint + A ...</code> : 不严谨模式;</li>\n<li><code>eslint + S ...</code> : 正常模式;</li>\n<li><code>eslint + P ...</code> : 严格模式;</li>\n</ul>\n</blockquote>\n<h2 id=\"8-选择合适代码检验规范\"><a href=\"#8-选择合适代码检验规范\" class=\"headerlink\" title=\"8. 选择合适代码检验规范\"></a>8. 选择合适代码检验规范</h2><p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vue/vuecreatelintonsave.png\" alt=\"vuecreatelintonsave\"></p>\n<p>选 <code>lint on save</code>,也就是报存时检验</p>\n<h2 id=\"9-选择放置配置的文件\"><a href=\"#9-选择放置配置的文件\" class=\"headerlink\" title=\"9. 选择放置配置的文件\"></a>9. 选择放置配置的文件</h2><p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vue/vuecreateconfplace.png\" alt=\"vuecreateconfplace\"></p>\n<p>我选的第一个,放到一个独立文件里</p>\n<h2 id=\"10-是否保存配置为以后使用\"><a href=\"#10-是否保存配置为以后使用\" class=\"headerlink\" title=\"10. 是否保存配置为以后使用\"></a>10. 是否保存配置为以后使用</h2><p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vue/vuecreatesaveconf.png\" alt=\"vuecreatesaveconf\"></p>\n<p>先不保存 (<code>N</code>)</p>\n<h2 id=\"11-安装完成\"><a href=\"#11-安装完成\" class=\"headerlink\" title=\"11. 安装完成\"></a>11. 安装完成</h2><p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vue/vuecreatedone.png\" alt=\"vuecreatedone\"></p>\n<h2 id=\"12-运行项目\"><a href=\"#12-运行项目\" class=\"headerlink\" title=\"12. 运行项目\"></a>12. 运行项目</h2><p>其实安装完成后有提示</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> project (进入项目根目录)</span><br><span class=\"line\">npm run serve</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vue/vuenpmrunserve.png\" alt=\"vuenpmrunserve\"></p>\n<p>会在本地 <code>8080</code> 端口运行</p>\n<h4 id=\"如图-1\"><a href=\"#如图-1\" class=\"headerlink\" title=\"如图\"></a>如图</h4><p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vue/vuerunning.png\" alt=\"vuerunning\"></p>\n<h1 id=\"The-End\"><a href=\"#The-End\" class=\"headerlink\" title=\"The_End\"></a>The_End</h1>","site":{"data":{"link":{"class1":{"class_name":"舍友","link_list":{"1":{"name":"codeAntg","link":"https://blog.csdn.net/weixin_44745147","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/fjh.jpg","descr":"那家刀削面不错","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class2":{"class_name":"致谢","link_list":{"1":{"name":"JerrC","link":"https://immyw.com","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/immyw.png","descr":"今日事,今日毕","width":"1px","style":"solid","color":"#60d0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/hexo.svg","descr":"A fast, simple & powerful blog framework","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class3":{"class_name":"友人","link_list":{"1":{"name":"Chester","link":"http://chesterlds.cn","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/chester.jpg","descr":null,"width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Wangs","link":"https://wangsss.cn/","avatar":"https://wangsss.cn/img/avatar.png","descr":"不疯魔，不成活 ~","width":"1px","style":"solid","color":"#9d9d9d","custom":"link_custom1","time":"4s","namecolor":"0094ff","descolor":"#ff9191"}}}}}},"excerpt":"","more":"<h1 id=\"一、需要安装-node-环境\"><a href=\"#一、需要安装-node-环境\" class=\"headerlink\" title=\"一、需要安装 node 环境\"></a>一、需要安装 node 环境</h1><blockquote>\n<p>下载地址: <a href=\"https://nodejs.org/en/\">https://nodejs.org/en/</a><br>中文网: <a href=\"http://nodejs.cn/\">http://nodejs.cn/</a></p>\n</blockquote>\n<h4 id=\"安装后为方便国内使用，可以把-npm-换成-taobao-的-cnpm-速度快\"><a href=\"#安装后为方便国内使用，可以把-npm-换成-taobao-的-cnpm-速度快\" class=\"headerlink\" title=\"安装后为方便国内使用，可以把 npm 换成 taobao 的 cnpm (速度快)\"></a>安装后为方便国内使用，可以把 npm 换成 taobao 的 cnpm (速度快)</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n\n<p>检查是否安装成功,查看版本号</p>\n<p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vue/node.png\" alt=\"node\"></p>\n<h1 id=\"二、全局安装-vue-脚手架\"><a href=\"#二、全局安装-vue-脚手架\" class=\"headerlink\" title=\"二、全局安装 vue 脚手架\"></a>二、全局安装 vue 脚手架</h1><p>全局安装可能需要管理员权限( Windows 以管理员身份运行; Linux 加 sudo )</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g @vue/cli</span><br><span class=\"line\">或者用 cnpm</span><br><span class=\"line\">cnpm install -g @vue/cli</span><br><span class=\"line\">简写</span><br><span class=\"line\">cnpm i -g @vue/cli</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"安装成功后可查看版本\"><a href=\"#安装成功后可查看版本\" class=\"headerlink\" title=\"安装成功后可查看版本\"></a>安装成功后可查看版本</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vue -V  (大写V)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vue/vueversion.png\" alt=\"vueversion\"></p>\n<h1 id=\"三、创建项目\"><a href=\"#三、创建项目\" class=\"headerlink\" title=\"三、创建项目\"></a>三、创建项目</h1><p>为方便编辑,我一般都在 <code>vscode</code> 里操作</p>\n<h2 id=\"1-比如创建一个叫-project-的项目\"><a href=\"#1-比如创建一个叫-project-的项目\" class=\"headerlink\" title=\"1.比如创建一个叫 project 的项目\"></a>1.比如创建一个叫 project 的项目</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vue create project</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"如果安装了-cnpm-就会询问是否使用淘宝镜像-cnpm\"><a href=\"#如果安装了-cnpm-就会询问是否使用淘宝镜像-cnpm\" class=\"headerlink\" title=\"如果安装了 cnpm 就会询问是否使用淘宝镜像(cnpm)\"></a>如果安装了 cnpm 就会询问是否使用淘宝镜像(cnpm)</h4><p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vue/vuecreateusecnpm.png\" alt=\"vuecreateusecnpm\"></p>\n<p>都可以,只是影响网速快慢,我装了 <code>cnpm</code>,这里我填 <code>Y</code></p>\n<h2 id=\"2-选择配置方式\"><a href=\"#2-选择配置方式\" class=\"headerlink\" title=\"2. 选择配置方式\"></a>2. 选择配置方式</h2><p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vue/vuecreatechooseconf.png\" alt=\"vuecreatechooseconf\"></p>\n<blockquote>\n<h4 id=\"说明\"><a href=\"#说明\" class=\"headerlink\" title=\"说明:\"></a>说明:</h4><ul>\n<li><code>Default (babel,eslint)</code>: 默认配置</li>\n<li><code>Manually select features</code>: 手动选择配置</li>\n</ul>\n</blockquote>\n<p>键盘上下就可以选择,选 <code>Manually select features</code> (最下面那个),俺不用默认配置</p>\n<h2 id=\"3-手动选择项目所需要的包\"><a href=\"#3-手动选择项目所需要的包\" class=\"headerlink\" title=\"3. 手动选择项目所需要的包\"></a>3. 手动选择项目所需要的包</h2><p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vue/vuecreateconf.png\" alt=\"vuecreateconf\"></p>\n<blockquote>\n<h4 id=\"说明-1\"><a href=\"#说明-1\" class=\"headerlink\" title=\"说明:\"></a>说明:</h4><ul>\n<li><code>Babel</code>: Babel 编译,将 ES6 编译成 ES5,进行兼容</li>\n<li><code>TypeScript</code>: 给 JavaScript 添加特性的语言扩展</li>\n<li><code>Progressive Web App (PWA) Support</code>: 让网页渐进式变成 App</li>\n<li><code>Router</code>: Vue 路由</li>\n<li><code>Vuex</code>: Vue 状态管理</li>\n<li><code>CSS Pre-processors</code>: CSS 预编译器 (包括 SCSS/Sass、Less、Stylus)</li>\n<li><code>Linter / Formatter</code>: 代码检测和格式化</li>\n<li><code>Unit Testing</code>: 单元测试</li>\n<li><code>E2E Testing</code>: 端到端测试</li>\n</ul>\n<h5 id=\"根据需求进行勾选-上下键选择-空格是取消或选中-选完最后回车\"><a href=\"#根据需求进行勾选-上下键选择-空格是取消或选中-选完最后回车\" class=\"headerlink\" title=\"根据需求进行勾选,上下键选择,空格是取消或选中,选完最后回车\"></a>根据需求进行勾选,上下键选择,空格是取消或选中,选完最后回车</h5></blockquote>\n<h4 id=\"如图\"><a href=\"#如图\" class=\"headerlink\" title=\"如图:\"></a>如图:</h4><p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vue/vuecreateconfafter.png\" alt=\"vuecreateconfafter\"></p>\n<h2 id=\"4-选择版本\"><a href=\"#4-选择版本\" class=\"headerlink\" title=\"4. 选择版本\"></a>4. 选择版本</h2><p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vue/vuecreatechooseversion.png\" alt=\"vuecreatechooseversion\"></p>\n<h2 id=\"5-路由是否采用-history-模式\"><a href=\"#5-路由是否采用-history-模式\" class=\"headerlink\" title=\"5. 路由是否采用 history 模式\"></a>5. 路由是否采用 history 模式</h2><p>选啥都可以,之后可以改</p>\n<p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vue/vuecreateusehistoryforrouter.png\" alt=\"vuecreateusehistoryforrouter\"></p>\n<h2 id=\"6-选择-CSS-编译方法\"><a href=\"#6-选择-CSS-编译方法\" class=\"headerlink\" title=\"6. 选择 CSS 编译方法\"></a>6. 选择 CSS 编译方法</h2><p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vue/vuecreatepickcssway.png\" alt=\"vuecreatepickcssway\"></p>\n<p>按需选择,我选的 <code>Less</code></p>\n<h2 id=\"7-选择代码规范\"><a href=\"#7-选择代码规范\" class=\"headerlink\" title=\"7. 选择代码规范\"></a>7. 选择代码规范</h2><p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vue/vuecreatepickeslintway.png\" alt=\"vuecreatepickeslintway\"></p>\n<p>我选的 <code>Standard config</code></p>\n<blockquote>\n<h4 id=\"说明-2\"><a href=\"#说明-2\" class=\"headerlink\" title=\"说明:\"></a>说明:</h4><ul>\n<li><code>eslint with ...</code> : 只进行报错提醒;</li>\n<li><code>eslint + A ...</code> : 不严谨模式;</li>\n<li><code>eslint + S ...</code> : 正常模式;</li>\n<li><code>eslint + P ...</code> : 严格模式;</li>\n</ul>\n</blockquote>\n<h2 id=\"8-选择合适代码检验规范\"><a href=\"#8-选择合适代码检验规范\" class=\"headerlink\" title=\"8. 选择合适代码检验规范\"></a>8. 选择合适代码检验规范</h2><p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vue/vuecreatelintonsave.png\" alt=\"vuecreatelintonsave\"></p>\n<p>选 <code>lint on save</code>,也就是报存时检验</p>\n<h2 id=\"9-选择放置配置的文件\"><a href=\"#9-选择放置配置的文件\" class=\"headerlink\" title=\"9. 选择放置配置的文件\"></a>9. 选择放置配置的文件</h2><p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vue/vuecreateconfplace.png\" alt=\"vuecreateconfplace\"></p>\n<p>我选的第一个,放到一个独立文件里</p>\n<h2 id=\"10-是否保存配置为以后使用\"><a href=\"#10-是否保存配置为以后使用\" class=\"headerlink\" title=\"10. 是否保存配置为以后使用\"></a>10. 是否保存配置为以后使用</h2><p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vue/vuecreatesaveconf.png\" alt=\"vuecreatesaveconf\"></p>\n<p>先不保存 (<code>N</code>)</p>\n<h2 id=\"11-安装完成\"><a href=\"#11-安装完成\" class=\"headerlink\" title=\"11. 安装完成\"></a>11. 安装完成</h2><p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vue/vuecreatedone.png\" alt=\"vuecreatedone\"></p>\n<h2 id=\"12-运行项目\"><a href=\"#12-运行项目\" class=\"headerlink\" title=\"12. 运行项目\"></a>12. 运行项目</h2><p>其实安装完成后有提示</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> project (进入项目根目录)</span><br><span class=\"line\">npm run serve</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vue/vuenpmrunserve.png\" alt=\"vuenpmrunserve\"></p>\n<p>会在本地 <code>8080</code> 端口运行</p>\n<h4 id=\"如图-1\"><a href=\"#如图-1\" class=\"headerlink\" title=\"如图\"></a>如图</h4><p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vue/vuerunning.png\" alt=\"vuerunning\"></p>\n<h1 id=\"The-End\"><a href=\"#The-End\" class=\"headerlink\" title=\"The_End\"></a>The_End</h1>"},{"title":"Vue 评论小案例","date":"2021-07-25T08:40:49.000Z","updated":"2021-07-25T09:26:14.944Z","keywords":null,"description":null,"top_img":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg","cover":"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/desktop.png","comments":1,"copyright":null,"copyright_author":null,"copyright_author_href":null,"copyright_url":null,"copyright_info":null,"_content":"\n# 效果\n\n{% btn 'https:/vue-daily.netlify.app/vue-component-comment.html',在线预览,far fa-hand-point-right,green larger %}\n\n# 代码\n\n{% hideToggle Vue 评论小案例 %}\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <link\n      href=\"https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/3.4.1/css/bootstrap.css\"\n      rel=\"stylesheet\"\n    />\n    <script src=\"https://cdn.bootcdn.net/ajax/libs/vue/2.6.14/vue.js\"></script>\n\n    <style>\n      .container {\n        margin: 60px auto;\n        overflow: hidden;\n      }\n      button {\n        outline: none !important;\n      }\n      .comment-list {\n        margin: 10px 0;\n      }\n      td {\n        padding: 10px !important;\n      }\n    </style>\n  </head>\n\n  <body>\n    <div id=\"app\">\n      <div class=\"container\">\n        <div class=\"panel panel-info\">\n          <div class=\"panel-heading\">\n            <h3 class=\"panel-title\">Vue 评论小案例</h3>\n          </div>\n          <div class=\"panel-body\">\n            <!-- 引用提交评论组件 start -->\n            <commit-comment @func=\"getDataFromCommit\"></commit-comment>\n            <!-- 引用提交评论组件 end -->\n\n            <!-- 评论列表 start -->\n            <table class=\"table table-striped table-hover\">\n              <tbody>\n                <tr v-for=\"(item,index) in list\" :key=\"index\">\n                  <td>\n                    <span class=\"pull-left\">{{item.comment}}</span>\n                    <span class=\"badge pull-right\">{{item.username}}</span>\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n            <!-- 评论列表 end -->\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- 提交评论组件 start -->\n    <template id=\"commit-comment\">\n      <div class=\"comment-list\">\n        <div class=\"form-group\">\n          <!-- <label for=\"username\"></label> -->\n          <input\n            id=\"username\"\n            type=\"text\"\n            class=\"form-control\"\n            v-model=\"username\"\n            placeholder=\"用户名\"\n          />\n        </div>\n        <div class=\"form-group\">\n          <!-- <label for=\"comment\"></label> -->\n          <textarea\n            id=\"comment\"\n            class=\"form-control\"\n            v-model=\"comment\"\n            placeholder=\"评论内容\"\n          ></textarea>\n        </div>\n        <div class=\"form-group\">\n          <button class=\"btn btn-info\" @click=\"addComment\">发表评论</button>\n        </div>\n      </div>\n    </template>\n    <!-- 提交评论组件 end -->\n\n    <script>\n      let vm = new Vue({\n        el: \"#app\",\n        data: {\n          list: [],\n        },\n        methods: {\n          getDataFromCommit() {\n            this.list = JSON.parse(localStorage.getItem(\"commentList\") || \"[]\");\n          },\n        },\n        created() {\n          // 确保拿到的是个数组,不然遍历会报错\n          if (\n            Array.isArray(\n              JSON.parse(localStorage.getItem(\"commentList\") || \"[]\")\n            )\n          ) {\n            this.getDataFromCommit();\n          } else {\n            return;\n          }\n        },\n        components: {\n          \"commit-comment\": {\n            template: \"#commit-comment\",\n            data() {\n              return {\n                username: \"\",\n                comment: \"\",\n              };\n            },\n            methods: {\n              addComment() {\n                if (!this.username || !this.comment) {\n                  alert(\"兄弟 , 空着呢 ~\");\n                } else {\n                  // 从本地缓存拿出 commentList\n                  let commentList = JSON.parse(\n                    localStorage.getItem(\"commentList\") || \"[]\"\n                  );\n\n                  // 数组首部分加入新的数据\n                  commentList.unshift({\n                    username: this.username,\n                    comment: this.comment,\n                  });\n\n                  // 把新的数组存入本体缓存\n                  localStorage.setItem(\n                    \"commentList\",\n                    JSON.stringify(commentList)\n                  );\n\n                  this.username = this.comment = \"\";\n                  this.$emit(\"func\");\n                }\n              },\n            },\n          },\n        },\n      });\n    </script>\n  </body>\n</html>\n```\n\n{% endhideToggle %}\n","source":"_posts/vue/vue-component-comment.md","raw":"---\ntitle: Vue 评论小案例\ndate: 2021-07-25 16:40:49\nupdated:\ntags:\n  - vue\ncategories:\n  - vue\n  - vue基础\nkeywords:\ndescription:\ntop_img: https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg\ncover:\ncomments:\ncopyright:\ncopyright_author:\ncopyright_author_href:\ncopyright_url:\ncopyright_info:\n---\n\n# 效果\n\n{% btn 'https:/vue-daily.netlify.app/vue-component-comment.html',在线预览,far fa-hand-point-right,green larger %}\n\n# 代码\n\n{% hideToggle Vue 评论小案例 %}\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <link\n      href=\"https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/3.4.1/css/bootstrap.css\"\n      rel=\"stylesheet\"\n    />\n    <script src=\"https://cdn.bootcdn.net/ajax/libs/vue/2.6.14/vue.js\"></script>\n\n    <style>\n      .container {\n        margin: 60px auto;\n        overflow: hidden;\n      }\n      button {\n        outline: none !important;\n      }\n      .comment-list {\n        margin: 10px 0;\n      }\n      td {\n        padding: 10px !important;\n      }\n    </style>\n  </head>\n\n  <body>\n    <div id=\"app\">\n      <div class=\"container\">\n        <div class=\"panel panel-info\">\n          <div class=\"panel-heading\">\n            <h3 class=\"panel-title\">Vue 评论小案例</h3>\n          </div>\n          <div class=\"panel-body\">\n            <!-- 引用提交评论组件 start -->\n            <commit-comment @func=\"getDataFromCommit\"></commit-comment>\n            <!-- 引用提交评论组件 end -->\n\n            <!-- 评论列表 start -->\n            <table class=\"table table-striped table-hover\">\n              <tbody>\n                <tr v-for=\"(item,index) in list\" :key=\"index\">\n                  <td>\n                    <span class=\"pull-left\">{{item.comment}}</span>\n                    <span class=\"badge pull-right\">{{item.username}}</span>\n                  </td>\n                </tr>\n              </tbody>\n            </table>\n            <!-- 评论列表 end -->\n          </div>\n        </div>\n      </div>\n    </div>\n\n    <!-- 提交评论组件 start -->\n    <template id=\"commit-comment\">\n      <div class=\"comment-list\">\n        <div class=\"form-group\">\n          <!-- <label for=\"username\"></label> -->\n          <input\n            id=\"username\"\n            type=\"text\"\n            class=\"form-control\"\n            v-model=\"username\"\n            placeholder=\"用户名\"\n          />\n        </div>\n        <div class=\"form-group\">\n          <!-- <label for=\"comment\"></label> -->\n          <textarea\n            id=\"comment\"\n            class=\"form-control\"\n            v-model=\"comment\"\n            placeholder=\"评论内容\"\n          ></textarea>\n        </div>\n        <div class=\"form-group\">\n          <button class=\"btn btn-info\" @click=\"addComment\">发表评论</button>\n        </div>\n      </div>\n    </template>\n    <!-- 提交评论组件 end -->\n\n    <script>\n      let vm = new Vue({\n        el: \"#app\",\n        data: {\n          list: [],\n        },\n        methods: {\n          getDataFromCommit() {\n            this.list = JSON.parse(localStorage.getItem(\"commentList\") || \"[]\");\n          },\n        },\n        created() {\n          // 确保拿到的是个数组,不然遍历会报错\n          if (\n            Array.isArray(\n              JSON.parse(localStorage.getItem(\"commentList\") || \"[]\")\n            )\n          ) {\n            this.getDataFromCommit();\n          } else {\n            return;\n          }\n        },\n        components: {\n          \"commit-comment\": {\n            template: \"#commit-comment\",\n            data() {\n              return {\n                username: \"\",\n                comment: \"\",\n              };\n            },\n            methods: {\n              addComment() {\n                if (!this.username || !this.comment) {\n                  alert(\"兄弟 , 空着呢 ~\");\n                } else {\n                  // 从本地缓存拿出 commentList\n                  let commentList = JSON.parse(\n                    localStorage.getItem(\"commentList\") || \"[]\"\n                  );\n\n                  // 数组首部分加入新的数据\n                  commentList.unshift({\n                    username: this.username,\n                    comment: this.comment,\n                  });\n\n                  // 把新的数组存入本体缓存\n                  localStorage.setItem(\n                    \"commentList\",\n                    JSON.stringify(commentList)\n                  );\n\n                  this.username = this.comment = \"\";\n                  this.$emit(\"func\");\n                }\n              },\n            },\n          },\n        },\n      });\n    </script>\n  </body>\n</html>\n```\n\n{% endhideToggle %}\n","slug":"vue/vue-component-comment","published":1,"layout":"post","photos":[],"link":"","_id":"cksvxwnoq004fgubq8qbbh5ar","content":"<h1 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h1><a class=\"btn-beautify button--animated green larger\" href=\"https:/vue-daily.netlify.app/vue-component-comment.html\" \n  title=\"在线预览\"><i class=\"far fa-hand-point-right\"></i><span>在线预览</span></a>\n\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><div class=\"hide-toggle\" ><div class=\"hide-button toggle-title\" style=\"\"><i class=\"fas fa-caret-right fa-fw\"></i><span>Vue 评论小案例</span></div>\n    <div class=\"hide-content\"><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/3.4.1/css/bootstrap.css&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.14/vue.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"css\"></span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-class\">.container</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">margin</span>: <span class=\"number\">60px</span> auto;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">overflow</span>: hidden;</span></span><br><span class=\"line\"><span class=\"css\">      &#125;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">button</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">outline</span>: none <span class=\"meta\">!important</span>;</span></span><br><span class=\"line\"><span class=\"css\">      &#125;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-class\">.comment-list</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">margin</span>: <span class=\"number\">10px</span> <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"css\">      &#125;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">td</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span> <span class=\"meta\">!important</span>;</span></span><br><span class=\"line\"><span class=\"css\">      &#125;</span></span><br><span class=\"line\"><span class=\"css\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;panel panel-info&quot;</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;panel-heading&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">h3</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;panel-title&quot;</span>&gt;</span>Vue 评论小案例<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;panel-body&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 引用提交评论组件 start --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">commit-comment</span> @<span class=\"attr\">func</span>=<span class=\"string\">&quot;getDataFromCommit&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">commit-comment</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 引用提交评论组件 end --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 评论列表 start --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;table table-striped table-hover&quot;</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">tbody</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">tr</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;(item,index) in list&quot;</span> <span class=\"attr\">:key</span>=<span class=\"string\">&quot;index&quot;</span>&gt;</span></span><br><span class=\"line\">                  <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;pull-left&quot;</span>&gt;</span>&#123;&#123;item.comment&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;badge pull-right&quot;</span>&gt;</span>&#123;&#123;item.username&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">                  <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;/<span class=\"name\">tbody</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 评论列表 end --&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 提交评论组件 start --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;commit-comment&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;comment-list&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">          <span class=\"comment\">&lt;!-- &lt;label for=&quot;username&quot;&gt;&lt;/label&gt; --&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">input</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">id</span>=<span class=\"string\">&quot;username&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;username&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;用户名&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">          /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">          <span class=\"comment\">&lt;!-- &lt;label for=&quot;comment&quot;&gt;&lt;/label&gt; --&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">textarea</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">id</span>=<span class=\"string\">&quot;comment&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;comment&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;评论内容&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">          &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">textarea</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-info&quot;</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;addComment&quot;</span>&gt;</span>发表评论<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 提交评论组件 end --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">let</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"attr\">el</span>: <span class=\"string\">&quot;#app&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"attr\">data</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"attr\">list</span>: [],</span></span><br><span class=\"line\"><span class=\"javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"attr\">methods</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"function\"><span class=\"title\">getDataFromCommit</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">this</span>.list = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">localStorage</span>.getItem(<span class=\"string\">&quot;commentList&quot;</span>) || <span class=\"string\">&quot;[]&quot;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">          &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"function\"><span class=\"title\">created</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"comment\">// 确保拿到的是个数组,不然遍历会报错</span></span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"keyword\">if</span> (</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">Array</span>.isArray(</span></span><br><span class=\"line\"><span class=\"javascript\">              <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">localStorage</span>.getItem(<span class=\"string\">&quot;commentList&quot;</span>) || <span class=\"string\">&quot;[]&quot;</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">            )</span></span><br><span class=\"line\"><span class=\"javascript\">          ) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">this</span>.getDataFromCommit();</span></span><br><span class=\"line\"><span class=\"javascript\">          &#125; <span class=\"keyword\">else</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">return</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">          &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"attr\">components</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"string\">&quot;commit-comment&quot;</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"attr\">template</span>: <span class=\"string\">&quot;#commit-comment&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">              <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"attr\">username</span>: <span class=\"string\">&quot;&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"attr\">comment</span>: <span class=\"string\">&quot;&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">              &#125;;</span></span><br><span class=\"line\"><span class=\"javascript\">            &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"attr\">methods</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">              <span class=\"function\"><span class=\"title\">addComment</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"keyword\">if</span> (!<span class=\"built_in\">this</span>.username || !<span class=\"built_in\">this</span>.comment) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                  alert(<span class=\"string\">&quot;兄弟 , 空着呢 ~&quot;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">                &#125; <span class=\"keyword\">else</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                  <span class=\"comment\">// 从本地缓存拿出 commentList</span></span></span><br><span class=\"line\"><span class=\"javascript\">                  <span class=\"keyword\">let</span> commentList = <span class=\"built_in\">JSON</span>.parse(</span></span><br><span class=\"line\"><span class=\"javascript\">                    <span class=\"built_in\">localStorage</span>.getItem(<span class=\"string\">&quot;commentList&quot;</span>) || <span class=\"string\">&quot;[]&quot;</span></span></span><br><span class=\"line\"><span class=\"javascript\">                  );</span></span><br><span class=\"line\"><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">                  <span class=\"comment\">// 数组首部分加入新的数据</span></span></span><br><span class=\"line\"><span class=\"javascript\">                  commentList.unshift(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                    <span class=\"attr\">username</span>: <span class=\"built_in\">this</span>.username,</span></span><br><span class=\"line\"><span class=\"javascript\">                    <span class=\"attr\">comment</span>: <span class=\"built_in\">this</span>.comment,</span></span><br><span class=\"line\"><span class=\"javascript\">                  &#125;);</span></span><br><span class=\"line\"><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">                  <span class=\"comment\">// 把新的数组存入本体缓存</span></span></span><br><span class=\"line\"><span class=\"javascript\">                  <span class=\"built_in\">localStorage</span>.setItem(</span></span><br><span class=\"line\"><span class=\"javascript\">                    <span class=\"string\">&quot;commentList&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">                    <span class=\"built_in\">JSON</span>.stringify(commentList)</span></span><br><span class=\"line\"><span class=\"javascript\">                  );</span></span><br><span class=\"line\"><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">                  <span class=\"built_in\">this</span>.username = <span class=\"built_in\">this</span>.comment = <span class=\"string\">&quot;&quot;</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">                  <span class=\"built_in\">this</span>.$emit(<span class=\"string\">&quot;func&quot;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">                &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">              &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">            &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">          &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">      &#125;);</span></span><br><span class=\"line\"><span class=\"javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</div></div>\n","site":{"data":{"link":{"class1":{"class_name":"舍友","link_list":{"1":{"name":"codeAntg","link":"https://blog.csdn.net/weixin_44745147","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/fjh.jpg","descr":"那家刀削面不错","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class2":{"class_name":"致谢","link_list":{"1":{"name":"JerrC","link":"https://immyw.com","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/immyw.png","descr":"今日事,今日毕","width":"1px","style":"solid","color":"#60d0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/hexo.svg","descr":"A fast, simple & powerful blog framework","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class3":{"class_name":"友人","link_list":{"1":{"name":"Chester","link":"http://chesterlds.cn","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/chester.jpg","descr":null,"width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Wangs","link":"https://wangsss.cn/","avatar":"https://wangsss.cn/img/avatar.png","descr":"不疯魔，不成活 ~","width":"1px","style":"solid","color":"#9d9d9d","custom":"link_custom1","time":"4s","namecolor":"0094ff","descolor":"#ff9191"}}}}}},"excerpt":"","more":"<h1 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h1><a class=\"btn-beautify button--animated green larger\" href=\"https:/vue-daily.netlify.app/vue-component-comment.html\" \n  title=\"在线预览\"><i class=\"far fa-hand-point-right\"></i><span>在线预览</span></a>\n\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><div class=\"hide-toggle\" ><div class=\"hide-button toggle-title\" style=\"\"><i class=\"fas fa-caret-right fa-fw\"></i><span>Vue 评论小案例</span></div>\n    <div class=\"hide-content\"><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">href</span>=<span class=\"string\">&quot;https://cdn.bootcdn.net/ajax/libs/twitter-bootstrap/3.4.1/css/bootstrap.css&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">      <span class=\"attr\">rel</span>=<span class=\"string\">&quot;stylesheet&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.14/vue.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"css\"></span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-class\">.container</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">margin</span>: <span class=\"number\">60px</span> auto;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">overflow</span>: hidden;</span></span><br><span class=\"line\"><span class=\"css\">      &#125;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">button</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">outline</span>: none <span class=\"meta\">!important</span>;</span></span><br><span class=\"line\"><span class=\"css\">      &#125;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-class\">.comment-list</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">margin</span>: <span class=\"number\">10px</span> <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"css\">      &#125;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">td</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">padding</span>: <span class=\"number\">10px</span> <span class=\"meta\">!important</span>;</span></span><br><span class=\"line\"><span class=\"css\">      &#125;</span></span><br><span class=\"line\"><span class=\"css\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;panel panel-info&quot;</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;panel-heading&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">h3</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;panel-title&quot;</span>&gt;</span>Vue 评论小案例<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;panel-body&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 引用提交评论组件 start --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">commit-comment</span> @<span class=\"attr\">func</span>=<span class=\"string\">&quot;getDataFromCommit&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">commit-comment</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 引用提交评论组件 end --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 评论列表 start --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">table</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;table table-striped table-hover&quot;</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">tbody</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">tr</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;(item,index) in list&quot;</span> <span class=\"attr\">:key</span>=<span class=\"string\">&quot;index&quot;</span>&gt;</span></span><br><span class=\"line\">                  <span class=\"tag\">&lt;<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;pull-left&quot;</span>&gt;</span>&#123;&#123;item.comment&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;badge pull-right&quot;</span>&gt;</span>&#123;&#123;item.username&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">                  <span class=\"tag\">&lt;/<span class=\"name\">td</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">tr</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;/<span class=\"name\">tbody</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">table</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- 评论列表 end --&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 提交评论组件 start --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;commit-comment&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;comment-list&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">          <span class=\"comment\">&lt;!-- &lt;label for=&quot;username&quot;&gt;&lt;/label&gt; --&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">input</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">id</span>=<span class=\"string\">&quot;username&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;username&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;用户名&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">          /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">          <span class=\"comment\">&lt;!-- &lt;label for=&quot;comment&quot;&gt;&lt;/label&gt; --&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">textarea</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">id</span>=<span class=\"string\">&quot;comment&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-control&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">v-model</span>=<span class=\"string\">&quot;comment&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;评论内容&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">          &gt;</span><span class=\"tag\">&lt;/<span class=\"name\">textarea</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;form-group&quot;</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;btn btn-info&quot;</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;addComment&quot;</span>&gt;</span>发表评论<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 提交评论组件 end --&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">let</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"attr\">el</span>: <span class=\"string\">&quot;#app&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"attr\">data</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"attr\">list</span>: [],</span></span><br><span class=\"line\"><span class=\"javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"attr\">methods</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"function\"><span class=\"title\">getDataFromCommit</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">this</span>.list = <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">localStorage</span>.getItem(<span class=\"string\">&quot;commentList&quot;</span>) || <span class=\"string\">&quot;[]&quot;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">          &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"function\"><span class=\"title\">created</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"comment\">// 确保拿到的是个数组,不然遍历会报错</span></span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"keyword\">if</span> (</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">Array</span>.isArray(</span></span><br><span class=\"line\"><span class=\"javascript\">              <span class=\"built_in\">JSON</span>.parse(<span class=\"built_in\">localStorage</span>.getItem(<span class=\"string\">&quot;commentList&quot;</span>) || <span class=\"string\">&quot;[]&quot;</span>)</span></span><br><span class=\"line\"><span class=\"javascript\">            )</span></span><br><span class=\"line\"><span class=\"javascript\">          ) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"built_in\">this</span>.getDataFromCommit();</span></span><br><span class=\"line\"><span class=\"javascript\">          &#125; <span class=\"keyword\">else</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">return</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">          &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"attr\">components</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"string\">&quot;commit-comment&quot;</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"attr\">template</span>: <span class=\"string\">&quot;#commit-comment&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">              <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"attr\">username</span>: <span class=\"string\">&quot;&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"attr\">comment</span>: <span class=\"string\">&quot;&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">              &#125;;</span></span><br><span class=\"line\"><span class=\"javascript\">            &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"attr\">methods</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">              <span class=\"function\"><span class=\"title\">addComment</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"keyword\">if</span> (!<span class=\"built_in\">this</span>.username || !<span class=\"built_in\">this</span>.comment) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                  alert(<span class=\"string\">&quot;兄弟 , 空着呢 ~&quot;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">                &#125; <span class=\"keyword\">else</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                  <span class=\"comment\">// 从本地缓存拿出 commentList</span></span></span><br><span class=\"line\"><span class=\"javascript\">                  <span class=\"keyword\">let</span> commentList = <span class=\"built_in\">JSON</span>.parse(</span></span><br><span class=\"line\"><span class=\"javascript\">                    <span class=\"built_in\">localStorage</span>.getItem(<span class=\"string\">&quot;commentList&quot;</span>) || <span class=\"string\">&quot;[]&quot;</span></span></span><br><span class=\"line\"><span class=\"javascript\">                  );</span></span><br><span class=\"line\"><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">                  <span class=\"comment\">// 数组首部分加入新的数据</span></span></span><br><span class=\"line\"><span class=\"javascript\">                  commentList.unshift(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                    <span class=\"attr\">username</span>: <span class=\"built_in\">this</span>.username,</span></span><br><span class=\"line\"><span class=\"javascript\">                    <span class=\"attr\">comment</span>: <span class=\"built_in\">this</span>.comment,</span></span><br><span class=\"line\"><span class=\"javascript\">                  &#125;);</span></span><br><span class=\"line\"><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">                  <span class=\"comment\">// 把新的数组存入本体缓存</span></span></span><br><span class=\"line\"><span class=\"javascript\">                  <span class=\"built_in\">localStorage</span>.setItem(</span></span><br><span class=\"line\"><span class=\"javascript\">                    <span class=\"string\">&quot;commentList&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">                    <span class=\"built_in\">JSON</span>.stringify(commentList)</span></span><br><span class=\"line\"><span class=\"javascript\">                  );</span></span><br><span class=\"line\"><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">                  <span class=\"built_in\">this</span>.username = <span class=\"built_in\">this</span>.comment = <span class=\"string\">&quot;&quot;</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">                  <span class=\"built_in\">this</span>.$emit(<span class=\"string\">&quot;func&quot;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">                &#125;</span></span><br><span class=\"line\"><span class=\"javascript\">              &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">            &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">          &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">      &#125;);</span></span><br><span class=\"line\"><span class=\"javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</div></div>\n"},{"title":"Vue 父子组件互相传值","date":"2021-07-25T07:16:48.000Z","updated":"2021-07-25T08:39:55.237Z","keywords":null,"description":null,"top_img":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg","cover":"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/desktop.png","comments":1,"copyright":null,"copyright_author":null,"copyright_author_href":null,"copyright_url":null,"copyright_info":null,"_content":"\n# Vue 父子组件互相传值\n\n{% tabs components %}\n\n<!-- tab  父组件传值子组件 -->\n\n{% btn 'https://vue-daily.netlify.app/father-to-son.html',在线演示,far fa-hand-point-right,green larger %}\n\n{% note blue no-icon flat %}\n设置 `props` 属性就可以接受父组件传值\n{% endnote %}\n\n## 父组件\n\n```html\n<div id=\"app\">\n  <child :parent-msg=\"msg\"></child>\n</div>\n```\n\n在父组件 `data` 上定义一个 `msg` , 用于传递给子组件\n\n```js\nlet vm = new Vue({\n  el: \"#app\",\n  data: {\n    msg: \"父组件内容\",\n  },\n  methods: {},\n});\n```\n\n## 子组件\n\n顺便定义一个方法 , 用来触发拿到父组件传的值 , 当然也可以直接写在 `created` 里\n\n```html\n<template id=\"child\">\n  <div>\n    <h1>我是子组件</h1>\n    <button @click=\"getDateFromParent\">子组件按钮</button>\n  </div>\n</template>\n```\n\n### props 设置传递类型 ( 三种方式 )\n\n可以设置多个类型 , 可以传 `Number` 也可以传 `String`\n\n**第一种方式**\n\n```js\nparentMsg: String;\n```\n\n**第二种方式**\n\n```js\nparentMsg: [String, Number],\n```\n\n**第三种方式**\n\n需要注意的是 , 当类型是 `Object` 或者 `Array` , 默认值必须是一个函数\n\n```js\nparentMsg: {\n    type: [String, Number],\n    default() {\n        return {};\n    },\n},\n```\n\n### 示例\n\n```js\nVue.component(\"child\", {\n  template: \"#child\",\n  data() {\n    return {};\n  },\n  props: {\n    parentMsg: {\n      type: [String, Number],\n      default() {\n        return {};\n      },\n    },\n  },\n  methods: {\n    getDateFromParent() {\n      console.log(this.parentMsg);\n    },\n  },\n});\n```\n\n## 注意事项\n\n**data 和 props 的区别 :**\n\n`data` 是组件私有的 , `props` 是父组件传过来的\n`data` 是可以修改的 , `props` 是只读的\n\n<!-- endtab  -->\n\n<!-- tab 子组件传值父组件 -->\n\n{% btn 'https://vue-daily.netlify.app/son-to-father.html',在线演示,far fa-hand-point-right,green larger %}\n\n**子组件调用父组件的方法**\n\n- 在父组件中给引用的子组件注册一个事件 ( 事件名是自定义的 )\n- 子组件可以触发这个事件 `$emit('事件名字')`\n\n**子组件给父组件传递数据**\n\n- `$emit` 方法第二个参数可以定义子组件给父组件传递的内容\n- 在父组件中怎么拿到这内容\n  - 父组件这个方法没有自定参数 , 在父组件的方法中直接加个参数就可以拿到\n  - 父组件有自定义参数 , 可以传入 `$event` 拿到子组件传递的数据 , 通过 `$event` 只能传递第一个参数\n\n## 示例\n\n### 子组件\n\n```html\n<template id=\"child\">\n  <div>\n    <button @click=\"childBtn\">子组件按钮</button>\n  </div>\n</template>\n```\n\n```js\nVue.component(\"child\", {\n  template: \"#child\",\n  data() {\n    return {};\n  },\n  methods: {\n    childBtn() {\n      this.$emit(\"passingdatatoparent\", \"我是子组件内容\");\n    },\n  },\n});\n```\n\n### 父组件\n\n```html\n<div id=\"app\">\n  <child @passingDataToParent=\"getDataFromChild\"></child>\n</div>\n```\n\n```js\nlet vm = new Vue({\n  el: \"#app\",\n  data: {\n    msg: \"\",\n  },\n  methods: {\n    getDataFromChild(data) {\n      console.log(data);\n    },\n  },\n});\n```\n\n<!-- endtab -->\n\n{% endtabs %}\n\n# The_End\n","source":"_posts/vue/vue-component-query-params.md","raw":"---\ntitle: Vue 父子组件互相传值\ndate: 2021-07-25 15:16:48\nupdated:\ntags:\n  - Vue\n  - Vue 组件\ncategories:\n  - Vue\n  - Vue基础\nkeywords:\ndescription:\ntop_img: https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg\ncover:\ncomments:\ncopyright:\ncopyright_author:\ncopyright_author_href:\ncopyright_url:\ncopyright_info:\n---\n\n# Vue 父子组件互相传值\n\n{% tabs components %}\n\n<!-- tab  父组件传值子组件 -->\n\n{% btn 'https://vue-daily.netlify.app/father-to-son.html',在线演示,far fa-hand-point-right,green larger %}\n\n{% note blue no-icon flat %}\n设置 `props` 属性就可以接受父组件传值\n{% endnote %}\n\n## 父组件\n\n```html\n<div id=\"app\">\n  <child :parent-msg=\"msg\"></child>\n</div>\n```\n\n在父组件 `data` 上定义一个 `msg` , 用于传递给子组件\n\n```js\nlet vm = new Vue({\n  el: \"#app\",\n  data: {\n    msg: \"父组件内容\",\n  },\n  methods: {},\n});\n```\n\n## 子组件\n\n顺便定义一个方法 , 用来触发拿到父组件传的值 , 当然也可以直接写在 `created` 里\n\n```html\n<template id=\"child\">\n  <div>\n    <h1>我是子组件</h1>\n    <button @click=\"getDateFromParent\">子组件按钮</button>\n  </div>\n</template>\n```\n\n### props 设置传递类型 ( 三种方式 )\n\n可以设置多个类型 , 可以传 `Number` 也可以传 `String`\n\n**第一种方式**\n\n```js\nparentMsg: String;\n```\n\n**第二种方式**\n\n```js\nparentMsg: [String, Number],\n```\n\n**第三种方式**\n\n需要注意的是 , 当类型是 `Object` 或者 `Array` , 默认值必须是一个函数\n\n```js\nparentMsg: {\n    type: [String, Number],\n    default() {\n        return {};\n    },\n},\n```\n\n### 示例\n\n```js\nVue.component(\"child\", {\n  template: \"#child\",\n  data() {\n    return {};\n  },\n  props: {\n    parentMsg: {\n      type: [String, Number],\n      default() {\n        return {};\n      },\n    },\n  },\n  methods: {\n    getDateFromParent() {\n      console.log(this.parentMsg);\n    },\n  },\n});\n```\n\n## 注意事项\n\n**data 和 props 的区别 :**\n\n`data` 是组件私有的 , `props` 是父组件传过来的\n`data` 是可以修改的 , `props` 是只读的\n\n<!-- endtab  -->\n\n<!-- tab 子组件传值父组件 -->\n\n{% btn 'https://vue-daily.netlify.app/son-to-father.html',在线演示,far fa-hand-point-right,green larger %}\n\n**子组件调用父组件的方法**\n\n- 在父组件中给引用的子组件注册一个事件 ( 事件名是自定义的 )\n- 子组件可以触发这个事件 `$emit('事件名字')`\n\n**子组件给父组件传递数据**\n\n- `$emit` 方法第二个参数可以定义子组件给父组件传递的内容\n- 在父组件中怎么拿到这内容\n  - 父组件这个方法没有自定参数 , 在父组件的方法中直接加个参数就可以拿到\n  - 父组件有自定义参数 , 可以传入 `$event` 拿到子组件传递的数据 , 通过 `$event` 只能传递第一个参数\n\n## 示例\n\n### 子组件\n\n```html\n<template id=\"child\">\n  <div>\n    <button @click=\"childBtn\">子组件按钮</button>\n  </div>\n</template>\n```\n\n```js\nVue.component(\"child\", {\n  template: \"#child\",\n  data() {\n    return {};\n  },\n  methods: {\n    childBtn() {\n      this.$emit(\"passingdatatoparent\", \"我是子组件内容\");\n    },\n  },\n});\n```\n\n### 父组件\n\n```html\n<div id=\"app\">\n  <child @passingDataToParent=\"getDataFromChild\"></child>\n</div>\n```\n\n```js\nlet vm = new Vue({\n  el: \"#app\",\n  data: {\n    msg: \"\",\n  },\n  methods: {\n    getDataFromChild(data) {\n      console.log(data);\n    },\n  },\n});\n```\n\n<!-- endtab -->\n\n{% endtabs %}\n\n# The_End\n","slug":"vue/vue-component-query-params","published":1,"layout":"post","photos":[],"link":"","_id":"cksvxwnor004hgubqdnxz5uuy","content":"<h1 id=\"Vue-父子组件互相传值\"><a href=\"#Vue-父子组件互相传值\" class=\"headerlink\" title=\"Vue 父子组件互相传值\"></a>Vue 父子组件互相传值</h1><div class=\"tabs\" id=\"components\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button type=\"button\" data-href=\"#components-1\">父组件传值子组件</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#components-2\">子组件传值父组件</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"components-1\"><p><a class=\"btn-beautify button--animated green larger\" href=\"https://vue-daily.netlify.app/father-to-son.html\" \n  title=\"在线演示\"><i class=\"far fa-hand-point-right\"></i><span>在线演示</span></a></p>\n<div class=\"note blue no-icon flat\"><p>设置 <code>props</code> 属性就可以接受父组件传值</p>\n</div>\n\n<h2 id=\"父组件\"><a href=\"#父组件\" class=\"headerlink\" title=\"父组件\"></a>父组件</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">child</span> <span class=\"attr\">:parent-msg</span>=<span class=\"string\">&quot;msg&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">child</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在父组件 <code>data</code> 上定义一个 <code>msg</code> , 用于传递给子组件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">&quot;#app&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">msg</span>: <span class=\"string\">&quot;父组件内容&quot;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">methods</span>: &#123;&#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"子组件\"><a href=\"#子组件\" class=\"headerlink\" title=\"子组件\"></a>子组件</h2><p>顺便定义一个方法 , 用来触发拿到父组件传的值 , 当然也可以直接写在 <code>created</code> 里</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;child&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>我是子组件<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;getDateFromParent&quot;</span>&gt;</span>子组件按钮<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"props-设置传递类型-三种方式\"><a href=\"#props-设置传递类型-三种方式\" class=\"headerlink\" title=\"props 设置传递类型 ( 三种方式 )\"></a>props 设置传递类型 ( 三种方式 )</h3><p>可以设置多个类型 , 可以传 <code>Number</code> 也可以传 <code>String</code></p>\n<p><strong>第一种方式</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">parentMsg: <span class=\"built_in\">String</span>;</span><br></pre></td></tr></table></figure>\n\n<p><strong>第二种方式</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">parentMsg: [<span class=\"built_in\">String</span>, <span class=\"built_in\">Number</span>],</span><br></pre></td></tr></table></figure>\n\n<p><strong>第三种方式</strong></p>\n<p>需要注意的是 , 当类型是 <code>Object</code> 或者 <code>Array</code> , 默认值必须是一个函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">parentMsg: &#123;</span><br><span class=\"line\">    <span class=\"attr\">type</span>: [<span class=\"built_in\">String</span>, <span class=\"built_in\">Number</span>],</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">default</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;&#125;;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">&quot;child&quot;</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">&quot;#child&quot;</span>,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;&#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">props</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">parentMsg</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">type</span>: [<span class=\"built_in\">String</span>, <span class=\"built_in\">Number</span>],</span><br><span class=\"line\">      <span class=\"function\"><span class=\"title\">default</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;&#125;;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">methods</span>: &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">getDateFromParent</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.parentMsg);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><p><strong>data 和 props 的区别 :</strong></p>\n<p><code>data</code> 是组件私有的 , <code>props</code> 是父组件传过来的<br><code>data</code> 是可以修改的 , <code>props</code> 是只读的</p><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"components-2\"><p><a class=\"btn-beautify button--animated green larger\" href=\"https://vue-daily.netlify.app/son-to-father.html\" \n  title=\"在线演示\"><i class=\"far fa-hand-point-right\"></i><span>在线演示</span></a></p>\n<p><strong>子组件调用父组件的方法</strong></p>\n<ul>\n<li>在父组件中给引用的子组件注册一个事件 ( 事件名是自定义的 )</li>\n<li>子组件可以触发这个事件 <code>$emit(&#39;事件名字&#39;)</code></li>\n</ul>\n<p><strong>子组件给父组件传递数据</strong></p>\n<ul>\n<li><code>$emit</code> 方法第二个参数可以定义子组件给父组件传递的内容</li>\n<li>在父组件中怎么拿到这内容<ul>\n<li>父组件这个方法没有自定参数 , 在父组件的方法中直接加个参数就可以拿到</li>\n<li>父组件有自定义参数 , 可以传入 <code>$event</code> 拿到子组件传递的数据 , 通过 <code>$event</code> 只能传递第一个参数</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><h3 id=\"子组件\"><a href=\"#子组件\" class=\"headerlink\" title=\"子组件\"></a>子组件</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;child&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;childBtn&quot;</span>&gt;</span>子组件按钮<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">&quot;child&quot;</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">&quot;#child&quot;</span>,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;&#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">methods</span>: &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">childBtn</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.$emit(<span class=\"string\">&quot;passingdatatoparent&quot;</span>, <span class=\"string\">&quot;我是子组件内容&quot;</span>);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"父组件\"><a href=\"#父组件\" class=\"headerlink\" title=\"父组件\"></a>父组件</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">child</span> @<span class=\"attr\">passingDataToParent</span>=<span class=\"string\">&quot;getDataFromChild&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">child</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">&quot;#app&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">msg</span>: <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">methods</span>: &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">getDataFromChild</span>(<span class=\"params\">data</span>)</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n\n<h1 id=\"The-End\"><a href=\"#The-End\" class=\"headerlink\" title=\"The_End\"></a>The_End</h1>","site":{"data":{"link":{"class1":{"class_name":"舍友","link_list":{"1":{"name":"codeAntg","link":"https://blog.csdn.net/weixin_44745147","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/fjh.jpg","descr":"那家刀削面不错","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class2":{"class_name":"致谢","link_list":{"1":{"name":"JerrC","link":"https://immyw.com","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/immyw.png","descr":"今日事,今日毕","width":"1px","style":"solid","color":"#60d0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/hexo.svg","descr":"A fast, simple & powerful blog framework","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class3":{"class_name":"友人","link_list":{"1":{"name":"Chester","link":"http://chesterlds.cn","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/chester.jpg","descr":null,"width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Wangs","link":"https://wangsss.cn/","avatar":"https://wangsss.cn/img/avatar.png","descr":"不疯魔，不成活 ~","width":"1px","style":"solid","color":"#9d9d9d","custom":"link_custom1","time":"4s","namecolor":"0094ff","descolor":"#ff9191"}}}}}},"excerpt":"","more":"<h1 id=\"Vue-父子组件互相传值\"><a href=\"#Vue-父子组件互相传值\" class=\"headerlink\" title=\"Vue 父子组件互相传值\"></a>Vue 父子组件互相传值</h1><div class=\"tabs\" id=\"components\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button type=\"button\" data-href=\"#components-1\">父组件传值子组件</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#components-2\">子组件传值父组件</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"components-1\"><p><a class=\"btn-beautify button--animated green larger\" href=\"https://vue-daily.netlify.app/father-to-son.html\" \n  title=\"在线演示\"><i class=\"far fa-hand-point-right\"></i><span>在线演示</span></a></p>\n<div class=\"note blue no-icon flat\"><p>设置 <code>props</code> 属性就可以接受父组件传值</p>\n</div>\n\n<h2 id=\"父组件\"><a href=\"#父组件\" class=\"headerlink\" title=\"父组件\"></a>父组件</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">child</span> <span class=\"attr\">:parent-msg</span>=<span class=\"string\">&quot;msg&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">child</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在父组件 <code>data</code> 上定义一个 <code>msg</code> , 用于传递给子组件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">&quot;#app&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">msg</span>: <span class=\"string\">&quot;父组件内容&quot;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">methods</span>: &#123;&#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"子组件\"><a href=\"#子组件\" class=\"headerlink\" title=\"子组件\"></a>子组件</h2><p>顺便定义一个方法 , 用来触发拿到父组件传的值 , 当然也可以直接写在 <code>created</code> 里</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;child&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>我是子组件<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;getDateFromParent&quot;</span>&gt;</span>子组件按钮<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"props-设置传递类型-三种方式\"><a href=\"#props-设置传递类型-三种方式\" class=\"headerlink\" title=\"props 设置传递类型 ( 三种方式 )\"></a>props 设置传递类型 ( 三种方式 )</h3><p>可以设置多个类型 , 可以传 <code>Number</code> 也可以传 <code>String</code></p>\n<p><strong>第一种方式</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">parentMsg: <span class=\"built_in\">String</span>;</span><br></pre></td></tr></table></figure>\n\n<p><strong>第二种方式</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">parentMsg: [<span class=\"built_in\">String</span>, <span class=\"built_in\">Number</span>],</span><br></pre></td></tr></table></figure>\n\n<p><strong>第三种方式</strong></p>\n<p>需要注意的是 , 当类型是 <code>Object</code> 或者 <code>Array</code> , 默认值必须是一个函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">parentMsg: &#123;</span><br><span class=\"line\">    <span class=\"attr\">type</span>: [<span class=\"built_in\">String</span>, <span class=\"built_in\">Number</span>],</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">default</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;&#125;;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">&quot;child&quot;</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">&quot;#child&quot;</span>,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;&#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">props</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">parentMsg</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">type</span>: [<span class=\"built_in\">String</span>, <span class=\"built_in\">Number</span>],</span><br><span class=\"line\">      <span class=\"function\"><span class=\"title\">default</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;&#125;;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">methods</span>: &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">getDateFromParent</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.parentMsg);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><p><strong>data 和 props 的区别 :</strong></p>\n<p><code>data</code> 是组件私有的 , <code>props</code> 是父组件传过来的<br><code>data</code> 是可以修改的 , <code>props</code> 是只读的</p><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"components-2\"><p><a class=\"btn-beautify button--animated green larger\" href=\"https://vue-daily.netlify.app/son-to-father.html\" \n  title=\"在线演示\"><i class=\"far fa-hand-point-right\"></i><span>在线演示</span></a></p>\n<p><strong>子组件调用父组件的方法</strong></p>\n<ul>\n<li>在父组件中给引用的子组件注册一个事件 ( 事件名是自定义的 )</li>\n<li>子组件可以触发这个事件 <code>$emit(&#39;事件名字&#39;)</code></li>\n</ul>\n<p><strong>子组件给父组件传递数据</strong></p>\n<ul>\n<li><code>$emit</code> 方法第二个参数可以定义子组件给父组件传递的内容</li>\n<li>在父组件中怎么拿到这内容<ul>\n<li>父组件这个方法没有自定参数 , 在父组件的方法中直接加个参数就可以拿到</li>\n<li>父组件有自定义参数 , 可以传入 <code>$event</code> 拿到子组件传递的数据 , 通过 <code>$event</code> 只能传递第一个参数</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><h3 id=\"子组件\"><a href=\"#子组件\" class=\"headerlink\" title=\"子组件\"></a>子组件</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;child&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;childBtn&quot;</span>&gt;</span>子组件按钮<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">&quot;child&quot;</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">&quot;#child&quot;</span>,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;&#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">methods</span>: &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">childBtn</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.$emit(<span class=\"string\">&quot;passingdatatoparent&quot;</span>, <span class=\"string\">&quot;我是子组件内容&quot;</span>);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"父组件\"><a href=\"#父组件\" class=\"headerlink\" title=\"父组件\"></a>父组件</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">child</span> @<span class=\"attr\">passingDataToParent</span>=<span class=\"string\">&quot;getDataFromChild&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">child</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">&quot;#app&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">msg</span>: <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">methods</span>: &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">getDataFromChild</span>(<span class=\"params\">data</span>)</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n\n<h1 id=\"The-End\"><a href=\"#The-End\" class=\"headerlink\" title=\"The_End\"></a>The_End</h1>"},{"title":"Vue 组件复用","date":"2021-07-24T13:36:16.000Z","updated":"2021-08-11T14:07:57.640Z","keywords":null,"description":null,"top_img":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg","cover":"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/desktop.png","comments":1,"copyright":null,"copyright_author":null,"copyright_author_href":null,"copyright_url":null,"copyright_info":null,"_content":"\n# 可能因 `http` 的原因无法正常显示,那就看代码吧\n\n{% btn 'https://vue-daily.netlify.app/component-reuse.html',效果预览,far fa-hand-point-right,green larger %}\n\n# 代码\n\n{% hideToggle 组件复用 %}\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Document</title>\n    <script src=\"https://cdn.bootcdn.net/ajax/libs/vue/2.6.14/vue.min.js\"></script>\n    <script src=\"https://cdn.bootcdn.net/ajax/libs/axios/0.21.1/axios.js\"></script>\n    <style>\n      #app {\n        margin: 100px auto;\n        width: 1200px;\n      }\n      .course-list {\n        margin: 20px 0;\n        display: flex;\n        align-items: center;\n        justify-content: space-between;\n        flex-wrap: wrap;\n      }\n      h1 {\n        text-align: center;\n      }\n      .course-item {\n        margin: 2px;\n        width: 234px;\n        height: 140px;\n      }\n      .cover {\n        height: 122px;\n        overflow: hidden;\n      }\n    </style>\n  </head>\n  <body>\n    <div id=\"app\">\n      <course-list type=\"free\" page-Size=\"10\">\n        <template v-slot:course-title>\n          <div><h1>免费课程</h1></div>\n        </template>\n      </course-list>\n      <course-list type=\"boutique\">\n        <template v-slot:course-title>\n          <div><h1>精品课程</h1></div>\n        </template>\n      </course-list>\n      <course-list type=\"discount\">\n        <template v-slot:course-title>\n          <div><h1>限时折扣课程</h1></div>\n        </template>\n      </course-list>\n    </div>\n\n    <template id=\"course-list\">\n      <div>\n        <slot name=\"course-title\"></slot>\n        <div class=\"course-list\">\n          <div class=\"course-item\" v-for=\"(item,index) in courselist\">\n            <div class=\"cover\"><img :src=\"item.coverFileUrl\" alt=\"\" /></div>\n          </div>\n        </div>\n      </div>\n    </template>\n\n    <script>\n      http: Vue.component(\"course-list\", {\n        template: \"#course-list\",\n        data() {\n          return {\n            courseApi:\n              \"http://wkt.myhope365.com/weChat/applet/course/list/type\",\n            courselist: [],\n          };\n        },\n        props: {\n          type: [String, Number],\n          pageSize: {\n            type: [String, Number],\n            default: 5,\n          },\n          pageNum: {\n            type: [String, Number],\n            default: 1,\n          },\n        },\n        methods: {\n          getCourseList() {\n            let formData = new FormData();\n            formData.append(\"type\", this.type);\n            formData.append(\"pageNum\", this.pageNum);\n            formData.append(\"pageSize\", this.pageSize);\n            axios.post(this.courseApi, formData).then((res) => {\n              this.courselist = res.data.rows;\n            });\n          },\n        },\n        created() {\n          this.getCourseList();\n        },\n      });\n\n      let vm = new Vue({\n        el: \"#app\",\n        data: {},\n        methods: {},\n      });\n    </script>\n  </body>\n</html>\n```\n\n{% endhideToggle %}\n","source":"_posts/vue/vue-component-reuse.md","raw":"---\ntitle: Vue 组件复用\ndate: 2021-07-24 21:36:16\nupdated:\ntags:\n  - Vue\n  - Vue 组件复用\ncategories:\n  - Vue\n  - Vue基础\nkeywords:\ndescription:\ntop_img: https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg\ncover:\ncomments:\ncopyright:\ncopyright_author:\ncopyright_author_href:\ncopyright_url:\ncopyright_info:\n---\n\n# 可能因 `http` 的原因无法正常显示,那就看代码吧\n\n{% btn 'https://vue-daily.netlify.app/component-reuse.html',效果预览,far fa-hand-point-right,green larger %}\n\n# 代码\n\n{% hideToggle 组件复用 %}\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Document</title>\n    <script src=\"https://cdn.bootcdn.net/ajax/libs/vue/2.6.14/vue.min.js\"></script>\n    <script src=\"https://cdn.bootcdn.net/ajax/libs/axios/0.21.1/axios.js\"></script>\n    <style>\n      #app {\n        margin: 100px auto;\n        width: 1200px;\n      }\n      .course-list {\n        margin: 20px 0;\n        display: flex;\n        align-items: center;\n        justify-content: space-between;\n        flex-wrap: wrap;\n      }\n      h1 {\n        text-align: center;\n      }\n      .course-item {\n        margin: 2px;\n        width: 234px;\n        height: 140px;\n      }\n      .cover {\n        height: 122px;\n        overflow: hidden;\n      }\n    </style>\n  </head>\n  <body>\n    <div id=\"app\">\n      <course-list type=\"free\" page-Size=\"10\">\n        <template v-slot:course-title>\n          <div><h1>免费课程</h1></div>\n        </template>\n      </course-list>\n      <course-list type=\"boutique\">\n        <template v-slot:course-title>\n          <div><h1>精品课程</h1></div>\n        </template>\n      </course-list>\n      <course-list type=\"discount\">\n        <template v-slot:course-title>\n          <div><h1>限时折扣课程</h1></div>\n        </template>\n      </course-list>\n    </div>\n\n    <template id=\"course-list\">\n      <div>\n        <slot name=\"course-title\"></slot>\n        <div class=\"course-list\">\n          <div class=\"course-item\" v-for=\"(item,index) in courselist\">\n            <div class=\"cover\"><img :src=\"item.coverFileUrl\" alt=\"\" /></div>\n          </div>\n        </div>\n      </div>\n    </template>\n\n    <script>\n      http: Vue.component(\"course-list\", {\n        template: \"#course-list\",\n        data() {\n          return {\n            courseApi:\n              \"http://wkt.myhope365.com/weChat/applet/course/list/type\",\n            courselist: [],\n          };\n        },\n        props: {\n          type: [String, Number],\n          pageSize: {\n            type: [String, Number],\n            default: 5,\n          },\n          pageNum: {\n            type: [String, Number],\n            default: 1,\n          },\n        },\n        methods: {\n          getCourseList() {\n            let formData = new FormData();\n            formData.append(\"type\", this.type);\n            formData.append(\"pageNum\", this.pageNum);\n            formData.append(\"pageSize\", this.pageSize);\n            axios.post(this.courseApi, formData).then((res) => {\n              this.courselist = res.data.rows;\n            });\n          },\n        },\n        created() {\n          this.getCourseList();\n        },\n      });\n\n      let vm = new Vue({\n        el: \"#app\",\n        data: {},\n        methods: {},\n      });\n    </script>\n  </body>\n</html>\n```\n\n{% endhideToggle %}\n","slug":"vue/vue-component-reuse","published":1,"layout":"post","photos":[],"link":"","_id":"cksvxwnos004jgubqbtjn5vi4","content":"<h1 id=\"可能因-http-的原因无法正常显示-那就看代码吧\"><a href=\"#可能因-http-的原因无法正常显示-那就看代码吧\" class=\"headerlink\" title=\"可能因 http 的原因无法正常显示,那就看代码吧\"></a>可能因 <code>http</code> 的原因无法正常显示,那就看代码吧</h1><a class=\"btn-beautify button--animated green larger\" href=\"https://vue-daily.netlify.app/component-reuse.html\" \n  title=\"效果预览\"><i class=\"far fa-hand-point-right\"></i><span>效果预览</span></a>\n\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><div class=\"hide-toggle\" ><div class=\"hide-button toggle-title\" style=\"\"><i class=\"fas fa-caret-right fa-fw\"></i><span>组件复用</span></div>\n    <div class=\"hide-content\"><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.14/vue.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.bootcdn.net/ajax/libs/axios/0.21.1/axios.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"css\"></span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-id\">#app</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">margin</span>: <span class=\"number\">100px</span> auto;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">width</span>: <span class=\"number\">1200px</span>;</span></span><br><span class=\"line\"><span class=\"css\">      &#125;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-class\">.course-list</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">margin</span>: <span class=\"number\">20px</span> <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">display</span>: flex;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">align-items</span>: center;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">justify-content</span>: space-between;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">flex-wrap</span>: wrap;</span></span><br><span class=\"line\"><span class=\"css\">      &#125;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">h1</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">text-align</span>: center;</span></span><br><span class=\"line\"><span class=\"css\">      &#125;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-class\">.course-item</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">margin</span>: <span class=\"number\">2px</span>;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">width</span>: <span class=\"number\">234px</span>;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">height</span>: <span class=\"number\">140px</span>;</span></span><br><span class=\"line\"><span class=\"css\">      &#125;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-class\">.cover</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">height</span>: <span class=\"number\">122px</span>;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">overflow</span>: hidden;</span></span><br><span class=\"line\"><span class=\"css\">      &#125;</span></span><br><span class=\"line\"><span class=\"css\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">course-list</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;free&quot;</span> <span class=\"attr\">page-Size</span>=<span class=\"string\">&quot;10&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-slot:course-title</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>免费课程<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">course-list</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">course-list</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;boutique&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-slot:course-title</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>精品课程<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">course-list</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">course-list</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;discount&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-slot:course-title</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>限时折扣课程<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">course-list</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;course-list&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;course-title&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;course-list&quot;</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;course-item&quot;</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;(item,index) in courselist&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;cover&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">:src</span>=<span class=\"string\">&quot;item.coverFileUrl&quot;</span> <span class=\"attr\">alt</span>=<span class=\"string\">&quot;&quot;</span> /&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"attr\">http</span>: Vue.component(<span class=\"string\">&quot;course-list&quot;</span>, &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"attr\">template</span>: <span class=\"string\">&quot;#course-list&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"attr\">courseApi</span>:</span></span><br><span class=\"line\"><span class=\"javascript\">              <span class=\"string\">&quot;http://wkt.myhope365.com/weChat/applet/course/list/type&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"attr\">courselist</span>: [],</span></span><br><span class=\"line\"><span class=\"javascript\">          &#125;;</span></span><br><span class=\"line\"><span class=\"javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"attr\">props</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"attr\">type</span>: [<span class=\"built_in\">String</span>, <span class=\"built_in\">Number</span>],</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"attr\">pageSize</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"attr\">type</span>: [<span class=\"built_in\">String</span>, <span class=\"built_in\">Number</span>],</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"attr\">default</span>: <span class=\"number\">5</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">          &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"attr\">pageNum</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"attr\">type</span>: [<span class=\"built_in\">String</span>, <span class=\"built_in\">Number</span>],</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"attr\">default</span>: <span class=\"number\">1</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">          &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"attr\">methods</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"function\"><span class=\"title\">getCourseList</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">let</span> formData = <span class=\"keyword\">new</span> FormData();</span></span><br><span class=\"line\"><span class=\"javascript\">            formData.append(<span class=\"string\">&quot;type&quot;</span>, <span class=\"built_in\">this</span>.type);</span></span><br><span class=\"line\"><span class=\"javascript\">            formData.append(<span class=\"string\">&quot;pageNum&quot;</span>, <span class=\"built_in\">this</span>.pageNum);</span></span><br><span class=\"line\"><span class=\"javascript\">            formData.append(<span class=\"string\">&quot;pageSize&quot;</span>, <span class=\"built_in\">this</span>.pageSize);</span></span><br><span class=\"line\"><span class=\"javascript\">            axios.post(<span class=\"built_in\">this</span>.courseApi, formData).then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">              <span class=\"built_in\">this</span>.courselist = res.data.rows;</span></span><br><span class=\"line\"><span class=\"javascript\">            &#125;);</span></span><br><span class=\"line\"><span class=\"javascript\">          &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"function\"><span class=\"title\">created</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"built_in\">this</span>.getCourseList();</span></span><br><span class=\"line\"><span class=\"javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">      &#125;);</span></span><br><span class=\"line\"><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">let</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"attr\">el</span>: <span class=\"string\">&quot;#app&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"attr\">data</span>: &#123;&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"attr\">methods</span>: &#123;&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">      &#125;);</span></span><br><span class=\"line\"><span class=\"javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</div></div>\n","site":{"data":{"link":{"class1":{"class_name":"舍友","link_list":{"1":{"name":"codeAntg","link":"https://blog.csdn.net/weixin_44745147","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/fjh.jpg","descr":"那家刀削面不错","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class2":{"class_name":"致谢","link_list":{"1":{"name":"JerrC","link":"https://immyw.com","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/immyw.png","descr":"今日事,今日毕","width":"1px","style":"solid","color":"#60d0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/hexo.svg","descr":"A fast, simple & powerful blog framework","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class3":{"class_name":"友人","link_list":{"1":{"name":"Chester","link":"http://chesterlds.cn","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/chester.jpg","descr":null,"width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Wangs","link":"https://wangsss.cn/","avatar":"https://wangsss.cn/img/avatar.png","descr":"不疯魔，不成活 ~","width":"1px","style":"solid","color":"#9d9d9d","custom":"link_custom1","time":"4s","namecolor":"0094ff","descolor":"#ff9191"}}}}}},"excerpt":"","more":"<h1 id=\"可能因-http-的原因无法正常显示-那就看代码吧\"><a href=\"#可能因-http-的原因无法正常显示-那就看代码吧\" class=\"headerlink\" title=\"可能因 http 的原因无法正常显示,那就看代码吧\"></a>可能因 <code>http</code> 的原因无法正常显示,那就看代码吧</h1><a class=\"btn-beautify button--animated green larger\" href=\"https://vue-daily.netlify.app/component-reuse.html\" \n  title=\"效果预览\"><i class=\"far fa-hand-point-right\"></i><span>效果预览</span></a>\n\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><div class=\"hide-toggle\" ><div class=\"hide-button toggle-title\" style=\"\"><i class=\"fas fa-caret-right fa-fw\"></i><span>组件复用</span></div>\n    <div class=\"hide-content\"><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.14/vue.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.bootcdn.net/ajax/libs/axios/0.21.1/axios.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"css\"></span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-id\">#app</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">margin</span>: <span class=\"number\">100px</span> auto;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">width</span>: <span class=\"number\">1200px</span>;</span></span><br><span class=\"line\"><span class=\"css\">      &#125;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-class\">.course-list</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">margin</span>: <span class=\"number\">20px</span> <span class=\"number\">0</span>;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">display</span>: flex;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">align-items</span>: center;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">justify-content</span>: space-between;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">flex-wrap</span>: wrap;</span></span><br><span class=\"line\"><span class=\"css\">      &#125;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">h1</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">text-align</span>: center;</span></span><br><span class=\"line\"><span class=\"css\">      &#125;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-class\">.course-item</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">margin</span>: <span class=\"number\">2px</span>;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">width</span>: <span class=\"number\">234px</span>;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">height</span>: <span class=\"number\">140px</span>;</span></span><br><span class=\"line\"><span class=\"css\">      &#125;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-class\">.cover</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">height</span>: <span class=\"number\">122px</span>;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">overflow</span>: hidden;</span></span><br><span class=\"line\"><span class=\"css\">      &#125;</span></span><br><span class=\"line\"><span class=\"css\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">course-list</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;free&quot;</span> <span class=\"attr\">page-Size</span>=<span class=\"string\">&quot;10&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-slot:course-title</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>免费课程<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">course-list</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">course-list</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;boutique&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-slot:course-title</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>精品课程<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">course-list</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">course-list</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;discount&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-slot:course-title</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>限时折扣课程<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">course-list</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;course-list&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;course-title&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;course-list&quot;</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;course-item&quot;</span> <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;(item,index) in courselist&quot;</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;cover&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">:src</span>=<span class=\"string\">&quot;item.coverFileUrl&quot;</span> <span class=\"attr\">alt</span>=<span class=\"string\">&quot;&quot;</span> /&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"attr\">http</span>: Vue.component(<span class=\"string\">&quot;course-list&quot;</span>, &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"attr\">template</span>: <span class=\"string\">&quot;#course-list&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"attr\">courseApi</span>:</span></span><br><span class=\"line\"><span class=\"javascript\">              <span class=\"string\">&quot;http://wkt.myhope365.com/weChat/applet/course/list/type&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"attr\">courselist</span>: [],</span></span><br><span class=\"line\"><span class=\"javascript\">          &#125;;</span></span><br><span class=\"line\"><span class=\"javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"attr\">props</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"attr\">type</span>: [<span class=\"built_in\">String</span>, <span class=\"built_in\">Number</span>],</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"attr\">pageSize</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"attr\">type</span>: [<span class=\"built_in\">String</span>, <span class=\"built_in\">Number</span>],</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"attr\">default</span>: <span class=\"number\">5</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">          &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"attr\">pageNum</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"attr\">type</span>: [<span class=\"built_in\">String</span>, <span class=\"built_in\">Number</span>],</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"attr\">default</span>: <span class=\"number\">1</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">          &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"attr\">methods</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"function\"><span class=\"title\">getCourseList</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">let</span> formData = <span class=\"keyword\">new</span> FormData();</span></span><br><span class=\"line\"><span class=\"javascript\">            formData.append(<span class=\"string\">&quot;type&quot;</span>, <span class=\"built_in\">this</span>.type);</span></span><br><span class=\"line\"><span class=\"javascript\">            formData.append(<span class=\"string\">&quot;pageNum&quot;</span>, <span class=\"built_in\">this</span>.pageNum);</span></span><br><span class=\"line\"><span class=\"javascript\">            formData.append(<span class=\"string\">&quot;pageSize&quot;</span>, <span class=\"built_in\">this</span>.pageSize);</span></span><br><span class=\"line\"><span class=\"javascript\">            axios.post(<span class=\"built_in\">this</span>.courseApi, formData).then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">              <span class=\"built_in\">this</span>.courselist = res.data.rows;</span></span><br><span class=\"line\"><span class=\"javascript\">            &#125;);</span></span><br><span class=\"line\"><span class=\"javascript\">          &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"function\"><span class=\"title\">created</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"built_in\">this</span>.getCourseList();</span></span><br><span class=\"line\"><span class=\"javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">      &#125;);</span></span><br><span class=\"line\"><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">let</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"attr\">el</span>: <span class=\"string\">&quot;#app&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"attr\">data</span>: &#123;&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"attr\">methods</span>: &#123;&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">      &#125;);</span></span><br><span class=\"line\"><span class=\"javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</div></div>\n"},{"title":"Vue 组件","date":"2021-07-22T14:12:28.000Z","updated":"2021-07-24T14:09:11.368Z","keywords":null,"description":null,"top_img":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg","cover":"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/desktop.png","comments":1,"copyright":null,"copyright_author":null,"copyright_author_href":null,"copyright_url":null,"copyright_info":null,"_content":"\n# vue 组件\n\n- 组件化和模块化的不同 :\n  - 模块化 : 是从代码逻辑的角度进行划分的 ; 方便代码分层开发 , 保证每个功能模块的职能单一\n  - 组件化 : 是从 UI 界面的角度进行划分的 ; 前端的组件化 , 方便 UI 组件的重用\n\n{% btn 'https://codehhr.github.io/vue-daily/component.html',在线预览,far fa-hand-point-right,green larger %}\n\n## 全局组件定义的四种方式\n\n**注意 : 组件中的 `DOM` 结构 , 有且只能有唯一的根元素 `( Root Element )` 来进行包裹 !**\n\n{% tabs component %}\n\n<!-- tab 第一种 -->\n\n### 使用 `Vue.extend` 配合 `Vue.component` 方法 :\n\n```js\n// 第一种方法\nlet myTitle = Vue.extend({\n  template: \"<h1> 我是第一种方法</h1>\",\n});\nVue.component(\"my-title\", myTitle);\n```\n\n引用\n\n```html\n<my-title></my-title>\n```\n\n<!-- endtab -->\n\n<!-- tab 第二种 -->\n\n### 直接使用 `Vue.component` 方法 :\n\n```js\n// 第二种方法\nVue.component(\"my-header\", {\n  template: \"<h1>我是第二种方法</h1>\",\n});\n```\n\n引用\n\n```html\n<my-header></my-header>\n```\n\n<!-- endtab -->\n\n<!-- tab 第三种 -->\n\n### 将模板字符串定义到 `script` 标签中 , 设置`type=\"x-template\"` , 同时需要使用 `Vue.component` 来定义组件 :\n\n```js\n<script type=\"x-template\" id=\"my-component\">\n  <div>\n    <a href=\"//codehhr.cn\" target=\"_blank\">\n      <h1>第三种方法</h1>\n    </a>\n  </div>\n</script>\n```\n\n```js\n// 第三种方法\nVue.component(\"my-component\", {\n  template: \"#my-component\",\n});\n```\n\n引用\n\n```html\n<my-component></my-component>\n```\n\n<!-- endtab -->\n\n<!-- tab 第四种 -->\n\n### 用 `template` 标签\n\n```html\n<template id=\"global-component\">\n  <div>\n    <h1>我是全局组件</h1>\n    <span>{{num}}</span>\n    <button @click=\"globalComponent\">全局组件按钮</button>\n  </div>\n</template>\n```\n\n```js\nVue.component(\"global-component\", {\n  template: \"#global-component\",\n});\n```\n\n引用\n\n```html\n<global-component></global-component>\n```\n\n<!-- endtab -->\n\n{% endtabs %}\n\n## 组件中展示数据和响应事件\n\n在组件中 , `data` 需要被定义为一个方法\n\n```js\nVue.component(\"global-component\", {\n  template: \"#global-component\",\n  data() {\n    return {};\n  },\n  methods: {},\n});\n```\n\n在子组件中 , 如果将模板字符串 , 定义到了 `script` 标签中 , 那么 , 要访问子组件身上的 `data` 属性中的值 , 需要使用 `this` 来访问\n\n## 为什么组件中的 `data` 属性必须定义为一个方法并返回一个对象\n\n如果不用 `return` , 每个组件的 `data` 的内存都是同一个地址 , 那么一个数据改变其他数据也改变了 , 这当然就不是我们想要的 , 用 `return` 其实就相当于申明了新的变量 , 相互独立 , 自然就不会有这样的问题\n\n## 实例\n\n定义组件\n\n```html\n<template id=\"global-component\">\n  <div>\n    <h1>我是全局组件</h1>\n    <span>{{num}}</span>\n    <button @click=\"globalComponent\">全局组件按钮</button>\n  </div>\n</template>\n```\n\n```js\nVue.component(\"global-component\", {\n  template: \"#global-component\",\n  data() {\n    return {\n      num: 1,\n    };\n  },\n  methods: {\n    globalComponent() {\n      this.num++;\n    },\n  },\n});\n```\n\n引用\n\n```html\n<global-component class=\"global-component\"></global-component>\n<global-component class=\"global-component\"></global-component>\n<global-component class=\"global-component\"></global-component>\n```\n\n**这样各个组件的数据不会相互干扰**\n\n## 使用 components 属性定义局部子组件\n\n在 `Vue` 实例里用 `components` 定义局部组件\n\n```js\nlet vm = new Vue({\n  el: \"#app\",\n  data: {},\n  methods: {},\n  // 局部组件\n  components: {\n    // 局部组件名\n    \"part-component\": {\n      template: \"#part-component\",\n      data() {\n        return {};\n      },\n      methods: {},\n    },\n  },\n});\n```\n\n引用\n\n```html\n<part-component></part-component>\n```\n\n## 使用 flag 标识符结合 v-if 和 v-else 切换组件\n\n定义组件\n\n```html\n<template id=\"part-component\">\n  <div>\n    <!-- 使用 flag 标识符结合 v-if 和 v-else 切换组件 -->\n    <h1 v-if=\"flag\">{{partComponentMsg1}}</h1>\n    <h1 v-else>{{partComponentMsg2}}</h1>\n    <button @click=\"partComponentClick\">局部组件按钮</button>\n  </div>\n</template>\n```\n\n```js\nlet vm = new Vue({\n  el: \"#app\",\n  data: {\n    componentName: \"part-component\",\n  },\n  methods: {},\n  // 局部组件\n  components: {\n    \"part-component\": {\n      template: \"#part-component\",\n      data() {\n        return {\n          flag: true,\n          partComponentMsg1: \"我是局部组件的数据 1\",\n          partComponentMsg2: \"我是局部组件的数据 2\",\n        };\n      },\n      methods: {\n        partComponentClick() {\n          this.flag = !this.flag;\n        },\n      },\n    },\n  },\n});\n```\n\n引用\n\n```html\n<part-component></part-component>\n```\n\n## 使用 `:is` 属性来切换不同的子组件\n\n定义组件\n\n```html\n<template id=\"part-component\">\n  <div>\n    <h1>>组件</h1>\n    <button>组件按钮</button>\n  </div>\n</template>\n```\n\n在 `data` 里定义属性值\n\n```js\nlet vm = new Vue({\n  el: \"#app\",\n  data: {\n    componentName: \"part-component\",\n  },\n});\n```\n\n引用\n\n```html\n<!-- 使用 component 标签 , 来引用组件 , 并通过 :is 属性来指定要加载的组件 -->\n<component :is=\"componentName\"></component>  \n```\n\n## 添加切换动画\n\n{% btn 'https://codehhr.github.io/vue-daily/component-switching.html',在线预览,far fa-hand-point-right,green larger %}\n\n### 定义组件示例\n\n```html\n<template id=\"login\">\n  <h1>登录</h1>\n</template>\n<template id=\"register\">\n  <h1>注册</h1>\n</template>\n```\n\n```js\nVue.component(\"login\", {\n  template: \"#login\",\n});\nVue.component(\"register\", {\n  template: \"#register\",\n});\n```\n\n### 使用 component 标签 , 来引用组件 , 并通过`:is` 属性来指定要加载的组件\n\n```html\n<div id=\"app\">\n  <button @click=\"comName='login'\">登录</button>\n  <button @click=\"comName='register'\">个人中心</button>\n  <transition mode=\"out-in\">\n    <component :is=\"comName\"></component>\n  </transition>\n</div>\n```\n\n默认显示 `login`\n\n```js\nconst vm = new Vue({\n  el: \"#app\",\n  data: {\n    comName: \"login\",\n  },\n  methods: {},\n});\n```\n\n### 添加切换样式\n\n```css\n.v-enter {\n  opacity: 0;\n  transform: translateX(-40px);\n}\n.v-leave-to {\n  opacity: 0;\n  transform: translateX(40px);\n}\n.v-enter-active,\n.v-leave-active {\n  transition: all 0.5s;\n}\n```\n","source":"_posts/vue/vue-component.md","raw":"---\ntitle: Vue 组件\ndate: 2021-07-22 22:12:28\nupdated:\ntags:\n  - Vue\n  - Vue 组件\ncategories:\n  - Vue\n  - Vue基础\nkeywords:\ndescription:\ntop_img: https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg\ncover:\ncomments:\ncopyright:\ncopyright_author:\ncopyright_author_href:\ncopyright_url:\ncopyright_info:\n---\n\n# vue 组件\n\n- 组件化和模块化的不同 :\n  - 模块化 : 是从代码逻辑的角度进行划分的 ; 方便代码分层开发 , 保证每个功能模块的职能单一\n  - 组件化 : 是从 UI 界面的角度进行划分的 ; 前端的组件化 , 方便 UI 组件的重用\n\n{% btn 'https://codehhr.github.io/vue-daily/component.html',在线预览,far fa-hand-point-right,green larger %}\n\n## 全局组件定义的四种方式\n\n**注意 : 组件中的 `DOM` 结构 , 有且只能有唯一的根元素 `( Root Element )` 来进行包裹 !**\n\n{% tabs component %}\n\n<!-- tab 第一种 -->\n\n### 使用 `Vue.extend` 配合 `Vue.component` 方法 :\n\n```js\n// 第一种方法\nlet myTitle = Vue.extend({\n  template: \"<h1> 我是第一种方法</h1>\",\n});\nVue.component(\"my-title\", myTitle);\n```\n\n引用\n\n```html\n<my-title></my-title>\n```\n\n<!-- endtab -->\n\n<!-- tab 第二种 -->\n\n### 直接使用 `Vue.component` 方法 :\n\n```js\n// 第二种方法\nVue.component(\"my-header\", {\n  template: \"<h1>我是第二种方法</h1>\",\n});\n```\n\n引用\n\n```html\n<my-header></my-header>\n```\n\n<!-- endtab -->\n\n<!-- tab 第三种 -->\n\n### 将模板字符串定义到 `script` 标签中 , 设置`type=\"x-template\"` , 同时需要使用 `Vue.component` 来定义组件 :\n\n```js\n<script type=\"x-template\" id=\"my-component\">\n  <div>\n    <a href=\"//codehhr.cn\" target=\"_blank\">\n      <h1>第三种方法</h1>\n    </a>\n  </div>\n</script>\n```\n\n```js\n// 第三种方法\nVue.component(\"my-component\", {\n  template: \"#my-component\",\n});\n```\n\n引用\n\n```html\n<my-component></my-component>\n```\n\n<!-- endtab -->\n\n<!-- tab 第四种 -->\n\n### 用 `template` 标签\n\n```html\n<template id=\"global-component\">\n  <div>\n    <h1>我是全局组件</h1>\n    <span>{{num}}</span>\n    <button @click=\"globalComponent\">全局组件按钮</button>\n  </div>\n</template>\n```\n\n```js\nVue.component(\"global-component\", {\n  template: \"#global-component\",\n});\n```\n\n引用\n\n```html\n<global-component></global-component>\n```\n\n<!-- endtab -->\n\n{% endtabs %}\n\n## 组件中展示数据和响应事件\n\n在组件中 , `data` 需要被定义为一个方法\n\n```js\nVue.component(\"global-component\", {\n  template: \"#global-component\",\n  data() {\n    return {};\n  },\n  methods: {},\n});\n```\n\n在子组件中 , 如果将模板字符串 , 定义到了 `script` 标签中 , 那么 , 要访问子组件身上的 `data` 属性中的值 , 需要使用 `this` 来访问\n\n## 为什么组件中的 `data` 属性必须定义为一个方法并返回一个对象\n\n如果不用 `return` , 每个组件的 `data` 的内存都是同一个地址 , 那么一个数据改变其他数据也改变了 , 这当然就不是我们想要的 , 用 `return` 其实就相当于申明了新的变量 , 相互独立 , 自然就不会有这样的问题\n\n## 实例\n\n定义组件\n\n```html\n<template id=\"global-component\">\n  <div>\n    <h1>我是全局组件</h1>\n    <span>{{num}}</span>\n    <button @click=\"globalComponent\">全局组件按钮</button>\n  </div>\n</template>\n```\n\n```js\nVue.component(\"global-component\", {\n  template: \"#global-component\",\n  data() {\n    return {\n      num: 1,\n    };\n  },\n  methods: {\n    globalComponent() {\n      this.num++;\n    },\n  },\n});\n```\n\n引用\n\n```html\n<global-component class=\"global-component\"></global-component>\n<global-component class=\"global-component\"></global-component>\n<global-component class=\"global-component\"></global-component>\n```\n\n**这样各个组件的数据不会相互干扰**\n\n## 使用 components 属性定义局部子组件\n\n在 `Vue` 实例里用 `components` 定义局部组件\n\n```js\nlet vm = new Vue({\n  el: \"#app\",\n  data: {},\n  methods: {},\n  // 局部组件\n  components: {\n    // 局部组件名\n    \"part-component\": {\n      template: \"#part-component\",\n      data() {\n        return {};\n      },\n      methods: {},\n    },\n  },\n});\n```\n\n引用\n\n```html\n<part-component></part-component>\n```\n\n## 使用 flag 标识符结合 v-if 和 v-else 切换组件\n\n定义组件\n\n```html\n<template id=\"part-component\">\n  <div>\n    <!-- 使用 flag 标识符结合 v-if 和 v-else 切换组件 -->\n    <h1 v-if=\"flag\">{{partComponentMsg1}}</h1>\n    <h1 v-else>{{partComponentMsg2}}</h1>\n    <button @click=\"partComponentClick\">局部组件按钮</button>\n  </div>\n</template>\n```\n\n```js\nlet vm = new Vue({\n  el: \"#app\",\n  data: {\n    componentName: \"part-component\",\n  },\n  methods: {},\n  // 局部组件\n  components: {\n    \"part-component\": {\n      template: \"#part-component\",\n      data() {\n        return {\n          flag: true,\n          partComponentMsg1: \"我是局部组件的数据 1\",\n          partComponentMsg2: \"我是局部组件的数据 2\",\n        };\n      },\n      methods: {\n        partComponentClick() {\n          this.flag = !this.flag;\n        },\n      },\n    },\n  },\n});\n```\n\n引用\n\n```html\n<part-component></part-component>\n```\n\n## 使用 `:is` 属性来切换不同的子组件\n\n定义组件\n\n```html\n<template id=\"part-component\">\n  <div>\n    <h1>>组件</h1>\n    <button>组件按钮</button>\n  </div>\n</template>\n```\n\n在 `data` 里定义属性值\n\n```js\nlet vm = new Vue({\n  el: \"#app\",\n  data: {\n    componentName: \"part-component\",\n  },\n});\n```\n\n引用\n\n```html\n<!-- 使用 component 标签 , 来引用组件 , 并通过 :is 属性来指定要加载的组件 -->\n<component :is=\"componentName\"></component>  \n```\n\n## 添加切换动画\n\n{% btn 'https://codehhr.github.io/vue-daily/component-switching.html',在线预览,far fa-hand-point-right,green larger %}\n\n### 定义组件示例\n\n```html\n<template id=\"login\">\n  <h1>登录</h1>\n</template>\n<template id=\"register\">\n  <h1>注册</h1>\n</template>\n```\n\n```js\nVue.component(\"login\", {\n  template: \"#login\",\n});\nVue.component(\"register\", {\n  template: \"#register\",\n});\n```\n\n### 使用 component 标签 , 来引用组件 , 并通过`:is` 属性来指定要加载的组件\n\n```html\n<div id=\"app\">\n  <button @click=\"comName='login'\">登录</button>\n  <button @click=\"comName='register'\">个人中心</button>\n  <transition mode=\"out-in\">\n    <component :is=\"comName\"></component>\n  </transition>\n</div>\n```\n\n默认显示 `login`\n\n```js\nconst vm = new Vue({\n  el: \"#app\",\n  data: {\n    comName: \"login\",\n  },\n  methods: {},\n});\n```\n\n### 添加切换样式\n\n```css\n.v-enter {\n  opacity: 0;\n  transform: translateX(-40px);\n}\n.v-leave-to {\n  opacity: 0;\n  transform: translateX(40px);\n}\n.v-enter-active,\n.v-leave-active {\n  transition: all 0.5s;\n}\n```\n","slug":"vue/vue-component","published":1,"layout":"post","photos":[],"link":"","_id":"cksvxwnot004mgubqceud6e03","content":"<h1 id=\"vue-组件\"><a href=\"#vue-组件\" class=\"headerlink\" title=\"vue 组件\"></a>vue 组件</h1><ul>\n<li>组件化和模块化的不同 :<ul>\n<li>模块化 : 是从代码逻辑的角度进行划分的 ; 方便代码分层开发 , 保证每个功能模块的职能单一</li>\n<li>组件化 : 是从 UI 界面的角度进行划分的 ; 前端的组件化 , 方便 UI 组件的重用</li>\n</ul>\n</li>\n</ul>\n<a class=\"btn-beautify button--animated green larger\" href=\"https://codehhr.github.io/vue-daily/component.html\" \n  title=\"在线预览\"><i class=\"far fa-hand-point-right\"></i><span>在线预览</span></a>\n\n<h2 id=\"全局组件定义的四种方式\"><a href=\"#全局组件定义的四种方式\" class=\"headerlink\" title=\"全局组件定义的四种方式\"></a>全局组件定义的四种方式</h2><p><strong>注意 : 组件中的 <code>DOM</code> 结构 , 有且只能有唯一的根元素 <code>( Root Element )</code> 来进行包裹 !</strong></p>\n<div class=\"tabs\" id=\"component\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button type=\"button\" data-href=\"#component-1\">第一种</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#component-2\">第二种</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#component-3\">第三种</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#component-4\">第四种</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"component-1\"><h3 id=\"使用-Vue-extend-配合-Vue-component-方法\"><a href=\"#使用-Vue-extend-配合-Vue-component-方法\" class=\"headerlink\" title=\"使用 Vue.extend 配合 Vue.component 方法 :\"></a>使用 <code>Vue.extend</code> 配合 <code>Vue.component</code> 方法 :</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 第一种方法</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> myTitle = Vue.extend(&#123;</span><br><span class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">&quot;&lt;h1&gt; 我是第一种方法&lt;/h1&gt;&quot;</span>,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">Vue.component(<span class=\"string\">&quot;my-title&quot;</span>, myTitle);</span><br></pre></td></tr></table></figure>\n\n<p>引用</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-title</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-title</span>&gt;</span></span><br></pre></td></tr></table></figure><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"component-2\"><h3 id=\"直接使用-Vue-component-方法\"><a href=\"#直接使用-Vue-component-方法\" class=\"headerlink\" title=\"直接使用 Vue.component 方法 :\"></a>直接使用 <code>Vue.component</code> 方法 :</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 第二种方法</span></span><br><span class=\"line\">Vue.component(<span class=\"string\">&quot;my-header&quot;</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">&quot;&lt;h1&gt;我是第二种方法&lt;/h1&gt;&quot;</span>,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>引用</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-header</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-header</span>&gt;</span></span><br></pre></td></tr></table></figure><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"component-3\"><h3 id=\"将模板字符串定义到-script-标签中-设置type-quot-x-template-quot-同时需要使用-Vue-component-来定义组件\"><a href=\"#将模板字符串定义到-script-标签中-设置type-quot-x-template-quot-同时需要使用-Vue-component-来定义组件\" class=\"headerlink\" title=\"将模板字符串定义到 script 标签中 , 设置type=&quot;x-template&quot; , 同时需要使用 Vue.component 来定义组件 :\"></a>将模板字符串定义到 <code>script</code> 标签中 , 设置<code>type=&quot;x-template&quot;</code> , 同时需要使用 <code>Vue.component</code> 来定义组件 :</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=<span class=\"string\">&quot;x-template&quot;</span> id=<span class=\"string\">&quot;my-component&quot;</span>&gt;</span><br><span class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;//codehhr.cn&quot;</span> <span class=\"attr\">target</span>=<span class=\"string\">&quot;_blank&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>第三种方法<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 第三种方法</span></span><br><span class=\"line\">Vue.component(<span class=\"string\">&quot;my-component&quot;</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">&quot;#my-component&quot;</span>,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>引用</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"component-4\"><h3 id=\"用-template-标签\"><a href=\"#用-template-标签\" class=\"headerlink\" title=\"用 template 标签\"></a>用 <code>template</code> 标签</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;global-component&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>我是全局组件<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>&#123;&#123;num&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;globalComponent&quot;</span>&gt;</span>全局组件按钮<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">&quot;global-component&quot;</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">&quot;#global-component&quot;</span>,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>引用</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">global-component</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">global-component</span>&gt;</span></span><br></pre></td></tr></table></figure><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n\n<h2 id=\"组件中展示数据和响应事件\"><a href=\"#组件中展示数据和响应事件\" class=\"headerlink\" title=\"组件中展示数据和响应事件\"></a>组件中展示数据和响应事件</h2><p>在组件中 , <code>data</code> 需要被定义为一个方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">&quot;global-component&quot;</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">&quot;#global-component&quot;</span>,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;&#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">methods</span>: &#123;&#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>在子组件中 , 如果将模板字符串 , 定义到了 <code>script</code> 标签中 , 那么 , 要访问子组件身上的 <code>data</code> 属性中的值 , 需要使用 <code>this</code> 来访问</p>\n<h2 id=\"为什么组件中的-data-属性必须定义为一个方法并返回一个对象\"><a href=\"#为什么组件中的-data-属性必须定义为一个方法并返回一个对象\" class=\"headerlink\" title=\"为什么组件中的 data 属性必须定义为一个方法并返回一个对象\"></a>为什么组件中的 <code>data</code> 属性必须定义为一个方法并返回一个对象</h2><p>如果不用 <code>return</code> , 每个组件的 <code>data</code> 的内存都是同一个地址 , 那么一个数据改变其他数据也改变了 , 这当然就不是我们想要的 , 用 <code>return</code> 其实就相当于申明了新的变量 , 相互独立 , 自然就不会有这样的问题</p>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><p>定义组件</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;global-component&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>我是全局组件<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>&#123;&#123;num&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;globalComponent&quot;</span>&gt;</span>全局组件按钮<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">&quot;global-component&quot;</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">&quot;#global-component&quot;</span>,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"attr\">num</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">methods</span>: &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">globalComponent</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.num++;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>引用</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">global-component</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;global-component&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">global-component</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">global-component</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;global-component&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">global-component</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">global-component</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;global-component&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">global-component</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>这样各个组件的数据不会相互干扰</strong></p>\n<h2 id=\"使用-components-属性定义局部子组件\"><a href=\"#使用-components-属性定义局部子组件\" class=\"headerlink\" title=\"使用 components 属性定义局部子组件\"></a>使用 components 属性定义局部子组件</h2><p>在 <code>Vue</code> 实例里用 <code>components</code> 定义局部组件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">&quot;#app&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">data</span>: &#123;&#125;,</span><br><span class=\"line\">  <span class=\"attr\">methods</span>: &#123;&#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 局部组件</span></span><br><span class=\"line\">  <span class=\"attr\">components</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 局部组件名</span></span><br><span class=\"line\">    <span class=\"string\">&quot;part-component&quot;</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">template</span>: <span class=\"string\">&quot;#part-component&quot;</span>,</span><br><span class=\"line\">      <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;&#125;;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"attr\">methods</span>: &#123;&#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>引用</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">part-component</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">part-component</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用-flag-标识符结合-v-if-和-v-else-切换组件\"><a href=\"#使用-flag-标识符结合-v-if-和-v-else-切换组件\" class=\"headerlink\" title=\"使用 flag 标识符结合 v-if 和 v-else 切换组件\"></a>使用 flag 标识符结合 v-if 和 v-else 切换组件</h2><p>定义组件</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;part-component&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 使用 flag 标识符结合 v-if 和 v-else 切换组件 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;flag&quot;</span>&gt;</span>&#123;&#123;partComponentMsg1&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">v-else</span>&gt;</span>&#123;&#123;partComponentMsg2&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;partComponentClick&quot;</span>&gt;</span>局部组件按钮<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">&quot;#app&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">componentName</span>: <span class=\"string\">&quot;part-component&quot;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">methods</span>: &#123;&#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 局部组件</span></span><br><span class=\"line\">  <span class=\"attr\">components</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;part-component&quot;</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">template</span>: <span class=\"string\">&quot;#part-component&quot;</span>,</span><br><span class=\"line\">      <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">          <span class=\"attr\">flag</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          <span class=\"attr\">partComponentMsg1</span>: <span class=\"string\">&quot;我是局部组件的数据 1&quot;</span>,</span><br><span class=\"line\">          <span class=\"attr\">partComponentMsg2</span>: <span class=\"string\">&quot;我是局部组件的数据 2&quot;</span>,</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"attr\">methods</span>: &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">partComponentClick</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">          <span class=\"built_in\">this</span>.flag = !<span class=\"built_in\">this</span>.flag;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>引用</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">part-component</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">part-component</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用-is-属性来切换不同的子组件\"><a href=\"#使用-is-属性来切换不同的子组件\" class=\"headerlink\" title=\"使用 :is 属性来切换不同的子组件\"></a>使用 <code>:is</code> 属性来切换不同的子组件</h2><p>定义组件</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;part-component&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&gt;组件<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>组件按钮<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在 <code>data</code> 里定义属性值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">&quot;#app&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">componentName</span>: <span class=\"string\">&quot;part-component&quot;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>引用</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 使用 component 标签 , 来引用组件 , 并通过 :is 属性来指定要加载的组件 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">:is</span>=<span class=\"string\">&quot;componentName&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span>  </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"添加切换动画\"><a href=\"#添加切换动画\" class=\"headerlink\" title=\"添加切换动画\"></a>添加切换动画</h2><a class=\"btn-beautify button--animated green larger\" href=\"https://codehhr.github.io/vue-daily/component-switching.html\" \n  title=\"在线预览\"><i class=\"far fa-hand-point-right\"></i><span>在线预览</span></a>\n\n<h3 id=\"定义组件示例\"><a href=\"#定义组件示例\" class=\"headerlink\" title=\"定义组件示例\"></a>定义组件示例</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;login&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>登录<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;register&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>注册<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">&quot;login&quot;</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">&quot;#login&quot;</span>,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">Vue.component(<span class=\"string\">&quot;register&quot;</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">&quot;#register&quot;</span>,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用-component-标签-来引用组件-并通过-is-属性来指定要加载的组件\"><a href=\"#使用-component-标签-来引用组件-并通过-is-属性来指定要加载的组件\" class=\"headerlink\" title=\"使用 component 标签 , 来引用组件 , 并通过:is 属性来指定要加载的组件\"></a>使用 component 标签 , 来引用组件 , 并通过<code>:is</code> 属性来指定要加载的组件</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;comName=&#x27;login&#x27;&quot;</span>&gt;</span>登录<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;comName=&#x27;register&#x27;&quot;</span>&gt;</span>个人中心<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">transition</span> <span class=\"attr\">mode</span>=<span class=\"string\">&quot;out-in&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">:is</span>=<span class=\"string\">&quot;comName&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">transition</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>默认显示 <code>login</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">&quot;#app&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">comName</span>: <span class=\"string\">&quot;login&quot;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">methods</span>: &#123;&#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加切换样式\"><a href=\"#添加切换样式\" class=\"headerlink\" title=\"添加切换样式\"></a>添加切换样式</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.v-enter</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">transform</span>: <span class=\"built_in\">translateX</span>(-<span class=\"number\">40px</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.v-leave-to</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">transform</span>: <span class=\"built_in\">translateX</span>(<span class=\"number\">40px</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.v-enter-active</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.v-leave-active</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">transition</span>: all <span class=\"number\">0.5s</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{"link":{"class1":{"class_name":"舍友","link_list":{"1":{"name":"codeAntg","link":"https://blog.csdn.net/weixin_44745147","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/fjh.jpg","descr":"那家刀削面不错","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class2":{"class_name":"致谢","link_list":{"1":{"name":"JerrC","link":"https://immyw.com","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/immyw.png","descr":"今日事,今日毕","width":"1px","style":"solid","color":"#60d0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/hexo.svg","descr":"A fast, simple & powerful blog framework","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class3":{"class_name":"友人","link_list":{"1":{"name":"Chester","link":"http://chesterlds.cn","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/chester.jpg","descr":null,"width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Wangs","link":"https://wangsss.cn/","avatar":"https://wangsss.cn/img/avatar.png","descr":"不疯魔，不成活 ~","width":"1px","style":"solid","color":"#9d9d9d","custom":"link_custom1","time":"4s","namecolor":"0094ff","descolor":"#ff9191"}}}}}},"excerpt":"","more":"<h1 id=\"vue-组件\"><a href=\"#vue-组件\" class=\"headerlink\" title=\"vue 组件\"></a>vue 组件</h1><ul>\n<li>组件化和模块化的不同 :<ul>\n<li>模块化 : 是从代码逻辑的角度进行划分的 ; 方便代码分层开发 , 保证每个功能模块的职能单一</li>\n<li>组件化 : 是从 UI 界面的角度进行划分的 ; 前端的组件化 , 方便 UI 组件的重用</li>\n</ul>\n</li>\n</ul>\n<a class=\"btn-beautify button--animated green larger\" href=\"https://codehhr.github.io/vue-daily/component.html\" \n  title=\"在线预览\"><i class=\"far fa-hand-point-right\"></i><span>在线预览</span></a>\n\n<h2 id=\"全局组件定义的四种方式\"><a href=\"#全局组件定义的四种方式\" class=\"headerlink\" title=\"全局组件定义的四种方式\"></a>全局组件定义的四种方式</h2><p><strong>注意 : 组件中的 <code>DOM</code> 结构 , 有且只能有唯一的根元素 <code>( Root Element )</code> 来进行包裹 !</strong></p>\n<div class=\"tabs\" id=\"component\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button type=\"button\" data-href=\"#component-1\">第一种</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#component-2\">第二种</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#component-3\">第三种</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#component-4\">第四种</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"component-1\"><h3 id=\"使用-Vue-extend-配合-Vue-component-方法\"><a href=\"#使用-Vue-extend-配合-Vue-component-方法\" class=\"headerlink\" title=\"使用 Vue.extend 配合 Vue.component 方法 :\"></a>使用 <code>Vue.extend</code> 配合 <code>Vue.component</code> 方法 :</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 第一种方法</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> myTitle = Vue.extend(&#123;</span><br><span class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">&quot;&lt;h1&gt; 我是第一种方法&lt;/h1&gt;&quot;</span>,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">Vue.component(<span class=\"string\">&quot;my-title&quot;</span>, myTitle);</span><br></pre></td></tr></table></figure>\n\n<p>引用</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-title</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-title</span>&gt;</span></span><br></pre></td></tr></table></figure><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"component-2\"><h3 id=\"直接使用-Vue-component-方法\"><a href=\"#直接使用-Vue-component-方法\" class=\"headerlink\" title=\"直接使用 Vue.component 方法 :\"></a>直接使用 <code>Vue.component</code> 方法 :</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 第二种方法</span></span><br><span class=\"line\">Vue.component(<span class=\"string\">&quot;my-header&quot;</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">&quot;&lt;h1&gt;我是第二种方法&lt;/h1&gt;&quot;</span>,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>引用</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-header</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-header</span>&gt;</span></span><br></pre></td></tr></table></figure><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"component-3\"><h3 id=\"将模板字符串定义到-script-标签中-设置type-quot-x-template-quot-同时需要使用-Vue-component-来定义组件\"><a href=\"#将模板字符串定义到-script-标签中-设置type-quot-x-template-quot-同时需要使用-Vue-component-来定义组件\" class=\"headerlink\" title=\"将模板字符串定义到 script 标签中 , 设置type=&quot;x-template&quot; , 同时需要使用 Vue.component 来定义组件 :\"></a>将模板字符串定义到 <code>script</code> 标签中 , 设置<code>type=&quot;x-template&quot;</code> , 同时需要使用 <code>Vue.component</code> 来定义组件 :</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=<span class=\"string\">&quot;x-template&quot;</span> id=<span class=\"string\">&quot;my-component&quot;</span>&gt;</span><br><span class=\"line\">  <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;//codehhr.cn&quot;</span> <span class=\"attr\">target</span>=<span class=\"string\">&quot;_blank&quot;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>第三种方法<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 第三种方法</span></span><br><span class=\"line\">Vue.component(<span class=\"string\">&quot;my-component&quot;</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">&quot;#my-component&quot;</span>,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>引用</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">my-component</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"component-4\"><h3 id=\"用-template-标签\"><a href=\"#用-template-标签\" class=\"headerlink\" title=\"用 template 标签\"></a>用 <code>template</code> 标签</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;global-component&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>我是全局组件<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>&#123;&#123;num&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;globalComponent&quot;</span>&gt;</span>全局组件按钮<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">&quot;global-component&quot;</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">&quot;#global-component&quot;</span>,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>引用</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">global-component</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">global-component</span>&gt;</span></span><br></pre></td></tr></table></figure><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n\n<h2 id=\"组件中展示数据和响应事件\"><a href=\"#组件中展示数据和响应事件\" class=\"headerlink\" title=\"组件中展示数据和响应事件\"></a>组件中展示数据和响应事件</h2><p>在组件中 , <code>data</code> 需要被定义为一个方法</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">&quot;global-component&quot;</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">&quot;#global-component&quot;</span>,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;&#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">methods</span>: &#123;&#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>在子组件中 , 如果将模板字符串 , 定义到了 <code>script</code> 标签中 , 那么 , 要访问子组件身上的 <code>data</code> 属性中的值 , 需要使用 <code>this</code> 来访问</p>\n<h2 id=\"为什么组件中的-data-属性必须定义为一个方法并返回一个对象\"><a href=\"#为什么组件中的-data-属性必须定义为一个方法并返回一个对象\" class=\"headerlink\" title=\"为什么组件中的 data 属性必须定义为一个方法并返回一个对象\"></a>为什么组件中的 <code>data</code> 属性必须定义为一个方法并返回一个对象</h2><p>如果不用 <code>return</code> , 每个组件的 <code>data</code> 的内存都是同一个地址 , 那么一个数据改变其他数据也改变了 , 这当然就不是我们想要的 , 用 <code>return</code> 其实就相当于申明了新的变量 , 相互独立 , 自然就不会有这样的问题</p>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><p>定义组件</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;global-component&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>我是全局组件<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">span</span>&gt;</span>&#123;&#123;num&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;globalComponent&quot;</span>&gt;</span>全局组件按钮<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">&quot;global-component&quot;</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">&quot;#global-component&quot;</span>,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"attr\">num</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">methods</span>: &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">globalComponent</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.num++;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>引用</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">global-component</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;global-component&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">global-component</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">global-component</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;global-component&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">global-component</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">global-component</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;global-component&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">global-component</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>这样各个组件的数据不会相互干扰</strong></p>\n<h2 id=\"使用-components-属性定义局部子组件\"><a href=\"#使用-components-属性定义局部子组件\" class=\"headerlink\" title=\"使用 components 属性定义局部子组件\"></a>使用 components 属性定义局部子组件</h2><p>在 <code>Vue</code> 实例里用 <code>components</code> 定义局部组件</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">&quot;#app&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">data</span>: &#123;&#125;,</span><br><span class=\"line\">  <span class=\"attr\">methods</span>: &#123;&#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 局部组件</span></span><br><span class=\"line\">  <span class=\"attr\">components</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 局部组件名</span></span><br><span class=\"line\">    <span class=\"string\">&quot;part-component&quot;</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">template</span>: <span class=\"string\">&quot;#part-component&quot;</span>,</span><br><span class=\"line\">      <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;&#125;;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"attr\">methods</span>: &#123;&#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>引用</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">part-component</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">part-component</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用-flag-标识符结合-v-if-和-v-else-切换组件\"><a href=\"#使用-flag-标识符结合-v-if-和-v-else-切换组件\" class=\"headerlink\" title=\"使用 flag 标识符结合 v-if 和 v-else 切换组件\"></a>使用 flag 标识符结合 v-if 和 v-else 切换组件</h2><p>定义组件</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;part-component&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 使用 flag 标识符结合 v-if 和 v-else 切换组件 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">v-if</span>=<span class=\"string\">&quot;flag&quot;</span>&gt;</span>&#123;&#123;partComponentMsg1&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">v-else</span>&gt;</span>&#123;&#123;partComponentMsg2&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;partComponentClick&quot;</span>&gt;</span>局部组件按钮<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">&quot;#app&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">componentName</span>: <span class=\"string\">&quot;part-component&quot;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">methods</span>: &#123;&#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 局部组件</span></span><br><span class=\"line\">  <span class=\"attr\">components</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;part-component&quot;</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">template</span>: <span class=\"string\">&quot;#part-component&quot;</span>,</span><br><span class=\"line\">      <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">          <span class=\"attr\">flag</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          <span class=\"attr\">partComponentMsg1</span>: <span class=\"string\">&quot;我是局部组件的数据 1&quot;</span>,</span><br><span class=\"line\">          <span class=\"attr\">partComponentMsg2</span>: <span class=\"string\">&quot;我是局部组件的数据 2&quot;</span>,</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"attr\">methods</span>: &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">partComponentClick</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">          <span class=\"built_in\">this</span>.flag = !<span class=\"built_in\">this</span>.flag;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>引用</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">part-component</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">part-component</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用-is-属性来切换不同的子组件\"><a href=\"#使用-is-属性来切换不同的子组件\" class=\"headerlink\" title=\"使用 :is 属性来切换不同的子组件\"></a>使用 <code>:is</code> 属性来切换不同的子组件</h2><p>定义组件</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;part-component&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&gt;组件<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>组件按钮<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在 <code>data</code> 里定义属性值</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">&quot;#app&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">componentName</span>: <span class=\"string\">&quot;part-component&quot;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>引用</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 使用 component 标签 , 来引用组件 , 并通过 :is 属性来指定要加载的组件 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">:is</span>=<span class=\"string\">&quot;componentName&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span>  </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"添加切换动画\"><a href=\"#添加切换动画\" class=\"headerlink\" title=\"添加切换动画\"></a>添加切换动画</h2><a class=\"btn-beautify button--animated green larger\" href=\"https://codehhr.github.io/vue-daily/component-switching.html\" \n  title=\"在线预览\"><i class=\"far fa-hand-point-right\"></i><span>在线预览</span></a>\n\n<h3 id=\"定义组件示例\"><a href=\"#定义组件示例\" class=\"headerlink\" title=\"定义组件示例\"></a>定义组件示例</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;login&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>登录<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;register&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>注册<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">&quot;login&quot;</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">&quot;#login&quot;</span>,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">Vue.component(<span class=\"string\">&quot;register&quot;</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">&quot;#register&quot;</span>,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用-component-标签-来引用组件-并通过-is-属性来指定要加载的组件\"><a href=\"#使用-component-标签-来引用组件-并通过-is-属性来指定要加载的组件\" class=\"headerlink\" title=\"使用 component 标签 , 来引用组件 , 并通过:is 属性来指定要加载的组件\"></a>使用 component 标签 , 来引用组件 , 并通过<code>:is</code> 属性来指定要加载的组件</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;comName=&#x27;login&#x27;&quot;</span>&gt;</span>登录<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;comName=&#x27;register&#x27;&quot;</span>&gt;</span>个人中心<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">transition</span> <span class=\"attr\">mode</span>=<span class=\"string\">&quot;out-in&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">component</span> <span class=\"attr\">:is</span>=<span class=\"string\">&quot;comName&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">component</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">transition</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>默认显示 <code>login</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">&quot;#app&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">comName</span>: <span class=\"string\">&quot;login&quot;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">methods</span>: &#123;&#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加切换样式\"><a href=\"#添加切换样式\" class=\"headerlink\" title=\"添加切换样式\"></a>添加切换样式</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.v-enter</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">transform</span>: <span class=\"built_in\">translateX</span>(-<span class=\"number\">40px</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.v-leave-to</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">opacity</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">transform</span>: <span class=\"built_in\">translateX</span>(<span class=\"number\">40px</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.v-enter-active</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.v-leave-active</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">transition</span>: all <span class=\"number\">0.5s</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"Vue 生命周期 和 Vue-resource","date":"2021-07-21T06:50:30.000Z","updated":"2021-07-22T14:14:38.544Z","keywords":null,"description":null,"top_img":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg","cover":"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/desktop.png","comments":1,"copyright":null,"copyright_author":null,"copyright_author_href":null,"copyright_url":null,"copyright_info":null,"_content":"\n# 什么是生命周期\n\n从 `Vue` 实例创建 , 运行 , 到销毁期间 , 总是伴随着各种各样的事件 , 这些事件 , 统称为生命周期 !\n\n# vue 生命周期钩子函数\n\n每个 `Vue` 实例在被创建时都要经过一系列的初始化过程——例如 , 需要设置数据监听 , 编译模板 , 将实例挂载到 `DOM` 并在数据变化时更新 `DOM` 等 , 同时在这个过程中也会运行一些叫做生命周期钩子的函数 , 这给了用户在不同阶段添加自己的代码的机会\n\n**`生命周期函数`=`生命周期事件`=`生命周期钩子`**\n\n# vue 生命周期\n\n![vue 生命周期](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vuebasic/vuelifecycle.png)\n\n**详解**\n\n![vue 生命周期](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vuebasic/vuelifecycledetail.png)\n\n{% hideToggle Vue生命周期函数 %}\n\n```html\n<!-- 引入 Vue -->\n<script src=\"https://cdn.bootcdn.net/ajax/libs/vue/2.6.14/vue.js\"></script>\n\n<div id=\"app\">{{msg}}</div>\n\n<script>\n  let vm = new Vue({\n    el: \"#app\",\n    data: {\n      msg: \"Hello World\",\n    },\n    methods: {},\n    beforeCreate() {\n      // 这是我们遇到的第一个生命周期函数\n      // 在 beforeCrate 生命周期函数执行的时候, data 和 methods 中的数据还没初始化\n      console.log(\"beforeCreate\");\n      console.log(this.msg); // -> undefined\n    },\n    created() {\n      // 此时 data 和 methods 中的数据已经好了始化\n      // 如果要调用 methods 中的方法或操作 data 里的数据,最早只能在 created 中操作\n      console.log(\"created\");\n      console.log(this.msg); // -> Hello World\n    },\n    beforeMount() {\n      // 此时模板已在内存中编译好了,还未渲染到页面上,页面还是旧的\n      console.log(\"beforeMount\");\n    },\n    mounted() {\n      // 执行完 mounted ,就表示这个 Vue 示例已经初始化完毕了\n      // 如果要通过某些插件操作页面上的 DOM 节点,最早要在 mounted 中进行\n      console.log(\"mounted\");\n    },\n    beforeUpdate() {\n      // 当 data 里的数据改变后会执行 beforeUpdate\n      // 此时页面显示的数据还是旧的, data 里的数据是最新的,页面尚未和数据保持同步\n      console.log(\"beforeUpdate\");\n    },\n\n    // beforeUpdate 执行后,在内存里会渲染出一份最新的 内存 DOM 树,会重新渲染到真是的页面上去\n    // 这时候,就完成了数据从 data(model层) -> view(视图层) 的更新\n\n    updated() {\n      // updated 执行的时候,页面和 data 数据已经保持同步了,都是最新的\n      console.log(\"updated\");\n    },\n    beforeDestroy() {\n      // 准备销毁实例\n      // 此时还没有真正的执行销毁,还处于可用的状态\n    },\n    destroyed() {\n      // 当执行到 destroyed函数的时候,组件已经被完全销毁了,data,methods,指令,过滤器...已经不可用了\n    },\n  });\n</script>\n```\n\n{% endhideToggle %}\n\n# vue-resource 的使用\n\n- 直接在页面中 , 通过 `script` 标签 , 引入 `vue-resource` 的脚本文件 ;\n- 注意：引用的先后顺序是: 先引用 `Vue` 的脚本文件 , 再引用 `vue-resource` 的脚本文件\n\n```html\n<!-- 引入 vue.js -->\n<script src=\"https://cdn.bootcdn.net/ajax/libs/vue/2.6.14/vue.js\"></script>\n<!-- 引入 vue-resource.js -->\n<script src=\"https://cdn.bootcdn.net/ajax/libs/vue-resource/1.5.3/vue-resource.js\"></script>\n```\n\n**如果想在页面加载的时候就请求,可以写在 `update` 生命周期函数里**\n\n## get 请求\n\n```js\n// get 请求\nthis.$http\n  .get(\"http://wkt.myhope365.com/weChat/applet/course/banner/list?number=2\")\n  .then((res) => {\n    console.log(res);\n  })\n  .catch((e) => {\n    console.log(e);\n  });\n```\n\n## post 请求\n\n```js\n// post请求\n// post 方法接收三个参数：\n//    参数1： 要请求的 URL 地址\n//    参数2： 要发送的数据对象\n//    参数3： 指定 post 提交的编码类型为 application/x-www-form-urlencoded 或 application/json\nthis.$http\n  .post(\n    \"http://wkt.myhope365.com/weChat/applet/subject/list\",\n    { enable: 1 },\n    { emulateJSON: false }\n  )\n  .then((res) => {\n    console.log(res);\n  });\n```\n\n# The_End\n","source":"_posts/vue/vue-lifecycle-and-vue-resource.md","raw":"---\ntitle: Vue 生命周期 和 Vue-resource\ndate: 2021-07-21 14:50:30\nupdated:\ntags:\n  - Vue\n  - Vue 生命周期\n  - Vue-resource\ncategories:\n  - Vue\n  - Vue基础\nkeywords:\ndescription:\ntop_img: https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg\ncover:\ncomments:\ncopyright:\ncopyright_author:\ncopyright_author_href:\ncopyright_url:\ncopyright_info:\n---\n\n# 什么是生命周期\n\n从 `Vue` 实例创建 , 运行 , 到销毁期间 , 总是伴随着各种各样的事件 , 这些事件 , 统称为生命周期 !\n\n# vue 生命周期钩子函数\n\n每个 `Vue` 实例在被创建时都要经过一系列的初始化过程——例如 , 需要设置数据监听 , 编译模板 , 将实例挂载到 `DOM` 并在数据变化时更新 `DOM` 等 , 同时在这个过程中也会运行一些叫做生命周期钩子的函数 , 这给了用户在不同阶段添加自己的代码的机会\n\n**`生命周期函数`=`生命周期事件`=`生命周期钩子`**\n\n# vue 生命周期\n\n![vue 生命周期](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vuebasic/vuelifecycle.png)\n\n**详解**\n\n![vue 生命周期](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vuebasic/vuelifecycledetail.png)\n\n{% hideToggle Vue生命周期函数 %}\n\n```html\n<!-- 引入 Vue -->\n<script src=\"https://cdn.bootcdn.net/ajax/libs/vue/2.6.14/vue.js\"></script>\n\n<div id=\"app\">{{msg}}</div>\n\n<script>\n  let vm = new Vue({\n    el: \"#app\",\n    data: {\n      msg: \"Hello World\",\n    },\n    methods: {},\n    beforeCreate() {\n      // 这是我们遇到的第一个生命周期函数\n      // 在 beforeCrate 生命周期函数执行的时候, data 和 methods 中的数据还没初始化\n      console.log(\"beforeCreate\");\n      console.log(this.msg); // -> undefined\n    },\n    created() {\n      // 此时 data 和 methods 中的数据已经好了始化\n      // 如果要调用 methods 中的方法或操作 data 里的数据,最早只能在 created 中操作\n      console.log(\"created\");\n      console.log(this.msg); // -> Hello World\n    },\n    beforeMount() {\n      // 此时模板已在内存中编译好了,还未渲染到页面上,页面还是旧的\n      console.log(\"beforeMount\");\n    },\n    mounted() {\n      // 执行完 mounted ,就表示这个 Vue 示例已经初始化完毕了\n      // 如果要通过某些插件操作页面上的 DOM 节点,最早要在 mounted 中进行\n      console.log(\"mounted\");\n    },\n    beforeUpdate() {\n      // 当 data 里的数据改变后会执行 beforeUpdate\n      // 此时页面显示的数据还是旧的, data 里的数据是最新的,页面尚未和数据保持同步\n      console.log(\"beforeUpdate\");\n    },\n\n    // beforeUpdate 执行后,在内存里会渲染出一份最新的 内存 DOM 树,会重新渲染到真是的页面上去\n    // 这时候,就完成了数据从 data(model层) -> view(视图层) 的更新\n\n    updated() {\n      // updated 执行的时候,页面和 data 数据已经保持同步了,都是最新的\n      console.log(\"updated\");\n    },\n    beforeDestroy() {\n      // 准备销毁实例\n      // 此时还没有真正的执行销毁,还处于可用的状态\n    },\n    destroyed() {\n      // 当执行到 destroyed函数的时候,组件已经被完全销毁了,data,methods,指令,过滤器...已经不可用了\n    },\n  });\n</script>\n```\n\n{% endhideToggle %}\n\n# vue-resource 的使用\n\n- 直接在页面中 , 通过 `script` 标签 , 引入 `vue-resource` 的脚本文件 ;\n- 注意：引用的先后顺序是: 先引用 `Vue` 的脚本文件 , 再引用 `vue-resource` 的脚本文件\n\n```html\n<!-- 引入 vue.js -->\n<script src=\"https://cdn.bootcdn.net/ajax/libs/vue/2.6.14/vue.js\"></script>\n<!-- 引入 vue-resource.js -->\n<script src=\"https://cdn.bootcdn.net/ajax/libs/vue-resource/1.5.3/vue-resource.js\"></script>\n```\n\n**如果想在页面加载的时候就请求,可以写在 `update` 生命周期函数里**\n\n## get 请求\n\n```js\n// get 请求\nthis.$http\n  .get(\"http://wkt.myhope365.com/weChat/applet/course/banner/list?number=2\")\n  .then((res) => {\n    console.log(res);\n  })\n  .catch((e) => {\n    console.log(e);\n  });\n```\n\n## post 请求\n\n```js\n// post请求\n// post 方法接收三个参数：\n//    参数1： 要请求的 URL 地址\n//    参数2： 要发送的数据对象\n//    参数3： 指定 post 提交的编码类型为 application/x-www-form-urlencoded 或 application/json\nthis.$http\n  .post(\n    \"http://wkt.myhope365.com/weChat/applet/subject/list\",\n    { enable: 1 },\n    { emulateJSON: false }\n  )\n  .then((res) => {\n    console.log(res);\n  });\n```\n\n# The_End\n","slug":"vue/vue-lifecycle-and-vue-resource","published":1,"layout":"post","photos":[],"link":"","_id":"cksvxwnot004ogubq3di0doby","content":"<h1 id=\"什么是生命周期\"><a href=\"#什么是生命周期\" class=\"headerlink\" title=\"什么是生命周期\"></a>什么是生命周期</h1><p>从 <code>Vue</code> 实例创建 , 运行 , 到销毁期间 , 总是伴随着各种各样的事件 , 这些事件 , 统称为生命周期 !</p>\n<h1 id=\"vue-生命周期钩子函数\"><a href=\"#vue-生命周期钩子函数\" class=\"headerlink\" title=\"vue 生命周期钩子函数\"></a>vue 生命周期钩子函数</h1><p>每个 <code>Vue</code> 实例在被创建时都要经过一系列的初始化过程——例如 , 需要设置数据监听 , 编译模板 , 将实例挂载到 <code>DOM</code> 并在数据变化时更新 <code>DOM</code> 等 , 同时在这个过程中也会运行一些叫做生命周期钩子的函数 , 这给了用户在不同阶段添加自己的代码的机会</p>\n<p><strong><code>生命周期函数</code>=<code>生命周期事件</code>=<code>生命周期钩子</code></strong></p>\n<h1 id=\"vue-生命周期\"><a href=\"#vue-生命周期\" class=\"headerlink\" title=\"vue 生命周期\"></a>vue 生命周期</h1><p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vuebasic/vuelifecycle.png\" alt=\"vue 生命周期\"></p>\n<p><strong>详解</strong></p>\n<p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vuebasic/vuelifecycledetail.png\" alt=\"vue 生命周期\"></p>\n<div class=\"hide-toggle\" ><div class=\"hide-button toggle-title\" style=\"\"><i class=\"fas fa-caret-right fa-fw\"></i><span>Vue生命周期函数</span></div>\n    <div class=\"hide-content\"><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 引入 Vue --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.14/vue.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">let</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">el</span>: <span class=\"string\">&quot;#app&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">data</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"attr\">msg</span>: <span class=\"string\">&quot;Hello World&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">methods</span>: &#123;&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"title\">beforeCreate</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"comment\">// 这是我们遇到的第一个生命周期函数</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"comment\">// 在 beforeCrate 生命周期函数执行的时候, data 和 methods 中的数据还没初始化</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;beforeCreate&quot;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.msg); <span class=\"comment\">// -&gt; undefined</span></span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"title\">created</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"comment\">// 此时 data 和 methods 中的数据已经好了始化</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"comment\">// 如果要调用 methods 中的方法或操作 data 里的数据,最早只能在 created 中操作</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;created&quot;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.msg); <span class=\"comment\">// -&gt; Hello World</span></span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"title\">beforeMount</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"comment\">// 此时模板已在内存中编译好了,还未渲染到页面上,页面还是旧的</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;beforeMount&quot;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"title\">mounted</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"comment\">// 执行完 mounted ,就表示这个 Vue 示例已经初始化完毕了</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"comment\">// 如果要通过某些插件操作页面上的 DOM 节点,最早要在 mounted 中进行</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;mounted&quot;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"title\">beforeUpdate</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"comment\">// 当 data 里的数据改变后会执行 beforeUpdate</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"comment\">// 此时页面显示的数据还是旧的, data 里的数据是最新的,页面尚未和数据保持同步</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;beforeUpdate&quot;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// beforeUpdate 执行后,在内存里会渲染出一份最新的 内存 DOM 树,会重新渲染到真是的页面上去</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 这时候,就完成了数据从 data(model层) -&gt; view(视图层) 的更新</span></span></span><br><span class=\"line\"><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"title\">updated</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"comment\">// updated 执行的时候,页面和 data 数据已经保持同步了,都是最新的</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;updated&quot;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"title\">beforeDestroy</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"comment\">// 准备销毁实例</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"comment\">// 此时还没有真正的执行销毁,还处于可用的状态</span></span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"title\">destroyed</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"comment\">// 当执行到 destroyed函数的时候,组件已经被完全销毁了,data,methods,指令,过滤器...已经不可用了</span></span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">  &#125;);</span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</div></div>\n\n<h1 id=\"vue-resource-的使用\"><a href=\"#vue-resource-的使用\" class=\"headerlink\" title=\"vue-resource 的使用\"></a>vue-resource 的使用</h1><ul>\n<li>直接在页面中 , 通过 <code>script</code> 标签 , 引入 <code>vue-resource</code> 的脚本文件 ;</li>\n<li>注意：引用的先后顺序是: 先引用 <code>Vue</code> 的脚本文件 , 再引用 <code>vue-resource</code> 的脚本文件</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 引入 vue.js --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.14/vue.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 引入 vue-resource.js --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.bootcdn.net/ajax/libs/vue-resource/1.5.3/vue-resource.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>如果想在页面加载的时候就请求,可以写在 <code>update</code> 生命周期函数里</strong></p>\n<h2 id=\"get-请求\"><a href=\"#get-请求\" class=\"headerlink\" title=\"get 请求\"></a>get 请求</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// get 请求</span></span><br><span class=\"line\"><span class=\"built_in\">this</span>.$http</span><br><span class=\"line\">  .get(<span class=\"string\">&quot;http://wkt.myhope365.com/weChat/applet/course/banner/list?number=2&quot;</span>)</span><br><span class=\"line\">  .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .catch(<span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(e);</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"post-请求\"><a href=\"#post-请求\" class=\"headerlink\" title=\"post 请求\"></a>post 请求</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// post请求</span></span><br><span class=\"line\"><span class=\"comment\">// post 方法接收三个参数：</span></span><br><span class=\"line\"><span class=\"comment\">//    参数1： 要请求的 URL 地址</span></span><br><span class=\"line\"><span class=\"comment\">//    参数2： 要发送的数据对象</span></span><br><span class=\"line\"><span class=\"comment\">//    参数3： 指定 post 提交的编码类型为 application/x-www-form-urlencoded 或 application/json</span></span><br><span class=\"line\"><span class=\"built_in\">this</span>.$http</span><br><span class=\"line\">  .post(</span><br><span class=\"line\">    <span class=\"string\">&quot;http://wkt.myhope365.com/weChat/applet/subject/list&quot;</span>,</span><br><span class=\"line\">    &#123; <span class=\"attr\">enable</span>: <span class=\"number\">1</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">emulateJSON</span>: <span class=\"literal\">false</span> &#125;</span><br><span class=\"line\">  )</span><br><span class=\"line\">  .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"The-End\"><a href=\"#The-End\" class=\"headerlink\" title=\"The_End\"></a>The_End</h1>","site":{"data":{"link":{"class1":{"class_name":"舍友","link_list":{"1":{"name":"codeAntg","link":"https://blog.csdn.net/weixin_44745147","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/fjh.jpg","descr":"那家刀削面不错","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class2":{"class_name":"致谢","link_list":{"1":{"name":"JerrC","link":"https://immyw.com","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/immyw.png","descr":"今日事,今日毕","width":"1px","style":"solid","color":"#60d0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/hexo.svg","descr":"A fast, simple & powerful blog framework","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class3":{"class_name":"友人","link_list":{"1":{"name":"Chester","link":"http://chesterlds.cn","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/chester.jpg","descr":null,"width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Wangs","link":"https://wangsss.cn/","avatar":"https://wangsss.cn/img/avatar.png","descr":"不疯魔，不成活 ~","width":"1px","style":"solid","color":"#9d9d9d","custom":"link_custom1","time":"4s","namecolor":"0094ff","descolor":"#ff9191"}}}}}},"excerpt":"","more":"<h1 id=\"什么是生命周期\"><a href=\"#什么是生命周期\" class=\"headerlink\" title=\"什么是生命周期\"></a>什么是生命周期</h1><p>从 <code>Vue</code> 实例创建 , 运行 , 到销毁期间 , 总是伴随着各种各样的事件 , 这些事件 , 统称为生命周期 !</p>\n<h1 id=\"vue-生命周期钩子函数\"><a href=\"#vue-生命周期钩子函数\" class=\"headerlink\" title=\"vue 生命周期钩子函数\"></a>vue 生命周期钩子函数</h1><p>每个 <code>Vue</code> 实例在被创建时都要经过一系列的初始化过程——例如 , 需要设置数据监听 , 编译模板 , 将实例挂载到 <code>DOM</code> 并在数据变化时更新 <code>DOM</code> 等 , 同时在这个过程中也会运行一些叫做生命周期钩子的函数 , 这给了用户在不同阶段添加自己的代码的机会</p>\n<p><strong><code>生命周期函数</code>=<code>生命周期事件</code>=<code>生命周期钩子</code></strong></p>\n<h1 id=\"vue-生命周期\"><a href=\"#vue-生命周期\" class=\"headerlink\" title=\"vue 生命周期\"></a>vue 生命周期</h1><p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vuebasic/vuelifecycle.png\" alt=\"vue 生命周期\"></p>\n<p><strong>详解</strong></p>\n<p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vuebasic/vuelifecycledetail.png\" alt=\"vue 生命周期\"></p>\n<div class=\"hide-toggle\" ><div class=\"hide-button toggle-title\" style=\"\"><i class=\"fas fa-caret-right fa-fw\"></i><span>Vue生命周期函数</span></div>\n    <div class=\"hide-content\"><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 引入 Vue --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.14/vue.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"keyword\">let</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">el</span>: <span class=\"string\">&quot;#app&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">data</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"attr\">msg</span>: <span class=\"string\">&quot;Hello World&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"attr\">methods</span>: &#123;&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"title\">beforeCreate</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"comment\">// 这是我们遇到的第一个生命周期函数</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"comment\">// 在 beforeCrate 生命周期函数执行的时候, data 和 methods 中的数据还没初始化</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;beforeCreate&quot;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.msg); <span class=\"comment\">// -&gt; undefined</span></span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"title\">created</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"comment\">// 此时 data 和 methods 中的数据已经好了始化</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"comment\">// 如果要调用 methods 中的方法或操作 data 里的数据,最早只能在 created 中操作</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;created&quot;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.msg); <span class=\"comment\">// -&gt; Hello World</span></span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"title\">beforeMount</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"comment\">// 此时模板已在内存中编译好了,还未渲染到页面上,页面还是旧的</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;beforeMount&quot;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"title\">mounted</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"comment\">// 执行完 mounted ,就表示这个 Vue 示例已经初始化完毕了</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"comment\">// 如果要通过某些插件操作页面上的 DOM 节点,最早要在 mounted 中进行</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;mounted&quot;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"title\">beforeUpdate</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"comment\">// 当 data 里的数据改变后会执行 beforeUpdate</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"comment\">// 此时页面显示的数据还是旧的, data 里的数据是最新的,页面尚未和数据保持同步</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;beforeUpdate&quot;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// beforeUpdate 执行后,在内存里会渲染出一份最新的 内存 DOM 树,会重新渲染到真是的页面上去</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 这时候,就完成了数据从 data(model层) -&gt; view(视图层) 的更新</span></span></span><br><span class=\"line\"><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"title\">updated</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"comment\">// updated 执行的时候,页面和 data 数据已经保持同步了,都是最新的</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;updated&quot;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"title\">beforeDestroy</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"comment\">// 准备销毁实例</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"comment\">// 此时还没有真正的执行销毁,还处于可用的状态</span></span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"title\">destroyed</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"comment\">// 当执行到 destroyed函数的时候,组件已经被完全销毁了,data,methods,指令,过滤器...已经不可用了</span></span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">  &#125;);</span></span><br><span class=\"line\"><span class=\"javascript\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</div></div>\n\n<h1 id=\"vue-resource-的使用\"><a href=\"#vue-resource-的使用\" class=\"headerlink\" title=\"vue-resource 的使用\"></a>vue-resource 的使用</h1><ul>\n<li>直接在页面中 , 通过 <code>script</code> 标签 , 引入 <code>vue-resource</code> 的脚本文件 ;</li>\n<li>注意：引用的先后顺序是: 先引用 <code>Vue</code> 的脚本文件 , 再引用 <code>vue-resource</code> 的脚本文件</li>\n</ul>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 引入 vue.js --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.14/vue.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 引入 vue-resource.js --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.bootcdn.net/ajax/libs/vue-resource/1.5.3/vue-resource.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>如果想在页面加载的时候就请求,可以写在 <code>update</code> 生命周期函数里</strong></p>\n<h2 id=\"get-请求\"><a href=\"#get-请求\" class=\"headerlink\" title=\"get 请求\"></a>get 请求</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// get 请求</span></span><br><span class=\"line\"><span class=\"built_in\">this</span>.$http</span><br><span class=\"line\">  .get(<span class=\"string\">&quot;http://wkt.myhope365.com/weChat/applet/course/banner/list?number=2&quot;</span>)</span><br><span class=\"line\">  .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .catch(<span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(e);</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"post-请求\"><a href=\"#post-请求\" class=\"headerlink\" title=\"post 请求\"></a>post 请求</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// post请求</span></span><br><span class=\"line\"><span class=\"comment\">// post 方法接收三个参数：</span></span><br><span class=\"line\"><span class=\"comment\">//    参数1： 要请求的 URL 地址</span></span><br><span class=\"line\"><span class=\"comment\">//    参数2： 要发送的数据对象</span></span><br><span class=\"line\"><span class=\"comment\">//    参数3： 指定 post 提交的编码类型为 application/x-www-form-urlencoded 或 application/json</span></span><br><span class=\"line\"><span class=\"built_in\">this</span>.$http</span><br><span class=\"line\">  .post(</span><br><span class=\"line\">    <span class=\"string\">&quot;http://wkt.myhope365.com/weChat/applet/subject/list&quot;</span>,</span><br><span class=\"line\">    &#123; <span class=\"attr\">enable</span>: <span class=\"number\">1</span> &#125;,</span><br><span class=\"line\">    &#123; <span class=\"attr\">emulateJSON</span>: <span class=\"literal\">false</span> &#125;</span><br><span class=\"line\">  )</span><br><span class=\"line\">  .then(<span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">  &#125;);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"The-End\"><a href=\"#The-End\" class=\"headerlink\" title=\"The_End\"></a>The_End</h1>"},{"title":"Vue ref 的使用","date":"2021-07-25T09:27:02.000Z","updated":"2021-07-25T09:34:47.324Z","keywords":null,"description":null,"top_img":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg","cover":"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/desktop.png","comments":1,"copyright":null,"copyright_author":null,"copyright_author_href":null,"copyright_url":null,"copyright_info":null,"_content":"\n# 获取 dom 节点\n\n- 给 `dom` 节点记上 `ref` 属性 , 可以理解为给 `dom` 节点起了个名字\n- 加上 `ref` 之后 , 在 `$refs` 属性中多了这个元素的引用\n- 通过 `Vue` 实例的 `$refs` 属性拿到这个 `dom` 元素\n\n# 获取组件\n\n- 给组件记上 `ref` 属性 , 可以理解为给组件起了个名字\n- 加上 `ref` 之后 , 在 `$refs` 属性中多了这个组件的引用\n- 通过 `Vue` 实例的 `$refs` 属性拿到这个组件的引用 , 之后可以通过这个引用调用子组件的方法 , 或者获取子组件的数据\n\n# 在线预览\n\n{% btn 'https:/vue-daily.netlify.app/ref.html',在线预览,far fa-hand-point-right,green larger %}\n\n# 代码\n\n{% hideToggle Vue ref 的使用 %}\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Document</title>\n    <script src=\"https://cdn.bootcdn.net/ajax/libs/vue/2.6.14/vue.js\"></script>\n    <!-- <script src='https://codehhr.github.io/web/vue.js'></script> -->\n  </head>\n  <body>\n    <div id=\"app\">\n      <button ref=\"btn\" id=\"btn\">按钮</button>\n      <my-template ref=\"mycomponent\" id=\"my-component\"></my-template>\n    </div>\n\n    <template id=\"my-template\">\n      <div>\n        <h1>组件</h1>\n      </div>\n    </template>\n    <script>\n      Vue.config.devtools = true;\n      Vue.component(\"my-template\", {\n        template: \"#my-template\",\n        data() {\n          return {\n            msg: \"myComponent\",\n          };\n        },\n      });\n      let vm = new Vue({\n        el: \"#app\",\n        data: {},\n        methods: {},\n        mounted() {\n          console.log(document.querySelector(\"#btn\"));\n          console.log(this.$refs.btn);\n          console.log(document.querySelector(\"#my-component\"));\n          console.log(this.$refs.mycomponent.msg);\n        },\n      });\n    </script>\n  </body>\n</html>\n```\n\n{% endhideToggle %}\n","source":"_posts/vue/vue-ref.md","raw":"---\ntitle: Vue ref 的使用\ndate: 2021-07-25 17:27:02\nupdated:\ntags:\ncategories:\nkeywords:\ndescription:\ntop_img: https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg\ncover:\ncomments:\ncopyright:\ncopyright_author:\ncopyright_author_href:\ncopyright_url:\ncopyright_info:\n---\n\n# 获取 dom 节点\n\n- 给 `dom` 节点记上 `ref` 属性 , 可以理解为给 `dom` 节点起了个名字\n- 加上 `ref` 之后 , 在 `$refs` 属性中多了这个元素的引用\n- 通过 `Vue` 实例的 `$refs` 属性拿到这个 `dom` 元素\n\n# 获取组件\n\n- 给组件记上 `ref` 属性 , 可以理解为给组件起了个名字\n- 加上 `ref` 之后 , 在 `$refs` 属性中多了这个组件的引用\n- 通过 `Vue` 实例的 `$refs` 属性拿到这个组件的引用 , 之后可以通过这个引用调用子组件的方法 , 或者获取子组件的数据\n\n# 在线预览\n\n{% btn 'https:/vue-daily.netlify.app/ref.html',在线预览,far fa-hand-point-right,green larger %}\n\n# 代码\n\n{% hideToggle Vue ref 的使用 %}\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Document</title>\n    <script src=\"https://cdn.bootcdn.net/ajax/libs/vue/2.6.14/vue.js\"></script>\n    <!-- <script src='https://codehhr.github.io/web/vue.js'></script> -->\n  </head>\n  <body>\n    <div id=\"app\">\n      <button ref=\"btn\" id=\"btn\">按钮</button>\n      <my-template ref=\"mycomponent\" id=\"my-component\"></my-template>\n    </div>\n\n    <template id=\"my-template\">\n      <div>\n        <h1>组件</h1>\n      </div>\n    </template>\n    <script>\n      Vue.config.devtools = true;\n      Vue.component(\"my-template\", {\n        template: \"#my-template\",\n        data() {\n          return {\n            msg: \"myComponent\",\n          };\n        },\n      });\n      let vm = new Vue({\n        el: \"#app\",\n        data: {},\n        methods: {},\n        mounted() {\n          console.log(document.querySelector(\"#btn\"));\n          console.log(this.$refs.btn);\n          console.log(document.querySelector(\"#my-component\"));\n          console.log(this.$refs.mycomponent.msg);\n        },\n      });\n    </script>\n  </body>\n</html>\n```\n\n{% endhideToggle %}\n","slug":"vue/vue-ref","published":1,"layout":"post","photos":[],"link":"","_id":"cksvxwnov004rgubqarhd46b4","content":"<h1 id=\"获取-dom-节点\"><a href=\"#获取-dom-节点\" class=\"headerlink\" title=\"获取 dom 节点\"></a>获取 dom 节点</h1><ul>\n<li>给 <code>dom</code> 节点记上 <code>ref</code> 属性 , 可以理解为给 <code>dom</code> 节点起了个名字</li>\n<li>加上 <code>ref</code> 之后 , 在 <code>$refs</code> 属性中多了这个元素的引用</li>\n<li>通过 <code>Vue</code> 实例的 <code>$refs</code> 属性拿到这个 <code>dom</code> 元素</li>\n</ul>\n<h1 id=\"获取组件\"><a href=\"#获取组件\" class=\"headerlink\" title=\"获取组件\"></a>获取组件</h1><ul>\n<li>给组件记上 <code>ref</code> 属性 , 可以理解为给组件起了个名字</li>\n<li>加上 <code>ref</code> 之后 , 在 <code>$refs</code> 属性中多了这个组件的引用</li>\n<li>通过 <code>Vue</code> 实例的 <code>$refs</code> 属性拿到这个组件的引用 , 之后可以通过这个引用调用子组件的方法 , 或者获取子组件的数据</li>\n</ul>\n<h1 id=\"在线预览\"><a href=\"#在线预览\" class=\"headerlink\" title=\"在线预览\"></a>在线预览</h1><a class=\"btn-beautify button--animated green larger\" href=\"https:/vue-daily.netlify.app/ref.html\" \n  title=\"在线预览\"><i class=\"far fa-hand-point-right\"></i><span>在线预览</span></a>\n\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><div class=\"hide-toggle\" ><div class=\"hide-button toggle-title\" style=\"\"><i class=\"fas fa-caret-right fa-fw\"></i><span>Vue ref 的使用</span></div>\n    <div class=\"hide-content\"><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.14/vue.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- &lt;script src=&#x27;https://codehhr.github.io/web/vue.js&#x27;&gt;&lt;/script&gt; --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;btn&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;btn&quot;</span>&gt;</span>按钮<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">my-template</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;mycomponent&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;my-component&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;my-template&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>组件<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">      Vue.config.devtools = <span class=\"literal\">true</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">      Vue.component(<span class=\"string\">&quot;my-template&quot;</span>, &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"attr\">template</span>: <span class=\"string\">&quot;#my-template&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"attr\">msg</span>: <span class=\"string\">&quot;myComponent&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">          &#125;;</span></span><br><span class=\"line\"><span class=\"javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">      &#125;);</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">let</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"attr\">el</span>: <span class=\"string\">&quot;#app&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"attr\">data</span>: &#123;&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"attr\">methods</span>: &#123;&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"function\"><span class=\"title\">mounted</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;#btn&quot;</span>));</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.$refs.btn);</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;#my-component&quot;</span>));</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.$refs.mycomponent.msg);</span></span><br><span class=\"line\"><span class=\"javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">      &#125;);</span></span><br><span class=\"line\"><span class=\"javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</div></div>\n","site":{"data":{"link":{"class1":{"class_name":"舍友","link_list":{"1":{"name":"codeAntg","link":"https://blog.csdn.net/weixin_44745147","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/fjh.jpg","descr":"那家刀削面不错","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class2":{"class_name":"致谢","link_list":{"1":{"name":"JerrC","link":"https://immyw.com","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/immyw.png","descr":"今日事,今日毕","width":"1px","style":"solid","color":"#60d0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/hexo.svg","descr":"A fast, simple & powerful blog framework","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class3":{"class_name":"友人","link_list":{"1":{"name":"Chester","link":"http://chesterlds.cn","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/chester.jpg","descr":null,"width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Wangs","link":"https://wangsss.cn/","avatar":"https://wangsss.cn/img/avatar.png","descr":"不疯魔，不成活 ~","width":"1px","style":"solid","color":"#9d9d9d","custom":"link_custom1","time":"4s","namecolor":"0094ff","descolor":"#ff9191"}}}}}},"excerpt":"","more":"<h1 id=\"获取-dom-节点\"><a href=\"#获取-dom-节点\" class=\"headerlink\" title=\"获取 dom 节点\"></a>获取 dom 节点</h1><ul>\n<li>给 <code>dom</code> 节点记上 <code>ref</code> 属性 , 可以理解为给 <code>dom</code> 节点起了个名字</li>\n<li>加上 <code>ref</code> 之后 , 在 <code>$refs</code> 属性中多了这个元素的引用</li>\n<li>通过 <code>Vue</code> 实例的 <code>$refs</code> 属性拿到这个 <code>dom</code> 元素</li>\n</ul>\n<h1 id=\"获取组件\"><a href=\"#获取组件\" class=\"headerlink\" title=\"获取组件\"></a>获取组件</h1><ul>\n<li>给组件记上 <code>ref</code> 属性 , 可以理解为给组件起了个名字</li>\n<li>加上 <code>ref</code> 之后 , 在 <code>$refs</code> 属性中多了这个组件的引用</li>\n<li>通过 <code>Vue</code> 实例的 <code>$refs</code> 属性拿到这个组件的引用 , 之后可以通过这个引用调用子组件的方法 , 或者获取子组件的数据</li>\n</ul>\n<h1 id=\"在线预览\"><a href=\"#在线预览\" class=\"headerlink\" title=\"在线预览\"></a>在线预览</h1><a class=\"btn-beautify button--animated green larger\" href=\"https:/vue-daily.netlify.app/ref.html\" \n  title=\"在线预览\"><i class=\"far fa-hand-point-right\"></i><span>在线预览</span></a>\n\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><div class=\"hide-toggle\" ><div class=\"hide-button toggle-title\" style=\"\"><i class=\"fas fa-caret-right fa-fw\"></i><span>Vue ref 的使用</span></div>\n    <div class=\"hide-content\"><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.14/vue.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- &lt;script src=&#x27;https://codehhr.github.io/web/vue.js&#x27;&gt;&lt;/script&gt; --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;btn&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;btn&quot;</span>&gt;</span>按钮<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">my-template</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;mycomponent&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;my-component&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">my-template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;my-template&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>组件<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">      Vue.config.devtools = <span class=\"literal\">true</span>;</span></span><br><span class=\"line\"><span class=\"javascript\">      Vue.component(<span class=\"string\">&quot;my-template&quot;</span>, &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"attr\">template</span>: <span class=\"string\">&quot;#my-template&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"attr\">msg</span>: <span class=\"string\">&quot;myComponent&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">          &#125;;</span></span><br><span class=\"line\"><span class=\"javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">      &#125;);</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">let</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"attr\">el</span>: <span class=\"string\">&quot;#app&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"attr\">data</span>: &#123;&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"attr\">methods</span>: &#123;&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"function\"><span class=\"title\">mounted</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;#btn&quot;</span>));</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.$refs.btn);</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"built_in\">console</span>.log(<span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;#my-component&quot;</span>));</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.$refs.mycomponent.msg);</span></span><br><span class=\"line\"><span class=\"javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">      &#125;);</span></span><br><span class=\"line\"><span class=\"javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</div></div>\n"},{"title":"Vue 中路由的使用","date":"2021-07-25T09:36:06.000Z","updated":"2021-08-11T14:09:35.136Z","keywords":null,"description":null,"top_img":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg","cover":"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/desktop.png","comments":1,"copyright":null,"copyright_author":null,"copyright_author_href":null,"copyright_url":null,"copyright_info":null,"_content":"\n# 什么是路由\n\n- 后端路由 : 对于普通的网站 , 所有的超链接都是 URL 地址 , 所有的 `URL` 地址都对应服务器上对应的资源\n- 前端路由 : 对于单页面应用程序来说 , 主要通过 URL 中的 `hash` ( `#` 号 ) 来实现不同页面之间的切换 , 同时 , `hash` 有一个特点 : `HTTP` 请求中不会包含 `hash` 相关的内容 ; 所以 , 单页面程序中的页面跳转主要用 `hash` 实现;\n- 在单页面应用程序中 , 这种通过 `hash` 改变来切换页面的方式 , 称作前端路由 ( 区别于后端路由 )\n\n{% btn 'https://router.vuejs.org/zh/',中文官网,far fa-hand-point-right,green larger %}\n\n# 路由的基本使用\n\n- 引入 `js` 文件 , 这个 `js` 需要放在 `vue.js`的后面 , 自动安装 ( 提供了一个 `VueRouter` 的构造方法 )\n- 创建路由 `new VueRouter()` , 接受的参数是一个对象\n- 在实例化的对象里配置属性 `routes:[]` , 这个数组里的对象包含 `path` 属性和 `component` 属性\n- `path` 属性是 `url` , `component` 属性就是显示的组件 ( 传组件的对象 )\n- 创建的路由需要和 `vue` 实例关联一下\n- 路由到的组件显示在哪个位置 `<router-view></router-view>`\n\n## 示例\n\n引入 `vue-router.js`\n\n```html\n<script src=\"https://cdn.bootcdn.net/ajax/libs/vue/2.6.14/vue.js\"></script>\n<script src=\"https://cdn.bootcdn.net/ajax/libs/vue-router/3.5.2/vue-router.js\"></script>\n```\n\n```html\n<body>\n  <div id=\"app\">\n    <!-- 通过路由切换的组件会显示在这里 -->\n    <router-view></router-view>\n  </div>\n\n  <template id=\"login\">\n    <div>\n      <h1>登录</h1>\n    </div>\n  </template>\n\n  <script>\n    const login = {\n      template: \"#login\",\n    };\n\n    // 这里实例化了一个路由\n    const router = new VueRouter({\n      routes: [\n        {\n          path: \"/login\",\n          //这里需要注意的是直接把组件的对象放在这里\n          component: login,\n        },\n      ],\n    });\n\n    let vm = new Vue({\n      el: \"#app\",\n      // 把路由挂在到实例上\n      router: router,\n    });\n  </script>\n</body>\n```\n\n# 路由的跳转\n\n- `router-link` 标签可以设置 `to` 属性\n- 默认是 `a` 标签 , 可以通过 `tag` 设置包裹标签\n\n**示例**\n\n```html\n<router-link to=\"/login\">登录</router-link>\n<router-link to=\"/register\">注册</router-link>\n```\n\n# 路由重定向\n\n`redirect` 可以进行路由的重定向\n\n{% btn 'https://vue-daily.netlify.app/vue-router.html',在线演示,far fa-hand-point-right,green larger %}\n\n```html\n<template id=\"home\">\n  <div><h1>Home</h1></div>\n</template>\n<template id=\"blog\">\n  <div><h1>Blog</h1></div>\n</template>\n```\n\n```js\nlet home = {\n    template: \"#home\",\n};\n}\nlet blog = {\n    template: \"#blog\",\n};\n\nconst router = new VueRouter({\n  routes: [\n    {\n      path: \"/home\",\n      redirect: \"/blog\",\n    },\n    {\n      path: \"/blog\",\n      component: blog,\n    },\n  ],\n});\n```\n\n# 选中路由高亮\n\n{% btn 'https://vue-daily.netlify.app/vue-router.html',在线演示,far fa-hand-point-right,green larger %}\n\n- 使用默认的样式\n  直接设置 `.router-link-active`\n- 自定义样式\n  配置  `linkActiveClass:'自定义的类名'`\n\n```js\nconst router = new VueRouter({\n  routes: [\n    {\n      path: \"/index\",\n      component: index,\n    },\n  ],\n  linkActiveClass: \"router-active\",\n});\n```\n\n# 定义参数\n\n## 通过 `query` 的方式在 `url` 后加 `?参数名=参数的值`\n\n获取参数 : `$route.query.参数名`\n\n## 使用浏览器参数的方式传递参数\n\n- 设置路由的时候 `/路由地址/:参数名`\n- 获取参数 `$route.params.参数名`\n\n# 示例\n\n{% hideToggle 路由传惨 %}\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Document</title>\n    <script src=\"https://cdn.bootcdn.net/ajax/libs/vue/2.6.14/vue.js\"></script>\n    <script src=\"https://cdn.bootcdn.net/ajax/libs/vue-router/3.5.2/vue-router.js\"></script>\n    <!-- <script src='https://codehhr.github.io/web/vue.js'></script> -->\n    <style>\n      #app {\n        margin: 100px auto;\n        width: 1200px;\n      }\n      .router-link-active {\n        font-size: 2rem;\n        color: #ffffff;\n        background-color: #5e6466;\n      }\n      a {\n        margin: 0 2px;\n      }\n      a.router-active {\n        font-weight: 800;\n        font-size: 2rem;\n        color: #ffffff;\n        background-color: #5e6466;\n      }\n    </style>\n  </head>\n  <body>\n    <div id=\"app\">\n      <router-link to=\"/index\">Index</router-link>\n      <router-link to=\"/home\">Home</router-link>\n      <router-link to=\"/blog?categories=vue&tag=vue-touter\">Blog</router-link>\n      <!-- <router-link :to=\"{path:'/about?page=2'}\">About</router-link> -->\n      <router-link\n        :to=\"{path:'/about',query:{\n          id:1,\n          page:2\n      }}\"\n        >About</router-link\n      >\n      <!-- 观察地址变化 -->\n      <router-link\n        v-for=\"(item,index) in list\"\n        :key=\"item.id\"\n        :to=\"{\n        path:'/about',\n        query:{id:item.id,page:item.content}\n      }\"\n      >\n        {{item.content}}\n      </router-link>\n\n      <router-link :to=\"{name:'detail',params:{id:2}}\">Detail</router-link>\n      <router-view></router-view>\n    </div>\n\n    <template id=\"index\">\n      <div><h1>Index</h1></div>\n    </template>\n    <template id=\"home\">\n      <div><h1>Home</h1></div>\n    </template>\n    <template id=\"about\">\n      <div><h1>About</h1></div>\n    </template>\n    <template id=\"blog\">\n      <div><h1>Blog</h1></div>\n    </template>\n    <template id=\"detail\">\n      <div>\n        <h1>Detail</h1>\n      </div>\n    </template>\n\n    <script>\n      let index = {\n        template: \"#index\",\n      };\n      let home = {\n        template: \"#home\",\n      };\n      let about = {\n        template: \"#about\",\n        created() {\n          console.log(this.$route.query);\n        },\n      };\n      let blog = {\n        template: \"#blog\",\n        created() {\n          console.log(this.$route.query);\n        },\n      };\n      let detail = {\n        template: \"#detail\",\n        created() {\n          console.log(this.$route.params);\n        },\n      };\n\n      const router = new VueRouter({\n        routes: [\n          {\n            path: \"/index\",\n            component: index,\n          },\n          {\n            path: \"/home\",\n            component: home,\n          },\n          {\n            path: \"/blog\",\n            component: blog,\n          },\n          {\n            path: \"/about\",\n            component: about,\n          },\n          {\n            path: \"/detail/:id\",\n            component: detail,\n            name: \"detail\",\n          },\n        ],\n        linkActiveClass: \"router-active\",\n      });\n\n      let vm = new Vue({\n        el: \"#app\",\n        data: {\n          list: [\n            { id: 1, content: \"A\" },\n            { id: 2, content: \"B\" },\n            { id: 3, content: \"C\" },\n          ],\n        },\n        methods: {},\n        // 把路由挂在到实例上\n        router,\n      });\n    </script>\n  </body>\n</html>\n```\n\n{% endhideToggle %}\n","source":"_posts/vue/vue-router.md","raw":"---\ntitle: Vue 中路由的使用\ndate: 2021-07-25 17:36:06\nupdated:\ntags:\n  - Vue\n  - Vue-router\ncategories:\n  - Vue\n  - Vue基础\nkeywords:\ndescription:\ntop_img: https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg\ncover:\ncomments:\ncopyright:\ncopyright_author:\ncopyright_author_href:\ncopyright_url:\ncopyright_info:\n---\n\n# 什么是路由\n\n- 后端路由 : 对于普通的网站 , 所有的超链接都是 URL 地址 , 所有的 `URL` 地址都对应服务器上对应的资源\n- 前端路由 : 对于单页面应用程序来说 , 主要通过 URL 中的 `hash` ( `#` 号 ) 来实现不同页面之间的切换 , 同时 , `hash` 有一个特点 : `HTTP` 请求中不会包含 `hash` 相关的内容 ; 所以 , 单页面程序中的页面跳转主要用 `hash` 实现;\n- 在单页面应用程序中 , 这种通过 `hash` 改变来切换页面的方式 , 称作前端路由 ( 区别于后端路由 )\n\n{% btn 'https://router.vuejs.org/zh/',中文官网,far fa-hand-point-right,green larger %}\n\n# 路由的基本使用\n\n- 引入 `js` 文件 , 这个 `js` 需要放在 `vue.js`的后面 , 自动安装 ( 提供了一个 `VueRouter` 的构造方法 )\n- 创建路由 `new VueRouter()` , 接受的参数是一个对象\n- 在实例化的对象里配置属性 `routes:[]` , 这个数组里的对象包含 `path` 属性和 `component` 属性\n- `path` 属性是 `url` , `component` 属性就是显示的组件 ( 传组件的对象 )\n- 创建的路由需要和 `vue` 实例关联一下\n- 路由到的组件显示在哪个位置 `<router-view></router-view>`\n\n## 示例\n\n引入 `vue-router.js`\n\n```html\n<script src=\"https://cdn.bootcdn.net/ajax/libs/vue/2.6.14/vue.js\"></script>\n<script src=\"https://cdn.bootcdn.net/ajax/libs/vue-router/3.5.2/vue-router.js\"></script>\n```\n\n```html\n<body>\n  <div id=\"app\">\n    <!-- 通过路由切换的组件会显示在这里 -->\n    <router-view></router-view>\n  </div>\n\n  <template id=\"login\">\n    <div>\n      <h1>登录</h1>\n    </div>\n  </template>\n\n  <script>\n    const login = {\n      template: \"#login\",\n    };\n\n    // 这里实例化了一个路由\n    const router = new VueRouter({\n      routes: [\n        {\n          path: \"/login\",\n          //这里需要注意的是直接把组件的对象放在这里\n          component: login,\n        },\n      ],\n    });\n\n    let vm = new Vue({\n      el: \"#app\",\n      // 把路由挂在到实例上\n      router: router,\n    });\n  </script>\n</body>\n```\n\n# 路由的跳转\n\n- `router-link` 标签可以设置 `to` 属性\n- 默认是 `a` 标签 , 可以通过 `tag` 设置包裹标签\n\n**示例**\n\n```html\n<router-link to=\"/login\">登录</router-link>\n<router-link to=\"/register\">注册</router-link>\n```\n\n# 路由重定向\n\n`redirect` 可以进行路由的重定向\n\n{% btn 'https://vue-daily.netlify.app/vue-router.html',在线演示,far fa-hand-point-right,green larger %}\n\n```html\n<template id=\"home\">\n  <div><h1>Home</h1></div>\n</template>\n<template id=\"blog\">\n  <div><h1>Blog</h1></div>\n</template>\n```\n\n```js\nlet home = {\n    template: \"#home\",\n};\n}\nlet blog = {\n    template: \"#blog\",\n};\n\nconst router = new VueRouter({\n  routes: [\n    {\n      path: \"/home\",\n      redirect: \"/blog\",\n    },\n    {\n      path: \"/blog\",\n      component: blog,\n    },\n  ],\n});\n```\n\n# 选中路由高亮\n\n{% btn 'https://vue-daily.netlify.app/vue-router.html',在线演示,far fa-hand-point-right,green larger %}\n\n- 使用默认的样式\n  直接设置 `.router-link-active`\n- 自定义样式\n  配置  `linkActiveClass:'自定义的类名'`\n\n```js\nconst router = new VueRouter({\n  routes: [\n    {\n      path: \"/index\",\n      component: index,\n    },\n  ],\n  linkActiveClass: \"router-active\",\n});\n```\n\n# 定义参数\n\n## 通过 `query` 的方式在 `url` 后加 `?参数名=参数的值`\n\n获取参数 : `$route.query.参数名`\n\n## 使用浏览器参数的方式传递参数\n\n- 设置路由的时候 `/路由地址/:参数名`\n- 获取参数 `$route.params.参数名`\n\n# 示例\n\n{% hideToggle 路由传惨 %}\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\" />\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n    <title>Document</title>\n    <script src=\"https://cdn.bootcdn.net/ajax/libs/vue/2.6.14/vue.js\"></script>\n    <script src=\"https://cdn.bootcdn.net/ajax/libs/vue-router/3.5.2/vue-router.js\"></script>\n    <!-- <script src='https://codehhr.github.io/web/vue.js'></script> -->\n    <style>\n      #app {\n        margin: 100px auto;\n        width: 1200px;\n      }\n      .router-link-active {\n        font-size: 2rem;\n        color: #ffffff;\n        background-color: #5e6466;\n      }\n      a {\n        margin: 0 2px;\n      }\n      a.router-active {\n        font-weight: 800;\n        font-size: 2rem;\n        color: #ffffff;\n        background-color: #5e6466;\n      }\n    </style>\n  </head>\n  <body>\n    <div id=\"app\">\n      <router-link to=\"/index\">Index</router-link>\n      <router-link to=\"/home\">Home</router-link>\n      <router-link to=\"/blog?categories=vue&tag=vue-touter\">Blog</router-link>\n      <!-- <router-link :to=\"{path:'/about?page=2'}\">About</router-link> -->\n      <router-link\n        :to=\"{path:'/about',query:{\n          id:1,\n          page:2\n      }}\"\n        >About</router-link\n      >\n      <!-- 观察地址变化 -->\n      <router-link\n        v-for=\"(item,index) in list\"\n        :key=\"item.id\"\n        :to=\"{\n        path:'/about',\n        query:{id:item.id,page:item.content}\n      }\"\n      >\n        {{item.content}}\n      </router-link>\n\n      <router-link :to=\"{name:'detail',params:{id:2}}\">Detail</router-link>\n      <router-view></router-view>\n    </div>\n\n    <template id=\"index\">\n      <div><h1>Index</h1></div>\n    </template>\n    <template id=\"home\">\n      <div><h1>Home</h1></div>\n    </template>\n    <template id=\"about\">\n      <div><h1>About</h1></div>\n    </template>\n    <template id=\"blog\">\n      <div><h1>Blog</h1></div>\n    </template>\n    <template id=\"detail\">\n      <div>\n        <h1>Detail</h1>\n      </div>\n    </template>\n\n    <script>\n      let index = {\n        template: \"#index\",\n      };\n      let home = {\n        template: \"#home\",\n      };\n      let about = {\n        template: \"#about\",\n        created() {\n          console.log(this.$route.query);\n        },\n      };\n      let blog = {\n        template: \"#blog\",\n        created() {\n          console.log(this.$route.query);\n        },\n      };\n      let detail = {\n        template: \"#detail\",\n        created() {\n          console.log(this.$route.params);\n        },\n      };\n\n      const router = new VueRouter({\n        routes: [\n          {\n            path: \"/index\",\n            component: index,\n          },\n          {\n            path: \"/home\",\n            component: home,\n          },\n          {\n            path: \"/blog\",\n            component: blog,\n          },\n          {\n            path: \"/about\",\n            component: about,\n          },\n          {\n            path: \"/detail/:id\",\n            component: detail,\n            name: \"detail\",\n          },\n        ],\n        linkActiveClass: \"router-active\",\n      });\n\n      let vm = new Vue({\n        el: \"#app\",\n        data: {\n          list: [\n            { id: 1, content: \"A\" },\n            { id: 2, content: \"B\" },\n            { id: 3, content: \"C\" },\n          ],\n        },\n        methods: {},\n        // 把路由挂在到实例上\n        router,\n      });\n    </script>\n  </body>\n</html>\n```\n\n{% endhideToggle %}\n","slug":"vue/vue-router","published":1,"layout":"post","photos":[],"link":"","_id":"cksvxwnow004sgubq05vrbzj8","content":"<h1 id=\"什么是路由\"><a href=\"#什么是路由\" class=\"headerlink\" title=\"什么是路由\"></a>什么是路由</h1><ul>\n<li>后端路由 : 对于普通的网站 , 所有的超链接都是 URL 地址 , 所有的 <code>URL</code> 地址都对应服务器上对应的资源</li>\n<li>前端路由 : 对于单页面应用程序来说 , 主要通过 URL 中的 <code>hash</code> ( <code>#</code> 号 ) 来实现不同页面之间的切换 , 同时 , <code>hash</code> 有一个特点 : <code>HTTP</code> 请求中不会包含 <code>hash</code> 相关的内容 ; 所以 , 单页面程序中的页面跳转主要用 <code>hash</code> 实现;</li>\n<li>在单页面应用程序中 , 这种通过 <code>hash</code> 改变来切换页面的方式 , 称作前端路由 ( 区别于后端路由 )</li>\n</ul>\n<a class=\"btn-beautify button--animated green larger\" href=\"https://router.vuejs.org/zh/\" \n  title=\"中文官网\"><i class=\"far fa-hand-point-right\"></i><span>中文官网</span></a>\n\n<h1 id=\"路由的基本使用\"><a href=\"#路由的基本使用\" class=\"headerlink\" title=\"路由的基本使用\"></a>路由的基本使用</h1><ul>\n<li>引入 <code>js</code> 文件 , 这个 <code>js</code> 需要放在 <code>vue.js</code>的后面 , 自动安装 ( 提供了一个 <code>VueRouter</code> 的构造方法 )</li>\n<li>创建路由 <code>new VueRouter()</code> , 接受的参数是一个对象</li>\n<li>在实例化的对象里配置属性 <code>routes:[]</code> , 这个数组里的对象包含 <code>path</code> 属性和 <code>component</code> 属性</li>\n<li><code>path</code> 属性是 <code>url</code> , <code>component</code> 属性就是显示的组件 ( 传组件的对象 )</li>\n<li>创建的路由需要和 <code>vue</code> 实例关联一下</li>\n<li>路由到的组件显示在哪个位置 <code>&lt;router-view&gt;&lt;/router-view&gt;</code></li>\n</ul>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><p>引入 <code>vue-router.js</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.14/vue.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.bootcdn.net/ajax/libs/vue-router/3.5.2/vue-router.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 通过路由切换的组件会显示在这里 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">router-view</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-view</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;login&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>登录<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> login = &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"attr\">template</span>: <span class=\"string\">&quot;#login&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;;</span></span><br><span class=\"line\"><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 这里实例化了一个路由</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> VueRouter(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"attr\">routes</span>: [</span></span><br><span class=\"line\"><span class=\"javascript\">        &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"attr\">path</span>: <span class=\"string\">&quot;/login&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"comment\">//这里需要注意的是直接把组件的对象放在这里</span></span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"attr\">component</span>: login,</span></span><br><span class=\"line\"><span class=\"javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">      ],</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;);</span></span><br><span class=\"line\"><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">let</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"attr\">el</span>: <span class=\"string\">&quot;#app&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"comment\">// 把路由挂在到实例上</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"attr\">router</span>: router,</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;);</span></span><br><span class=\"line\"><span class=\"javascript\">  </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"路由的跳转\"><a href=\"#路由的跳转\" class=\"headerlink\" title=\"路由的跳转\"></a>路由的跳转</h1><ul>\n<li><code>router-link</code> 标签可以设置 <code>to</code> 属性</li>\n<li>默认是 <code>a</code> 标签 , 可以通过 <code>tag</code> 设置包裹标签</li>\n</ul>\n<p><strong>示例</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">to</span>=<span class=\"string\">&quot;/login&quot;</span>&gt;</span>登录<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">to</span>=<span class=\"string\">&quot;/register&quot;</span>&gt;</span>注册<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"路由重定向\"><a href=\"#路由重定向\" class=\"headerlink\" title=\"路由重定向\"></a>路由重定向</h1><p><code>redirect</code> 可以进行路由的重定向</p>\n<a class=\"btn-beautify button--animated green larger\" href=\"https://vue-daily.netlify.app/vue-router.html\" \n  title=\"在线演示\"><i class=\"far fa-hand-point-right\"></i><span>在线演示</span></a>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;home&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;blog&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Blog<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> home = &#123;</span><br><span class=\"line\">    <span class=\"attr\">template</span>: <span class=\"string\">&quot;#home&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> blog = &#123;</span><br><span class=\"line\">    <span class=\"attr\">template</span>: <span class=\"string\">&quot;#blog&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> VueRouter(&#123;</span><br><span class=\"line\">  <span class=\"attr\">routes</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">path</span>: <span class=\"string\">&quot;/home&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">redirect</span>: <span class=\"string\">&quot;/blog&quot;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">path</span>: <span class=\"string\">&quot;/blog&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">component</span>: blog,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"选中路由高亮\"><a href=\"#选中路由高亮\" class=\"headerlink\" title=\"选中路由高亮\"></a>选中路由高亮</h1><a class=\"btn-beautify button--animated green larger\" href=\"https://vue-daily.netlify.app/vue-router.html\" \n  title=\"在线演示\"><i class=\"far fa-hand-point-right\"></i><span>在线演示</span></a>\n\n<ul>\n<li>使用默认的样式<br>直接设置 <code>.router-link-active</code></li>\n<li>自定义样式<br>配置  <code>linkActiveClass:&#39;自定义的类名&#39;</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> VueRouter(&#123;</span><br><span class=\"line\">  <span class=\"attr\">routes</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">path</span>: <span class=\"string\">&quot;/index&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">component</span>: index,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">linkActiveClass</span>: <span class=\"string\">&quot;router-active&quot;</span>,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"定义参数\"><a href=\"#定义参数\" class=\"headerlink\" title=\"定义参数\"></a>定义参数</h1><h2 id=\"通过-query-的方式在-url-后加-参数名-参数的值\"><a href=\"#通过-query-的方式在-url-后加-参数名-参数的值\" class=\"headerlink\" title=\"通过 query 的方式在 url 后加 ?参数名=参数的值\"></a>通过 <code>query</code> 的方式在 <code>url</code> 后加 <code>?参数名=参数的值</code></h2><p>获取参数 : <code>$route.query.参数名</code></p>\n<h2 id=\"使用浏览器参数的方式传递参数\"><a href=\"#使用浏览器参数的方式传递参数\" class=\"headerlink\" title=\"使用浏览器参数的方式传递参数\"></a>使用浏览器参数的方式传递参数</h2><ul>\n<li>设置路由的时候 <code>/路由地址/:参数名</code></li>\n<li>获取参数 <code>$route.params.参数名</code></li>\n</ul>\n<h1 id=\"示例-1\"><a href=\"#示例-1\" class=\"headerlink\" title=\"示例\"></a>示例</h1><div class=\"hide-toggle\" ><div class=\"hide-button toggle-title\" style=\"\"><i class=\"fas fa-caret-right fa-fw\"></i><span>路由传惨</span></div>\n    <div class=\"hide-content\"><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.14/vue.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.bootcdn.net/ajax/libs/vue-router/3.5.2/vue-router.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- &lt;script src=&#x27;https://codehhr.github.io/web/vue.js&#x27;&gt;&lt;/script&gt; --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"css\"></span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-id\">#app</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">margin</span>: <span class=\"number\">100px</span> auto;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">width</span>: <span class=\"number\">1200px</span>;</span></span><br><span class=\"line\"><span class=\"css\">      &#125;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-class\">.router-link-active</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">font-size</span>: <span class=\"number\">2rem</span>;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">color</span>: <span class=\"number\">#ffffff</span>;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">background-color</span>: <span class=\"number\">#5e6466</span>;</span></span><br><span class=\"line\"><span class=\"css\">      &#125;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">a</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> <span class=\"number\">2px</span>;</span></span><br><span class=\"line\"><span class=\"css\">      &#125;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">a</span><span class=\"selector-class\">.router-active</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">font-weight</span>: <span class=\"number\">800</span>;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">font-size</span>: <span class=\"number\">2rem</span>;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">color</span>: <span class=\"number\">#ffffff</span>;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">background-color</span>: <span class=\"number\">#5e6466</span>;</span></span><br><span class=\"line\"><span class=\"css\">      &#125;</span></span><br><span class=\"line\"><span class=\"css\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">to</span>=<span class=\"string\">&quot;/index&quot;</span>&gt;</span>Index<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">to</span>=<span class=\"string\">&quot;/home&quot;</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">to</span>=<span class=\"string\">&quot;/blog?categories=vue&amp;tag=vue-touter&quot;</span>&gt;</span>Blog<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!-- &lt;router-link :to=&quot;&#123;path:&#x27;/about?page=2&#x27;&#125;&quot;&gt;About&lt;/router-link&gt; --&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">router-link</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">:to</span>=<span class=\"string\">&quot;&#123;path:&#x27;/about&#x27;,query:&#123;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">          id:1,</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">          page:2</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">      &#125;&#125;&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        &gt;</span>About&lt;/router-link</span><br><span class=\"line\">      &gt;</span><br><span class=\"line\">      <span class=\"comment\">&lt;!-- 观察地址变化 --&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">router-link</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;(item,index) in list&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">:key</span>=<span class=\"string\">&quot;item.id&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">:to</span>=<span class=\"string\">&quot;&#123;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">        path:&#x27;/about&#x27;,</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">        query:&#123;id:item.id,page:item.content&#125;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">      &#125;&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">      &gt;</span></span><br><span class=\"line\">        &#123;&#123;item.content&#125;&#125;</span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">:to</span>=<span class=\"string\">&quot;&#123;name:&#x27;detail&#x27;,params:&#123;id:2&#125;&#125;&quot;</span>&gt;</span>Detail<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">router-view</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-view</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;index&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Index<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;home&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;about&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>About<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;blog&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Blog<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;detail&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Detail<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">let</span> index = &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"attr\">template</span>: <span class=\"string\">&quot;#index&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">      &#125;;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">let</span> home = &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"attr\">template</span>: <span class=\"string\">&quot;#home&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">      &#125;;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">let</span> about = &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"attr\">template</span>: <span class=\"string\">&quot;#about&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"function\"><span class=\"title\">created</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.$route.query);</span></span><br><span class=\"line\"><span class=\"javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">      &#125;;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">let</span> blog = &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"attr\">template</span>: <span class=\"string\">&quot;#blog&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"function\"><span class=\"title\">created</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.$route.query);</span></span><br><span class=\"line\"><span class=\"javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">      &#125;;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">let</span> detail = &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"attr\">template</span>: <span class=\"string\">&quot;#detail&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"function\"><span class=\"title\">created</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.$route.params);</span></span><br><span class=\"line\"><span class=\"javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">      &#125;;</span></span><br><span class=\"line\"><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> VueRouter(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"attr\">routes</span>: [</span></span><br><span class=\"line\"><span class=\"javascript\">          &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"attr\">path</span>: <span class=\"string\">&quot;/index&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"attr\">component</span>: index,</span></span><br><span class=\"line\"><span class=\"javascript\">          &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">          &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"attr\">path</span>: <span class=\"string\">&quot;/home&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"attr\">component</span>: home,</span></span><br><span class=\"line\"><span class=\"javascript\">          &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">          &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"attr\">path</span>: <span class=\"string\">&quot;/blog&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"attr\">component</span>: blog,</span></span><br><span class=\"line\"><span class=\"javascript\">          &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">          &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"attr\">path</span>: <span class=\"string\">&quot;/about&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"attr\">component</span>: about,</span></span><br><span class=\"line\"><span class=\"javascript\">          &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">          &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"attr\">path</span>: <span class=\"string\">&quot;/detail/:id&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"attr\">component</span>: detail,</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"attr\">name</span>: <span class=\"string\">&quot;detail&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">          &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">        ],</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"attr\">linkActiveClass</span>: <span class=\"string\">&quot;router-active&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">      &#125;);</span></span><br><span class=\"line\"><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">let</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"attr\">el</span>: <span class=\"string\">&quot;#app&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"attr\">data</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"attr\">list</span>: [</span></span><br><span class=\"line\"><span class=\"javascript\">            &#123; <span class=\"attr\">id</span>: <span class=\"number\">1</span>, <span class=\"attr\">content</span>: <span class=\"string\">&quot;A&quot;</span> &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">            &#123; <span class=\"attr\">id</span>: <span class=\"number\">2</span>, <span class=\"attr\">content</span>: <span class=\"string\">&quot;B&quot;</span> &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">            &#123; <span class=\"attr\">id</span>: <span class=\"number\">3</span>, <span class=\"attr\">content</span>: <span class=\"string\">&quot;C&quot;</span> &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">          ],</span></span><br><span class=\"line\"><span class=\"javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"attr\">methods</span>: &#123;&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// 把路由挂在到实例上</span></span></span><br><span class=\"line\"><span class=\"javascript\">        router,</span></span><br><span class=\"line\"><span class=\"javascript\">      &#125;);</span></span><br><span class=\"line\"><span class=\"javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</div></div>\n","site":{"data":{"link":{"class1":{"class_name":"舍友","link_list":{"1":{"name":"codeAntg","link":"https://blog.csdn.net/weixin_44745147","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/fjh.jpg","descr":"那家刀削面不错","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class2":{"class_name":"致谢","link_list":{"1":{"name":"JerrC","link":"https://immyw.com","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/immyw.png","descr":"今日事,今日毕","width":"1px","style":"solid","color":"#60d0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/hexo.svg","descr":"A fast, simple & powerful blog framework","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class3":{"class_name":"友人","link_list":{"1":{"name":"Chester","link":"http://chesterlds.cn","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/chester.jpg","descr":null,"width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Wangs","link":"https://wangsss.cn/","avatar":"https://wangsss.cn/img/avatar.png","descr":"不疯魔，不成活 ~","width":"1px","style":"solid","color":"#9d9d9d","custom":"link_custom1","time":"4s","namecolor":"0094ff","descolor":"#ff9191"}}}}}},"excerpt":"","more":"<h1 id=\"什么是路由\"><a href=\"#什么是路由\" class=\"headerlink\" title=\"什么是路由\"></a>什么是路由</h1><ul>\n<li>后端路由 : 对于普通的网站 , 所有的超链接都是 URL 地址 , 所有的 <code>URL</code> 地址都对应服务器上对应的资源</li>\n<li>前端路由 : 对于单页面应用程序来说 , 主要通过 URL 中的 <code>hash</code> ( <code>#</code> 号 ) 来实现不同页面之间的切换 , 同时 , <code>hash</code> 有一个特点 : <code>HTTP</code> 请求中不会包含 <code>hash</code> 相关的内容 ; 所以 , 单页面程序中的页面跳转主要用 <code>hash</code> 实现;</li>\n<li>在单页面应用程序中 , 这种通过 <code>hash</code> 改变来切换页面的方式 , 称作前端路由 ( 区别于后端路由 )</li>\n</ul>\n<a class=\"btn-beautify button--animated green larger\" href=\"https://router.vuejs.org/zh/\" \n  title=\"中文官网\"><i class=\"far fa-hand-point-right\"></i><span>中文官网</span></a>\n\n<h1 id=\"路由的基本使用\"><a href=\"#路由的基本使用\" class=\"headerlink\" title=\"路由的基本使用\"></a>路由的基本使用</h1><ul>\n<li>引入 <code>js</code> 文件 , 这个 <code>js</code> 需要放在 <code>vue.js</code>的后面 , 自动安装 ( 提供了一个 <code>VueRouter</code> 的构造方法 )</li>\n<li>创建路由 <code>new VueRouter()</code> , 接受的参数是一个对象</li>\n<li>在实例化的对象里配置属性 <code>routes:[]</code> , 这个数组里的对象包含 <code>path</code> 属性和 <code>component</code> 属性</li>\n<li><code>path</code> 属性是 <code>url</code> , <code>component</code> 属性就是显示的组件 ( 传组件的对象 )</li>\n<li>创建的路由需要和 <code>vue</code> 实例关联一下</li>\n<li>路由到的组件显示在哪个位置 <code>&lt;router-view&gt;&lt;/router-view&gt;</code></li>\n</ul>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><p>引入 <code>vue-router.js</code></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.14/vue.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.bootcdn.net/ajax/libs/vue-router/3.5.2/vue-router.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 通过路由切换的组件会显示在这里 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">router-view</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-view</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;login&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>登录<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> login = &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"attr\">template</span>: <span class=\"string\">&quot;#login&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;;</span></span><br><span class=\"line\"><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 这里实例化了一个路由</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> VueRouter(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"attr\">routes</span>: [</span></span><br><span class=\"line\"><span class=\"javascript\">        &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"attr\">path</span>: <span class=\"string\">&quot;/login&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"comment\">//这里需要注意的是直接把组件的对象放在这里</span></span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"attr\">component</span>: login,</span></span><br><span class=\"line\"><span class=\"javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">      ],</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;);</span></span><br><span class=\"line\"><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">let</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"attr\">el</span>: <span class=\"string\">&quot;#app&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"comment\">// 把路由挂在到实例上</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"attr\">router</span>: router,</span></span><br><span class=\"line\"><span class=\"javascript\">    &#125;);</span></span><br><span class=\"line\"><span class=\"javascript\">  </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"路由的跳转\"><a href=\"#路由的跳转\" class=\"headerlink\" title=\"路由的跳转\"></a>路由的跳转</h1><ul>\n<li><code>router-link</code> 标签可以设置 <code>to</code> 属性</li>\n<li>默认是 <code>a</code> 标签 , 可以通过 <code>tag</code> 设置包裹标签</li>\n</ul>\n<p><strong>示例</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">to</span>=<span class=\"string\">&quot;/login&quot;</span>&gt;</span>登录<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">to</span>=<span class=\"string\">&quot;/register&quot;</span>&gt;</span>注册<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"路由重定向\"><a href=\"#路由重定向\" class=\"headerlink\" title=\"路由重定向\"></a>路由重定向</h1><p><code>redirect</code> 可以进行路由的重定向</p>\n<a class=\"btn-beautify button--animated green larger\" href=\"https://vue-daily.netlify.app/vue-router.html\" \n  title=\"在线演示\"><i class=\"far fa-hand-point-right\"></i><span>在线演示</span></a>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;home&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;blog&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Blog<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> home = &#123;</span><br><span class=\"line\">    <span class=\"attr\">template</span>: <span class=\"string\">&quot;#home&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> blog = &#123;</span><br><span class=\"line\">    <span class=\"attr\">template</span>: <span class=\"string\">&quot;#blog&quot;</span>,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> VueRouter(&#123;</span><br><span class=\"line\">  <span class=\"attr\">routes</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">path</span>: <span class=\"string\">&quot;/home&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">redirect</span>: <span class=\"string\">&quot;/blog&quot;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">path</span>: <span class=\"string\">&quot;/blog&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">component</span>: blog,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"选中路由高亮\"><a href=\"#选中路由高亮\" class=\"headerlink\" title=\"选中路由高亮\"></a>选中路由高亮</h1><a class=\"btn-beautify button--animated green larger\" href=\"https://vue-daily.netlify.app/vue-router.html\" \n  title=\"在线演示\"><i class=\"far fa-hand-point-right\"></i><span>在线演示</span></a>\n\n<ul>\n<li>使用默认的样式<br>直接设置 <code>.router-link-active</code></li>\n<li>自定义样式<br>配置  <code>linkActiveClass:&#39;自定义的类名&#39;</code></li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> VueRouter(&#123;</span><br><span class=\"line\">  <span class=\"attr\">routes</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">path</span>: <span class=\"string\">&quot;/index&quot;</span>,</span><br><span class=\"line\">      <span class=\"attr\">component</span>: index,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"attr\">linkActiveClass</span>: <span class=\"string\">&quot;router-active&quot;</span>,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"定义参数\"><a href=\"#定义参数\" class=\"headerlink\" title=\"定义参数\"></a>定义参数</h1><h2 id=\"通过-query-的方式在-url-后加-参数名-参数的值\"><a href=\"#通过-query-的方式在-url-后加-参数名-参数的值\" class=\"headerlink\" title=\"通过 query 的方式在 url 后加 ?参数名=参数的值\"></a>通过 <code>query</code> 的方式在 <code>url</code> 后加 <code>?参数名=参数的值</code></h2><p>获取参数 : <code>$route.query.参数名</code></p>\n<h2 id=\"使用浏览器参数的方式传递参数\"><a href=\"#使用浏览器参数的方式传递参数\" class=\"headerlink\" title=\"使用浏览器参数的方式传递参数\"></a>使用浏览器参数的方式传递参数</h2><ul>\n<li>设置路由的时候 <code>/路由地址/:参数名</code></li>\n<li>获取参数 <code>$route.params.参数名</code></li>\n</ul>\n<h1 id=\"示例-1\"><a href=\"#示例-1\" class=\"headerlink\" title=\"示例\"></a>示例</h1><div class=\"hide-toggle\" ><div class=\"hide-button toggle-title\" style=\"\"><i class=\"fas fa-caret-right fa-fw\"></i><span>路由传惨</span></div>\n    <div class=\"hide-content\"><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.bootcdn.net/ajax/libs/vue/2.6.14/vue.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.bootcdn.net/ajax/libs/vue-router/3.5.2/vue-router.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- &lt;script src=&#x27;https://codehhr.github.io/web/vue.js&#x27;&gt;&lt;/script&gt; --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span><span class=\"css\"></span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-id\">#app</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">margin</span>: <span class=\"number\">100px</span> auto;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">width</span>: <span class=\"number\">1200px</span>;</span></span><br><span class=\"line\"><span class=\"css\">      &#125;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-class\">.router-link-active</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">font-size</span>: <span class=\"number\">2rem</span>;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">color</span>: <span class=\"number\">#ffffff</span>;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">background-color</span>: <span class=\"number\">#5e6466</span>;</span></span><br><span class=\"line\"><span class=\"css\">      &#125;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">a</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> <span class=\"number\">2px</span>;</span></span><br><span class=\"line\"><span class=\"css\">      &#125;</span></span><br><span class=\"line\"><span class=\"css\">      <span class=\"selector-tag\">a</span><span class=\"selector-class\">.router-active</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">font-weight</span>: <span class=\"number\">800</span>;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">font-size</span>: <span class=\"number\">2rem</span>;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">color</span>: <span class=\"number\">#ffffff</span>;</span></span><br><span class=\"line\"><span class=\"css\">        <span class=\"attribute\">background-color</span>: <span class=\"number\">#5e6466</span>;</span></span><br><span class=\"line\"><span class=\"css\">      &#125;</span></span><br><span class=\"line\"><span class=\"css\">    </span><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">to</span>=<span class=\"string\">&quot;/index&quot;</span>&gt;</span>Index<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">to</span>=<span class=\"string\">&quot;/home&quot;</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">to</span>=<span class=\"string\">&quot;/blog?categories=vue&amp;tag=vue-touter&quot;</span>&gt;</span>Blog<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!-- &lt;router-link :to=&quot;&#123;path:&#x27;/about?page=2&#x27;&#125;&quot;&gt;About&lt;/router-link&gt; --&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">router-link</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">:to</span>=<span class=\"string\">&quot;&#123;path:&#x27;/about&#x27;,query:&#123;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">          id:1,</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">          page:2</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">      &#125;&#125;&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        &gt;</span>About&lt;/router-link</span><br><span class=\"line\">      &gt;</span><br><span class=\"line\">      <span class=\"comment\">&lt;!-- 观察地址变化 --&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">router-link</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">v-for</span>=<span class=\"string\">&quot;(item,index) in list&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">:key</span>=<span class=\"string\">&quot;item.id&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">:to</span>=<span class=\"string\">&quot;&#123;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">        path:&#x27;/about&#x27;,</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">        query:&#123;id:item.id,page:item.content&#125;</span></span></span><br><span class=\"line\"><span class=\"string\"><span class=\"tag\">      &#125;&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">      &gt;</span></span><br><span class=\"line\">        &#123;&#123;item.content&#125;&#125;</span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">router-link</span> <span class=\"attr\">:to</span>=<span class=\"string\">&quot;&#123;name:&#x27;detail&#x27;,params:&#123;id:2&#125;&#125;&quot;</span>&gt;</span>Detail<span class=\"tag\">&lt;/<span class=\"name\">router-link</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">router-view</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">router-view</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;index&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Index<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;home&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Home<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;about&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>About<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;blog&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Blog<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;detail&quot;</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Detail<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">let</span> index = &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"attr\">template</span>: <span class=\"string\">&quot;#index&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">      &#125;;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">let</span> home = &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"attr\">template</span>: <span class=\"string\">&quot;#home&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">      &#125;;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">let</span> about = &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"attr\">template</span>: <span class=\"string\">&quot;#about&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"function\"><span class=\"title\">created</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.$route.query);</span></span><br><span class=\"line\"><span class=\"javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">      &#125;;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">let</span> blog = &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"attr\">template</span>: <span class=\"string\">&quot;#blog&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"function\"><span class=\"title\">created</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.$route.query);</span></span><br><span class=\"line\"><span class=\"javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">      &#125;;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">let</span> detail = &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"attr\">template</span>: <span class=\"string\">&quot;#detail&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"function\"><span class=\"title\">created</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.$route.params);</span></span><br><span class=\"line\"><span class=\"javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">      &#125;;</span></span><br><span class=\"line\"><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">const</span> router = <span class=\"keyword\">new</span> VueRouter(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"attr\">routes</span>: [</span></span><br><span class=\"line\"><span class=\"javascript\">          &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"attr\">path</span>: <span class=\"string\">&quot;/index&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"attr\">component</span>: index,</span></span><br><span class=\"line\"><span class=\"javascript\">          &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">          &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"attr\">path</span>: <span class=\"string\">&quot;/home&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"attr\">component</span>: home,</span></span><br><span class=\"line\"><span class=\"javascript\">          &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">          &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"attr\">path</span>: <span class=\"string\">&quot;/blog&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"attr\">component</span>: blog,</span></span><br><span class=\"line\"><span class=\"javascript\">          &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">          &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"attr\">path</span>: <span class=\"string\">&quot;/about&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"attr\">component</span>: about,</span></span><br><span class=\"line\"><span class=\"javascript\">          &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">          &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"attr\">path</span>: <span class=\"string\">&quot;/detail/:id&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"attr\">component</span>: detail,</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"attr\">name</span>: <span class=\"string\">&quot;detail&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">          &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">        ],</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"attr\">linkActiveClass</span>: <span class=\"string\">&quot;router-active&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">      &#125;);</span></span><br><span class=\"line\"><span class=\"javascript\"></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">let</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"attr\">el</span>: <span class=\"string\">&quot;#app&quot;</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"attr\">data</span>: &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"attr\">list</span>: [</span></span><br><span class=\"line\"><span class=\"javascript\">            &#123; <span class=\"attr\">id</span>: <span class=\"number\">1</span>, <span class=\"attr\">content</span>: <span class=\"string\">&quot;A&quot;</span> &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">            &#123; <span class=\"attr\">id</span>: <span class=\"number\">2</span>, <span class=\"attr\">content</span>: <span class=\"string\">&quot;B&quot;</span> &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">            &#123; <span class=\"attr\">id</span>: <span class=\"number\">3</span>, <span class=\"attr\">content</span>: <span class=\"string\">&quot;C&quot;</span> &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">          ],</span></span><br><span class=\"line\"><span class=\"javascript\">        &#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"attr\">methods</span>: &#123;&#125;,</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"comment\">// 把路由挂在到实例上</span></span></span><br><span class=\"line\"><span class=\"javascript\">        router,</span></span><br><span class=\"line\"><span class=\"javascript\">      &#125;);</span></span><br><span class=\"line\"><span class=\"javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</div></div>\n"},{"title":"Vue slot 插槽","date":"2021-07-24T14:10:15.000Z","updated":"2021-07-24T15:34:47.826Z","keywords":null,"description":null,"top_img":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg","cover":"https://codehhr.coding.net/p/codehhr/d/wallpaper/git/raw/master/desktop.png","comments":1,"copyright":null,"copyright_author":null,"copyright_author_href":null,"copyright_url":null,"copyright_info":null,"_content":"\n# 什么是插槽\n\n{% note blue no-icon flat %}\n插槽就是子组件中的提供给父组件使用的一个占位符 , 用`<slot></slot>` 表示 , 父组件可以在这个占位符中填充任何模板代码 , 如 `HTML`、`组件`等 , 填充的内容会替换子组件的`<slot></slot>`标签\n{% endnote %}\n\n# 插槽的使用\n\n## 在子组件中放一个占位符\n\n```js\n// 定义一个子组件\nVue.component(\"child\", {\n  template: \"#child\",\n  data() {\n    return {\n      childMsg: \"我是子组件的内容\",\n    };\n  },\n});\n```\n\n```html\n<template id=\"child\">\n  <div>\n    <!-- 在子组件中放一个占位符 start -->\n    <slot></slot>\n    <!-- 在子组件中放一个占位符 end -->\n    <h1>{{childMsg}}</h1>\n  </div>\n</template>\n```\n\n## 在父组件中给这个占位符填充内容\n\n```js\nlet vm = new Vue({\n  el: \"#app\",\n  data: {\n    msg: \"我是父组件的内容\",\n  },\n  methods: {},\n});\n```\n\n```html\n<div id=\"app\">\n  <child>\n    <!-- 在父组件中给这个占位符填充内容 start -->\n    <template>\n      <div>{{msg}}</div>\n    </template>\n    <!-- 在父组件中给这个占位符填充内容 end -->\n  </child>\n</div>\n```\n\n{% btn 'https://codehhr.github.io/vue-daily/slot.html',展示效果,far fa-hand-point-right,green larger %}\n\n## 现在来看看 , 如果子组件中没有放插槽 , 同样的父组件中在子组件中填充内容 , 会是啥样的\n\n### 子组件代码无插槽\n\n```html\n<template id=\"child\">\n  <div>\n    <h1>{{childMsg}}</h1>\n  </div>\n</template>\n```\n\n### 父组件照常填充内容\n\n```html\n<div id=\"app\">\n  <child>\n    <!-- 父组件填充内容 start -->\n    <template>\n      <div>{{msg}}</div>\n    </template>\n    <!-- 父组件填充内容 end -->\n  </child>\n</div>\n```\n\n**最后结果是不会渲染上去**\n\n## 总结 : 如果子组件没有使用插槽 , 父组件如果需要往子组件中填充模板或者 `html` 是没法做到的\n\n# 具名插槽 和 默认插槽\n\n{% btn 'https://codehhr.github.io/vue-daily/slot-name.html',展示效果,far fa-hand-point-right,green larger %}\n\n<div style=\"height:20px\"></div>\n\n{% tabs slot %}\n\n<!-- tab 具名插槽 -->\n\n{% note blue no-icon flat %}\n描述 : 具名插槽其实就是给插槽取个名字 , 一个子组件可以放多个插槽 , 而且可以放在不同的地方 , 而父组件填充内容时 , 可以根据这个名字把内容填充到对应插槽中\n{% endnote %}\n\n## 子组件设置两个插槽 ( header , footer )\n\n```html\n<template id=\"child\">\n  <div>\n    <slot name=\"header\"></slot>\n    <h1>我是子组件</h1>\n    <slot name=\"footer\"></slot>\n  </div>\n</template>\n```\n\n```js\nVue.component(\"child\", {\n  template: \"#child\",\n});\n```\n\n## 父组件填充内容\n\n```js\nlet vm = new Vue({\n  el: \"#app\",\n  data: {\n    header: \"我是父组件的 Header\",\n    footer: \"我是父组件的 Footer\",\n    msg: \"父组件内容,不指定插槽名字,填充到默认插槽\",\n  },\n});\n```\n\n**父组件通过 `v-slot:name` 的方式指定到对应的插槽中**\n\n```html\n<div id=\"app\">\n  <child>\n    <template v-slot:header>\n      <a href=\"//h.codehhr.cn\"><h1>{{header}}</h1></a>\n    </template>\n    <template v-slot:footer>\n      <a href=\"//h.codehhr.cn\"><h1>{{footer}}</h1></a>\n    </template>\n  </child>\n</div>\n```\n\n即使父组件对插槽的填充的顺序打乱 , 只要名字对应上了 , 就可以正确渲染到对应的插槽中 , 即 : 父组件填充内容时 , 是可以根据这个名字把内容填充到对应插槽中的\n\n<!-- endtab -->\n\n<!-- tab 默认插槽 -->\n\n{% note blue no-icon flat %}\n描述 : 默认插槽就是指没有名字的插槽 , 子组件未定义的名字的插槽 , 父级将会把未指定插槽的填充的内容填充到默认插槽中\n{% endnote %}\n\n## 子组件代码定义了一个默认插槽\n\n```html\n<template id=\"child\">\n  <div>\n    <h1>我是子组件</h1>\n    <!-- 默认插槽 start -->\n    <slot></slot>\n    <!-- 默认插槽 end -->\n  </div>\n</template>\n```\n\n```js\nVue.component(\"child\", {\n  template: \"#child\",\n});\n```\n\n## 父组件上定义一个 `msg` 变量\n\n```js\nlet vm = new Vue({\n  el: \"#app\",\n  data: {\n    msg: \"父组件内容,不指定插槽名字,填充到默认插槽\",\n  },\n});\n```\n\n## 父组件给默认插槽填充内容\n\n```html\n<div id=\"app\">\n  <child>\n    <template>\n      <a href=\"//h.codehhr.cn\"><h1>{{msg}}</h1></a>\n    </template>\n    <!-- 父级的填充内容如果指定到子组件的没有对应名字插槽 , 那么该内容不会被填充到默认插槽中 -->\n    <!-- 这里指定 body 名字的内容就不会填充到默认插槽里 -->\n    <template v-slot:body>\n      <a href=\"//h.codehhr.cn\"><h1>{{msg}}</h1></a>\n    </template>\n  </child>\n</div>\n```\n\n<!-- endtab -->\n\n{% endtabs %}\n\n## 总结\n\n- 父级的填充内容如果指定到子组件的没有对应名字插槽 , 那么该内容 `不会` 被填充到默认插槽中\n- 如果子组件没有默认插槽 , 而父级的填充内容指定到默认插槽中 , 那么该内容就 `不会` 填充到子组件的任何一个插槽中\n- 如果子组件有多个默认插槽 , 而父组件所有指定到默认插槽的填充内容 , 将 `会` `全都` 填充到子组件的每个默认插槽中\n","source":"_posts/vue/vue-slot.md","raw":"---\ntitle: Vue slot 插槽\ndate: 2021-07-24 22:10:15\nupdated:\ntags:\n  - Vue\n  - Vue slot 插槽\ncategories:\n  - Vue\n  - Vue基础\nkeywords:\ndescription:\ntop_img: https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg\ncover:\ncomments:\ncopyright:\ncopyright_author:\ncopyright_author_href:\ncopyright_url:\ncopyright_info:\n---\n\n# 什么是插槽\n\n{% note blue no-icon flat %}\n插槽就是子组件中的提供给父组件使用的一个占位符 , 用`<slot></slot>` 表示 , 父组件可以在这个占位符中填充任何模板代码 , 如 `HTML`、`组件`等 , 填充的内容会替换子组件的`<slot></slot>`标签\n{% endnote %}\n\n# 插槽的使用\n\n## 在子组件中放一个占位符\n\n```js\n// 定义一个子组件\nVue.component(\"child\", {\n  template: \"#child\",\n  data() {\n    return {\n      childMsg: \"我是子组件的内容\",\n    };\n  },\n});\n```\n\n```html\n<template id=\"child\">\n  <div>\n    <!-- 在子组件中放一个占位符 start -->\n    <slot></slot>\n    <!-- 在子组件中放一个占位符 end -->\n    <h1>{{childMsg}}</h1>\n  </div>\n</template>\n```\n\n## 在父组件中给这个占位符填充内容\n\n```js\nlet vm = new Vue({\n  el: \"#app\",\n  data: {\n    msg: \"我是父组件的内容\",\n  },\n  methods: {},\n});\n```\n\n```html\n<div id=\"app\">\n  <child>\n    <!-- 在父组件中给这个占位符填充内容 start -->\n    <template>\n      <div>{{msg}}</div>\n    </template>\n    <!-- 在父组件中给这个占位符填充内容 end -->\n  </child>\n</div>\n```\n\n{% btn 'https://codehhr.github.io/vue-daily/slot.html',展示效果,far fa-hand-point-right,green larger %}\n\n## 现在来看看 , 如果子组件中没有放插槽 , 同样的父组件中在子组件中填充内容 , 会是啥样的\n\n### 子组件代码无插槽\n\n```html\n<template id=\"child\">\n  <div>\n    <h1>{{childMsg}}</h1>\n  </div>\n</template>\n```\n\n### 父组件照常填充内容\n\n```html\n<div id=\"app\">\n  <child>\n    <!-- 父组件填充内容 start -->\n    <template>\n      <div>{{msg}}</div>\n    </template>\n    <!-- 父组件填充内容 end -->\n  </child>\n</div>\n```\n\n**最后结果是不会渲染上去**\n\n## 总结 : 如果子组件没有使用插槽 , 父组件如果需要往子组件中填充模板或者 `html` 是没法做到的\n\n# 具名插槽 和 默认插槽\n\n{% btn 'https://codehhr.github.io/vue-daily/slot-name.html',展示效果,far fa-hand-point-right,green larger %}\n\n<div style=\"height:20px\"></div>\n\n{% tabs slot %}\n\n<!-- tab 具名插槽 -->\n\n{% note blue no-icon flat %}\n描述 : 具名插槽其实就是给插槽取个名字 , 一个子组件可以放多个插槽 , 而且可以放在不同的地方 , 而父组件填充内容时 , 可以根据这个名字把内容填充到对应插槽中\n{% endnote %}\n\n## 子组件设置两个插槽 ( header , footer )\n\n```html\n<template id=\"child\">\n  <div>\n    <slot name=\"header\"></slot>\n    <h1>我是子组件</h1>\n    <slot name=\"footer\"></slot>\n  </div>\n</template>\n```\n\n```js\nVue.component(\"child\", {\n  template: \"#child\",\n});\n```\n\n## 父组件填充内容\n\n```js\nlet vm = new Vue({\n  el: \"#app\",\n  data: {\n    header: \"我是父组件的 Header\",\n    footer: \"我是父组件的 Footer\",\n    msg: \"父组件内容,不指定插槽名字,填充到默认插槽\",\n  },\n});\n```\n\n**父组件通过 `v-slot:name` 的方式指定到对应的插槽中**\n\n```html\n<div id=\"app\">\n  <child>\n    <template v-slot:header>\n      <a href=\"//h.codehhr.cn\"><h1>{{header}}</h1></a>\n    </template>\n    <template v-slot:footer>\n      <a href=\"//h.codehhr.cn\"><h1>{{footer}}</h1></a>\n    </template>\n  </child>\n</div>\n```\n\n即使父组件对插槽的填充的顺序打乱 , 只要名字对应上了 , 就可以正确渲染到对应的插槽中 , 即 : 父组件填充内容时 , 是可以根据这个名字把内容填充到对应插槽中的\n\n<!-- endtab -->\n\n<!-- tab 默认插槽 -->\n\n{% note blue no-icon flat %}\n描述 : 默认插槽就是指没有名字的插槽 , 子组件未定义的名字的插槽 , 父级将会把未指定插槽的填充的内容填充到默认插槽中\n{% endnote %}\n\n## 子组件代码定义了一个默认插槽\n\n```html\n<template id=\"child\">\n  <div>\n    <h1>我是子组件</h1>\n    <!-- 默认插槽 start -->\n    <slot></slot>\n    <!-- 默认插槽 end -->\n  </div>\n</template>\n```\n\n```js\nVue.component(\"child\", {\n  template: \"#child\",\n});\n```\n\n## 父组件上定义一个 `msg` 变量\n\n```js\nlet vm = new Vue({\n  el: \"#app\",\n  data: {\n    msg: \"父组件内容,不指定插槽名字,填充到默认插槽\",\n  },\n});\n```\n\n## 父组件给默认插槽填充内容\n\n```html\n<div id=\"app\">\n  <child>\n    <template>\n      <a href=\"//h.codehhr.cn\"><h1>{{msg}}</h1></a>\n    </template>\n    <!-- 父级的填充内容如果指定到子组件的没有对应名字插槽 , 那么该内容不会被填充到默认插槽中 -->\n    <!-- 这里指定 body 名字的内容就不会填充到默认插槽里 -->\n    <template v-slot:body>\n      <a href=\"//h.codehhr.cn\"><h1>{{msg}}</h1></a>\n    </template>\n  </child>\n</div>\n```\n\n<!-- endtab -->\n\n{% endtabs %}\n\n## 总结\n\n- 父级的填充内容如果指定到子组件的没有对应名字插槽 , 那么该内容 `不会` 被填充到默认插槽中\n- 如果子组件没有默认插槽 , 而父级的填充内容指定到默认插槽中 , 那么该内容就 `不会` 填充到子组件的任何一个插槽中\n- 如果子组件有多个默认插槽 , 而父组件所有指定到默认插槽的填充内容 , 将 `会` `全都` 填充到子组件的每个默认插槽中\n","slug":"vue/vue-slot","published":1,"layout":"post","photos":[],"link":"","_id":"cksvxwnox004xgubq6x02ha9p","content":"<h1 id=\"什么是插槽\"><a href=\"#什么是插槽\" class=\"headerlink\" title=\"什么是插槽\"></a>什么是插槽</h1><div class=\"note blue no-icon flat\"><p>插槽就是子组件中的提供给父组件使用的一个占位符 , 用<code>&lt;slot&gt;&lt;/slot&gt;</code> 表示 , 父组件可以在这个占位符中填充任何模板代码 , 如 <code>HTML</code>、<code>组件</code>等 , 填充的内容会替换子组件的<code>&lt;slot&gt;&lt;/slot&gt;</code>标签</p>\n</div>\n\n<h1 id=\"插槽的使用\"><a href=\"#插槽的使用\" class=\"headerlink\" title=\"插槽的使用\"></a>插槽的使用</h1><h2 id=\"在子组件中放一个占位符\"><a href=\"#在子组件中放一个占位符\" class=\"headerlink\" title=\"在子组件中放一个占位符\"></a>在子组件中放一个占位符</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义一个子组件</span></span><br><span class=\"line\">Vue.component(<span class=\"string\">&quot;child&quot;</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">&quot;#child&quot;</span>,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"attr\">childMsg</span>: <span class=\"string\">&quot;我是子组件的内容&quot;</span>,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;child&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 在子组件中放一个占位符 start --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 在子组件中放一个占位符 end --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;&#123;childMsg&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"在父组件中给这个占位符填充内容\"><a href=\"#在父组件中给这个占位符填充内容\" class=\"headerlink\" title=\"在父组件中给这个占位符填充内容\"></a>在父组件中给这个占位符填充内容</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">&quot;#app&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">msg</span>: <span class=\"string\">&quot;我是父组件的内容&quot;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">methods</span>: &#123;&#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">child</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 在父组件中给这个占位符填充内容 start --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 在父组件中给这个占位符填充内容 end --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">child</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<a class=\"btn-beautify button--animated green larger\" href=\"https://codehhr.github.io/vue-daily/slot.html\" \n  title=\"展示效果\"><i class=\"far fa-hand-point-right\"></i><span>展示效果</span></a>\n\n<h2 id=\"现在来看看-如果子组件中没有放插槽-同样的父组件中在子组件中填充内容-会是啥样的\"><a href=\"#现在来看看-如果子组件中没有放插槽-同样的父组件中在子组件中填充内容-会是啥样的\" class=\"headerlink\" title=\"现在来看看 , 如果子组件中没有放插槽 , 同样的父组件中在子组件中填充内容 , 会是啥样的\"></a>现在来看看 , 如果子组件中没有放插槽 , 同样的父组件中在子组件中填充内容 , 会是啥样的</h2><h3 id=\"子组件代码无插槽\"><a href=\"#子组件代码无插槽\" class=\"headerlink\" title=\"子组件代码无插槽\"></a>子组件代码无插槽</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;child&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;&#123;childMsg&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"父组件照常填充内容\"><a href=\"#父组件照常填充内容\" class=\"headerlink\" title=\"父组件照常填充内容\"></a>父组件照常填充内容</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">child</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 父组件填充内容 start --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 父组件填充内容 end --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">child</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>最后结果是不会渲染上去</strong></p>\n<h2 id=\"总结-如果子组件没有使用插槽-父组件如果需要往子组件中填充模板或者-html-是没法做到的\"><a href=\"#总结-如果子组件没有使用插槽-父组件如果需要往子组件中填充模板或者-html-是没法做到的\" class=\"headerlink\" title=\"总结 : 如果子组件没有使用插槽 , 父组件如果需要往子组件中填充模板或者 html 是没法做到的\"></a>总结 : 如果子组件没有使用插槽 , 父组件如果需要往子组件中填充模板或者 <code>html</code> 是没法做到的</h2><h1 id=\"具名插槽-和-默认插槽\"><a href=\"#具名插槽-和-默认插槽\" class=\"headerlink\" title=\"具名插槽 和 默认插槽\"></a>具名插槽 和 默认插槽</h1><a class=\"btn-beautify button--animated green larger\" href=\"https://codehhr.github.io/vue-daily/slot-name.html\" \n  title=\"展示效果\"><i class=\"far fa-hand-point-right\"></i><span>展示效果</span></a>\n\n<div style=\"height:20px\"></div>\n\n<div class=\"tabs\" id=\"slot\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button type=\"button\" data-href=\"#slot-1\">具名插槽</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#slot-2\">默认插槽</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"slot-1\"><div class=\"note blue no-icon flat\"><p>描述 : 具名插槽其实就是给插槽取个名字 , 一个子组件可以放多个插槽 , 而且可以放在不同的地方 , 而父组件填充内容时 , 可以根据这个名字把内容填充到对应插槽中</p>\n</div>\n\n<h2 id=\"子组件设置两个插槽-header-footer\"><a href=\"#子组件设置两个插槽-header-footer\" class=\"headerlink\" title=\"子组件设置两个插槽 ( header , footer )\"></a>子组件设置两个插槽 ( header , footer )</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;child&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;header&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>我是子组件<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;footer&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">&quot;child&quot;</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">&quot;#child&quot;</span>,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"父组件填充内容\"><a href=\"#父组件填充内容\" class=\"headerlink\" title=\"父组件填充内容\"></a>父组件填充内容</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">&quot;#app&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">header</span>: <span class=\"string\">&quot;我是父组件的 Header&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">footer</span>: <span class=\"string\">&quot;我是父组件的 Footer&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">msg</span>: <span class=\"string\">&quot;父组件内容,不指定插槽名字,填充到默认插槽&quot;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>父组件通过 <code>v-slot:name</code> 的方式指定到对应的插槽中</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">child</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-slot:header</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;//h.codehhr.cn&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;&#123;header&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-slot:footer</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;//h.codehhr.cn&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;&#123;footer&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">child</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>即使父组件对插槽的填充的顺序打乱 , 只要名字对应上了 , 就可以正确渲染到对应的插槽中 , 即 : 父组件填充内容时 , 是可以根据这个名字把内容填充到对应插槽中的</p><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"slot-2\"><div class=\"note blue no-icon flat\"><p>描述 : 默认插槽就是指没有名字的插槽 , 子组件未定义的名字的插槽 , 父级将会把未指定插槽的填充的内容填充到默认插槽中</p>\n</div>\n\n<h2 id=\"子组件代码定义了一个默认插槽\"><a href=\"#子组件代码定义了一个默认插槽\" class=\"headerlink\" title=\"子组件代码定义了一个默认插槽\"></a>子组件代码定义了一个默认插槽</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;child&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>我是子组件<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 默认插槽 start --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 默认插槽 end --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">&quot;child&quot;</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">&quot;#child&quot;</span>,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"父组件上定义一个-msg-变量\"><a href=\"#父组件上定义一个-msg-变量\" class=\"headerlink\" title=\"父组件上定义一个 msg 变量\"></a>父组件上定义一个 <code>msg</code> 变量</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">&quot;#app&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">msg</span>: <span class=\"string\">&quot;父组件内容,不指定插槽名字,填充到默认插槽&quot;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"父组件给默认插槽填充内容\"><a href=\"#父组件给默认插槽填充内容\" class=\"headerlink\" title=\"父组件给默认插槽填充内容\"></a>父组件给默认插槽填充内容</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">child</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;//h.codehhr.cn&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 父级的填充内容如果指定到子组件的没有对应名字插槽 , 那么该内容不会被填充到默认插槽中 --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 这里指定 body 名字的内容就不会填充到默认插槽里 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-slot:body</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;//h.codehhr.cn&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">child</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>父级的填充内容如果指定到子组件的没有对应名字插槽 , 那么该内容 <code>不会</code> 被填充到默认插槽中</li>\n<li>如果子组件没有默认插槽 , 而父级的填充内容指定到默认插槽中 , 那么该内容就 <code>不会</code> 填充到子组件的任何一个插槽中</li>\n<li>如果子组件有多个默认插槽 , 而父组件所有指定到默认插槽的填充内容 , 将 <code>会</code> <code>全都</code> 填充到子组件的每个默认插槽中</li>\n</ul>\n","site":{"data":{"link":{"class1":{"class_name":"舍友","link_list":{"1":{"name":"codeAntg","link":"https://blog.csdn.net/weixin_44745147","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/fjh.jpg","descr":"那家刀削面不错","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class2":{"class_name":"致谢","link_list":{"1":{"name":"JerrC","link":"https://immyw.com","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/immyw.png","descr":"今日事,今日毕","width":"1px","style":"solid","color":"#60d0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/hexo.svg","descr":"A fast, simple & powerful blog framework","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class3":{"class_name":"友人","link_list":{"1":{"name":"Chester","link":"http://chesterlds.cn","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/chester.jpg","descr":null,"width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Wangs","link":"https://wangsss.cn/","avatar":"https://wangsss.cn/img/avatar.png","descr":"不疯魔，不成活 ~","width":"1px","style":"solid","color":"#9d9d9d","custom":"link_custom1","time":"4s","namecolor":"0094ff","descolor":"#ff9191"}}}}}},"excerpt":"","more":"<h1 id=\"什么是插槽\"><a href=\"#什么是插槽\" class=\"headerlink\" title=\"什么是插槽\"></a>什么是插槽</h1><div class=\"note blue no-icon flat\"><p>插槽就是子组件中的提供给父组件使用的一个占位符 , 用<code>&lt;slot&gt;&lt;/slot&gt;</code> 表示 , 父组件可以在这个占位符中填充任何模板代码 , 如 <code>HTML</code>、<code>组件</code>等 , 填充的内容会替换子组件的<code>&lt;slot&gt;&lt;/slot&gt;</code>标签</p>\n</div>\n\n<h1 id=\"插槽的使用\"><a href=\"#插槽的使用\" class=\"headerlink\" title=\"插槽的使用\"></a>插槽的使用</h1><h2 id=\"在子组件中放一个占位符\"><a href=\"#在子组件中放一个占位符\" class=\"headerlink\" title=\"在子组件中放一个占位符\"></a>在子组件中放一个占位符</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义一个子组件</span></span><br><span class=\"line\">Vue.component(<span class=\"string\">&quot;child&quot;</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">&quot;#child&quot;</span>,</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"attr\">childMsg</span>: <span class=\"string\">&quot;我是子组件的内容&quot;</span>,</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;child&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 在子组件中放一个占位符 start --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 在子组件中放一个占位符 end --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;&#123;childMsg&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"在父组件中给这个占位符填充内容\"><a href=\"#在父组件中给这个占位符填充内容\" class=\"headerlink\" title=\"在父组件中给这个占位符填充内容\"></a>在父组件中给这个占位符填充内容</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">&quot;#app&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">msg</span>: <span class=\"string\">&quot;我是父组件的内容&quot;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">methods</span>: &#123;&#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">child</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 在父组件中给这个占位符填充内容 start --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 在父组件中给这个占位符填充内容 end --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">child</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<a class=\"btn-beautify button--animated green larger\" href=\"https://codehhr.github.io/vue-daily/slot.html\" \n  title=\"展示效果\"><i class=\"far fa-hand-point-right\"></i><span>展示效果</span></a>\n\n<h2 id=\"现在来看看-如果子组件中没有放插槽-同样的父组件中在子组件中填充内容-会是啥样的\"><a href=\"#现在来看看-如果子组件中没有放插槽-同样的父组件中在子组件中填充内容-会是啥样的\" class=\"headerlink\" title=\"现在来看看 , 如果子组件中没有放插槽 , 同样的父组件中在子组件中填充内容 , 会是啥样的\"></a>现在来看看 , 如果子组件中没有放插槽 , 同样的父组件中在子组件中填充内容 , 会是啥样的</h2><h3 id=\"子组件代码无插槽\"><a href=\"#子组件代码无插槽\" class=\"headerlink\" title=\"子组件代码无插槽\"></a>子组件代码无插槽</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;child&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;&#123;childMsg&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"父组件照常填充内容\"><a href=\"#父组件照常填充内容\" class=\"headerlink\" title=\"父组件照常填充内容\"></a>父组件照常填充内容</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">child</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 父组件填充内容 start --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 父组件填充内容 end --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">child</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>最后结果是不会渲染上去</strong></p>\n<h2 id=\"总结-如果子组件没有使用插槽-父组件如果需要往子组件中填充模板或者-html-是没法做到的\"><a href=\"#总结-如果子组件没有使用插槽-父组件如果需要往子组件中填充模板或者-html-是没法做到的\" class=\"headerlink\" title=\"总结 : 如果子组件没有使用插槽 , 父组件如果需要往子组件中填充模板或者 html 是没法做到的\"></a>总结 : 如果子组件没有使用插槽 , 父组件如果需要往子组件中填充模板或者 <code>html</code> 是没法做到的</h2><h1 id=\"具名插槽-和-默认插槽\"><a href=\"#具名插槽-和-默认插槽\" class=\"headerlink\" title=\"具名插槽 和 默认插槽\"></a>具名插槽 和 默认插槽</h1><a class=\"btn-beautify button--animated green larger\" href=\"https://codehhr.github.io/vue-daily/slot-name.html\" \n  title=\"展示效果\"><i class=\"far fa-hand-point-right\"></i><span>展示效果</span></a>\n\n<div style=\"height:20px\"></div>\n\n<div class=\"tabs\" id=\"slot\"><ul class=\"nav-tabs\"><li class=\"tab active\"><button type=\"button\" data-href=\"#slot-1\">具名插槽</button></li><li class=\"tab\"><button type=\"button\" data-href=\"#slot-2\">默认插槽</button></li></ul><div class=\"tab-contents\"><div class=\"tab-item-content active\" id=\"slot-1\"><div class=\"note blue no-icon flat\"><p>描述 : 具名插槽其实就是给插槽取个名字 , 一个子组件可以放多个插槽 , 而且可以放在不同的地方 , 而父组件填充内容时 , 可以根据这个名字把内容填充到对应插槽中</p>\n</div>\n\n<h2 id=\"子组件设置两个插槽-header-footer\"><a href=\"#子组件设置两个插槽-header-footer\" class=\"headerlink\" title=\"子组件设置两个插槽 ( header , footer )\"></a>子组件设置两个插槽 ( header , footer )</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;child&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;header&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>我是子组件<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slot</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;footer&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">&quot;child&quot;</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">&quot;#child&quot;</span>,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"父组件填充内容\"><a href=\"#父组件填充内容\" class=\"headerlink\" title=\"父组件填充内容\"></a>父组件填充内容</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">&quot;#app&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">header</span>: <span class=\"string\">&quot;我是父组件的 Header&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">footer</span>: <span class=\"string\">&quot;我是父组件的 Footer&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">msg</span>: <span class=\"string\">&quot;父组件内容,不指定插槽名字,填充到默认插槽&quot;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p><strong>父组件通过 <code>v-slot:name</code> 的方式指定到对应的插槽中</strong></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">child</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-slot:header</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;//h.codehhr.cn&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;&#123;header&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-slot:footer</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;//h.codehhr.cn&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;&#123;footer&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">child</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>即使父组件对插槽的填充的顺序打乱 , 只要名字对应上了 , 就可以正确渲染到对应的插槽中 , 即 : 父组件填充内容时 , 是可以根据这个名字把内容填充到对应插槽中的</p><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div><div class=\"tab-item-content\" id=\"slot-2\"><div class=\"note blue no-icon flat\"><p>描述 : 默认插槽就是指没有名字的插槽 , 子组件未定义的名字的插槽 , 父级将会把未指定插槽的填充的内容填充到默认插槽中</p>\n</div>\n\n<h2 id=\"子组件代码定义了一个默认插槽\"><a href=\"#子组件代码定义了一个默认插槽\" class=\"headerlink\" title=\"子组件代码定义了一个默认插槽\"></a>子组件代码定义了一个默认插槽</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;child&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>我是子组件<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 默认插槽 start --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">slot</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">slot</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 默认插槽 end --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Vue.component(<span class=\"string\">&quot;child&quot;</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">&quot;#child&quot;</span>,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"父组件上定义一个-msg-变量\"><a href=\"#父组件上定义一个-msg-变量\" class=\"headerlink\" title=\"父组件上定义一个 msg 变量\"></a>父组件上定义一个 <code>msg</code> 变量</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> vm = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">&quot;#app&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">msg</span>: <span class=\"string\">&quot;父组件内容,不指定插槽名字,填充到默认插槽&quot;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"父组件给默认插槽填充内容\"><a href=\"#父组件给默认插槽填充内容\" class=\"headerlink\" title=\"父组件给默认插槽填充内容\"></a>父组件给默认插槽填充内容</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">child</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;//h.codehhr.cn&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 父级的填充内容如果指定到子组件的没有对应名字插槽 , 那么该内容不会被填充到默认插槽中 --&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 这里指定 body 名字的内容就不会填充到默认插槽里 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">template</span> <span class=\"attr\">v-slot:body</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">&quot;//h.codehhr.cn&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">child</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure><button type=\"button\" class=\"tab-to-top\" aria-label=\"scroll to top\"><i class=\"fas fa-arrow-up\"></i></button></div></div></div>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li>父级的填充内容如果指定到子组件的没有对应名字插槽 , 那么该内容 <code>不会</code> 被填充到默认插槽中</li>\n<li>如果子组件没有默认插槽 , 而父级的填充内容指定到默认插槽中 , 那么该内容就 <code>不会</code> 填充到子组件的任何一个插槽中</li>\n<li>如果子组件有多个默认插槽 , 而父组件所有指定到默认插槽的填充内容 , 将 <code>会</code> <code>全都</code> 填充到子组件的每个默认插槽中</li>\n</ul>\n"},{"title":"Vuex","date":"2021-07-31T12:24:20.000Z","updated":"2021-08-14T10:15:09.119Z","keywords":null,"description":null,"top_img":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg","cover":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vue/vuex.png","comments":1,"copyright":null,"copyright_author":null,"copyright_author_href":null,"copyright_url":null,"copyright_info":null,"_content":"\n# Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式\n\n- `state` , 驱动应用的数据源\n- `view` , 以声明方式将 state 映射到视图\n- `actions` , 响应在 view 上的用户输入导致的状态变化\n\n**以下是一个表示“单向数据流”理念的简单示意**\n![state_view_actions](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vuebasic/vuexstate.png)\n\n但是 , 当我们的应用遇到多个组件共享状态时 , 单向数据流的简洁性很容易被破坏 :\n\n- 多个视图依赖于同一状态\n- 来自不同视图的行为需要变更同一状态\n\n![vuex](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vuebasic/vuex.png)\n\n# 核心概念\n\n# State\n\n## 在 `Vue` 组件中获得 `Vuex` 状态\n\n```js\n// 比如创建一个组件\nconst componentA = {\n  template: `<div>{{ valueA }}</div>`,\n  computed: {\n    valueA() {\n      return store.state.valueA;\n    },\n  },\n};\n```\n\n每当 `store.state.valueA` 变化的时候, 都会重新求取计算属性 , 并且触发更新相关联的 `DOM`\n\n然而 , 这种模式导致组件依赖全局状态单例 ,在模块化的构建系统中 , 在每个需要使用 `state` 的组件中需要频繁地导入 , 并且在测试组件时需要模拟状态。\n\n`Vuex` 通过 `store` 选项 , 提供了一种机制将状态从根组件 `注入` 到每一个子组件中 ( 需调用 `Vue.use(Vuex)` )\n\n```js\nconst app = new Vue({\n  el: \"#app\",\n  // 把 store 对象提供给 \"store\" 选项 , 这可以把 store 的实例注入所有的子组件\n  store,\n  components: { componentA },\n  template: `\n    <div class=\"app\">\n      <componentA></componentA>\n    </div>\n  `,\n});\n```\n\n### mapState 辅助函数\n\n当一个组件需要获取多个状态的时候 , 将这些状态都声明为计算属性会有些重复和冗余 , 为了解决这个问题 , 我们可以使用 `mapState` 辅助函数帮助我们生成计算属性\n\n```js\nimport { mapState } from \"vuex\";\nexport default {\n  computed: {\n    ...mapState({\n      valueA: \"valueA\",\n    }),\n  },\n};\n```\n\n# Getter\n\n有时候我们需要从 `store` 中的 `state` 中派生出一些状态 , 例如对列表进行过滤并计数:\n\n```js\ncomputed: {\n  doneTodosCount () {\n    return this.$store.state.todos.filter(todo => todo.done).length\n  }\n}\n```\n\n`Vuex` 允许我们在 `store` 中定义 `getter` ( 可以认为是 `store` 的计算属性 ) , 就像计算属性一样 , `getter` 的返回值会根据它的依赖被缓存起来 , 且只有当它的依赖值发生了改变才会被重新计算\n\n`Getter` 接受 `state` 作为其第一个参数 :\n\n```js\nconst store = new Vuex.Store({\n  state: {\n    todos: [\n      { id: 1, text: \"...\", done: true },\n      { id: 2, text: \"...\", done: false },\n    ],\n  },\n  getters: {\n    doneTodos: (state) => {\n      return state.todos.filter((todo) => todo.done);\n    },\n  },\n});\n```\n\n### mapGetters 辅助函数\n\n`mapGetters` 辅助函数仅仅是将 `store` 中的 `getter` 映射到局部计算属性\n\n```js\nimport { mapGetters } from \"vuex\";\n\nexport default {\n  computed: {\n    // 使用对象展开运算符将 getter 混入 computed 对象中\n    ...mapGetters([\n      \"doneTodosCount\",\n      \"anotherGetter\",\n      // ...\n    ]),\n  },\n};\n```\n\n如果你想将一个 `getter` 属性另取一个名字 , 使用对象形式 :\n\n```js\n...mapGetters({\n  // 把 `this.doneCount` 映射为 `this.$store.getters.doneTodosCount`\n  doneCount: 'doneTodosCount'\n})\n```\n\n# Mutation\n\n更改 `Vuex` 的 `store` 中的状态的唯一方法是提交 `mutation`\n\n## 提交载荷( `Payload` )\n\n你可以向 `store.commit` 传入额外的参数 , 即 `mutation` 的 载荷 ( `payload ) :\n\n```js\nthis.$store.commit(\"increment\", payload);\n```\n\n在大多数情况下 , 载荷应该是一个对象 , 这样可以包含多个字段并且记录的 `mutation` 会更易读 :\n\n```js\nstore.commit(\"increment\", { amount: 10 });\n```\n\n```js\n// ...\nmutations: {\n  increment (state, payload) {\n    state.count = payload.amount\n  }\n}\n```\n\n# Action\n\n`Action` 类似于 `mutation` , 不同在于 :\n\n- `Action` 提交的是 `mutation` , 而不是直接变更状态\n- `Action` 可以包含任意异步操作\n\n`Action` 函数接受一个与 `store` 实例具有相同方法和属性的 `context` 对象 , 因此你可以调用 `context.commit` 提交一个 `mutation` , 或者通过 `context.state` 和 `context.getters` 来获取 `state` 和 `getters`\n\n```js\nactions: {\n  increment (context,payload) {\n     context.commit('increment',payload)\n  }\n}\n```\n\n乍一眼看上去感觉多此一举 , 我们直接分发 `mutation` 岂不更方便 ? 实际上并非如此 , 还记得 `mutation` 必须同步执行这个限制么 ? `Action` 就不受约束 ! 我们可以在 `action` 内部执行异步操作 :\n\n```js\nactions: {\n  increment (context,payload) {\n    setTimeout(() => {\n      context.commit('increment',payload)\n    }, 1000)\n  }\n}\n```\n\n`Actions` 支持同样的载荷方式和对象方式进行分发 :\n\n```js\n// 以载荷形式分发\nthis.$store.dispatch(\"incrementAsync\", {\n  amount: 10,\n});\n```\n\n```js\n// 以对象形式分发\nthis.$store.dispatch({\n  type: \"incrementAsync\",\n  amount: 10,\n});\n```\n\n# Module\n\n由于使用单一状态树 , 应用的所有状态会集中到一个比较大的对象 , 当应用变得非常复杂时 , `store` 对象就有可能变得相当臃肿\n为了解决以上问题 , `Vuex` 允许我们将 `store` 分割成模块 ( `module` ) , 每个模块拥有自己的 `state`、`mutation`、`action`、`getter`、甚至是嵌套子模块——从上至下进行同样方式的分割:\n\n```js\nconst moduleA = {\n  state: () => ({ ... }),\n  mutations: { ... },\n  actions: { ... },\n  getters: { ... }\n}\n\nconst moduleB = {\n  state: () => ({ ... }),\n  mutations: { ... },\n  actions: { ... }\n}\n\nconst store = new Vuex.Store({\n  modules: {\n    a: moduleA,\n    b: moduleB\n  }\n})\n\nstore.state.a // -> moduleA 的状态\nstore.state.b // -> moduleB 的状态\n```\n\n## 模块的局部状态\n\n对于模块内部的 `mutation` 和 `getter` , 接收的第一个参数是模块的局部状态对象\n\n```js\nconst moduleA = {\n  state: () => ({\n    count: 0,\n  }),\n  mutations: {\n    increment(state) {\n      // 这里的 `state` 对象是模块的局部状态\n      state.count++;\n    },\n  },\n\n  getters: {\n    doubleCount(state) {\n      return state.count * 2;\n    },\n  },\n};\n```\n\n同样 , 对于模块内部的 action , 局部状态通过 `context.state` 暴露出来 , 根节点状态则为 `context.rootState` :\n\n```js\nconst moduleA = {\n  // ...\n  actions: {\n    incrementIfOddOnRootSum({ state, commit, rootState }) {\n      if ((state.count + rootState.count) % 2 === 1) {\n        commit(\"increment\");\n      }\n    },\n  },\n};\n```\n\n## 命名空间\n\n如果希望你的模块具有更高的封装度和复用性 , 你可以通过添加 `namespaced`: `true` 的方式使其成为带命名空间的模块。当模块被注册后 , 它的所有 `getter`、`action` 及 `mutation` 都会自动根据模块注册的路径调整命名 ,例如 :\n\n```js\nconst store = new Vuex.Store({\n  modules: {\n    account: {\n      namespaced: true,\n\n      // 模块内容（module assets）\n      state: () => ({ ... }), // 模块内的状态已经是嵌套的了 , 使用 `namespaced` 属性不会对其产生影响\n      getters: {\n        isAdmin () { ... } // -> getters['account/isAdmin']\n      },\n      actions: {\n        login () { ... } // -> dispatch('account/login')\n      },\n      mutations: {\n        login () { ... } // -> commit('account/login')\n      },\n\n      // 嵌套模块\n      modules: {\n        // 继承父模块的命名空间\n        myPage: {\n          state: () => ({ ... }),\n          getters: {\n            profile () { ... } // -> getters['account/profile']\n          }\n        },\n\n        // 进一步嵌套命名空间\n        posts: {\n          namespaced: true,\n\n          state: () => ({ ... }),\n          getters: {\n            popular () { ... } // -> getters['account/posts/popular']\n          }\n        }\n      }\n    }\n  }\n})\n```\n","source":"_posts/vue/vuex.md","raw":"---\ntitle: Vuex\ndate: 2021-07-31 20:24:20\nupdated:\ntags:\n  - Vue\n  - vuex\ncategories:\n  - Vue\n  - Vue脚手架\nkeywords:\ndescription:\ntop_img: https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg\ncover: https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vue/vuex.png\ncomments:\ncopyright:\ncopyright_author:\ncopyright_author_href:\ncopyright_url:\ncopyright_info:\n---\n\n# Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式\n\n- `state` , 驱动应用的数据源\n- `view` , 以声明方式将 state 映射到视图\n- `actions` , 响应在 view 上的用户输入导致的状态变化\n\n**以下是一个表示“单向数据流”理念的简单示意**\n![state_view_actions](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vuebasic/vuexstate.png)\n\n但是 , 当我们的应用遇到多个组件共享状态时 , 单向数据流的简洁性很容易被破坏 :\n\n- 多个视图依赖于同一状态\n- 来自不同视图的行为需要变更同一状态\n\n![vuex](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vuebasic/vuex.png)\n\n# 核心概念\n\n# State\n\n## 在 `Vue` 组件中获得 `Vuex` 状态\n\n```js\n// 比如创建一个组件\nconst componentA = {\n  template: `<div>{{ valueA }}</div>`,\n  computed: {\n    valueA() {\n      return store.state.valueA;\n    },\n  },\n};\n```\n\n每当 `store.state.valueA` 变化的时候, 都会重新求取计算属性 , 并且触发更新相关联的 `DOM`\n\n然而 , 这种模式导致组件依赖全局状态单例 ,在模块化的构建系统中 , 在每个需要使用 `state` 的组件中需要频繁地导入 , 并且在测试组件时需要模拟状态。\n\n`Vuex` 通过 `store` 选项 , 提供了一种机制将状态从根组件 `注入` 到每一个子组件中 ( 需调用 `Vue.use(Vuex)` )\n\n```js\nconst app = new Vue({\n  el: \"#app\",\n  // 把 store 对象提供给 \"store\" 选项 , 这可以把 store 的实例注入所有的子组件\n  store,\n  components: { componentA },\n  template: `\n    <div class=\"app\">\n      <componentA></componentA>\n    </div>\n  `,\n});\n```\n\n### mapState 辅助函数\n\n当一个组件需要获取多个状态的时候 , 将这些状态都声明为计算属性会有些重复和冗余 , 为了解决这个问题 , 我们可以使用 `mapState` 辅助函数帮助我们生成计算属性\n\n```js\nimport { mapState } from \"vuex\";\nexport default {\n  computed: {\n    ...mapState({\n      valueA: \"valueA\",\n    }),\n  },\n};\n```\n\n# Getter\n\n有时候我们需要从 `store` 中的 `state` 中派生出一些状态 , 例如对列表进行过滤并计数:\n\n```js\ncomputed: {\n  doneTodosCount () {\n    return this.$store.state.todos.filter(todo => todo.done).length\n  }\n}\n```\n\n`Vuex` 允许我们在 `store` 中定义 `getter` ( 可以认为是 `store` 的计算属性 ) , 就像计算属性一样 , `getter` 的返回值会根据它的依赖被缓存起来 , 且只有当它的依赖值发生了改变才会被重新计算\n\n`Getter` 接受 `state` 作为其第一个参数 :\n\n```js\nconst store = new Vuex.Store({\n  state: {\n    todos: [\n      { id: 1, text: \"...\", done: true },\n      { id: 2, text: \"...\", done: false },\n    ],\n  },\n  getters: {\n    doneTodos: (state) => {\n      return state.todos.filter((todo) => todo.done);\n    },\n  },\n});\n```\n\n### mapGetters 辅助函数\n\n`mapGetters` 辅助函数仅仅是将 `store` 中的 `getter` 映射到局部计算属性\n\n```js\nimport { mapGetters } from \"vuex\";\n\nexport default {\n  computed: {\n    // 使用对象展开运算符将 getter 混入 computed 对象中\n    ...mapGetters([\n      \"doneTodosCount\",\n      \"anotherGetter\",\n      // ...\n    ]),\n  },\n};\n```\n\n如果你想将一个 `getter` 属性另取一个名字 , 使用对象形式 :\n\n```js\n...mapGetters({\n  // 把 `this.doneCount` 映射为 `this.$store.getters.doneTodosCount`\n  doneCount: 'doneTodosCount'\n})\n```\n\n# Mutation\n\n更改 `Vuex` 的 `store` 中的状态的唯一方法是提交 `mutation`\n\n## 提交载荷( `Payload` )\n\n你可以向 `store.commit` 传入额外的参数 , 即 `mutation` 的 载荷 ( `payload ) :\n\n```js\nthis.$store.commit(\"increment\", payload);\n```\n\n在大多数情况下 , 载荷应该是一个对象 , 这样可以包含多个字段并且记录的 `mutation` 会更易读 :\n\n```js\nstore.commit(\"increment\", { amount: 10 });\n```\n\n```js\n// ...\nmutations: {\n  increment (state, payload) {\n    state.count = payload.amount\n  }\n}\n```\n\n# Action\n\n`Action` 类似于 `mutation` , 不同在于 :\n\n- `Action` 提交的是 `mutation` , 而不是直接变更状态\n- `Action` 可以包含任意异步操作\n\n`Action` 函数接受一个与 `store` 实例具有相同方法和属性的 `context` 对象 , 因此你可以调用 `context.commit` 提交一个 `mutation` , 或者通过 `context.state` 和 `context.getters` 来获取 `state` 和 `getters`\n\n```js\nactions: {\n  increment (context,payload) {\n     context.commit('increment',payload)\n  }\n}\n```\n\n乍一眼看上去感觉多此一举 , 我们直接分发 `mutation` 岂不更方便 ? 实际上并非如此 , 还记得 `mutation` 必须同步执行这个限制么 ? `Action` 就不受约束 ! 我们可以在 `action` 内部执行异步操作 :\n\n```js\nactions: {\n  increment (context,payload) {\n    setTimeout(() => {\n      context.commit('increment',payload)\n    }, 1000)\n  }\n}\n```\n\n`Actions` 支持同样的载荷方式和对象方式进行分发 :\n\n```js\n// 以载荷形式分发\nthis.$store.dispatch(\"incrementAsync\", {\n  amount: 10,\n});\n```\n\n```js\n// 以对象形式分发\nthis.$store.dispatch({\n  type: \"incrementAsync\",\n  amount: 10,\n});\n```\n\n# Module\n\n由于使用单一状态树 , 应用的所有状态会集中到一个比较大的对象 , 当应用变得非常复杂时 , `store` 对象就有可能变得相当臃肿\n为了解决以上问题 , `Vuex` 允许我们将 `store` 分割成模块 ( `module` ) , 每个模块拥有自己的 `state`、`mutation`、`action`、`getter`、甚至是嵌套子模块——从上至下进行同样方式的分割:\n\n```js\nconst moduleA = {\n  state: () => ({ ... }),\n  mutations: { ... },\n  actions: { ... },\n  getters: { ... }\n}\n\nconst moduleB = {\n  state: () => ({ ... }),\n  mutations: { ... },\n  actions: { ... }\n}\n\nconst store = new Vuex.Store({\n  modules: {\n    a: moduleA,\n    b: moduleB\n  }\n})\n\nstore.state.a // -> moduleA 的状态\nstore.state.b // -> moduleB 的状态\n```\n\n## 模块的局部状态\n\n对于模块内部的 `mutation` 和 `getter` , 接收的第一个参数是模块的局部状态对象\n\n```js\nconst moduleA = {\n  state: () => ({\n    count: 0,\n  }),\n  mutations: {\n    increment(state) {\n      // 这里的 `state` 对象是模块的局部状态\n      state.count++;\n    },\n  },\n\n  getters: {\n    doubleCount(state) {\n      return state.count * 2;\n    },\n  },\n};\n```\n\n同样 , 对于模块内部的 action , 局部状态通过 `context.state` 暴露出来 , 根节点状态则为 `context.rootState` :\n\n```js\nconst moduleA = {\n  // ...\n  actions: {\n    incrementIfOddOnRootSum({ state, commit, rootState }) {\n      if ((state.count + rootState.count) % 2 === 1) {\n        commit(\"increment\");\n      }\n    },\n  },\n};\n```\n\n## 命名空间\n\n如果希望你的模块具有更高的封装度和复用性 , 你可以通过添加 `namespaced`: `true` 的方式使其成为带命名空间的模块。当模块被注册后 , 它的所有 `getter`、`action` 及 `mutation` 都会自动根据模块注册的路径调整命名 ,例如 :\n\n```js\nconst store = new Vuex.Store({\n  modules: {\n    account: {\n      namespaced: true,\n\n      // 模块内容（module assets）\n      state: () => ({ ... }), // 模块内的状态已经是嵌套的了 , 使用 `namespaced` 属性不会对其产生影响\n      getters: {\n        isAdmin () { ... } // -> getters['account/isAdmin']\n      },\n      actions: {\n        login () { ... } // -> dispatch('account/login')\n      },\n      mutations: {\n        login () { ... } // -> commit('account/login')\n      },\n\n      // 嵌套模块\n      modules: {\n        // 继承父模块的命名空间\n        myPage: {\n          state: () => ({ ... }),\n          getters: {\n            profile () { ... } // -> getters['account/profile']\n          }\n        },\n\n        // 进一步嵌套命名空间\n        posts: {\n          namespaced: true,\n\n          state: () => ({ ... }),\n          getters: {\n            popular () { ... } // -> getters['account/posts/popular']\n          }\n        }\n      }\n    }\n  }\n})\n```\n","slug":"vue/vuex","published":1,"layout":"post","photos":[],"link":"","_id":"cksvxwnoy004zgubqgxdkg69o","content":"<h1 id=\"Vuex-是一个专为-Vue-js-应用程序开发的状态管理模式\"><a href=\"#Vuex-是一个专为-Vue-js-应用程序开发的状态管理模式\" class=\"headerlink\" title=\"Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式\"></a>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式</h1><ul>\n<li><code>state</code> , 驱动应用的数据源</li>\n<li><code>view</code> , 以声明方式将 state 映射到视图</li>\n<li><code>actions</code> , 响应在 view 上的用户输入导致的状态变化</li>\n</ul>\n<p><strong>以下是一个表示“单向数据流”理念的简单示意</strong><br><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vuebasic/vuexstate.png\" alt=\"state_view_actions\"></p>\n<p>但是 , 当我们的应用遇到多个组件共享状态时 , 单向数据流的简洁性很容易被破坏 :</p>\n<ul>\n<li>多个视图依赖于同一状态</li>\n<li>来自不同视图的行为需要变更同一状态</li>\n</ul>\n<p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vuebasic/vuex.png\" alt=\"vuex\"></p>\n<h1 id=\"核心概念\"><a href=\"#核心概念\" class=\"headerlink\" title=\"核心概念\"></a>核心概念</h1><h1 id=\"State\"><a href=\"#State\" class=\"headerlink\" title=\"State\"></a>State</h1><h2 id=\"在-Vue-组件中获得-Vuex-状态\"><a href=\"#在-Vue-组件中获得-Vuex-状态\" class=\"headerlink\" title=\"在 Vue 组件中获得 Vuex 状态\"></a>在 <code>Vue</code> 组件中获得 <code>Vuex</code> 状态</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 比如创建一个组件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> componentA = &#123;</span><br><span class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">`&lt;div&gt;&#123;&#123; valueA &#125;&#125;&lt;/div&gt;`</span>,</span><br><span class=\"line\">  <span class=\"attr\">computed</span>: &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">valueA</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> store.state.valueA;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>每当 <code>store.state.valueA</code> 变化的时候, 都会重新求取计算属性 , 并且触发更新相关联的 <code>DOM</code></p>\n<p>然而 , 这种模式导致组件依赖全局状态单例 ,在模块化的构建系统中 , 在每个需要使用 <code>state</code> 的组件中需要频繁地导入 , 并且在测试组件时需要模拟状态。</p>\n<p><code>Vuex</code> 通过 <code>store</code> 选项 , 提供了一种机制将状态从根组件 <code>注入</code> 到每一个子组件中 ( 需调用 <code>Vue.use(Vuex)</code> )</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">&quot;#app&quot;</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 把 store 对象提供给 &quot;store&quot; 选项 , 这可以把 store 的实例注入所有的子组件</span></span><br><span class=\"line\">  store,</span><br><span class=\"line\">  <span class=\"attr\">components</span>: &#123; componentA &#125;,</span><br><span class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;div class=&quot;app&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;componentA&gt;&lt;/componentA&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">  `</span>,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"mapState-辅助函数\"><a href=\"#mapState-辅助函数\" class=\"headerlink\" title=\"mapState 辅助函数\"></a>mapState 辅助函数</h3><p>当一个组件需要获取多个状态的时候 , 将这些状态都声明为计算属性会有些重复和冗余 , 为了解决这个问题 , 我们可以使用 <code>mapState</code> 辅助函数帮助我们生成计算属性</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vuex&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">computed</span>: &#123;</span><br><span class=\"line\">    ...mapState(&#123;</span><br><span class=\"line\">      <span class=\"attr\">valueA</span>: <span class=\"string\">&quot;valueA&quot;</span>,</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Getter\"><a href=\"#Getter\" class=\"headerlink\" title=\"Getter\"></a>Getter</h1><p>有时候我们需要从 <code>store</code> 中的 <code>state</code> 中派生出一些状态 , 例如对列表进行过滤并计数:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  doneTodosCount () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.$store.state.todos.filter(<span class=\"function\"><span class=\"params\">todo</span> =&gt;</span> todo.done).length</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>Vuex</code> 允许我们在 <code>store</code> 中定义 <code>getter</code> ( 可以认为是 <code>store</code> 的计算属性 ) , 就像计算属性一样 , <code>getter</code> 的返回值会根据它的依赖被缓存起来 , 且只有当它的依赖值发生了改变才会被重新计算</p>\n<p><code>Getter</code> 接受 <code>state</code> 作为其第一个参数 :</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">  <span class=\"attr\">state</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">todos</span>: [</span><br><span class=\"line\">      &#123; <span class=\"attr\">id</span>: <span class=\"number\">1</span>, <span class=\"attr\">text</span>: <span class=\"string\">&quot;...&quot;</span>, <span class=\"attr\">done</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">      &#123; <span class=\"attr\">id</span>: <span class=\"number\">2</span>, <span class=\"attr\">text</span>: <span class=\"string\">&quot;...&quot;</span>, <span class=\"attr\">done</span>: <span class=\"literal\">false</span> &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">getters</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">doneTodos</span>: <span class=\"function\">(<span class=\"params\">state</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> state.todos.filter(<span class=\"function\">(<span class=\"params\">todo</span>) =&gt;</span> todo.done);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"mapGetters-辅助函数\"><a href=\"#mapGetters-辅助函数\" class=\"headerlink\" title=\"mapGetters 辅助函数\"></a>mapGetters 辅助函数</h3><p><code>mapGetters</code> 辅助函数仅仅是将 <code>store</code> 中的 <code>getter</code> 映射到局部计算属性</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapGetters &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vuex&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">computed</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 使用对象展开运算符将 getter 混入 computed 对象中</span></span><br><span class=\"line\">    ...mapGetters([</span><br><span class=\"line\">      <span class=\"string\">&quot;doneTodosCount&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;anotherGetter&quot;</span>,</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">    ]),</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>如果你想将一个 <code>getter</code> 属性另取一个名字 , 使用对象形式 :</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...mapGetters(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 把 `this.doneCount` 映射为 `this.$store.getters.doneTodosCount`</span></span><br><span class=\"line\">  <span class=\"attr\">doneCount</span>: <span class=\"string\">&#x27;doneTodosCount&#x27;</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Mutation\"><a href=\"#Mutation\" class=\"headerlink\" title=\"Mutation\"></a>Mutation</h1><p>更改 <code>Vuex</code> 的 <code>store</code> 中的状态的唯一方法是提交 <code>mutation</code></p>\n<h2 id=\"提交载荷-Payload\"><a href=\"#提交载荷-Payload\" class=\"headerlink\" title=\"提交载荷( Payload )\"></a>提交载荷( <code>Payload</code> )</h2><p>你可以向 <code>store.commit</code> 传入额外的参数 , 即 <code>mutation</code> 的 载荷 ( `payload ) :</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">this</span>.$store.commit(<span class=\"string\">&quot;increment&quot;</span>, payload);</span><br></pre></td></tr></table></figure>\n\n<p>在大多数情况下 , 载荷应该是一个对象 , 这样可以包含多个字段并且记录的 <code>mutation</code> 会更易读 :</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">store.commit(<span class=\"string\">&quot;increment&quot;</span>, &#123; <span class=\"attr\">amount</span>: <span class=\"number\">10</span> &#125;);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"attr\">mutations</span>: &#123;</span><br><span class=\"line\">  increment (state, payload) &#123;</span><br><span class=\"line\">    state.count = payload.amount</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Action\"><a href=\"#Action\" class=\"headerlink\" title=\"Action\"></a>Action</h1><p><code>Action</code> 类似于 <code>mutation</code> , 不同在于 :</p>\n<ul>\n<li><code>Action</code> 提交的是 <code>mutation</code> , 而不是直接变更状态</li>\n<li><code>Action</code> 可以包含任意异步操作</li>\n</ul>\n<p><code>Action</code> 函数接受一个与 <code>store</code> 实例具有相同方法和属性的 <code>context</code> 对象 , 因此你可以调用 <code>context.commit</code> 提交一个 <code>mutation</code> , 或者通过 <code>context.state</code> 和 <code>context.getters</code> 来获取 <code>state</code> 和 <code>getters</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">actions: &#123;</span><br><span class=\"line\">  increment (context,payload) &#123;</span><br><span class=\"line\">     context.commit(<span class=\"string\">&#x27;increment&#x27;</span>,payload)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>乍一眼看上去感觉多此一举 , 我们直接分发 <code>mutation</code> 岂不更方便 ? 实际上并非如此 , 还记得 <code>mutation</code> 必须同步执行这个限制么 ? <code>Action</code> 就不受约束 ! 我们可以在 <code>action</code> 内部执行异步操作 :</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">actions: &#123;</span><br><span class=\"line\">  increment (context,payload) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      context.commit(<span class=\"string\">&#x27;increment&#x27;</span>,payload)</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>Actions</code> 支持同样的载荷方式和对象方式进行分发 :</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 以载荷形式分发</span></span><br><span class=\"line\"><span class=\"built_in\">this</span>.$store.dispatch(<span class=\"string\">&quot;incrementAsync&quot;</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">amount</span>: <span class=\"number\">10</span>,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 以对象形式分发</span></span><br><span class=\"line\"><span class=\"built_in\">this</span>.$store.dispatch(&#123;</span><br><span class=\"line\">  <span class=\"attr\">type</span>: <span class=\"string\">&quot;incrementAsync&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">amount</span>: <span class=\"number\">10</span>,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Module\"><a href=\"#Module\" class=\"headerlink\" title=\"Module\"></a>Module</h1><p>由于使用单一状态树 , 应用的所有状态会集中到一个比较大的对象 , 当应用变得非常复杂时 , <code>store</code> 对象就有可能变得相当臃肿<br>为了解决以上问题 , <code>Vuex</code> 允许我们将 <code>store</code> 分割成模块 ( <code>module</code> ) , 每个模块拥有自己的 <code>state</code>、<code>mutation</code>、<code>action</code>、<code>getter</code>、甚至是嵌套子模块——从上至下进行同样方式的分割:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> moduleA = &#123;</span><br><span class=\"line\">  <span class=\"attr\">state</span>: <span class=\"function\">() =&gt;</span> (&#123; ... &#125;),</span><br><span class=\"line\">  <span class=\"attr\">mutations</span>: &#123; ... &#125;,</span><br><span class=\"line\">  <span class=\"attr\">actions</span>: &#123; ... &#125;,</span><br><span class=\"line\">  <span class=\"attr\">getters</span>: &#123; ... &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> moduleB = &#123;</span><br><span class=\"line\">  <span class=\"attr\">state</span>: <span class=\"function\">() =&gt;</span> (&#123; ... &#125;),</span><br><span class=\"line\">  <span class=\"attr\">mutations</span>: &#123; ... &#125;,</span><br><span class=\"line\">  <span class=\"attr\">actions</span>: &#123; ... &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">  <span class=\"attr\">modules</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span>: moduleA,</span><br><span class=\"line\">    <span class=\"attr\">b</span>: moduleB</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">store.state.a <span class=\"comment\">// -&gt; moduleA 的状态</span></span><br><span class=\"line\">store.state.b <span class=\"comment\">// -&gt; moduleB 的状态</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"模块的局部状态\"><a href=\"#模块的局部状态\" class=\"headerlink\" title=\"模块的局部状态\"></a>模块的局部状态</h2><p>对于模块内部的 <code>mutation</code> 和 <code>getter</code> , 接收的第一个参数是模块的局部状态对象</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> moduleA = &#123;</span><br><span class=\"line\">  <span class=\"attr\">state</span>: <span class=\"function\">() =&gt;</span> (&#123;</span><br><span class=\"line\">    <span class=\"attr\">count</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">  &#125;),</span><br><span class=\"line\">  <span class=\"attr\">mutations</span>: &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">increment</span>(<span class=\"params\">state</span>)</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 这里的 `state` 对象是模块的局部状态</span></span><br><span class=\"line\">      state.count++;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">getters</span>: &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">doubleCount</span>(<span class=\"params\">state</span>)</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> state.count * <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>同样 , 对于模块内部的 action , 局部状态通过 <code>context.state</code> 暴露出来 , 根节点状态则为 <code>context.rootState</code> :</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> moduleA = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"attr\">actions</span>: &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">incrementIfOddOnRootSum</span>(<span class=\"params\">&#123; state, commit, rootState &#125;</span>)</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ((state.count + rootState.count) % <span class=\"number\">2</span> === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        commit(<span class=\"string\">&quot;increment&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"命名空间\"><a href=\"#命名空间\" class=\"headerlink\" title=\"命名空间\"></a>命名空间</h2><p>如果希望你的模块具有更高的封装度和复用性 , 你可以通过添加 <code>namespaced</code>: <code>true</code> 的方式使其成为带命名空间的模块。当模块被注册后 , 它的所有 <code>getter</code>、<code>action</code> 及 <code>mutation</code> 都会自动根据模块注册的路径调整命名 ,例如 :</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">  <span class=\"attr\">modules</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">account</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">namespaced</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 模块内容（module assets）</span></span><br><span class=\"line\">      <span class=\"attr\">state</span>: <span class=\"function\">() =&gt;</span> (&#123; ... &#125;), <span class=\"comment\">// 模块内的状态已经是嵌套的了 , 使用 `namespaced` 属性不会对其产生影响</span></span><br><span class=\"line\">      <span class=\"attr\">getters</span>: &#123;</span><br><span class=\"line\">        isAdmin () &#123; ... &#125; <span class=\"comment\">// -&gt; getters[&#x27;account/isAdmin&#x27;]</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"attr\">actions</span>: &#123;</span><br><span class=\"line\">        login () &#123; ... &#125; <span class=\"comment\">// -&gt; dispatch(&#x27;account/login&#x27;)</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"attr\">mutations</span>: &#123;</span><br><span class=\"line\">        login () &#123; ... &#125; <span class=\"comment\">// -&gt; commit(&#x27;account/login&#x27;)</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 嵌套模块</span></span><br><span class=\"line\">      <span class=\"attr\">modules</span>: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 继承父模块的命名空间</span></span><br><span class=\"line\">        <span class=\"attr\">myPage</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">state</span>: <span class=\"function\">() =&gt;</span> (&#123; ... &#125;),</span><br><span class=\"line\">          <span class=\"attr\">getters</span>: &#123;</span><br><span class=\"line\">            profile () &#123; ... &#125; <span class=\"comment\">// -&gt; getters[&#x27;account/profile&#x27;]</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 进一步嵌套命名空间</span></span><br><span class=\"line\">        <span class=\"attr\">posts</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">namespaced</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"attr\">state</span>: <span class=\"function\">() =&gt;</span> (&#123; ... &#125;),</span><br><span class=\"line\">          <span class=\"attr\">getters</span>: &#123;</span><br><span class=\"line\">            popular () &#123; ... &#125; <span class=\"comment\">// -&gt; getters[&#x27;account/posts/popular&#x27;]</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n","site":{"data":{"link":{"class1":{"class_name":"舍友","link_list":{"1":{"name":"codeAntg","link":"https://blog.csdn.net/weixin_44745147","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/fjh.jpg","descr":"那家刀削面不错","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class2":{"class_name":"致谢","link_list":{"1":{"name":"JerrC","link":"https://immyw.com","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/immyw.png","descr":"今日事,今日毕","width":"1px","style":"solid","color":"#60d0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/hexo.svg","descr":"A fast, simple & powerful blog framework","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class3":{"class_name":"友人","link_list":{"1":{"name":"Chester","link":"http://chesterlds.cn","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/chester.jpg","descr":null,"width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Wangs","link":"https://wangsss.cn/","avatar":"https://wangsss.cn/img/avatar.png","descr":"不疯魔，不成活 ~","width":"1px","style":"solid","color":"#9d9d9d","custom":"link_custom1","time":"4s","namecolor":"0094ff","descolor":"#ff9191"}}}}}},"excerpt":"","more":"<h1 id=\"Vuex-是一个专为-Vue-js-应用程序开发的状态管理模式\"><a href=\"#Vuex-是一个专为-Vue-js-应用程序开发的状态管理模式\" class=\"headerlink\" title=\"Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式\"></a>Vuex 是一个专为 Vue.js 应用程序开发的状态管理模式</h1><ul>\n<li><code>state</code> , 驱动应用的数据源</li>\n<li><code>view</code> , 以声明方式将 state 映射到视图</li>\n<li><code>actions</code> , 响应在 view 上的用户输入导致的状态变化</li>\n</ul>\n<p><strong>以下是一个表示“单向数据流”理念的简单示意</strong><br><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vuebasic/vuexstate.png\" alt=\"state_view_actions\"></p>\n<p>但是 , 当我们的应用遇到多个组件共享状态时 , 单向数据流的简洁性很容易被破坏 :</p>\n<ul>\n<li>多个视图依赖于同一状态</li>\n<li>来自不同视图的行为需要变更同一状态</li>\n</ul>\n<p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/vuebasic/vuex.png\" alt=\"vuex\"></p>\n<h1 id=\"核心概念\"><a href=\"#核心概念\" class=\"headerlink\" title=\"核心概念\"></a>核心概念</h1><h1 id=\"State\"><a href=\"#State\" class=\"headerlink\" title=\"State\"></a>State</h1><h2 id=\"在-Vue-组件中获得-Vuex-状态\"><a href=\"#在-Vue-组件中获得-Vuex-状态\" class=\"headerlink\" title=\"在 Vue 组件中获得 Vuex 状态\"></a>在 <code>Vue</code> 组件中获得 <code>Vuex</code> 状态</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 比如创建一个组件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> componentA = &#123;</span><br><span class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">`&lt;div&gt;&#123;&#123; valueA &#125;&#125;&lt;/div&gt;`</span>,</span><br><span class=\"line\">  <span class=\"attr\">computed</span>: &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">valueA</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> store.state.valueA;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>每当 <code>store.state.valueA</code> 变化的时候, 都会重新求取计算属性 , 并且触发更新相关联的 <code>DOM</code></p>\n<p>然而 , 这种模式导致组件依赖全局状态单例 ,在模块化的构建系统中 , 在每个需要使用 <code>state</code> 的组件中需要频繁地导入 , 并且在测试组件时需要模拟状态。</p>\n<p><code>Vuex</code> 通过 <code>store</code> 选项 , 提供了一种机制将状态从根组件 <code>注入</code> 到每一个子组件中 ( 需调用 <code>Vue.use(Vuex)</code> )</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> app = <span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  <span class=\"attr\">el</span>: <span class=\"string\">&quot;#app&quot;</span>,</span><br><span class=\"line\">  <span class=\"comment\">// 把 store 对象提供给 &quot;store&quot; 选项 , 这可以把 store 的实例注入所有的子组件</span></span><br><span class=\"line\">  store,</span><br><span class=\"line\">  <span class=\"attr\">components</span>: &#123; componentA &#125;,</span><br><span class=\"line\">  <span class=\"attr\">template</span>: <span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">    &lt;div class=&quot;app&quot;&gt;</span></span><br><span class=\"line\"><span class=\"string\">      &lt;componentA&gt;&lt;/componentA&gt;</span></span><br><span class=\"line\"><span class=\"string\">    &lt;/div&gt;</span></span><br><span class=\"line\"><span class=\"string\">  `</span>,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"mapState-辅助函数\"><a href=\"#mapState-辅助函数\" class=\"headerlink\" title=\"mapState 辅助函数\"></a>mapState 辅助函数</h3><p>当一个组件需要获取多个状态的时候 , 将这些状态都声明为计算属性会有些重复和冗余 , 为了解决这个问题 , 我们可以使用 <code>mapState</code> 辅助函数帮助我们生成计算属性</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vuex&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">computed</span>: &#123;</span><br><span class=\"line\">    ...mapState(&#123;</span><br><span class=\"line\">      <span class=\"attr\">valueA</span>: <span class=\"string\">&quot;valueA&quot;</span>,</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Getter\"><a href=\"#Getter\" class=\"headerlink\" title=\"Getter\"></a>Getter</h1><p>有时候我们需要从 <code>store</code> 中的 <code>state</code> 中派生出一些状态 , 例如对列表进行过滤并计数:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed: &#123;</span><br><span class=\"line\">  doneTodosCount () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.$store.state.todos.filter(<span class=\"function\"><span class=\"params\">todo</span> =&gt;</span> todo.done).length</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>Vuex</code> 允许我们在 <code>store</code> 中定义 <code>getter</code> ( 可以认为是 <code>store</code> 的计算属性 ) , 就像计算属性一样 , <code>getter</code> 的返回值会根据它的依赖被缓存起来 , 且只有当它的依赖值发生了改变才会被重新计算</p>\n<p><code>Getter</code> 接受 <code>state</code> 作为其第一个参数 :</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">  <span class=\"attr\">state</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">todos</span>: [</span><br><span class=\"line\">      &#123; <span class=\"attr\">id</span>: <span class=\"number\">1</span>, <span class=\"attr\">text</span>: <span class=\"string\">&quot;...&quot;</span>, <span class=\"attr\">done</span>: <span class=\"literal\">true</span> &#125;,</span><br><span class=\"line\">      &#123; <span class=\"attr\">id</span>: <span class=\"number\">2</span>, <span class=\"attr\">text</span>: <span class=\"string\">&quot;...&quot;</span>, <span class=\"attr\">done</span>: <span class=\"literal\">false</span> &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">getters</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">doneTodos</span>: <span class=\"function\">(<span class=\"params\">state</span>) =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> state.todos.filter(<span class=\"function\">(<span class=\"params\">todo</span>) =&gt;</span> todo.done);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"mapGetters-辅助函数\"><a href=\"#mapGetters-辅助函数\" class=\"headerlink\" title=\"mapGetters 辅助函数\"></a>mapGetters 辅助函数</h3><p><code>mapGetters</code> 辅助函数仅仅是将 <code>store</code> 中的 <code>getter</code> 映射到局部计算属性</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; mapGetters &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;vuex&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">computed</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 使用对象展开运算符将 getter 混入 computed 对象中</span></span><br><span class=\"line\">    ...mapGetters([</span><br><span class=\"line\">      <span class=\"string\">&quot;doneTodosCount&quot;</span>,</span><br><span class=\"line\">      <span class=\"string\">&quot;anotherGetter&quot;</span>,</span><br><span class=\"line\">      <span class=\"comment\">// ...</span></span><br><span class=\"line\">    ]),</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>如果你想将一个 <code>getter</code> 属性另取一个名字 , 使用对象形式 :</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...mapGetters(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 把 `this.doneCount` 映射为 `this.$store.getters.doneTodosCount`</span></span><br><span class=\"line\">  <span class=\"attr\">doneCount</span>: <span class=\"string\">&#x27;doneTodosCount&#x27;</span></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Mutation\"><a href=\"#Mutation\" class=\"headerlink\" title=\"Mutation\"></a>Mutation</h1><p>更改 <code>Vuex</code> 的 <code>store</code> 中的状态的唯一方法是提交 <code>mutation</code></p>\n<h2 id=\"提交载荷-Payload\"><a href=\"#提交载荷-Payload\" class=\"headerlink\" title=\"提交载荷( Payload )\"></a>提交载荷( <code>Payload</code> )</h2><p>你可以向 <code>store.commit</code> 传入额外的参数 , 即 <code>mutation</code> 的 载荷 ( `payload ) :</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">this</span>.$store.commit(<span class=\"string\">&quot;increment&quot;</span>, payload);</span><br></pre></td></tr></table></figure>\n\n<p>在大多数情况下 , 载荷应该是一个对象 , 这样可以包含多个字段并且记录的 <code>mutation</code> 会更易读 :</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">store.commit(<span class=\"string\">&quot;increment&quot;</span>, &#123; <span class=\"attr\">amount</span>: <span class=\"number\">10</span> &#125;);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// ...</span></span><br><span class=\"line\"><span class=\"attr\">mutations</span>: &#123;</span><br><span class=\"line\">  increment (state, payload) &#123;</span><br><span class=\"line\">    state.count = payload.amount</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Action\"><a href=\"#Action\" class=\"headerlink\" title=\"Action\"></a>Action</h1><p><code>Action</code> 类似于 <code>mutation</code> , 不同在于 :</p>\n<ul>\n<li><code>Action</code> 提交的是 <code>mutation</code> , 而不是直接变更状态</li>\n<li><code>Action</code> 可以包含任意异步操作</li>\n</ul>\n<p><code>Action</code> 函数接受一个与 <code>store</code> 实例具有相同方法和属性的 <code>context</code> 对象 , 因此你可以调用 <code>context.commit</code> 提交一个 <code>mutation</code> , 或者通过 <code>context.state</code> 和 <code>context.getters</code> 来获取 <code>state</code> 和 <code>getters</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">actions: &#123;</span><br><span class=\"line\">  increment (context,payload) &#123;</span><br><span class=\"line\">     context.commit(<span class=\"string\">&#x27;increment&#x27;</span>,payload)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>乍一眼看上去感觉多此一举 , 我们直接分发 <code>mutation</code> 岂不更方便 ? 实际上并非如此 , 还记得 <code>mutation</code> 必须同步执行这个限制么 ? <code>Action</code> 就不受约束 ! 我们可以在 <code>action</code> 内部执行异步操作 :</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">actions: &#123;</span><br><span class=\"line\">  increment (context,payload) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      context.commit(<span class=\"string\">&#x27;increment&#x27;</span>,payload)</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>Actions</code> 支持同样的载荷方式和对象方式进行分发 :</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 以载荷形式分发</span></span><br><span class=\"line\"><span class=\"built_in\">this</span>.$store.dispatch(<span class=\"string\">&quot;incrementAsync&quot;</span>, &#123;</span><br><span class=\"line\">  <span class=\"attr\">amount</span>: <span class=\"number\">10</span>,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 以对象形式分发</span></span><br><span class=\"line\"><span class=\"built_in\">this</span>.$store.dispatch(&#123;</span><br><span class=\"line\">  <span class=\"attr\">type</span>: <span class=\"string\">&quot;incrementAsync&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">amount</span>: <span class=\"number\">10</span>,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"Module\"><a href=\"#Module\" class=\"headerlink\" title=\"Module\"></a>Module</h1><p>由于使用单一状态树 , 应用的所有状态会集中到一个比较大的对象 , 当应用变得非常复杂时 , <code>store</code> 对象就有可能变得相当臃肿<br>为了解决以上问题 , <code>Vuex</code> 允许我们将 <code>store</code> 分割成模块 ( <code>module</code> ) , 每个模块拥有自己的 <code>state</code>、<code>mutation</code>、<code>action</code>、<code>getter</code>、甚至是嵌套子模块——从上至下进行同样方式的分割:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> moduleA = &#123;</span><br><span class=\"line\">  <span class=\"attr\">state</span>: <span class=\"function\">() =&gt;</span> (&#123; ... &#125;),</span><br><span class=\"line\">  <span class=\"attr\">mutations</span>: &#123; ... &#125;,</span><br><span class=\"line\">  <span class=\"attr\">actions</span>: &#123; ... &#125;,</span><br><span class=\"line\">  <span class=\"attr\">getters</span>: &#123; ... &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> moduleB = &#123;</span><br><span class=\"line\">  <span class=\"attr\">state</span>: <span class=\"function\">() =&gt;</span> (&#123; ... &#125;),</span><br><span class=\"line\">  <span class=\"attr\">mutations</span>: &#123; ... &#125;,</span><br><span class=\"line\">  <span class=\"attr\">actions</span>: &#123; ... &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">  <span class=\"attr\">modules</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">a</span>: moduleA,</span><br><span class=\"line\">    <span class=\"attr\">b</span>: moduleB</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">store.state.a <span class=\"comment\">// -&gt; moduleA 的状态</span></span><br><span class=\"line\">store.state.b <span class=\"comment\">// -&gt; moduleB 的状态</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"模块的局部状态\"><a href=\"#模块的局部状态\" class=\"headerlink\" title=\"模块的局部状态\"></a>模块的局部状态</h2><p>对于模块内部的 <code>mutation</code> 和 <code>getter</code> , 接收的第一个参数是模块的局部状态对象</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> moduleA = &#123;</span><br><span class=\"line\">  <span class=\"attr\">state</span>: <span class=\"function\">() =&gt;</span> (&#123;</span><br><span class=\"line\">    <span class=\"attr\">count</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">  &#125;),</span><br><span class=\"line\">  <span class=\"attr\">mutations</span>: &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">increment</span>(<span class=\"params\">state</span>)</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 这里的 `state` 对象是模块的局部状态</span></span><br><span class=\"line\">      state.count++;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">getters</span>: &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">doubleCount</span>(<span class=\"params\">state</span>)</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> state.count * <span class=\"number\">2</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>同样 , 对于模块内部的 action , 局部状态通过 <code>context.state</code> 暴露出来 , 根节点状态则为 <code>context.rootState</code> :</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> moduleA = &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">  <span class=\"attr\">actions</span>: &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">incrementIfOddOnRootSum</span>(<span class=\"params\">&#123; state, commit, rootState &#125;</span>)</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> ((state.count + rootState.count) % <span class=\"number\">2</span> === <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        commit(<span class=\"string\">&quot;increment&quot;</span>);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"命名空间\"><a href=\"#命名空间\" class=\"headerlink\" title=\"命名空间\"></a>命名空间</h2><p>如果希望你的模块具有更高的封装度和复用性 , 你可以通过添加 <code>namespaced</code>: <code>true</code> 的方式使其成为带命名空间的模块。当模块被注册后 , 它的所有 <code>getter</code>、<code>action</code> 及 <code>mutation</code> 都会自动根据模块注册的路径调整命名 ,例如 :</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">  <span class=\"attr\">modules</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">account</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">namespaced</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 模块内容（module assets）</span></span><br><span class=\"line\">      <span class=\"attr\">state</span>: <span class=\"function\">() =&gt;</span> (&#123; ... &#125;), <span class=\"comment\">// 模块内的状态已经是嵌套的了 , 使用 `namespaced` 属性不会对其产生影响</span></span><br><span class=\"line\">      <span class=\"attr\">getters</span>: &#123;</span><br><span class=\"line\">        isAdmin () &#123; ... &#125; <span class=\"comment\">// -&gt; getters[&#x27;account/isAdmin&#x27;]</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"attr\">actions</span>: &#123;</span><br><span class=\"line\">        login () &#123; ... &#125; <span class=\"comment\">// -&gt; dispatch(&#x27;account/login&#x27;)</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"attr\">mutations</span>: &#123;</span><br><span class=\"line\">        login () &#123; ... &#125; <span class=\"comment\">// -&gt; commit(&#x27;account/login&#x27;)</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"comment\">// 嵌套模块</span></span><br><span class=\"line\">      <span class=\"attr\">modules</span>: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 继承父模块的命名空间</span></span><br><span class=\"line\">        <span class=\"attr\">myPage</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">state</span>: <span class=\"function\">() =&gt;</span> (&#123; ... &#125;),</span><br><span class=\"line\">          <span class=\"attr\">getters</span>: &#123;</span><br><span class=\"line\">            profile () &#123; ... &#125; <span class=\"comment\">// -&gt; getters[&#x27;account/profile&#x27;]</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 进一步嵌套命名空间</span></span><br><span class=\"line\">        <span class=\"attr\">posts</span>: &#123;</span><br><span class=\"line\">          <span class=\"attr\">namespaced</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"attr\">state</span>: <span class=\"function\">() =&gt;</span> (&#123; ... &#125;),</span><br><span class=\"line\">          <span class=\"attr\">getters</span>: &#123;</span><br><span class=\"line\">            popular () &#123; ... &#125; <span class=\"comment\">// -&gt; getters[&#x27;account/posts/popular&#x27;]</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n"},{"title":"微信小程序 背景音乐","cover":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/wx/wxminipro.jpg","top_img":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg","date":"2020-12-02T16:25:16.000Z","_content":"\n# 微信小程序背景音乐\n\n## 直接上代码\n\n### wxml\n\n```html\n<!-- music -->\n<view class=\"music {{isplay?'playing':''}}\" bindtap=\"ctrlMusic\">\n  <image src=\"{{musicimg}}\"></image>\n</view>\n```\n\n### wxss\n\n```css\n/* music */\n.music {\n  position: relative;\n  top: 200px;\n  margin: 0 auto;\n  border: 2px solid #000000;\n  width: 96rpx;\n  height: 96rpx;\n  border-radius: 50%;\n  z-index: 10;\n}\n\n/* 音符旋转动画 */\n.playing {\n  animation: rotate 2s linear infinite;\n}\n\n@keyframes rotate {\n  from {\n    transform: rotate(0deg);\n  }\n\n  to {\n    transform: rotate(360deg);\n  }\n}\n\n/* 音符 */\n.music image {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  width: 80%;\n  height: 80%;\n}\n```\n\n### js\n\n```js\nPage({\n  data: {\n    musicimg: \"/img/music.png\", //背景音乐符号图片\n    isplay: false,\n  },\n  // 控制背景音乐\n  ctrlMusic: function () {\n    const backgroundAudioManager = wx.getBackgroundAudioManager();\n    backgroundAudioManager.title = \"New Life\";\n    backgroundAudioManager.epname = \"New Life\";\n    backgroundAudioManager.singer = \"Peter Jeremias\";\n    backgroundAudioManager.coverImgUrl =\n      \"https://ae01.alicdn.com/kf/Ud08f63ccb57b41988e5921036e61bca2r.jpg\";\n    backgroundAudioManager.src = \"https://codehhr.gitee.io/musics/new_life.mp3\";\n    // 播放\n    if (!this.data.isplay) {\n      this.setData({\n        isplay: !this.data.isplay,\n      });\n      console.log(\"music playing !\");\n      // 结束时循环\n      backgroundAudioManager.onEnded(() => {\n        console.log(\"music end !\");\n        this.setData({\n          isplay: !this.data.isplay,\n        });\n        console.log(\"music replay !\");\n        this.ctrlMusic();\n      });\n    }\n    // 暂停\n    else {\n      this.setData({\n        isplay: !this.data.isplay,\n      });\n      backgroundAudioManager.pause();\n      backgroundAudioManager.onPause(() => {\n        console.log(\"music stop !\");\n      });\n    }\n  },\n});\n```\n\n## 效果图\n\n![music](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/wx/music.gif)\n\n# The_End\n","source":"_posts/wxapp/wxapp-ctrlmusic.md","raw":"---\ntitle: 微信小程序 背景音乐\ncover: https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/wx/wxminipro.jpg\ntop_img: https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg\ndate: 2020-12-03 00:25:16\ntags:\n  - 微信小程序\n  - 背景音乐\ncategories:\n  - 微信小程序\n---\n\n# 微信小程序背景音乐\n\n## 直接上代码\n\n### wxml\n\n```html\n<!-- music -->\n<view class=\"music {{isplay?'playing':''}}\" bindtap=\"ctrlMusic\">\n  <image src=\"{{musicimg}}\"></image>\n</view>\n```\n\n### wxss\n\n```css\n/* music */\n.music {\n  position: relative;\n  top: 200px;\n  margin: 0 auto;\n  border: 2px solid #000000;\n  width: 96rpx;\n  height: 96rpx;\n  border-radius: 50%;\n  z-index: 10;\n}\n\n/* 音符旋转动画 */\n.playing {\n  animation: rotate 2s linear infinite;\n}\n\n@keyframes rotate {\n  from {\n    transform: rotate(0deg);\n  }\n\n  to {\n    transform: rotate(360deg);\n  }\n}\n\n/* 音符 */\n.music image {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  width: 80%;\n  height: 80%;\n}\n```\n\n### js\n\n```js\nPage({\n  data: {\n    musicimg: \"/img/music.png\", //背景音乐符号图片\n    isplay: false,\n  },\n  // 控制背景音乐\n  ctrlMusic: function () {\n    const backgroundAudioManager = wx.getBackgroundAudioManager();\n    backgroundAudioManager.title = \"New Life\";\n    backgroundAudioManager.epname = \"New Life\";\n    backgroundAudioManager.singer = \"Peter Jeremias\";\n    backgroundAudioManager.coverImgUrl =\n      \"https://ae01.alicdn.com/kf/Ud08f63ccb57b41988e5921036e61bca2r.jpg\";\n    backgroundAudioManager.src = \"https://codehhr.gitee.io/musics/new_life.mp3\";\n    // 播放\n    if (!this.data.isplay) {\n      this.setData({\n        isplay: !this.data.isplay,\n      });\n      console.log(\"music playing !\");\n      // 结束时循环\n      backgroundAudioManager.onEnded(() => {\n        console.log(\"music end !\");\n        this.setData({\n          isplay: !this.data.isplay,\n        });\n        console.log(\"music replay !\");\n        this.ctrlMusic();\n      });\n    }\n    // 暂停\n    else {\n      this.setData({\n        isplay: !this.data.isplay,\n      });\n      backgroundAudioManager.pause();\n      backgroundAudioManager.onPause(() => {\n        console.log(\"music stop !\");\n      });\n    }\n  },\n});\n```\n\n## 效果图\n\n![music](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/wx/music.gif)\n\n# The_End\n","slug":"wxapp/wxapp-ctrlmusic","published":1,"updated":"2021-04-30T13:44:07.247Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cksvxwnp00054gubqd4b5ejhm","content":"<h1 id=\"微信小程序背景音乐\"><a href=\"#微信小程序背景音乐\" class=\"headerlink\" title=\"微信小程序背景音乐\"></a>微信小程序背景音乐</h1><h2 id=\"直接上代码\"><a href=\"#直接上代码\" class=\"headerlink\" title=\"直接上代码\"></a>直接上代码</h2><h3 id=\"wxml\"><a href=\"#wxml\" class=\"headerlink\" title=\"wxml\"></a>wxml</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- music --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;music &#123;&#123;isplay?&#x27;playing&#x27;:&#x27;&#x27;&#125;&#125;&quot;</span> <span class=\"attr\">bindtap</span>=<span class=\"string\">&quot;ctrlMusic&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">image</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;&#123;&#123;musicimg&#125;&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">image</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"wxss\"><a href=\"#wxss\" class=\"headerlink\" title=\"wxss\"></a>wxss</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* music */</span></span><br><span class=\"line\"><span class=\"selector-class\">.music</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">2px</span> solid <span class=\"number\">#000000</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">96</span>rpx;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">96</span>rpx;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">z-index</span>: <span class=\"number\">10</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 音符旋转动画 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.playing</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">animation</span>: rotate <span class=\"number\">2s</span> linear infinite;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@keyframes</span> rotate &#123;</span><br><span class=\"line\">  <span class=\"selector-tag\">from</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">rotate</span>(<span class=\"number\">0deg</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-tag\">to</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">rotate</span>(<span class=\"number\">360deg</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 音符 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.music</span> image &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(-<span class=\"number\">50%</span>, -<span class=\"number\">50%</span>);</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">80%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">80%</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"js\"><a href=\"#js\" class=\"headerlink\" title=\"js\"></a>js</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Page(&#123;</span><br><span class=\"line\">  <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">musicimg</span>: <span class=\"string\">&quot;/img/music.png&quot;</span>, <span class=\"comment\">//背景音乐符号图片</span></span><br><span class=\"line\">    <span class=\"attr\">isplay</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 控制背景音乐</span></span><br><span class=\"line\">  <span class=\"attr\">ctrlMusic</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> backgroundAudioManager = wx.getBackgroundAudioManager();</span><br><span class=\"line\">    backgroundAudioManager.title = <span class=\"string\">&quot;New Life&quot;</span>;</span><br><span class=\"line\">    backgroundAudioManager.epname = <span class=\"string\">&quot;New Life&quot;</span>;</span><br><span class=\"line\">    backgroundAudioManager.singer = <span class=\"string\">&quot;Peter Jeremias&quot;</span>;</span><br><span class=\"line\">    backgroundAudioManager.coverImgUrl =</span><br><span class=\"line\">      <span class=\"string\">&quot;https://ae01.alicdn.com/kf/Ud08f63ccb57b41988e5921036e61bca2r.jpg&quot;</span>;</span><br><span class=\"line\">    backgroundAudioManager.src = <span class=\"string\">&quot;https://codehhr.gitee.io/musics/new_life.mp3&quot;</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 播放</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"built_in\">this</span>.data.isplay) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.setData(&#123;</span><br><span class=\"line\">        <span class=\"attr\">isplay</span>: !<span class=\"built_in\">this</span>.data.isplay,</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;music playing !&quot;</span>);</span><br><span class=\"line\">      <span class=\"comment\">// 结束时循环</span></span><br><span class=\"line\">      backgroundAudioManager.onEnded(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;music end !&quot;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.setData(&#123;</span><br><span class=\"line\">          <span class=\"attr\">isplay</span>: !<span class=\"built_in\">this</span>.data.isplay,</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;music replay !&quot;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.ctrlMusic();</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 暂停</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.setData(&#123;</span><br><span class=\"line\">        <span class=\"attr\">isplay</span>: !<span class=\"built_in\">this</span>.data.isplay,</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      backgroundAudioManager.pause();</span><br><span class=\"line\">      backgroundAudioManager.onPause(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;music stop !&quot;</span>);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"效果图\"><a href=\"#效果图\" class=\"headerlink\" title=\"效果图\"></a>效果图</h2><p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/wx/music.gif\" alt=\"music\"></p>\n<h1 id=\"The-End\"><a href=\"#The-End\" class=\"headerlink\" title=\"The_End\"></a>The_End</h1>","site":{"data":{"link":{"class1":{"class_name":"舍友","link_list":{"1":{"name":"codeAntg","link":"https://blog.csdn.net/weixin_44745147","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/fjh.jpg","descr":"那家刀削面不错","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class2":{"class_name":"致谢","link_list":{"1":{"name":"JerrC","link":"https://immyw.com","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/immyw.png","descr":"今日事,今日毕","width":"1px","style":"solid","color":"#60d0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/hexo.svg","descr":"A fast, simple & powerful blog framework","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class3":{"class_name":"友人","link_list":{"1":{"name":"Chester","link":"http://chesterlds.cn","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/chester.jpg","descr":null,"width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Wangs","link":"https://wangsss.cn/","avatar":"https://wangsss.cn/img/avatar.png","descr":"不疯魔，不成活 ~","width":"1px","style":"solid","color":"#9d9d9d","custom":"link_custom1","time":"4s","namecolor":"0094ff","descolor":"#ff9191"}}}}}},"excerpt":"","more":"<h1 id=\"微信小程序背景音乐\"><a href=\"#微信小程序背景音乐\" class=\"headerlink\" title=\"微信小程序背景音乐\"></a>微信小程序背景音乐</h1><h2 id=\"直接上代码\"><a href=\"#直接上代码\" class=\"headerlink\" title=\"直接上代码\"></a>直接上代码</h2><h3 id=\"wxml\"><a href=\"#wxml\" class=\"headerlink\" title=\"wxml\"></a>wxml</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- music --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;music &#123;&#123;isplay?&#x27;playing&#x27;:&#x27;&#x27;&#125;&#125;&quot;</span> <span class=\"attr\">bindtap</span>=<span class=\"string\">&quot;ctrlMusic&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">image</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;&#123;&#123;musicimg&#125;&#125;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">image</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"wxss\"><a href=\"#wxss\" class=\"headerlink\" title=\"wxss\"></a>wxss</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* music */</span></span><br><span class=\"line\"><span class=\"selector-class\">.music</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">2px</span> solid <span class=\"number\">#000000</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">96</span>rpx;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">96</span>rpx;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">z-index</span>: <span class=\"number\">10</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 音符旋转动画 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.playing</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">animation</span>: rotate <span class=\"number\">2s</span> linear infinite;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@keyframes</span> rotate &#123;</span><br><span class=\"line\">  <span class=\"selector-tag\">from</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">rotate</span>(<span class=\"number\">0deg</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"selector-tag\">to</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">rotate</span>(<span class=\"number\">360deg</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 音符 */</span></span><br><span class=\"line\"><span class=\"selector-class\">.music</span> image &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">transform</span>: <span class=\"built_in\">translate</span>(-<span class=\"number\">50%</span>, -<span class=\"number\">50%</span>);</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">80%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">80%</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"js\"><a href=\"#js\" class=\"headerlink\" title=\"js\"></a>js</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Page(&#123;</span><br><span class=\"line\">  <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">musicimg</span>: <span class=\"string\">&quot;/img/music.png&quot;</span>, <span class=\"comment\">//背景音乐符号图片</span></span><br><span class=\"line\">    <span class=\"attr\">isplay</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 控制背景音乐</span></span><br><span class=\"line\">  <span class=\"attr\">ctrlMusic</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> backgroundAudioManager = wx.getBackgroundAudioManager();</span><br><span class=\"line\">    backgroundAudioManager.title = <span class=\"string\">&quot;New Life&quot;</span>;</span><br><span class=\"line\">    backgroundAudioManager.epname = <span class=\"string\">&quot;New Life&quot;</span>;</span><br><span class=\"line\">    backgroundAudioManager.singer = <span class=\"string\">&quot;Peter Jeremias&quot;</span>;</span><br><span class=\"line\">    backgroundAudioManager.coverImgUrl =</span><br><span class=\"line\">      <span class=\"string\">&quot;https://ae01.alicdn.com/kf/Ud08f63ccb57b41988e5921036e61bca2r.jpg&quot;</span>;</span><br><span class=\"line\">    backgroundAudioManager.src = <span class=\"string\">&quot;https://codehhr.gitee.io/musics/new_life.mp3&quot;</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 播放</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"built_in\">this</span>.data.isplay) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.setData(&#123;</span><br><span class=\"line\">        <span class=\"attr\">isplay</span>: !<span class=\"built_in\">this</span>.data.isplay,</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;music playing !&quot;</span>);</span><br><span class=\"line\">      <span class=\"comment\">// 结束时循环</span></span><br><span class=\"line\">      backgroundAudioManager.onEnded(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;music end !&quot;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.setData(&#123;</span><br><span class=\"line\">          <span class=\"attr\">isplay</span>: !<span class=\"built_in\">this</span>.data.isplay,</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;music replay !&quot;</span>);</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.ctrlMusic();</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 暂停</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">this</span>.setData(&#123;</span><br><span class=\"line\">        <span class=\"attr\">isplay</span>: !<span class=\"built_in\">this</span>.data.isplay,</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      backgroundAudioManager.pause();</span><br><span class=\"line\">      backgroundAudioManager.onPause(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;music stop !&quot;</span>);</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"效果图\"><a href=\"#效果图\" class=\"headerlink\" title=\"效果图\"></a>效果图</h2><p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/wx/music.gif\" alt=\"music\"></p>\n<h1 id=\"The-End\"><a href=\"#The-End\" class=\"headerlink\" title=\"The_End\"></a>The_End</h1>"},{"title":"微信小程序警告设置 enable-flex 属性以使 flexbox 布局生效的解决办法","top_img":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg","cover":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/wx/wxminipro.jpg","date":"2020-07-21T14:35:21.000Z","_content":"\n# 微信小程序警告设置 enable-flex 属性以使 flexbox 布局生效的解决办法\n\n### 具体情况:\n\nscroll-view 滚动，设置 display：flex 不生效并警告设置 enable-flex 属性以使 flexbox 布局生效\n\n添加 `enable-flex` 属性,值设置为 `true` 就可以了\n\n```html\n<scroll-view enable-flex=\"true\"> </scroll-view>\n```\n\n# The_End\n","source":"_posts/wxapp/wxapp-flexenable.md","raw":"---\ntitle: 微信小程序警告设置 enable-flex 属性以使 flexbox 布局生效的解决办法\ntop_img: https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg\ncover: https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/wx/wxminipro.jpg\ndate: 2020-07-21 22:35:21\ntags:\n  - 微信小程序\n  - flexbox\ncategories:\n  - 微信小程序\n---\n\n# 微信小程序警告设置 enable-flex 属性以使 flexbox 布局生效的解决办法\n\n### 具体情况:\n\nscroll-view 滚动，设置 display：flex 不生效并警告设置 enable-flex 属性以使 flexbox 布局生效\n\n添加 `enable-flex` 属性,值设置为 `true` 就可以了\n\n```html\n<scroll-view enable-flex=\"true\"> </scroll-view>\n```\n\n# The_End\n","slug":"wxapp/wxapp-flexenable","published":1,"updated":"2021-04-30T13:21:11.032Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cksvxwnp10056gubq71ic8de5","content":"<h1 id=\"微信小程序警告设置-enable-flex-属性以使-flexbox-布局生效的解决办法\"><a href=\"#微信小程序警告设置-enable-flex-属性以使-flexbox-布局生效的解决办法\" class=\"headerlink\" title=\"微信小程序警告设置 enable-flex 属性以使 flexbox 布局生效的解决办法\"></a>微信小程序警告设置 enable-flex 属性以使 flexbox 布局生效的解决办法</h1><h3 id=\"具体情况\"><a href=\"#具体情况\" class=\"headerlink\" title=\"具体情况:\"></a>具体情况:</h3><p>scroll-view 滚动，设置 display：flex 不生效并警告设置 enable-flex 属性以使 flexbox 布局生效</p>\n<p>添加 <code>enable-flex</code> 属性,值设置为 <code>true</code> 就可以了</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">scroll-view</span> <span class=\"attr\">enable-flex</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">scroll-view</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"The-End\"><a href=\"#The-End\" class=\"headerlink\" title=\"The_End\"></a>The_End</h1>","site":{"data":{"link":{"class1":{"class_name":"舍友","link_list":{"1":{"name":"codeAntg","link":"https://blog.csdn.net/weixin_44745147","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/fjh.jpg","descr":"那家刀削面不错","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class2":{"class_name":"致谢","link_list":{"1":{"name":"JerrC","link":"https://immyw.com","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/immyw.png","descr":"今日事,今日毕","width":"1px","style":"solid","color":"#60d0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/hexo.svg","descr":"A fast, simple & powerful blog framework","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class3":{"class_name":"友人","link_list":{"1":{"name":"Chester","link":"http://chesterlds.cn","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/chester.jpg","descr":null,"width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Wangs","link":"https://wangsss.cn/","avatar":"https://wangsss.cn/img/avatar.png","descr":"不疯魔，不成活 ~","width":"1px","style":"solid","color":"#9d9d9d","custom":"link_custom1","time":"4s","namecolor":"0094ff","descolor":"#ff9191"}}}}}},"excerpt":"","more":"<h1 id=\"微信小程序警告设置-enable-flex-属性以使-flexbox-布局生效的解决办法\"><a href=\"#微信小程序警告设置-enable-flex-属性以使-flexbox-布局生效的解决办法\" class=\"headerlink\" title=\"微信小程序警告设置 enable-flex 属性以使 flexbox 布局生效的解决办法\"></a>微信小程序警告设置 enable-flex 属性以使 flexbox 布局生效的解决办法</h1><h3 id=\"具体情况\"><a href=\"#具体情况\" class=\"headerlink\" title=\"具体情况:\"></a>具体情况:</h3><p>scroll-view 滚动，设置 display：flex 不生效并警告设置 enable-flex 属性以使 flexbox 布局生效</p>\n<p>添加 <code>enable-flex</code> 属性,值设置为 <code>true</code> 就可以了</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">scroll-view</span> <span class=\"attr\">enable-flex</span>=<span class=\"string\">&quot;true&quot;</span>&gt;</span> <span class=\"tag\">&lt;/<span class=\"name\">scroll-view</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h1 id=\"The-End\"><a href=\"#The-End\" class=\"headerlink\" title=\"The_End\"></a>The_End</h1>"},{"title":"微信小程序使用彩色图标(阿里巴巴 iconfont Symbol 的用法)","top_img":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg","cover":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/wx/wxminipro.jpg","date":"2020-08-14T09:26:49.000Z","_content":"\n# 前提\n\n需要安装好 nodejs (略)\n\n用于下载插件\n\n# 安装插件\n\n```\nnpm install mini-program-iconfont-cli --save-dev\n```\n\n![miniprogram](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/wx/miniprogram.png)\n\n# 初始化配置文件\n\n```\nnpx iconfont-init\n```\n\n![initiconfontjson](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/wx/initiconfontjson.png)\n\n### 会生成一个 inconfont.json 文件\n\n![iconjsonfile](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/wx/iconjsonfile.png)\n\n### 填入给你的 Symbol 链接\n\n![jsurl](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/wx/jsurl.png)\n\n# 生成小程序组件\n\n```\nnpx iconfont-wechat\n```\n\n![initwechaticon](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/wx/initwechaticon.png)\n\n# 使用图标\n\n### 在 app.json 文件里设置使用图标组件\n\n```json\n\"usingComponents\": {\n    \"iconfont\": \"/iconfont/iconfont\"\n  }\n```\n\n### 在 wxml 中使用\n\n```html\n<iconfont name=\"dog\"></iconfont>\n```\n\n### 如图:\n\n![dog](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/wx/dog.png)\n\n# 更改图标大小\n\n在 `iconfont.wxml` 中可以随意修改,每次找有点麻烦\n![iconfontwxml](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/wx/iconfontwxml.png)\n\n也不建议你去修改 `iconfont.js` 里的 `svgSize` 的大小\n\n可以修改 `iconfont.json` 里 `default_icon_size` 的值\n![resize](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/wx/resize.png)\n\n然后更新一下 `iconfont-wechat` 就可以设置图标全局的大小了\n\n```\nnpx iconfont-wechat\n```\n\n# 项目更新图标\n\n当你的项目图标更新了，需要更新你的 Symbol 链接，然后在 iconfont.json 里修改参数 symbol_url\n\n然后更新一下 `iconfont-wechat` 就可以了\n\n```\nnpx iconfont-wechat\n```\n\n# The_End\n","source":"_posts/wxapp/wxapp-iconfont.md","raw":"---\ntitle: 微信小程序使用彩色图标(阿里巴巴 iconfont Symbol 的用法)\ntop_img: https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg\ncover: https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/wx/wxminipro.jpg\ndate: 2020-08-14 17:26:49\ntags:\n  - 微信小程序\n  - iconfont\ncategories:\n  - 微信小程序\n---\n\n# 前提\n\n需要安装好 nodejs (略)\n\n用于下载插件\n\n# 安装插件\n\n```\nnpm install mini-program-iconfont-cli --save-dev\n```\n\n![miniprogram](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/wx/miniprogram.png)\n\n# 初始化配置文件\n\n```\nnpx iconfont-init\n```\n\n![initiconfontjson](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/wx/initiconfontjson.png)\n\n### 会生成一个 inconfont.json 文件\n\n![iconjsonfile](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/wx/iconjsonfile.png)\n\n### 填入给你的 Symbol 链接\n\n![jsurl](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/wx/jsurl.png)\n\n# 生成小程序组件\n\n```\nnpx iconfont-wechat\n```\n\n![initwechaticon](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/wx/initwechaticon.png)\n\n# 使用图标\n\n### 在 app.json 文件里设置使用图标组件\n\n```json\n\"usingComponents\": {\n    \"iconfont\": \"/iconfont/iconfont\"\n  }\n```\n\n### 在 wxml 中使用\n\n```html\n<iconfont name=\"dog\"></iconfont>\n```\n\n### 如图:\n\n![dog](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/wx/dog.png)\n\n# 更改图标大小\n\n在 `iconfont.wxml` 中可以随意修改,每次找有点麻烦\n![iconfontwxml](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/wx/iconfontwxml.png)\n\n也不建议你去修改 `iconfont.js` 里的 `svgSize` 的大小\n\n可以修改 `iconfont.json` 里 `default_icon_size` 的值\n![resize](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/wx/resize.png)\n\n然后更新一下 `iconfont-wechat` 就可以设置图标全局的大小了\n\n```\nnpx iconfont-wechat\n```\n\n# 项目更新图标\n\n当你的项目图标更新了，需要更新你的 Symbol 链接，然后在 iconfont.json 里修改参数 symbol_url\n\n然后更新一下 `iconfont-wechat` 就可以了\n\n```\nnpx iconfont-wechat\n```\n\n# The_End\n","slug":"wxapp/wxapp-iconfont","published":1,"updated":"2021-04-30T13:20:55.235Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cksvxwnp4005bgubqdfh8eqy0","content":"<h1 id=\"前提\"><a href=\"#前提\" class=\"headerlink\" title=\"前提\"></a>前提</h1><p>需要安装好 nodejs (略)</p>\n<p>用于下载插件</p>\n<h1 id=\"安装插件\"><a href=\"#安装插件\" class=\"headerlink\" title=\"安装插件\"></a>安装插件</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install mini-program-iconfont-cli --save-dev</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/wx/miniprogram.png\" alt=\"miniprogram\"></p>\n<h1 id=\"初始化配置文件\"><a href=\"#初始化配置文件\" class=\"headerlink\" title=\"初始化配置文件\"></a>初始化配置文件</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx iconfont-init</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/wx/initiconfontjson.png\" alt=\"initiconfontjson\"></p>\n<h3 id=\"会生成一个-inconfont-json-文件\"><a href=\"#会生成一个-inconfont-json-文件\" class=\"headerlink\" title=\"会生成一个 inconfont.json 文件\"></a>会生成一个 inconfont.json 文件</h3><p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/wx/iconjsonfile.png\" alt=\"iconjsonfile\"></p>\n<h3 id=\"填入给你的-Symbol-链接\"><a href=\"#填入给你的-Symbol-链接\" class=\"headerlink\" title=\"填入给你的 Symbol 链接\"></a>填入给你的 Symbol 链接</h3><p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/wx/jsurl.png\" alt=\"jsurl\"></p>\n<h1 id=\"生成小程序组件\"><a href=\"#生成小程序组件\" class=\"headerlink\" title=\"生成小程序组件\"></a>生成小程序组件</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx iconfont-wechat</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/wx/initwechaticon.png\" alt=\"initwechaticon\"></p>\n<h1 id=\"使用图标\"><a href=\"#使用图标\" class=\"headerlink\" title=\"使用图标\"></a>使用图标</h1><h3 id=\"在-app-json-文件里设置使用图标组件\"><a href=\"#在-app-json-文件里设置使用图标组件\" class=\"headerlink\" title=\"在 app.json 文件里设置使用图标组件\"></a>在 app.json 文件里设置使用图标组件</h3><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;usingComponents&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;iconfont&quot;</span>: <span class=\"string\">&quot;/iconfont/iconfont&quot;</span></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"在-wxml-中使用\"><a href=\"#在-wxml-中使用\" class=\"headerlink\" title=\"在 wxml 中使用\"></a>在 wxml 中使用</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">iconfont</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;dog&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">iconfont</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"如图\"><a href=\"#如图\" class=\"headerlink\" title=\"如图:\"></a>如图:</h3><p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/wx/dog.png\" alt=\"dog\"></p>\n<h1 id=\"更改图标大小\"><a href=\"#更改图标大小\" class=\"headerlink\" title=\"更改图标大小\"></a>更改图标大小</h1><p>在 <code>iconfont.wxml</code> 中可以随意修改,每次找有点麻烦<br><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/wx/iconfontwxml.png\" alt=\"iconfontwxml\"></p>\n<p>也不建议你去修改 <code>iconfont.js</code> 里的 <code>svgSize</code> 的大小</p>\n<p>可以修改 <code>iconfont.json</code> 里 <code>default_icon_size</code> 的值<br><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/wx/resize.png\" alt=\"resize\"></p>\n<p>然后更新一下 <code>iconfont-wechat</code> 就可以设置图标全局的大小了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx iconfont-wechat</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"项目更新图标\"><a href=\"#项目更新图标\" class=\"headerlink\" title=\"项目更新图标\"></a>项目更新图标</h1><p>当你的项目图标更新了，需要更新你的 Symbol 链接，然后在 iconfont.json 里修改参数 symbol_url</p>\n<p>然后更新一下 <code>iconfont-wechat</code> 就可以了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx iconfont-wechat</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"The-End\"><a href=\"#The-End\" class=\"headerlink\" title=\"The_End\"></a>The_End</h1>","site":{"data":{"link":{"class1":{"class_name":"舍友","link_list":{"1":{"name":"codeAntg","link":"https://blog.csdn.net/weixin_44745147","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/fjh.jpg","descr":"那家刀削面不错","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class2":{"class_name":"致谢","link_list":{"1":{"name":"JerrC","link":"https://immyw.com","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/immyw.png","descr":"今日事,今日毕","width":"1px","style":"solid","color":"#60d0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/hexo.svg","descr":"A fast, simple & powerful blog framework","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class3":{"class_name":"友人","link_list":{"1":{"name":"Chester","link":"http://chesterlds.cn","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/chester.jpg","descr":null,"width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Wangs","link":"https://wangsss.cn/","avatar":"https://wangsss.cn/img/avatar.png","descr":"不疯魔，不成活 ~","width":"1px","style":"solid","color":"#9d9d9d","custom":"link_custom1","time":"4s","namecolor":"0094ff","descolor":"#ff9191"}}}}}},"excerpt":"","more":"<h1 id=\"前提\"><a href=\"#前提\" class=\"headerlink\" title=\"前提\"></a>前提</h1><p>需要安装好 nodejs (略)</p>\n<p>用于下载插件</p>\n<h1 id=\"安装插件\"><a href=\"#安装插件\" class=\"headerlink\" title=\"安装插件\"></a>安装插件</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install mini-program-iconfont-cli --save-dev</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/wx/miniprogram.png\" alt=\"miniprogram\"></p>\n<h1 id=\"初始化配置文件\"><a href=\"#初始化配置文件\" class=\"headerlink\" title=\"初始化配置文件\"></a>初始化配置文件</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx iconfont-init</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/wx/initiconfontjson.png\" alt=\"initiconfontjson\"></p>\n<h3 id=\"会生成一个-inconfont-json-文件\"><a href=\"#会生成一个-inconfont-json-文件\" class=\"headerlink\" title=\"会生成一个 inconfont.json 文件\"></a>会生成一个 inconfont.json 文件</h3><p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/wx/iconjsonfile.png\" alt=\"iconjsonfile\"></p>\n<h3 id=\"填入给你的-Symbol-链接\"><a href=\"#填入给你的-Symbol-链接\" class=\"headerlink\" title=\"填入给你的 Symbol 链接\"></a>填入给你的 Symbol 链接</h3><p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/wx/jsurl.png\" alt=\"jsurl\"></p>\n<h1 id=\"生成小程序组件\"><a href=\"#生成小程序组件\" class=\"headerlink\" title=\"生成小程序组件\"></a>生成小程序组件</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx iconfont-wechat</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/wx/initwechaticon.png\" alt=\"initwechaticon\"></p>\n<h1 id=\"使用图标\"><a href=\"#使用图标\" class=\"headerlink\" title=\"使用图标\"></a>使用图标</h1><h3 id=\"在-app-json-文件里设置使用图标组件\"><a href=\"#在-app-json-文件里设置使用图标组件\" class=\"headerlink\" title=\"在 app.json 文件里设置使用图标组件\"></a>在 app.json 文件里设置使用图标组件</h3><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;usingComponents&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;iconfont&quot;</span>: <span class=\"string\">&quot;/iconfont/iconfont&quot;</span></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"在-wxml-中使用\"><a href=\"#在-wxml-中使用\" class=\"headerlink\" title=\"在 wxml 中使用\"></a>在 wxml 中使用</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">iconfont</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;dog&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">iconfont</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"如图\"><a href=\"#如图\" class=\"headerlink\" title=\"如图:\"></a>如图:</h3><p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/wx/dog.png\" alt=\"dog\"></p>\n<h1 id=\"更改图标大小\"><a href=\"#更改图标大小\" class=\"headerlink\" title=\"更改图标大小\"></a>更改图标大小</h1><p>在 <code>iconfont.wxml</code> 中可以随意修改,每次找有点麻烦<br><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/wx/iconfontwxml.png\" alt=\"iconfontwxml\"></p>\n<p>也不建议你去修改 <code>iconfont.js</code> 里的 <code>svgSize</code> 的大小</p>\n<p>可以修改 <code>iconfont.json</code> 里 <code>default_icon_size</code> 的值<br><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/wx/resize.png\" alt=\"resize\"></p>\n<p>然后更新一下 <code>iconfont-wechat</code> 就可以设置图标全局的大小了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx iconfont-wechat</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"项目更新图标\"><a href=\"#项目更新图标\" class=\"headerlink\" title=\"项目更新图标\"></a>项目更新图标</h1><p>当你的项目图标更新了，需要更新你的 Symbol 链接，然后在 iconfont.json 里修改参数 symbol_url</p>\n<p>然后更新一下 <code>iconfont-wechat</code> 就可以了</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx iconfont-wechat</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"The-End\"><a href=\"#The-End\" class=\"headerlink\" title=\"The_End\"></a>The_End</h1>"},{"title":"微信小程序滚动条设置","top_img":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg","cover":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/wx/wxminipro.jpg","date":"2020-07-21T14:45:19.000Z","_content":"\n# 隐藏滚动条\n\n```css\n::-webkit-scrollbar {\n  width: 0rpx;\n  height: 0rpx;\n  background-color: transparent;\n}\n```\n\n其实设置为宽高为 0 或者背景颜色透明,其中任何一项都可以实现,或者你直接 `opacity:0;` 也可以,障眼法哈哈哈\n\n# 设置滚动条样式\n\n```css\n::-webkit-scrollbar {\n  width: 4px;\n  height: 4px;\n  color: #ffffff;\n}\n\n/* 设置滚动条轨道 内阴影+圆角 */\n::-webkit-scrollbar-track {\n  -webkit-box-shadow: inset 0 0 10px rgba(0, 0, 0, 0.3);\n  box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.1);\n  border-radius: 10px;\n  background-color: #ffffff;\n}\n\n/* 设置滚动条 内阴影+圆角 */\n::-webkit-scrollbar-thumb {\n  border-radius: 10px;\n  -webkit-box-shadow: inset 0 0 10px rgba(0, 0, 0, 0.3);\n  box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.1);\n  background-color: #39b54a;\n}\n```\n\n# The_End\n","source":"_posts/wxapp/wxapp-scrollbar.md","raw":"---\ntitle: 微信小程序滚动条设置\ntop_img: https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg\ncover: https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/wx/wxminipro.jpg\ndate: 2020-07-21 22:45:19\ntags:\n  - 微信小程序\n  - 滚动条\n  - scroll\n  - scrollbar\ncategories:\n  - 微信小程序\n---\n\n# 隐藏滚动条\n\n```css\n::-webkit-scrollbar {\n  width: 0rpx;\n  height: 0rpx;\n  background-color: transparent;\n}\n```\n\n其实设置为宽高为 0 或者背景颜色透明,其中任何一项都可以实现,或者你直接 `opacity:0;` 也可以,障眼法哈哈哈\n\n# 设置滚动条样式\n\n```css\n::-webkit-scrollbar {\n  width: 4px;\n  height: 4px;\n  color: #ffffff;\n}\n\n/* 设置滚动条轨道 内阴影+圆角 */\n::-webkit-scrollbar-track {\n  -webkit-box-shadow: inset 0 0 10px rgba(0, 0, 0, 0.3);\n  box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.1);\n  border-radius: 10px;\n  background-color: #ffffff;\n}\n\n/* 设置滚动条 内阴影+圆角 */\n::-webkit-scrollbar-thumb {\n  border-radius: 10px;\n  -webkit-box-shadow: inset 0 0 10px rgba(0, 0, 0, 0.3);\n  box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.1);\n  background-color: #39b54a;\n}\n```\n\n# The_End\n","slug":"wxapp/wxapp-scrollbar","published":1,"updated":"2021-04-30T13:45:21.488Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cksvxwnp5005dgubq4q79cv5a","content":"<h1 id=\"隐藏滚动条\"><a href=\"#隐藏滚动条\" class=\"headerlink\" title=\"隐藏滚动条\"></a>隐藏滚动条</h1><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">::-webkit-scrollbar &#123;</span><br><span class=\"line\">  width: <span class=\"number\">0</span>rpx;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">0</span>rpx;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: transparent;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其实设置为宽高为 0 或者背景颜色透明,其中任何一项都可以实现,或者你直接 <code>opacity:0;</code> 也可以,障眼法哈哈哈</p>\n<h1 id=\"设置滚动条样式\"><a href=\"#设置滚动条样式\" class=\"headerlink\" title=\"设置滚动条样式\"></a>设置滚动条样式</h1><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">::-webkit-scrollbar &#123;</span><br><span class=\"line\">  width: <span class=\"number\">4px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">4px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#ffffff</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 设置滚动条轨道 内阴影+圆角 */</span></span><br><span class=\"line\">::-webkit-scrollbar-track &#123;</span><br><span class=\"line\">  -webkit-box-shadow: inset <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">10px</span> <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0.3</span>);</span><br><span class=\"line\">  <span class=\"attribute\">box-shadow</span>: inset <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">6px</span> <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0.1</span>);</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#ffffff</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 设置滚动条 内阴影+圆角 */</span></span><br><span class=\"line\">::-webkit-scrollbar-thumb &#123;</span><br><span class=\"line\">  border-radius: <span class=\"number\">10px</span>;</span><br><span class=\"line\">  -webkit-<span class=\"attribute\">box-shadow</span>: inset <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">10px</span> <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0.3</span>);</span><br><span class=\"line\">  <span class=\"attribute\">box-shadow</span>: inset <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">6px</span> <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0.1</span>);</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#39b54a</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"The-End\"><a href=\"#The-End\" class=\"headerlink\" title=\"The_End\"></a>The_End</h1>","site":{"data":{"link":{"class1":{"class_name":"舍友","link_list":{"1":{"name":"codeAntg","link":"https://blog.csdn.net/weixin_44745147","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/fjh.jpg","descr":"那家刀削面不错","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class2":{"class_name":"致谢","link_list":{"1":{"name":"JerrC","link":"https://immyw.com","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/immyw.png","descr":"今日事,今日毕","width":"1px","style":"solid","color":"#60d0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/hexo.svg","descr":"A fast, simple & powerful blog framework","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class3":{"class_name":"友人","link_list":{"1":{"name":"Chester","link":"http://chesterlds.cn","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/chester.jpg","descr":null,"width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Wangs","link":"https://wangsss.cn/","avatar":"https://wangsss.cn/img/avatar.png","descr":"不疯魔，不成活 ~","width":"1px","style":"solid","color":"#9d9d9d","custom":"link_custom1","time":"4s","namecolor":"0094ff","descolor":"#ff9191"}}}}}},"excerpt":"","more":"<h1 id=\"隐藏滚动条\"><a href=\"#隐藏滚动条\" class=\"headerlink\" title=\"隐藏滚动条\"></a>隐藏滚动条</h1><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">::-webkit-scrollbar &#123;</span><br><span class=\"line\">  width: <span class=\"number\">0</span>rpx;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">0</span>rpx;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: transparent;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其实设置为宽高为 0 或者背景颜色透明,其中任何一项都可以实现,或者你直接 <code>opacity:0;</code> 也可以,障眼法哈哈哈</p>\n<h1 id=\"设置滚动条样式\"><a href=\"#设置滚动条样式\" class=\"headerlink\" title=\"设置滚动条样式\"></a>设置滚动条样式</h1><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">::-webkit-scrollbar &#123;</span><br><span class=\"line\">  width: <span class=\"number\">4px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">4px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#ffffff</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 设置滚动条轨道 内阴影+圆角 */</span></span><br><span class=\"line\">::-webkit-scrollbar-track &#123;</span><br><span class=\"line\">  -webkit-box-shadow: inset <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">10px</span> <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0.3</span>);</span><br><span class=\"line\">  <span class=\"attribute\">box-shadow</span>: inset <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">6px</span> <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0.1</span>);</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#ffffff</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 设置滚动条 内阴影+圆角 */</span></span><br><span class=\"line\">::-webkit-scrollbar-thumb &#123;</span><br><span class=\"line\">  border-radius: <span class=\"number\">10px</span>;</span><br><span class=\"line\">  -webkit-<span class=\"attribute\">box-shadow</span>: inset <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">10px</span> <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0.3</span>);</span><br><span class=\"line\">  <span class=\"attribute\">box-shadow</span>: inset <span class=\"number\">0</span> <span class=\"number\">0</span> <span class=\"number\">6px</span> <span class=\"built_in\">rgba</span>(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0.1</span>);</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#39b54a</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"The-End\"><a href=\"#The-End\" class=\"headerlink\" title=\"The_End\"></a>The_End</h1>"},{"title":"微信小程序切换标签改变样式","top_img":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg","cover":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/wx/wxminipro.jpg","date":"2020-08-10T08:21:53.000Z","_content":"\n# 微信小程序切换标签改变样式\n\n![swichtab](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/wx/swichtab.gif)\n\n### wxml\n\n```html\n<!--顶部导航栏-->\n<view class=\"swiper-tab\">\n  <view\n    class=\"tab-item {{currentTab==0 ? 'active' : ''}}\"\n    data-current=\"0\"\n    bindtap=\"swichNav\"\n    >A</view\n  >\n  <view\n    class=\"tab-item {{currentTab==1 ? 'active' : ''}}\"\n    data-current=\"1\"\n    bindtap=\"swichNav\"\n    >B</view\n  >\n  <view\n    class=\"tab-item {{currentTab==2 ? 'active' : ''}}\"\n    data-current=\"2\"\n    bindtap=\"swichNav\"\n    >C</view\n  >\n</view>\n\n<!--内容主体-->\n<swiper\n  class=\"swiper\"\n  current=\"{{currentTab}}\"\n  duration=\"400\"\n  bindchange=\"swiperChange\"\n>\n  <block wx:for=\"{{tabs}}\" wx:key=\"item\">\n    <swiper-item>\n      <view>{{item}}</view>\n    </swiper-item>\n  </block>\n</swiper>\n```\n\n### wxss\n\n```css\n.swiper-tab {\n  display: flex;\n  flex-direction: row;\n  line-height: 60rpx;\n  border-bottom: 2rpx solid #777;\n}\n\n.tab-item {\n  width: 33.3%;\n  text-align: center;\n  font-size: 15px;\n  color: rgb(235, 135, 135);\n}\n\n.swiper {\n  width: 100%;\n  font-size: 100rpx;\n  height: 1140rpx;\n  background: #dfdfdf;\n}\n\n.active {\n  color: blue;\n  border-bottom: 5rpx solid blue;\n}\n```\n\n### js\n\n```javascript\nPage({\n  data: {\n    // tab切换\n    currentTab: 0,\n    tabs: [\"A\", \"B\", \"C\"],\n  },\n  swichNav: function (e) {\n    // console.log(e);\n    var that = this;\n    if (this.data.currentTab === e.target.dataset.current) {\n      return false;\n    } else {\n      that.setData({\n        currentTab: e.target.dataset.current,\n      });\n    }\n  },\n  swiperChange: function (e) {\n    // console.log(e);\n    this.setData({\n      currentTab: e.detail.current,\n    });\n  },\n});\n```\n\n# The_End\n","source":"_posts/wxapp/wxapp-swichtab.md","raw":"---\ntitle: 微信小程序切换标签改变样式\ntop_img: https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/csslayouts/sunrise.jpg\ncover: https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/wx/wxminipro.jpg\ndate: 2020-08-10 16:21:53\ntags:\n  - 微信小程序\n  - 标签\n  - tab\ncategories:\n  - 微信小程序\n---\n\n# 微信小程序切换标签改变样式\n\n![swichtab](https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/wx/swichtab.gif)\n\n### wxml\n\n```html\n<!--顶部导航栏-->\n<view class=\"swiper-tab\">\n  <view\n    class=\"tab-item {{currentTab==0 ? 'active' : ''}}\"\n    data-current=\"0\"\n    bindtap=\"swichNav\"\n    >A</view\n  >\n  <view\n    class=\"tab-item {{currentTab==1 ? 'active' : ''}}\"\n    data-current=\"1\"\n    bindtap=\"swichNav\"\n    >B</view\n  >\n  <view\n    class=\"tab-item {{currentTab==2 ? 'active' : ''}}\"\n    data-current=\"2\"\n    bindtap=\"swichNav\"\n    >C</view\n  >\n</view>\n\n<!--内容主体-->\n<swiper\n  class=\"swiper\"\n  current=\"{{currentTab}}\"\n  duration=\"400\"\n  bindchange=\"swiperChange\"\n>\n  <block wx:for=\"{{tabs}}\" wx:key=\"item\">\n    <swiper-item>\n      <view>{{item}}</view>\n    </swiper-item>\n  </block>\n</swiper>\n```\n\n### wxss\n\n```css\n.swiper-tab {\n  display: flex;\n  flex-direction: row;\n  line-height: 60rpx;\n  border-bottom: 2rpx solid #777;\n}\n\n.tab-item {\n  width: 33.3%;\n  text-align: center;\n  font-size: 15px;\n  color: rgb(235, 135, 135);\n}\n\n.swiper {\n  width: 100%;\n  font-size: 100rpx;\n  height: 1140rpx;\n  background: #dfdfdf;\n}\n\n.active {\n  color: blue;\n  border-bottom: 5rpx solid blue;\n}\n```\n\n### js\n\n```javascript\nPage({\n  data: {\n    // tab切换\n    currentTab: 0,\n    tabs: [\"A\", \"B\", \"C\"],\n  },\n  swichNav: function (e) {\n    // console.log(e);\n    var that = this;\n    if (this.data.currentTab === e.target.dataset.current) {\n      return false;\n    } else {\n      that.setData({\n        currentTab: e.target.dataset.current,\n      });\n    }\n  },\n  swiperChange: function (e) {\n    // console.log(e);\n    this.setData({\n      currentTab: e.detail.current,\n    });\n  },\n});\n```\n\n# The_End\n","slug":"wxapp/wxapp-swichtab","published":1,"updated":"2021-04-30T13:45:51.757Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cksvxwnp7005hgubqb5bs22c0","content":"<h1 id=\"微信小程序切换标签改变样式\"><a href=\"#微信小程序切换标签改变样式\" class=\"headerlink\" title=\"微信小程序切换标签改变样式\"></a>微信小程序切换标签改变样式</h1><p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/wx/swichtab.gif\" alt=\"swichtab\"></p>\n<h3 id=\"wxml\"><a href=\"#wxml\" class=\"headerlink\" title=\"wxml\"></a>wxml</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--顶部导航栏--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;swiper-tab&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">view</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">class</span>=<span class=\"string\">&quot;tab-item &#123;&#123;currentTab==0 ? &#x27;active&#x27; : &#x27;&#x27;&#125;&#125;&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">data-current</span>=<span class=\"string\">&quot;0&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">bindtap</span>=<span class=\"string\">&quot;swichNav&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    &gt;</span>A&lt;/view</span><br><span class=\"line\">  &gt;</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">view</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">class</span>=<span class=\"string\">&quot;tab-item &#123;&#123;currentTab==1 ? &#x27;active&#x27; : &#x27;&#x27;&#125;&#125;&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">data-current</span>=<span class=\"string\">&quot;1&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">bindtap</span>=<span class=\"string\">&quot;swichNav&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    &gt;</span>B&lt;/view</span><br><span class=\"line\">  &gt;</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">view</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">class</span>=<span class=\"string\">&quot;tab-item &#123;&#123;currentTab==2 ? &#x27;active&#x27; : &#x27;&#x27;&#125;&#125;&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">data-current</span>=<span class=\"string\">&quot;2&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">bindtap</span>=<span class=\"string\">&quot;swichNav&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    &gt;</span>C&lt;/view</span><br><span class=\"line\">  &gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--内容主体--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">swiper</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">class</span>=<span class=\"string\">&quot;swiper&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">current</span>=<span class=\"string\">&quot;&#123;&#123;currentTab&#125;&#125;&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">duration</span>=<span class=\"string\">&quot;400&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">bindchange</span>=<span class=\"string\">&quot;swiperChange&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">block</span> <span class=\"attr\">wx:for</span>=<span class=\"string\">&quot;&#123;&#123;tabs&#125;&#125;&quot;</span> <span class=\"attr\">wx:key</span>=<span class=\"string\">&quot;item&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">swiper-item</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">view</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">swiper-item</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">block</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">swiper</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"wxss\"><a href=\"#wxss\" class=\"headerlink\" title=\"wxss\"></a>wxss</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.swiper-tab</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">flex-direction</span>: row;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">60</span>rpx;</span><br><span class=\"line\">  <span class=\"attribute\">border-bottom</span>: <span class=\"number\">2</span>rpx solid <span class=\"number\">#777</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.tab-item</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">33.3%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">15px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">rgb</span>(<span class=\"number\">235</span>, <span class=\"number\">135</span>, <span class=\"number\">135</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.swiper</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">100</span>rpx;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">1140</span>rpx;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#dfdfdf</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.active</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: blue;</span><br><span class=\"line\">  <span class=\"attribute\">border-bottom</span>: <span class=\"number\">5</span>rpx solid blue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"js\"><a href=\"#js\" class=\"headerlink\" title=\"js\"></a>js</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Page(&#123;</span><br><span class=\"line\">  <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// tab切换</span></span><br><span class=\"line\">    <span class=\"attr\">currentTab</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"attr\">tabs</span>: [<span class=\"string\">&quot;A&quot;</span>, <span class=\"string\">&quot;B&quot;</span>, <span class=\"string\">&quot;C&quot;</span>],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">swichNav</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// console.log(e);</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> that = <span class=\"built_in\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.data.currentTab === e.target.dataset.current) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      that.setData(&#123;</span><br><span class=\"line\">        <span class=\"attr\">currentTab</span>: e.target.dataset.current,</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">swiperChange</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// console.log(e);</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.setData(&#123;</span><br><span class=\"line\">      <span class=\"attr\">currentTab</span>: e.detail.current,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"The-End\"><a href=\"#The-End\" class=\"headerlink\" title=\"The_End\"></a>The_End</h1>","site":{"data":{"link":{"class1":{"class_name":"舍友","link_list":{"1":{"name":"codeAntg","link":"https://blog.csdn.net/weixin_44745147","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/fjh.jpg","descr":"那家刀削面不错","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class2":{"class_name":"致谢","link_list":{"1":{"name":"JerrC","link":"https://immyw.com","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/immyw.png","descr":"今日事,今日毕","width":"1px","style":"solid","color":"#60d0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Hexo","link":"https://hexo.io/zh-tw/","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/hexo.svg","descr":"A fast, simple & powerful blog framework","width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"}}},"class3":{"class_name":"友人","link_list":{"1":{"name":"Chester","link":"http://chesterlds.cn","avatar":"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/avatar/chester.jpg","descr":null,"width":"1px","style":"solid","color":"#c0c0ff","custom":"link_custom1","time":"4s","namecolor":"#ff9191","descolor":"#ff9191"},"2":{"name":"Wangs","link":"https://wangsss.cn/","avatar":"https://wangsss.cn/img/avatar.png","descr":"不疯魔，不成活 ~","width":"1px","style":"solid","color":"#9d9d9d","custom":"link_custom1","time":"4s","namecolor":"0094ff","descolor":"#ff9191"}}}}}},"excerpt":"","more":"<h1 id=\"微信小程序切换标签改变样式\"><a href=\"#微信小程序切换标签改变样式\" class=\"headerlink\" title=\"微信小程序切换标签改变样式\"></a>微信小程序切换标签改变样式</h1><p><img src=\"https://codehhr.coding.net/p/codehhr/d/images/git/raw/master/wx/swichtab.gif\" alt=\"swichtab\"></p>\n<h3 id=\"wxml\"><a href=\"#wxml\" class=\"headerlink\" title=\"wxml\"></a>wxml</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--顶部导航栏--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;swiper-tab&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">view</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">class</span>=<span class=\"string\">&quot;tab-item &#123;&#123;currentTab==0 ? &#x27;active&#x27; : &#x27;&#x27;&#125;&#125;&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">data-current</span>=<span class=\"string\">&quot;0&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">bindtap</span>=<span class=\"string\">&quot;swichNav&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    &gt;</span>A&lt;/view</span><br><span class=\"line\">  &gt;</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">view</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">class</span>=<span class=\"string\">&quot;tab-item &#123;&#123;currentTab==1 ? &#x27;active&#x27; : &#x27;&#x27;&#125;&#125;&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">data-current</span>=<span class=\"string\">&quot;1&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">bindtap</span>=<span class=\"string\">&quot;swichNav&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    &gt;</span>B&lt;/view</span><br><span class=\"line\">  &gt;</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">view</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">class</span>=<span class=\"string\">&quot;tab-item &#123;&#123;currentTab==2 ? &#x27;active&#x27; : &#x27;&#x27;&#125;&#125;&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">data-current</span>=<span class=\"string\">&quot;2&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">bindtap</span>=<span class=\"string\">&quot;swichNav&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">    &gt;</span>C&lt;/view</span><br><span class=\"line\">  &gt;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!--内容主体--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">swiper</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">class</span>=<span class=\"string\">&quot;swiper&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">current</span>=<span class=\"string\">&quot;&#123;&#123;currentTab&#125;&#125;&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">duration</span>=<span class=\"string\">&quot;400&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">  <span class=\"attr\">bindchange</span>=<span class=\"string\">&quot;swiperChange&quot;</span></span></span><br><span class=\"line\"><span class=\"tag\">&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">block</span> <span class=\"attr\">wx:for</span>=<span class=\"string\">&quot;&#123;&#123;tabs&#125;&#125;&quot;</span> <span class=\"attr\">wx:key</span>=<span class=\"string\">&quot;item&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">swiper-item</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">view</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">swiper-item</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">block</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">swiper</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"wxss\"><a href=\"#wxss\" class=\"headerlink\" title=\"wxss\"></a>wxss</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.swiper-tab</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">flex-direction</span>: row;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">60</span>rpx;</span><br><span class=\"line\">  <span class=\"attribute\">border-bottom</span>: <span class=\"number\">2</span>rpx solid <span class=\"number\">#777</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.tab-item</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">33.3%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">15px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"built_in\">rgb</span>(<span class=\"number\">235</span>, <span class=\"number\">135</span>, <span class=\"number\">135</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.swiper</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">100</span>rpx;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">1140</span>rpx;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#dfdfdf</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.active</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: blue;</span><br><span class=\"line\">  <span class=\"attribute\">border-bottom</span>: <span class=\"number\">5</span>rpx solid blue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"js\"><a href=\"#js\" class=\"headerlink\" title=\"js\"></a>js</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Page(&#123;</span><br><span class=\"line\">  <span class=\"attr\">data</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// tab切换</span></span><br><span class=\"line\">    <span class=\"attr\">currentTab</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">    <span class=\"attr\">tabs</span>: [<span class=\"string\">&quot;A&quot;</span>, <span class=\"string\">&quot;B&quot;</span>, <span class=\"string\">&quot;C&quot;</span>],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">swichNav</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// console.log(e);</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> that = <span class=\"built_in\">this</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.data.currentTab === e.target.dataset.current) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      that.setData(&#123;</span><br><span class=\"line\">        <span class=\"attr\">currentTab</span>: e.target.dataset.current,</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">swiperChange</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// console.log(e);</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.setData(&#123;</span><br><span class=\"line\">      <span class=\"attr\">currentTab</span>: e.detail.current,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"The-End\"><a href=\"#The-End\" class=\"headerlink\" title=\"The_End\"></a>The_End</h1>"}],"PostAsset":[],"PostCategory":[{"post_id":"cksvxwnmq0003gubqhnfxbkil","category_id":"cksvxwnmt0006gubqa8lv3uni","_id":"cksvxwnnf0016gubq7tg1f9pa"},{"post_id":"cksvxwnmq0003gubqhnfxbkil","category_id":"cksvxwnn9000rgubq8g8idrb6","_id":"cksvxwnni001bgubq094c4qsc"},{"post_id":"cksvxwnmy000dgubq43u4a5jr","category_id":"cksvxwnnc000ygubqblhx4y3l","_id":"cksvxwnnj001egubqej4rg0bx"},{"post_id":"cksvxwnn2000hgubqhkf93bwb","category_id":"cksvxwnnc000ygubqblhx4y3l","_id":"cksvxwnnn001lgubqd0fj7egc"},{"post_id":"cksvxwnms0005gubq2ecz8s7b","category_id":"cksvxwnmt0006gubqa8lv3uni","_id":"cksvxwnnp001rgubq6uk67qyu"},{"post_id":"cksvxwnms0005gubq2ecz8s7b","category_id":"cksvxwnn9000rgubq8g8idrb6","_id":"cksvxwnnq001ugubqckpr9xxu"},{"post_id":"cksvxwnn4000jgubq2o2k0bwn","category_id":"cksvxwnnc000ygubqblhx4y3l","_id":"cksvxwnnr001wgubq7zab9j76"},{"post_id":"cksvxwnn7000ngubq4xsh52ha","category_id":"cksvxwnnp001qgubq7pc489w2","_id":"cksvxwnnt0022gubq09lh0frl"},{"post_id":"cksvxwnmv0009gubq5bhlghuy","category_id":"cksvxwnmt0006gubqa8lv3uni","_id":"cksvxwnnw002agubqe0ff6ur1"},{"post_id":"cksvxwnmv0009gubq5bhlghuy","category_id":"cksvxwnnr001xgubq04h39ccw","_id":"cksvxwnnx002egubq6oxfawmu"},{"post_id":"cksvxwnn9000qgubq6txhermr","category_id":"cksvxwnnu0025gubq751ghblc","_id":"cksvxwnny002ggubq98p8c180"},{"post_id":"cksvxwnna000vgubq37i36ezy","category_id":"cksvxwnnw002bgubq8xzgc8iz","_id":"cksvxwno0002ngubq3v6cdt0k"},{"post_id":"cksvxwnnz002jgubqdnw11kpv","category_id":"cksvxwnny002hgubq4cmhbs09","_id":"cksvxwno3002sgubq9j27cdj3"},{"post_id":"cksvxwnnz002lgubq8ye69idc","category_id":"cksvxwnny002hgubq4cmhbs09","_id":"cksvxwno4002vgubq6b9sconz"},{"post_id":"cksvxwno1002qgubq5r8hcql2","category_id":"cksvxwnny002hgubq4cmhbs09","_id":"cksvxwno5002ygubq5q823b4l"},{"post_id":"cksvxwno2002rgubq8wjec6ae","category_id":"cksvxwnny002hgubq4cmhbs09","_id":"cksvxwno60031gubq35xf4nip"},{"post_id":"cksvxwno3002ugubqati0ckxc","category_id":"cksvxwnny002hgubq4cmhbs09","_id":"cksvxwno70034gubqaxni0vn3"},{"post_id":"cksvxwno4002xgubq1lrbhabn","category_id":"cksvxwnny002hgubq4cmhbs09","_id":"cksvxwno80037gubqh5w44bbu"},{"post_id":"cksvxwno50030gubqdvs85sl4","category_id":"cksvxwnny002hgubq4cmhbs09","_id":"cksvxwno9003agubq0dxgeprd"},{"post_id":"cksvxwno60033gubq5x45an1l","category_id":"cksvxwnny002hgubq4cmhbs09","_id":"cksvxwnoa003dgubqcguvd6mj"},{"post_id":"cksvxwno70036gubq2rmf1k5w","category_id":"cksvxwnny002hgubq4cmhbs09","_id":"cksvxwnob003ggubqc7nx1ark"},{"post_id":"cksvxwno80039gubq5cy2epv0","category_id":"cksvxwnny002hgubq4cmhbs09","_id":"cksvxwnoc003kgubq1neu0nu7"},{"post_id":"cksvxwnoa003fgubqea8e2wk2","category_id":"cksvxwnny002hgubq4cmhbs09","_id":"cksvxwnoe003rgubqb3jy9e6r"},{"post_id":"cksvxwnnt0021gubqc1h9bcy4","category_id":"cksvxwnny002hgubq4cmhbs09","_id":"cksvxwnos004lgubq2z9j06vd"},{"post_id":"cksvxwnnu0024gubq5zsh3jsa","category_id":"cksvxwnny002hgubq4cmhbs09","_id":"cksvxwnov004qgubq40iwh0cj"},{"post_id":"cksvxwnnv0028gubqb920bgkv","category_id":"cksvxwnny002hgubq4cmhbs09","_id":"cksvxwnox004vgubq064sctzl"},{"post_id":"cksvxwnnw0029gubqc6uvgt0i","category_id":"cksvxwnny002hgubq4cmhbs09","_id":"cksvxwnp00052gubq5uflg9ti"},{"post_id":"cksvxwnnx002dgubqc7d53wzu","category_id":"cksvxwnny002hgubq4cmhbs09","_id":"cksvxwnp40059gubqc9sehug2"},{"post_id":"cksvxwnnx002fgubq1fth5kau","category_id":"cksvxwnny002hgubq4cmhbs09","_id":"cksvxwnp7005fgubq3t4zdffe"},{"post_id":"cksvxwnnb000xgubq27ap89a5","category_id":"cksvxwnny002hgubq4cmhbs09","_id":"cksvxwnp9005mgubq3dhafyub"},{"post_id":"cksvxwnnb000xgubq27ap89a5","category_id":"cksvxwnp30058gubq8m1pghwf","_id":"cksvxwnpa005ogubq5y568tbc"},{"post_id":"cksvxwnnd0011gubq9mbi09j9","category_id":"cksvxwnny002hgubq4cmhbs09","_id":"cksvxwnpa005sgubq48k69wjs"},{"post_id":"cksvxwnnd0011gubq9mbi09j9","category_id":"cksvxwnp30058gubq8m1pghwf","_id":"cksvxwnpb005ugubqe2sj99g2"},{"post_id":"cksvxwnne0014gubqbr6c4ddv","category_id":"cksvxwnny002hgubq4cmhbs09","_id":"cksvxwnpc005ygubqfp6eau67"},{"post_id":"cksvxwnne0014gubqbr6c4ddv","category_id":"cksvxwnp30058gubq8m1pghwf","_id":"cksvxwnpc005zgubqd8tx2s0z"},{"post_id":"cksvxwnng001agubq2tddh0z4","category_id":"cksvxwnny002hgubq4cmhbs09","_id":"cksvxwnpd0062gubq9uue7n4n"},{"post_id":"cksvxwnng001agubq2tddh0z4","category_id":"cksvxwnp30058gubq8m1pghwf","_id":"cksvxwnpd0064gubqea7y8ty5"},{"post_id":"cksvxwnni001cgubqc3xk8195","category_id":"cksvxwnny002hgubq4cmhbs09","_id":"cksvxwnpe0067gubq013q2e02"},{"post_id":"cksvxwnni001cgubqc3xk8195","category_id":"cksvxwnp30058gubq8m1pghwf","_id":"cksvxwnpf006agubq9xbz00yh"},{"post_id":"cksvxwnnk001ggubqe0ztdcba","category_id":"cksvxwnny002hgubq4cmhbs09","_id":"cksvxwnph006fgubq4saa5fkm"},{"post_id":"cksvxwnnk001ggubqe0ztdcba","category_id":"cksvxwnp30058gubq8m1pghwf","_id":"cksvxwnpi006ggubqd17j92my"},{"post_id":"cksvxwnnm001igubqcc6i7dlr","category_id":"cksvxwnny002hgubq4cmhbs09","_id":"cksvxwnpk006qgubq6etu1gkd"},{"post_id":"cksvxwnnm001igubqcc6i7dlr","category_id":"cksvxwnp30058gubq8m1pghwf","_id":"cksvxwnpl006sgubq7ra93bv2"},{"post_id":"cksvxwnoe003qgubqhp86havt","category_id":"cksvxwnpj006mgubq4tie7759","_id":"cksvxwnpm006vgubq9cl108yw"},{"post_id":"cksvxwnnn001ngubq23ucafv7","category_id":"cksvxwnny002hgubq4cmhbs09","_id":"cksvxwnpq0070gubq7segaqvp"},{"post_id":"cksvxwnnn001ngubq23ucafv7","category_id":"cksvxwnpm006ugubqagqed4mp","_id":"cksvxwnpq0071gubqalr55xzi"},{"post_id":"cksvxwnog003xgubqbphng1hx","category_id":"cksvxwnpd0061gubqf3iy291v","_id":"cksvxwnpr0074gubq0xpegiys"},{"post_id":"cksvxwnoh003zgubq31fsg68h","category_id":"cksvxwnpj006mgubq4tie7759","_id":"cksvxwnpr0076gubqht4p5i2w"},{"post_id":"cksvxwnno001pgubq81tt7v00","category_id":"cksvxwnny002hgubq4cmhbs09","_id":"cksvxwnps0079gubq9o8t7zad"},{"post_id":"cksvxwnno001pgubq81tt7v00","category_id":"cksvxwnpr0073gubqfs5f03re","_id":"cksvxwnps007cgubqgatk7d0z"},{"post_id":"cksvxwnnq001tgubq6gau022u","category_id":"cksvxwnny002hgubq4cmhbs09","_id":"cksvxwnpt007kgubqgh0k2gub"},{"post_id":"cksvxwnnq001tgubq6gau022u","category_id":"cksvxwnpr0073gubqfs5f03re","_id":"cksvxwnpu007mgubqct05c8nm"},{"post_id":"cksvxwnnq001vgubq3odr9msh","category_id":"cksvxwnny002hgubq4cmhbs09","_id":"cksvxwnpv007wgubqd1gm37um"},{"post_id":"cksvxwnnq001vgubq3odr9msh","category_id":"cksvxwnpr0073gubqfs5f03re","_id":"cksvxwnpw007xgubq4mrdcmlf"},{"post_id":"cksvxwnns001ygubq1az34f8q","category_id":"cksvxwnny002hgubq4cmhbs09","_id":"cksvxwnpy0088gubq9d4zc85b"},{"post_id":"cksvxwnns001ygubq1az34f8q","category_id":"cksvxwnpr0073gubqfs5f03re","_id":"cksvxwnpy008agubqfrufbs2q"},{"post_id":"cksvxwnp00054gubqd4b5ejhm","category_id":"cksvxwnq1008tgubq951jhftd","_id":"cksvxwnq30092gubq91ma27uu"},{"post_id":"cksvxwnp10056gubq71ic8de5","category_id":"cksvxwnq1008tgubq951jhftd","_id":"cksvxwnq40096gubq1fex1ltx"},{"post_id":"cksvxwnp4005bgubqdfh8eqy0","category_id":"cksvxwnq1008tgubq951jhftd","_id":"cksvxwnq5009agubq9jw38k2w"},{"post_id":"cksvxwnp5005dgubq4q79cv5a","category_id":"cksvxwnq1008tgubq951jhftd","_id":"cksvxwnq6009fgubq8ghugrch"},{"post_id":"cksvxwnp7005hgubqb5bs22c0","category_id":"cksvxwnq1008tgubq951jhftd","_id":"cksvxwnq6009jgubqd0dnb6i3"},{"post_id":"cksvxwno9003cgubqhaoj68mq","category_id":"cksvxwnpd0061gubqf3iy291v","_id":"cksvxwnq7009mgubqa2wnd38r"},{"post_id":"cksvxwno9003cgubqhaoj68mq","category_id":"cksvxwnq5009egubq2w0mgxpa","_id":"cksvxwnq7009ogubqgd1i90da"},{"post_id":"cksvxwnob003jgubq5ka9hmnw","category_id":"cksvxwnpd0061gubqf3iy291v","_id":"cksvxwnq7009rgubqeegh3qso"},{"post_id":"cksvxwnob003jgubq5ka9hmnw","category_id":"cksvxwnq6009kgubqenlo1cej","_id":"cksvxwnq8009ugubqck538vqr"},{"post_id":"cksvxwnoc003mgubq8bsa9boi","category_id":"cksvxwnpd0061gubqf3iy291v","_id":"cksvxwnq8009xgubq1100ebdj"},{"post_id":"cksvxwnoc003mgubq8bsa9boi","category_id":"cksvxwnq7009ngubq6uu1fllv","_id":"cksvxwnq900a1gubqavx767p5"},{"post_id":"cksvxwnof003tgubq03yggj2r","category_id":"cksvxwnpd0061gubqf3iy291v","_id":"cksvxwnq900a2gubqeqrb3ezr"},{"post_id":"cksvxwnof003tgubq03yggj2r","category_id":"cksvxwnq8009sgubq8jxk3i7q","_id":"cksvxwnq900a5gubqaftt1gkh"},{"post_id":"cksvxwnoj0043gubq4k216sck","category_id":"cksvxwnpr0077gubq9tvjfid5","_id":"cksvxwnqa00a8gubqctkih06g"},{"post_id":"cksvxwnoj0043gubq4k216sck","category_id":"cksvxwnq8009ygubq6mtiauls","_id":"cksvxwnqa00abgubqajmi1oep"},{"post_id":"cksvxwnol0046gubq85gpbmll","category_id":"cksvxwnpr0077gubq9tvjfid5","_id":"cksvxwnqb00aegubqgbln54c1"},{"post_id":"cksvxwnol0046gubq85gpbmll","category_id":"cksvxwnq8009ygubq6mtiauls","_id":"cksvxwnqb00aggubqcxl6840r"},{"post_id":"cksvxwnon0047gubqbzuoel6a","category_id":"cksvxwnpr0077gubq9tvjfid5","_id":"cksvxwnqb00aigubqcvgm07rs"},{"post_id":"cksvxwnon0047gubqbzuoel6a","category_id":"cksvxwnq8009ygubq6mtiauls","_id":"cksvxwnqc00akgubqhftp0adx"},{"post_id":"cksvxwnon0049gubq2f22hal6","category_id":"cksvxwnpr0077gubq9tvjfid5","_id":"cksvxwnqc00angubq3xlbfy9j"},{"post_id":"cksvxwnon0049gubq2f22hal6","category_id":"cksvxwnq8009ygubq6mtiauls","_id":"cksvxwnqd00aqgubq57c4adir"},{"post_id":"cksvxwnoo004bgubqeujk4foi","category_id":"cksvxwnpr0077gubq9tvjfid5","_id":"cksvxwnqd00asgubq17l24txh"},{"post_id":"cksvxwnoo004bgubqeujk4foi","category_id":"cksvxwnq8009ygubq6mtiauls","_id":"cksvxwnqe00avgubq5egacslb"},{"post_id":"cksvxwnop004dgubqeo6k25t6","category_id":"cksvxwnpr0077gubq9tvjfid5","_id":"cksvxwnqf00awgubqg2pg0o0g"},{"post_id":"cksvxwnop004dgubqeo6k25t6","category_id":"cksvxwnqc00amgubq4jalclke","_id":"cksvxwnqg00azgubq7hi9dvld"},{"post_id":"cksvxwnoq004fgubq8qbbh5ar","category_id":"cksvxwnpx0087gubq4gbaeghi","_id":"cksvxwnqg00b1gubqb0n31fto"},{"post_id":"cksvxwnoq004fgubq8qbbh5ar","category_id":"cksvxwnqd00atgubqb00ndfxi","_id":"cksvxwnqg00b4gubq1hw4ex4h"},{"post_id":"cksvxwnor004hgubqdnxz5uuy","category_id":"cksvxwnpr0077gubq9tvjfid5","_id":"cksvxwnqh00b7gubqfx7bh01h"},{"post_id":"cksvxwnor004hgubqdnxz5uuy","category_id":"cksvxwnq8009ygubq6mtiauls","_id":"cksvxwnqh00bagubq9ouz504b"},{"post_id":"cksvxwnos004jgubqbtjn5vi4","category_id":"cksvxwnpr0077gubq9tvjfid5","_id":"cksvxwnqh00bdgubqd1ikbu8z"},{"post_id":"cksvxwnos004jgubqbtjn5vi4","category_id":"cksvxwnq8009ygubq6mtiauls","_id":"cksvxwnqi00bfgubq6jtm6rmy"},{"post_id":"cksvxwnot004mgubqceud6e03","category_id":"cksvxwnpr0077gubq9tvjfid5","_id":"cksvxwnqi00bhgubq0eh24egh"},{"post_id":"cksvxwnot004mgubqceud6e03","category_id":"cksvxwnq8009ygubq6mtiauls","_id":"cksvxwnqj00bjgubq6hea86kd"},{"post_id":"cksvxwnot004ogubq3di0doby","category_id":"cksvxwnpr0077gubq9tvjfid5","_id":"cksvxwnqj00bmgubqd88qe1z3"},{"post_id":"cksvxwnot004ogubq3di0doby","category_id":"cksvxwnq8009ygubq6mtiauls","_id":"cksvxwnqj00bpgubqh5jh95ri"},{"post_id":"cksvxwnow004sgubq05vrbzj8","category_id":"cksvxwnpr0077gubq9tvjfid5","_id":"cksvxwnqk00bsgubq77qn99ni"},{"post_id":"cksvxwnow004sgubq05vrbzj8","category_id":"cksvxwnq8009ygubq6mtiauls","_id":"cksvxwnqk00bugubqggkx4c1l"},{"post_id":"cksvxwnox004xgubq6x02ha9p","category_id":"cksvxwnpr0077gubq9tvjfid5","_id":"cksvxwnqk00bvgubq1tet6t6l"},{"post_id":"cksvxwnox004xgubq6x02ha9p","category_id":"cksvxwnq8009ygubq6mtiauls","_id":"cksvxwnqk00bxgubq2q0o5ihi"},{"post_id":"cksvxwnoy004zgubqgxdkg69o","category_id":"cksvxwnpr0077gubq9tvjfid5","_id":"cksvxwnql00bzgubqde11hbdf"},{"post_id":"cksvxwnoy004zgubqgxdkg69o","category_id":"cksvxwnqc00amgubq4jalclke","_id":"cksvxwnql00c2gubqgohu3lu6"}],"PostTag":[{"post_id":"cksvxwnmq0003gubqhnfxbkil","tag_id":"cksvxwnmu0007gubqepnj2p07","_id":"cksvxwnn8000ogubq6mgo08lo"},{"post_id":"cksvxwnmq0003gubqhnfxbkil","tag_id":"cksvxwnmz000fgubq2azb9oxr","_id":"cksvxwnn9000sgubq0u566ydb"},{"post_id":"cksvxwnms0005gubq2ecz8s7b","tag_id":"cksvxwnmu0007gubqepnj2p07","_id":"cksvxwnnd0012gubq0637550l"},{"post_id":"cksvxwnms0005gubq2ecz8s7b","tag_id":"cksvxwnmz000fgubq2azb9oxr","_id":"cksvxwnnf0015gubqfsxfflxw"},{"post_id":"cksvxwnmv0009gubq5bhlghuy","tag_id":"cksvxwnnc000zgubq5df9bfyq","_id":"cksvxwnnl001hgubqc3ax7ghc"},{"post_id":"cksvxwnmv0009gubq5bhlghuy","tag_id":"cksvxwnmz000fgubq2azb9oxr","_id":"cksvxwnnn001jgubqaol1aq71"},{"post_id":"cksvxwnmy000dgubq43u4a5jr","tag_id":"cksvxwnnj001fgubqdy602kvy","_id":"cksvxwnno001ogubqe7z563oa"},{"post_id":"cksvxwnn2000hgubqhkf93bwb","tag_id":"cksvxwnnj001fgubqdy602kvy","_id":"cksvxwnnt0020gubq7q8t01pv"},{"post_id":"cksvxwnn2000hgubqhkf93bwb","tag_id":"cksvxwnnp001sgubq0e356j0h","_id":"cksvxwnnu0023gubqcoao6llo"},{"post_id":"cksvxwnn4000jgubq2o2k0bwn","tag_id":"cksvxwnnj001fgubqdy602kvy","_id":"cksvxwnnv0027gubqcwbs6sqz"},{"post_id":"cksvxwnn7000ngubq4xsh52ha","tag_id":"cksvxwnnu0026gubq9tnr427g","_id":"cksvxwnnz002kgubq5e2t7k1h"},{"post_id":"cksvxwnn7000ngubq4xsh52ha","tag_id":"cksvxwnnw002cgubqamwfalq3","_id":"cksvxwno0002mgubq5u9f2z7a"},{"post_id":"cksvxwnn9000qgubq6txhermr","tag_id":"cksvxwnny002igubqaqyradim","_id":"cksvxwnob003hgubqehej4rsv"},{"post_id":"cksvxwnn9000qgubq6txhermr","tag_id":"cksvxwno0002pgubqad79dkea","_id":"cksvxwnoc003lgubq0ozgb1a9"},{"post_id":"cksvxwnn9000qgubq6txhermr","tag_id":"cksvxwno4002wgubq8bd01cwc","_id":"cksvxwnod003ogubqfr4e8vi3"},{"post_id":"cksvxwnn9000qgubq6txhermr","tag_id":"cksvxwno60032gubq59372mvy","_id":"cksvxwnof003sgubqgtd9f9rg"},{"post_id":"cksvxwnn9000qgubq6txhermr","tag_id":"cksvxwno80038gubq5o41d7i6","_id":"cksvxwnof003vgubqh1gx96wn"},{"post_id":"cksvxwnna000vgubq37i36ezy","tag_id":"cksvxwnoa003egubq3l493odz","_id":"cksvxwnoh003ygubqevfj0avr"},{"post_id":"cksvxwnnb000xgubq27ap89a5","tag_id":"cksvxwnod003ngubqgrzlbndh","_id":"cksvxwnox004wgubq0j9pe7bl"},{"post_id":"cksvxwnnb000xgubq27ap89a5","tag_id":"cksvxwnof003ugubq8gcv85up","_id":"cksvxwnoy004ygubq0q091u8w"},{"post_id":"cksvxwnnb000xgubq27ap89a5","tag_id":"cksvxwnoi0040gubqb090gs2o","_id":"cksvxwnp00053gubqhe8ehbhy"},{"post_id":"cksvxwnnb000xgubq27ap89a5","tag_id":"cksvxwnol0045gubq2gaxahf1","_id":"cksvxwnp10055gubqc92z4s8e"},{"post_id":"cksvxwnnb000xgubq27ap89a5","tag_id":"cksvxwnoo004agubq8ksp4i53","_id":"cksvxwnp4005agubqg15j8p0e"},{"post_id":"cksvxwnnb000xgubq27ap89a5","tag_id":"cksvxwnoq004egubqd7qg29rm","_id":"cksvxwnp5005cgubq0rfe1qlv"},{"post_id":"cksvxwnnb000xgubq27ap89a5","tag_id":"cksvxwnor004igubqhd6fgab3","_id":"cksvxwnp7005ggubqfjfb9sgk"},{"post_id":"cksvxwnnb000xgubq27ap89a5","tag_id":"cksvxwnot004ngubq76mva6m5","_id":"cksvxwnp8005jgubqabzx5ek9"},{"post_id":"cksvxwnnd0011gubq9mbi09j9","tag_id":"cksvxwnod003ngubqgrzlbndh","_id":"cksvxwnp9005ngubq14cuej8q"},{"post_id":"cksvxwnnd0011gubq9mbi09j9","tag_id":"cksvxwnof003ugubq8gcv85up","_id":"cksvxwnpa005pgubq0rsg8a6g"},{"post_id":"cksvxwnnd0011gubq9mbi09j9","tag_id":"cksvxwnoi0040gubqb090gs2o","_id":"cksvxwnpb005tgubq82og3n71"},{"post_id":"cksvxwnnd0011gubq9mbi09j9","tag_id":"cksvxwnp6005egubqey232yiq","_id":"cksvxwnpb005vgubqakbr3xjb"},{"post_id":"cksvxwnne0014gubqbr6c4ddv","tag_id":"cksvxwnod003ngubqgrzlbndh","_id":"cksvxwnpd0063gubqe8nj88cb"},{"post_id":"cksvxwnne0014gubqbr6c4ddv","tag_id":"cksvxwnof003ugubq8gcv85up","_id":"cksvxwnpd0065gubq9eq95avn"},{"post_id":"cksvxwnne0014gubqbr6c4ddv","tag_id":"cksvxwnoi0040gubqb090gs2o","_id":"cksvxwnpe0068gubqd02yc5mi"},{"post_id":"cksvxwnng001agubq2tddh0z4","tag_id":"cksvxwnod003ngubqgrzlbndh","_id":"cksvxwnpi006jgubq79nbg0tg"},{"post_id":"cksvxwnng001agubq2tddh0z4","tag_id":"cksvxwnof003ugubq8gcv85up","_id":"cksvxwnpj006kgubqgefp2dbs"},{"post_id":"cksvxwnng001agubq2tddh0z4","tag_id":"cksvxwnoi0040gubqb090gs2o","_id":"cksvxwnpk006ngubq6i516dl1"},{"post_id":"cksvxwnng001agubq2tddh0z4","tag_id":"cksvxwnpg006dgubq92pze71a","_id":"cksvxwnpk006ogubq2u80gagi"},{"post_id":"cksvxwnni001cgubqc3xk8195","tag_id":"cksvxwnod003ngubqgrzlbndh","_id":"cksvxwnps007bgubqcp91gnjh"},{"post_id":"cksvxwnni001cgubqc3xk8195","tag_id":"cksvxwnof003ugubq8gcv85up","_id":"cksvxwnpt007dgubqc496dywe"},{"post_id":"cksvxwnni001cgubqc3xk8195","tag_id":"cksvxwnoi0040gubqb090gs2o","_id":"cksvxwnpt007ggubq4t5s7elj"},{"post_id":"cksvxwnni001cgubqc3xk8195","tag_id":"cksvxwnpl006tgubqa0pe784t","_id":"cksvxwnpt007hgubqcxyfahut"},{"post_id":"cksvxwnni001cgubqc3xk8195","tag_id":"cksvxwnpm006wgubq1wv498ca","_id":"cksvxwnpu007lgubqa7wv6bgp"},{"post_id":"cksvxwnni001cgubqc3xk8195","tag_id":"cksvxwnpq006ygubqeqafdiel","_id":"cksvxwnpu007ngubqhzsk2adm"},{"post_id":"cksvxwnni001cgubqc3xk8195","tag_id":"cksvxwnpq0072gubq6s3m9m3v","_id":"cksvxwnpu007qgubqa8iveomp"},{"post_id":"cksvxwnni001cgubqc3xk8195","tag_id":"cksvxwnpr0075gubqb6jmalx7","_id":"cksvxwnpu007rgubqdc1napr4"},{"post_id":"cksvxwnnk001ggubqe0ztdcba","tag_id":"cksvxwnod003ngubqgrzlbndh","_id":"cksvxwnpw0080gubqcicahvao"},{"post_id":"cksvxwnnk001ggubqe0ztdcba","tag_id":"cksvxwnpt007egubq26nccx1r","_id":"cksvxwnpw0081gubq4rsgc1ru"},{"post_id":"cksvxwnnk001ggubqe0ztdcba","tag_id":"cksvxwnoi0040gubqb090gs2o","_id":"cksvxwnpx0084gubqeurt7kdd"},{"post_id":"cksvxwnnk001ggubqe0ztdcba","tag_id":"cksvxwnoo004agubq8ksp4i53","_id":"cksvxwnpx0085gubq8ttv540q"},{"post_id":"cksvxwnnk001ggubqe0ztdcba","tag_id":"cksvxwnol0045gubq2gaxahf1","_id":"cksvxwnpy0089gubq4nzd6u4c"},{"post_id":"cksvxwnnk001ggubqe0ztdcba","tag_id":"cksvxwnoq004egubqd7qg29rm","_id":"cksvxwnpy008bgubq140narcq"},{"post_id":"cksvxwnnm001igubqcc6i7dlr","tag_id":"cksvxwnod003ngubqgrzlbndh","_id":"cksvxwnq1008ogubqgittf1qz"},{"post_id":"cksvxwnnm001igubqcc6i7dlr","tag_id":"cksvxwnof003ugubq8gcv85up","_id":"cksvxwnq1008qgubq98zi4etw"},{"post_id":"cksvxwnnm001igubqcc6i7dlr","tag_id":"cksvxwnoi0040gubqb090gs2o","_id":"cksvxwnq1008sgubq5s1v9wbj"},{"post_id":"cksvxwnnm001igubqcc6i7dlr","tag_id":"cksvxwnpy008cgubq6e0zgord","_id":"cksvxwnq2008ugubq96e059pg"},{"post_id":"cksvxwnnm001igubqcc6i7dlr","tag_id":"cksvxwnpy008egubq7vye6008","_id":"cksvxwnq2008wgubq0jij2hyt"},{"post_id":"cksvxwnnm001igubqcc6i7dlr","tag_id":"cksvxwnpz008hgubq4rz9d9fu","_id":"cksvxwnq2008ygubqhc5x9mcj"},{"post_id":"cksvxwnnm001igubqcc6i7dlr","tag_id":"cksvxwnpz008jgubqhlpwbvx5","_id":"cksvxwnq20090gubq8tye9lyl"},{"post_id":"cksvxwnnm001igubqcc6i7dlr","tag_id":"cksvxwnq0008lgubqda33eaiv","_id":"cksvxwnq30093gubqclhw869h"},{"post_id":"cksvxwnnn001ngubq23ucafv7","tag_id":"cksvxwnod003ngubqgrzlbndh","_id":"cksvxwnq50098gubqfbs15lga"},{"post_id":"cksvxwnnn001ngubq23ucafv7","tag_id":"cksvxwnof003ugubq8gcv85up","_id":"cksvxwnq5009bgubq67yp5lsk"},{"post_id":"cksvxwnnn001ngubq23ucafv7","tag_id":"cksvxwnoi0040gubqb090gs2o","_id":"cksvxwnq5009dgubqhf125l48"},{"post_id":"cksvxwnnn001ngubq23ucafv7","tag_id":"cksvxwnq2008zgubqb3ex240s","_id":"cksvxwnq6009ggubq5pmvhnve"},{"post_id":"cksvxwnnn001ngubq23ucafv7","tag_id":"cksvxwnq30094gubq197c6h8t","_id":"cksvxwnq6009igubqgp4gap66"},{"post_id":"cksvxwnno001pgubq81tt7v00","tag_id":"cksvxwnod003ngubqgrzlbndh","_id":"cksvxwnq7009qgubqfrb8cey7"},{"post_id":"cksvxwnno001pgubq81tt7v00","tag_id":"cksvxwnof003ugubq8gcv85up","_id":"cksvxwnq8009tgubq1it6cf3v"},{"post_id":"cksvxwnno001pgubq81tt7v00","tag_id":"cksvxwnq6009hgubqhno6bxj1","_id":"cksvxwnq8009wgubq5bg58mhq"},{"post_id":"cksvxwnno001pgubq81tt7v00","tag_id":"cksvxwnq6009lgubqb4yugff4","_id":"cksvxwnq9009zgubqcohd4hzp"},{"post_id":"cksvxwnnq001tgubq6gau022u","tag_id":"cksvxwnod003ngubqgrzlbndh","_id":"cksvxwnqa00a6gubq2t6c5u2r"},{"post_id":"cksvxwnnq001tgubq6gau022u","tag_id":"cksvxwnof003ugubq8gcv85up","_id":"cksvxwnqa00a9gubq4nau92bw"},{"post_id":"cksvxwnnq001tgubq6gau022u","tag_id":"cksvxwnq6009hgubqhno6bxj1","_id":"cksvxwnqa00acgubqbxv40cuh"},{"post_id":"cksvxwnnq001vgubq3odr9msh","tag_id":"cksvxwnod003ngubqgrzlbndh","_id":"cksvxwnqc00algubqal67gjxr"},{"post_id":"cksvxwnnq001vgubq3odr9msh","tag_id":"cksvxwnof003ugubq8gcv85up","_id":"cksvxwnqc00aogubq9693d6x8"},{"post_id":"cksvxwnnq001vgubq3odr9msh","tag_id":"cksvxwnq6009hgubqhno6bxj1","_id":"cksvxwnqd00argubqbhxu790n"},{"post_id":"cksvxwnns001ygubq1az34f8q","tag_id":"cksvxwnod003ngubqgrzlbndh","_id":"cksvxwnqg00b3gubq9f562ra2"},{"post_id":"cksvxwnns001ygubq1az34f8q","tag_id":"cksvxwnof003ugubq8gcv85up","_id":"cksvxwnqh00b5gubq2z2ee7so"},{"post_id":"cksvxwnns001ygubq1az34f8q","tag_id":"cksvxwnq6009hgubqhno6bxj1","_id":"cksvxwnqh00b9gubqe3zghowq"},{"post_id":"cksvxwnns001ygubq1az34f8q","tag_id":"cksvxwnqf00axgubq5l4bchjp","_id":"cksvxwnqh00bbgubq0hyvg164"},{"post_id":"cksvxwnnt0021gubqc1h9bcy4","tag_id":"cksvxwnof003ugubq8gcv85up","_id":"cksvxwnqj00bkgubqao8g9tlp"},{"post_id":"cksvxwnnt0021gubqc1h9bcy4","tag_id":"cksvxwnod003ngubqgrzlbndh","_id":"cksvxwnqj00bngubqenf3dgqz"},{"post_id":"cksvxwnnt0021gubqc1h9bcy4","tag_id":"cksvxwnqi00begubq3h2s6ytt","_id":"cksvxwnqj00bqgubqfwmz5yg1"},{"post_id":"cksvxwnnu0024gubq5zsh3jsa","tag_id":"cksvxwnod003ngubqgrzlbndh","_id":"cksvxwnqk00bygubqa6oubpkc"},{"post_id":"cksvxwnnu0024gubq5zsh3jsa","tag_id":"cksvxwnof003ugubq8gcv85up","_id":"cksvxwnql00c0gubq825sbpp4"},{"post_id":"cksvxwnnu0024gubq5zsh3jsa","tag_id":"cksvxwnqk00btgubq8e387pfi","_id":"cksvxwnql00c3gubq9v0i33fb"},{"post_id":"cksvxwnnv0028gubqb920bgkv","tag_id":"cksvxwnod003ngubqgrzlbndh","_id":"cksvxwnql00c6gubq1jhcc7nr"},{"post_id":"cksvxwnnv0028gubqb920bgkv","tag_id":"cksvxwnof003ugubq8gcv85up","_id":"cksvxwnqm00c7gubqdxh64upr"},{"post_id":"cksvxwnnv0028gubqb920bgkv","tag_id":"cksvxwnql00c4gubq4oaq26t2","_id":"cksvxwnqm00c9gubqf2n6auyk"},{"post_id":"cksvxwnnw0029gubqc6uvgt0i","tag_id":"cksvxwnod003ngubqgrzlbndh","_id":"cksvxwnqn00cegubqf4ytcce4"},{"post_id":"cksvxwnnw0029gubqc6uvgt0i","tag_id":"cksvxwnof003ugubq8gcv85up","_id":"cksvxwnqn00cfgubqd3hifo3r"},{"post_id":"cksvxwnnw0029gubqc6uvgt0i","tag_id":"cksvxwnqm00cagubq0v5o0l1q","_id":"cksvxwnqo00chgubqhla2hsx7"},{"post_id":"cksvxwnnw0029gubqc6uvgt0i","tag_id":"cksvxwnqm00cbgubqdmzbbxl8","_id":"cksvxwnqo00cigubq2mala6qv"},{"post_id":"cksvxwnnw0029gubqc6uvgt0i","tag_id":"cksvxwnpg006dgubq92pze71a","_id":"cksvxwnqo00ckgubq2er715q8"},{"post_id":"cksvxwnnx002dgubqc7d53wzu","tag_id":"cksvxwnod003ngubqgrzlbndh","_id":"cksvxwnqp00cmgubq7t4d4soo"},{"post_id":"cksvxwnnx002dgubqc7d53wzu","tag_id":"cksvxwnof003ugubq8gcv85up","_id":"cksvxwnqp00cngubq7uzs7cly"},{"post_id":"cksvxwnnx002dgubqc7d53wzu","tag_id":"cksvxwnqo00cjgubq7dktg9yg","_id":"cksvxwnqp00cpgubqd33wczmv"},{"post_id":"cksvxwnnx002fgubq1fth5kau","tag_id":"cksvxwnod003ngubqgrzlbndh","_id":"cksvxwnqr00cvgubqhnm62ghm"},{"post_id":"cksvxwnnx002fgubq1fth5kau","tag_id":"cksvxwnof003ugubq8gcv85up","_id":"cksvxwnqr00cwgubq0qi08yp3"},{"post_id":"cksvxwnnx002fgubq1fth5kau","tag_id":"cksvxwnqp00cqgubqhvyeavcx","_id":"cksvxwnqr00cygubq5behcxob"},{"post_id":"cksvxwnnx002fgubq1fth5kau","tag_id":"cksvxwnqq00crgubqfli70oqs","_id":"cksvxwnqr00czgubqhd1m5hq8"},{"post_id":"cksvxwnnx002fgubq1fth5kau","tag_id":"cksvxwnqq00csgubqeluq3aip","_id":"cksvxwnqr00d1gubqdm1tb49j"},{"post_id":"cksvxwnnx002fgubq1fth5kau","tag_id":"cksvxwnqq00ctgubq6hsz3f6y","_id":"cksvxwnqr00d2gubq8aephkgu"},{"post_id":"cksvxwnnz002jgubqdnw11kpv","tag_id":"cksvxwnof003ugubq8gcv85up","_id":"cksvxwnqs00d5gubq2u4a1eef"},{"post_id":"cksvxwnnz002jgubqdnw11kpv","tag_id":"cksvxwnod003ngubqgrzlbndh","_id":"cksvxwnqs00d6gubq8ipjh7p4"},{"post_id":"cksvxwnnz002jgubqdnw11kpv","tag_id":"cksvxwnqr00d0gubqe43qal4e","_id":"cksvxwnqs00d8gubqf2qvcw39"},{"post_id":"cksvxwnnz002jgubqdnw11kpv","tag_id":"cksvxwnqr00d3gubq67fk2duc","_id":"cksvxwnqs00d9gubq9wuqdz7n"},{"post_id":"cksvxwnnz002lgubq8ye69idc","tag_id":"cksvxwnod003ngubqgrzlbndh","_id":"cksvxwnqt00ddgubq3mkiftlo"},{"post_id":"cksvxwnnz002lgubq8ye69idc","tag_id":"cksvxwnqs00d7gubqe7rtd2no","_id":"cksvxwnqu00degubqbp4sh3ff"},{"post_id":"cksvxwnnz002lgubq8ye69idc","tag_id":"cksvxwnqt00dagubqh1mh1ugp","_id":"cksvxwnqu00dggubq1qln4632"},{"post_id":"cksvxwnnz002lgubq8ye69idc","tag_id":"cksvxwnqt00dbgubqfo2474jr","_id":"cksvxwnqu00dhgubqawqb8212"},{"post_id":"cksvxwno1002qgubq5r8hcql2","tag_id":"cksvxwnod003ngubqgrzlbndh","_id":"cksvxwnqu00djgubq567x8t06"},{"post_id":"cksvxwno1002qgubq5r8hcql2","tag_id":"cksvxwnof003ugubq8gcv85up","_id":"cksvxwnqu00dkgubqesoiajxb"},{"post_id":"cksvxwno2002rgubq8wjec6ae","tag_id":"cksvxwnod003ngubqgrzlbndh","_id":"cksvxwnqw00dpgubq6t7aarty"},{"post_id":"cksvxwno2002rgubq8wjec6ae","tag_id":"cksvxwnof003ugubq8gcv85up","_id":"cksvxwnqw00dqgubq6kmw0o8p"},{"post_id":"cksvxwno2002rgubq8wjec6ae","tag_id":"cksvxwnqv00dmgubq54kyd12i","_id":"cksvxwnqw00dsgubqgu5hbgfv"},{"post_id":"cksvxwno2002rgubq8wjec6ae","tag_id":"cksvxwnqv00dngubqdjg236sp","_id":"cksvxwnqw00dtgubq6axe07cv"},{"post_id":"cksvxwno3002ugubqati0ckxc","tag_id":"cksvxwnod003ngubqgrzlbndh","_id":"cksvxwnqw00dwgubqb8kd1rx5"},{"post_id":"cksvxwno3002ugubqati0ckxc","tag_id":"cksvxwnof003ugubq8gcv85up","_id":"cksvxwnqx00dxgubqdrt1b7b4"},{"post_id":"cksvxwno3002ugubqati0ckxc","tag_id":"cksvxwnqv00dmgubq54kyd12i","_id":"cksvxwnqx00dzgubq8rcx419y"},{"post_id":"cksvxwno4002xgubq1lrbhabn","tag_id":"cksvxwnof003ugubq8gcv85up","_id":"cksvxwnqy00e3gubq55wzaeh2"},{"post_id":"cksvxwno4002xgubq1lrbhabn","tag_id":"cksvxwnod003ngubqgrzlbndh","_id":"cksvxwnqy00e4gubqgmexhrci"},{"post_id":"cksvxwno4002xgubq1lrbhabn","tag_id":"cksvxwnqx00e0gubq0z0jhnjy","_id":"cksvxwnqy00e6gubq8k0gbx97"},{"post_id":"cksvxwno4002xgubq1lrbhabn","tag_id":"cksvxwnqt00dagubqh1mh1ugp","_id":"cksvxwnqy00e7gubqgxshbcyr"},{"post_id":"cksvxwno50030gubqdvs85sl4","tag_id":"cksvxwnod003ngubqgrzlbndh","_id":"cksvxwnr000eegubqdcfp3ey2"},{"post_id":"cksvxwno50030gubqdvs85sl4","tag_id":"cksvxwnof003ugubq8gcv85up","_id":"cksvxwnr000efgubqghgwao9i"},{"post_id":"cksvxwno50030gubqdvs85sl4","tag_id":"cksvxwnqz00e8gubq7faq1kic","_id":"cksvxwnr000ehgubqb9ixe9mf"},{"post_id":"cksvxwno50030gubqdvs85sl4","tag_id":"cksvxwnqz00e9gubqa758bpe2","_id":"cksvxwnr000eigubqh1ejh6g7"},{"post_id":"cksvxwno50030gubqdvs85sl4","tag_id":"cksvxwnqz00eagubq6zxi51r4","_id":"cksvxwnr100ekgubq8oym21f7"},{"post_id":"cksvxwno50030gubqdvs85sl4","tag_id":"cksvxwnqz00ebgubq6ipf0smx","_id":"cksvxwnr100elgubqh68vgru5"},{"post_id":"cksvxwno50030gubqdvs85sl4","tag_id":"cksvxwnqz00ecgubq9p7y9men","_id":"cksvxwnr100engubqdt8dfyls"},{"post_id":"cksvxwno60033gubq5x45an1l","tag_id":"cksvxwnod003ngubqgrzlbndh","_id":"cksvxwnr100eogubqcpgse87v"},{"post_id":"cksvxwno60033gubq5x45an1l","tag_id":"cksvxwnof003ugubq8gcv85up","_id":"cksvxwnr100eqgubq0b5f6xwh"},{"post_id":"cksvxwno60033gubq5x45an1l","tag_id":"cksvxwnpg006dgubq92pze71a","_id":"cksvxwnr100ergubq5ljy6tmw"},{"post_id":"cksvxwno70036gubq2rmf1k5w","tag_id":"cksvxwnod003ngubqgrzlbndh","_id":"cksvxwnr200evgubq729ibeum"},{"post_id":"cksvxwno70036gubq2rmf1k5w","tag_id":"cksvxwnof003ugubq8gcv85up","_id":"cksvxwnr200ewgubq2ez94jcl"},{"post_id":"cksvxwno70036gubq2rmf1k5w","tag_id":"cksvxwnr100esgubq8kzxgi09","_id":"cksvxwnr300eygubqfpoc7yon"},{"post_id":"cksvxwno70036gubq2rmf1k5w","tag_id":"cksvxwnr200etgubq1mixd8ss","_id":"cksvxwnr300ezgubqg0dp2u16"},{"post_id":"cksvxwno80039gubq5cy2epv0","tag_id":"cksvxwnod003ngubqgrzlbndh","_id":"cksvxwnr300f1gubq7zahek5q"},{"post_id":"cksvxwno80039gubq5cy2epv0","tag_id":"cksvxwnof003ugubq8gcv85up","_id":"cksvxwnr300f2gubq3xrve1xs"},{"post_id":"cksvxwno9003cgubqhaoj68mq","tag_id":"cksvxwnr300f0gubq8ptq57of","_id":"cksvxwnr400f5gubqetfxh2ib"},{"post_id":"cksvxwno9003cgubqhaoj68mq","tag_id":"cksvxwnr300f3gubq4vlhbfd4","_id":"cksvxwnr400f6gubq2ljy334v"},{"post_id":"cksvxwnoa003fgubqea8e2wk2","tag_id":"cksvxwnod003ngubqgrzlbndh","_id":"cksvxwnr500fagubqgtrp2236"},{"post_id":"cksvxwnoa003fgubqea8e2wk2","tag_id":"cksvxwnof003ugubq8gcv85up","_id":"cksvxwnr500fbgubq50kd7kiq"},{"post_id":"cksvxwnoa003fgubqea8e2wk2","tag_id":"cksvxwnr400f8gubq6su62l8q","_id":"cksvxwnr500fdgubq1yus66o1"},{"post_id":"cksvxwnob003jgubq5ka9hmnw","tag_id":"cksvxwnr300f0gubq8ptq57of","_id":"cksvxwnr600fggubq2k3hbhnx"},{"post_id":"cksvxwnob003jgubq5ka9hmnw","tag_id":"cksvxwnr500fcgubqe4698grt","_id":"cksvxwnr600fhgubq7ujy1n2b"},{"post_id":"cksvxwnob003jgubq5ka9hmnw","tag_id":"cksvxwnr500fegubqfrlyah9t","_id":"cksvxwnr600fjgubq0h7h1atf"},{"post_id":"cksvxwnoc003mgubq8bsa9boi","tag_id":"cksvxwnr300f0gubq8ptq57of","_id":"cksvxwnr700flgubqfrnu9634"},{"post_id":"cksvxwnoc003mgubq8bsa9boi","tag_id":"cksvxwnr600figubq4dw4epzw","_id":"cksvxwnr700fmgubqaigl53ne"},{"post_id":"cksvxwnoe003qgubqhp86havt","tag_id":"cksvxwnr600fkgubqcjahht40","_id":"cksvxwnr800fqgubq3mmyeec4"},{"post_id":"cksvxwnoe003qgubqhp86havt","tag_id":"cksvxwnr700fngubqgx9w60s6","_id":"cksvxwnr800frgubq71uw8i71"},{"post_id":"cksvxwnoe003qgubqhp86havt","tag_id":"cksvxwnr700fogubqhcn1aevv","_id":"cksvxwnr800ftgubq75e0hfv5"},{"post_id":"cksvxwnof003tgubq03yggj2r","tag_id":"cksvxwnr300f0gubq8ptq57of","_id":"cksvxwnr900fygubqa8rk7k3g"},{"post_id":"cksvxwnof003tgubq03yggj2r","tag_id":"cksvxwnr800fsgubq1ynadqcs","_id":"cksvxwnr900fzgubqa8m2elms"},{"post_id":"cksvxwnof003tgubq03yggj2r","tag_id":"cksvxwnr800fugubq7g2221b3","_id":"cksvxwnra00g1gubqgu11etz3"},{"post_id":"cksvxwnof003tgubq03yggj2r","tag_id":"cksvxwnr800fvgubqhncd7av5","_id":"cksvxwnra00g2gubq0gh97dzn"},{"post_id":"cksvxwnof003tgubq03yggj2r","tag_id":"cksvxwnr900fwgubq2z5ibupy","_id":"cksvxwnra00g4gubqecqpdsjv"},{"post_id":"cksvxwnog003xgubqbphng1hx","tag_id":"cksvxwnr300f0gubq8ptq57of","_id":"cksvxwnra00g5gubq5gl25jbh"},{"post_id":"cksvxwnog003xgubqbphng1hx","tag_id":"cksvxwnr900g0gubq080234tb","_id":"cksvxwnrb00g7gubq67zran99"},{"post_id":"cksvxwnoh003zgubq31fsg68h","tag_id":"cksvxwnr600fkgubqcjahht40","_id":"cksvxwnrc00gagubqgw30as1k"},{"post_id":"cksvxwnoh003zgubq31fsg68h","tag_id":"cksvxwnod003ngubqgrzlbndh","_id":"cksvxwnrc00gbgubq1jchgpuv"},{"post_id":"cksvxwnoh003zgubq31fsg68h","tag_id":"cksvxwnof003ugubq8gcv85up","_id":"cksvxwnrc00gdgubq91r4e8t6"},{"post_id":"cksvxwnoh003zgubq31fsg68h","tag_id":"cksvxwnra00g6gubqhtzp4n50","_id":"cksvxwnrc00gegubq2bnd2fhg"},{"post_id":"cksvxwnoh003zgubq31fsg68h","tag_id":"cksvxwnrb00g8gubqhd5lemgs","_id":"cksvxwnrd00gggubq70xpfxep"},{"post_id":"cksvxwnoj0043gubq4k216sck","tag_id":"cksvxwnrb00g9gubqf9hc33iy","_id":"cksvxwnrd00ghgubqcer77qa4"},{"post_id":"cksvxwnoj0043gubq4k216sck","tag_id":"cksvxwnrc00gcgubq8j282a2v","_id":"cksvxwnrd00gjgubq0dup7qe9"},{"post_id":"cksvxwnol0046gubq85gpbmll","tag_id":"cksvxwnrb00g9gubqf9hc33iy","_id":"cksvxwnrd00glgubqfgsz5jtw"},{"post_id":"cksvxwnol0046gubq85gpbmll","tag_id":"cksvxwnrd00gigubqg296aunt","_id":"cksvxwnrd00gmgubqhrw8edoi"},{"post_id":"cksvxwnon0047gubqbzuoel6a","tag_id":"cksvxwnrb00g9gubqf9hc33iy","_id":"cksvxwnre00gogubqa4qf0781"},{"post_id":"cksvxwnon0049gubq2f22hal6","tag_id":"cksvxwnrb00g9gubqf9hc33iy","_id":"cksvxwnre00gqgubq98jz4qn4"},{"post_id":"cksvxwnoo004bgubqeujk4foi","tag_id":"cksvxwnrb00g9gubqf9hc33iy","_id":"cksvxwnrf00gugubqg1gjees9"},{"post_id":"cksvxwnoo004bgubqeujk4foi","tag_id":"cksvxwnre00grgubqgcmm4i2r","_id":"cksvxwnrf00gvgubq31awefbr"},{"post_id":"cksvxwnoo004bgubqeujk4foi","tag_id":"cksvxwnre00gsgubqczepgt16","_id":"cksvxwnrf00gxgubqc5xg30mh"},{"post_id":"cksvxwnop004dgubqeo6k25t6","tag_id":"cksvxwnrb00g9gubqf9hc33iy","_id":"cksvxwnrg00gzgubq26jb8tvr"},{"post_id":"cksvxwnop004dgubqeo6k25t6","tag_id":"cksvxwnrf00gwgubq3rnc9ler","_id":"cksvxwnrg00h0gubqc3gq14x2"},{"post_id":"cksvxwnoq004fgubq8qbbh5ar","tag_id":"cksvxwnrf00gygubq4h7qf6i6","_id":"cksvxwnrh00h2gubq73mcd8pi"},{"post_id":"cksvxwnor004hgubqdnxz5uuy","tag_id":"cksvxwnrb00g9gubqf9hc33iy","_id":"cksvxwnrh00h5gubq16dm52oo"},{"post_id":"cksvxwnor004hgubqdnxz5uuy","tag_id":"cksvxwnrh00h3gubqgxr5anak","_id":"cksvxwnri00h6gubq4gje7a2q"},{"post_id":"cksvxwnos004jgubqbtjn5vi4","tag_id":"cksvxwnrb00g9gubqf9hc33iy","_id":"cksvxwnri00h9gubqgddk32z4"},{"post_id":"cksvxwnos004jgubqbtjn5vi4","tag_id":"cksvxwnri00h7gubqbpqv78c2","_id":"cksvxwnri00hagubq2lzn3ox2"},{"post_id":"cksvxwnot004mgubqceud6e03","tag_id":"cksvxwnrb00g9gubqf9hc33iy","_id":"cksvxwnrj00hdgubq42a659u2"},{"post_id":"cksvxwnot004mgubqceud6e03","tag_id":"cksvxwnrh00h3gubqgxr5anak","_id":"cksvxwnrj00hegubq8vpohqdg"},{"post_id":"cksvxwnot004ogubq3di0doby","tag_id":"cksvxwnrb00g9gubqf9hc33iy","_id":"cksvxwnrk00higubq13e4atz1"},{"post_id":"cksvxwnot004ogubq3di0doby","tag_id":"cksvxwnrj00hfgubq9cue1zn9","_id":"cksvxwnrk00hjgubq9l6aeviv"},{"post_id":"cksvxwnot004ogubq3di0doby","tag_id":"cksvxwnrj00hggubq6zkz5dor","_id":"cksvxwnrk00hlgubq0tge09j5"},{"post_id":"cksvxwnow004sgubq05vrbzj8","tag_id":"cksvxwnrb00g9gubqf9hc33iy","_id":"cksvxwnrl00hngubqfb5qejt1"},{"post_id":"cksvxwnow004sgubq05vrbzj8","tag_id":"cksvxwnre00grgubqgcmm4i2r","_id":"cksvxwnrl00hogubqh2lz31kf"},{"post_id":"cksvxwnox004xgubq6x02ha9p","tag_id":"cksvxwnrb00g9gubqf9hc33iy","_id":"cksvxwnrl00hrgubq7etx325w"},{"post_id":"cksvxwnox004xgubq6x02ha9p","tag_id":"cksvxwnrl00hpgubqf5uv8pp0","_id":"cksvxwnrl00hsgubqaw6u9kxe"},{"post_id":"cksvxwnoy004zgubqgxdkg69o","tag_id":"cksvxwnrb00g9gubqf9hc33iy","_id":"cksvxwnrm00hvgubqadqjg86o"},{"post_id":"cksvxwnoy004zgubqgxdkg69o","tag_id":"cksvxwnrl00htgubq5sea9v00","_id":"cksvxwnrm00hwgubq8n1u6igl"},{"post_id":"cksvxwnp00054gubqd4b5ejhm","tag_id":"cksvxwnrm00hugubqcpn16mh4","_id":"cksvxwnrn00hzgubq09gk10fu"},{"post_id":"cksvxwnp00054gubqd4b5ejhm","tag_id":"cksvxwnrm00hxgubq6lkzhz2t","_id":"cksvxwnrn00i0gubqfonpel94"},{"post_id":"cksvxwnp10056gubq71ic8de5","tag_id":"cksvxwnrm00hugubqcpn16mh4","_id":"cksvxwnrn00i3gubq8g4u5jdi"},{"post_id":"cksvxwnp10056gubq71ic8de5","tag_id":"cksvxwnrn00i1gubqfisn4nfh","_id":"cksvxwnro00i4gubq7y2e3b7x"},{"post_id":"cksvxwnp4005bgubqdfh8eqy0","tag_id":"cksvxwnrm00hugubqcpn16mh4","_id":"cksvxwnro00i7gubqb8fl0pyb"},{"post_id":"cksvxwnp4005bgubqdfh8eqy0","tag_id":"cksvxwnro00i5gubq6dlwc4j5","_id":"cksvxwnro00i8gubq2cua27ny"},{"post_id":"cksvxwnp5005dgubq4q79cv5a","tag_id":"cksvxwnrm00hugubqcpn16mh4","_id":"cksvxwnrq00idgubq154j240e"},{"post_id":"cksvxwnp5005dgubq4q79cv5a","tag_id":"cksvxwnro00i9gubqe3uw1f6e","_id":"cksvxwnrq00iegubq760v23gw"},{"post_id":"cksvxwnp5005dgubq4q79cv5a","tag_id":"cksvxwnrp00iagubqg9zxa338","_id":"cksvxwnrq00iggubq98vl2jw7"},{"post_id":"cksvxwnp5005dgubq4q79cv5a","tag_id":"cksvxwnrp00ibgubq3a0t5a0q","_id":"cksvxwnrq00ihgubqhz6cbpvf"},{"post_id":"cksvxwnp7005hgubqb5bs22c0","tag_id":"cksvxwnrm00hugubqcpn16mh4","_id":"cksvxwnrr00ijgubq976rd62b"},{"post_id":"cksvxwnp7005hgubqb5bs22c0","tag_id":"cksvxwnrq00ifgubq6w3z7k16","_id":"cksvxwnrr00ikgubqho1kd1hg"},{"post_id":"cksvxwnp7005hgubqb5bs22c0","tag_id":"cksvxwnrq00iigubqe0hkhfb7","_id":"cksvxwnrr00ilgubqdjnr9r5b"}],"Tag":[{"name":"hexo","_id":"cksvxwnmu0007gubqepnj2p07"},{"name":"博客","_id":"cksvxwnmz000fgubq2azb9oxr"},{"name":"hugo","_id":"cksvxwnnc000zgubq5df9bfyq"},{"name":"css布局","_id":"cksvxwnnj001fgubqdy602kvy"},{"name":"flex","_id":"cksvxwnnp001sgubq0e356j0h"},{"name":"curl","_id":"cksvxwnnu0026gubq9tnr427g"},{"name":"github","_id":"cksvxwnnw002cgubqamwfalq3"},{"name":"html","_id":"cksvxwnny002igubqaqyradim"},{"name":"css","_id":"cksvxwno0002pgubqad79dkea"},{"name":"input光标","_id":"cksvxwno4002wgubq8bd01cwc"},{"name":"插入符","_id":"cksvxwno60032gubq59372mvy"},{"name":"placeholder","_id":"cksvxwno80038gubq5o41d7i6"},{"name":"maven","_id":"cksvxwnoa003egubq3l493odz"},{"name":"js","_id":"cksvxwnod003ngubqgrzlbndh"},{"name":"javascript","_id":"cksvxwnof003ugubq8gcv85up"},{"name":"ES6","_id":"cksvxwnoi0040gubqb090gs2o"},{"name":"let","_id":"cksvxwnol0045gubq2gaxahf1"},{"name":"var","_id":"cksvxwnoo004agubq8ksp4i53"},{"name":"const","_id":"cksvxwnoq004egubqd7qg29rm"},{"name":"babel","_id":"cksvxwnor004igubqhd6fgab3"},{"name":"兼容","_id":"cksvxwnot004ngubq76mva6m5"},{"name":"解构赋值","_id":"cksvxwnp6005egubqey232yiq"},{"name":"数组去重","_id":"cksvxwnpg006dgubq92pze71a"},{"name":"Promise","_id":"cksvxwnpl006tgubqa0pe784t"},{"name":"then","_id":"cksvxwnpm006wgubq1wv498ca"},{"name":"catch","_id":"cksvxwnpq006ygubqeqafdiel"},{"name":"resolve","_id":"cksvxwnpq0072gubq6s3m9m3v"},{"name":"reject","_id":"cksvxwnpr0075gubqb6jmalx7"},{"name":"jsvascript","_id":"cksvxwnpt007egubq26nccx1r"},{"name":"class","_id":"cksvxwnpy008cgubq6e0zgord"},{"name":"export","_id":"cksvxwnpy008egubq7vye6008"},{"name":"import","_id":"cksvxwnpz008hgubq4rz9d9fu"},{"name":"module","_id":"cksvxwnpz008jgubqhlpwbvx5"},{"name":"extends","_id":"cksvxwnq0008lgubqda33eaiv"},{"name":"async","_id":"cksvxwnq2008zgubqb3ex240s"},{"name":"await","_id":"cksvxwnq30094gubq197c6h8t"},{"name":"jQuery","_id":"cksvxwnq6009hgubqhno6bxj1"},{"name":"Ajax","_id":"cksvxwnq6009lgubqb4yugff4"},{"name":"echarts","_id":"cksvxwnqf00axgubq5l4bchjp"},{"name":"拖放","_id":"cksvxwnqi00begubq3h2s6ytt"},{"name":"api","_id":"cksvxwnqk00btgubq8e387pfi"},{"name":"arguments","_id":"cksvxwnql00c4gubq4oaq26t2"},{"name":"数组排序","_id":"cksvxwnqm00cagubq0v5o0l1q"},{"name":"sort","_id":"cksvxwnqm00cbgubqdmzbbxl8"},{"name":"触壁反弹","_id":"cksvxwnqo00cjgubq7dktg9yg"},{"name":"call","_id":"cksvxwnqp00cqgubqhvyeavcx"},{"name":"apply","_id":"cksvxwnqq00crgubqfli70oqs"},{"name":"bind","_id":"cksvxwnqq00csgubqeluq3aip"},{"name":"this指向","_id":"cksvxwnqq00ctgubq6hsz3f6y"},{"name":"closure","_id":"cksvxwnqr00d0gubqe43qal4e"},{"name":"闭包","_id":"cksvxwnqr00d3gubq67fk2duc"},{"name":"deepClone","_id":"cksvxwnqs00d7gubqe7rtd2no"},{"name":"递归","_id":"cksvxwnqt00dagubqh1mh1ugp"},{"name":"深拷贝","_id":"cksvxwnqt00dbgubqfo2474jr"},{"name":"面向对象","_id":"cksvxwnqv00dmgubq54kyd12i"},{"name":"继承","_id":"cksvxwnqv00dngubqdjg236sp"},{"name":"recursive","_id":"cksvxwnqx00e0gubq0z0jhnjy"},{"name":"RegExp","_id":"cksvxwnqz00e8gubq7faq1kic"},{"name":"正则","_id":"cksvxwnqz00e9gubqa758bpe2"},{"name":"test","_id":"cksvxwnqz00eagubq6zxi51r4"},{"name":"match","_id":"cksvxwnqz00ebgubq6ipf0smx"},{"name":"replace","_id":"cksvxwnqz00ecgubq9p7y9men"},{"name":"swiper","_id":"cksvxwnr100esgubq8kzxgi09"},{"name":"轮播图","_id":"cksvxwnr200etgubq1mixd8ss"},{"name":"linux","_id":"cksvxwnr300f0gubq8ptq57of"},{"name":"CentOS","_id":"cksvxwnr300f3gubq4vlhbfd4"},{"name":"基础总结","_id":"cksvxwnr400f8gubq6su62l8q"},{"name":"kali","_id":"cksvxwnr500fcgubqe4698grt"},{"name":"swaks","_id":"cksvxwnr500fegubqfrlyah9t"},{"name":"manjaro","_id":"cksvxwnr600figubq4dw4epzw"},{"name":"node","_id":"cksvxwnr600fkgubqcjahht40"},{"name":"cnpm","_id":"cksvxwnr700fngubqgx9w60s6"},{"name":"npm","_id":"cksvxwnr700fogubqhcn1aevv"},{"name":"arch","_id":"cksvxwnr800fsgubq1ynadqcs"},{"name":"nvidia","_id":"cksvxwnr800fugubq7g2221b3"},{"name":"bbswitch","_id":"cksvxwnr800fvgubqhncd7av5"},{"name":"optimus-manager","_id":"cksvxwnr900fwgubq2z5ibupy"},{"name":"grub","_id":"cksvxwnr900g0gubq080234tb"},{"name":"fs","_id":"cksvxwnra00g6gubqhtzp4n50"},{"name":"http","_id":"cksvxwnrb00g8gubqhd5lemgs"},{"name":"Vue","_id":"cksvxwnrb00g9gubqf9hc33iy"},{"name":"Vue 过渡动画","_id":"cksvxwnrc00gcgubq8j282a2v"},{"name":"axios","_id":"cksvxwnrd00gigubqg296aunt"},{"name":"Vue-router","_id":"cksvxwnre00grgubqgcmm4i2r"},{"name":"beforeEach","_id":"cksvxwnre00gsgubqczepgt16"},{"name":"Vue脚手架","_id":"cksvxwnrf00gwgubq3rnc9ler"},{"name":"vue","_id":"cksvxwnrf00gygubq4h7qf6i6"},{"name":"Vue 组件","_id":"cksvxwnrh00h3gubqgxr5anak"},{"name":"Vue 组件复用","_id":"cksvxwnri00h7gubqbpqv78c2"},{"name":"Vue 生命周期","_id":"cksvxwnrj00hfgubq9cue1zn9"},{"name":"Vue-resource","_id":"cksvxwnrj00hggubq6zkz5dor"},{"name":"Vue slot 插槽","_id":"cksvxwnrl00hpgubqf5uv8pp0"},{"name":"vuex","_id":"cksvxwnrl00htgubq5sea9v00"},{"name":"微信小程序","_id":"cksvxwnrm00hugubqcpn16mh4"},{"name":"背景音乐","_id":"cksvxwnrm00hxgubq6lkzhz2t"},{"name":"flexbox","_id":"cksvxwnrn00i1gubqfisn4nfh"},{"name":"iconfont","_id":"cksvxwnro00i5gubq6dlwc4j5"},{"name":"滚动条","_id":"cksvxwnro00i9gubqe3uw1f6e"},{"name":"scroll","_id":"cksvxwnrp00iagubqg9zxa338"},{"name":"scrollbar","_id":"cksvxwnrp00ibgubq3a0t5a0q"},{"name":"标签","_id":"cksvxwnrq00ifgubq6w3z7k16"},{"name":"tab","_id":"cksvxwnrq00iigubqe0hkhfb7"}]}}